define(["exports","meta"],function(_exports,meta){"use strict";Object.defineProperty(_exports,"__esModule",{value:/*upperOpen=*/ /*upperOpen=*/ /*upperOpen=*/ /*upperOpen=*/ /* hasCommittedMutations= */ /* excludesMetadataChanges= */ /*updateLimboDocuments=*/ /*keepPersistedQueryData=*/ /*keepPersistedQueryData=*/ /*keepPersistedQueryData=*/ /*arrayElement=*/ /*fromCache=*/ /*before=*/ /*before=*/!0});_exports.$documentWaitDefault=documentWait;_exports.__asyncDelegator=__asyncDelegator;_exports.__asyncGenerator=__asyncGenerator;_exports.__asyncValues=__asyncValues;_exports.__await=__await;_exports.__awaiter=__awaiter;_exports.__decorate=__decorate;_exports.__exportStar=__exportStar;_exports.__extends=__extends;_exports.__generator=__generator;_exports.__importDefault=__importDefault;_exports.__importStar=__importStar;_exports.__makeTemplateObject=__makeTemplateObject;_exports.__metadata=__metadata;_exports.__param=__param;_exports.__read=__read;_exports.__rest=__rest;_exports.__spread=__spread;_exports.__values=__values;_exports._composedTreeContains=_composedTreeContains;_exports._getScrollInfo=_getScrollInfo;_exports._getScrollableNodes=_getScrollableNodes;_exports._getScrollingNode=_getScrollingNode;_exports._hasCachedLockedElement=_hasCachedLockedElement;_exports._hasCachedUnlockedElement=_hasCachedUnlockedElement;_exports._lockScrollInteractions=_lockScrollInteractions;_exports._scrollInteractionHandler=_scrollInteractionHandler;_exports._shouldPreventScrolling=_shouldPreventScrolling;_exports._unlockScrollInteractions=_unlockScrollInteractions;_exports.addListener=addListener;_exports.afterNextRender=afterNextRender;_exports.applyCss=applyCss;_exports.applyStyle=applyStyle;_exports.applyStylePlaceHolder=applyStylePlaceHolder;_exports.async=async;_exports.beforeNextRender=beforeNextRender;_exports.calculateSplices=calculateSplices;_exports.camelToDashCase=camelToDashCase;_exports.createScopeStyle=createScopeStyle;_exports.createSubscribe=createSubscribe;_exports.cssFromModule=cssFromModule;_exports.cssFromModuleImports=cssFromModuleImports;_exports.cssFromModules=cssFromModules;_exports.cssFromTemplate=cssFromTemplate;_exports.dashToCamelCase=dashToCamelCase;_exports.deepCopy=deepCopy;_exports.deepExtend=deepExtend;_exports.deepTargetFind=deepTargetFind;_exports.detectMixin=detectMixin;_exports.dumpRegistrations=dumpRegistrations;_exports.elementHasBuiltCss=elementHasBuiltCss;_exports.elementIsScrollLocked=elementIsScrollLocked;_exports.elementsAreInvalid=elementsAreInvalid;_exports.errorPrefix=errorPrefix;_exports.findMatchingParen=findMatchingParen;_exports.flush$2=flush;_exports.forEachRule=forEachRule;_exports.gatherStyleText=gatherStyleText;_exports.get=get;_exports.getBuildComment=getBuildComment;_exports.getComputedStyleValue=getComputedStyleValue;_exports.getCssBuild=getCssBuild;_exports.getIsExtends=getIsExtends;_exports.getUA=getUA;_exports.incrementInstanceCount=incrementInstanceCount;_exports.invalidate=invalidate;_exports.invalidateTemplate=invalidateTemplate;_exports.isAncestor=isAncestor;_exports.isBrowser=isBrowser;_exports.isDescendant=isDescendant;_exports.isKeyframesSelector=isKeyframesSelector;_exports.isMobileCordova=isMobileCordova;_exports.isNode=isNode;_exports.isNodeSdk=isNodeSdk;_exports.isOptimalCssBuild=isOptimalCssBuild;_exports.isPath=isPath;_exports.isReactNative=isReactNative;_exports.isTargetedBuild=isTargetedBuild;_exports.isUnscopedStyle=isUnscopedStyle;_exports.isValid=isValid;_exports.isValidating=isValidating;_exports.jsonEval=jsonEval;_exports.matches=matches;_exports.mixinBehaviors=mixinBehaviors;_exports.modelForElement=modelForElement;_exports.normalize=normalize;_exports.parse=parse;_exports.patchProperty=patchProperty;_exports.pathFromUrl=pathFromUrl;_exports.prevent=prevent;_exports.processUnscopedStyle=processUnscopedStyle;_exports.processVariableAndFallback=processVariableAndFallback;_exports.pushScrollLock=pushScrollLock;_exports.register=register$1;_exports.register$1=register;_exports.registerFirestore=registerFirestore;_exports.removeCustomPropAssignment=removeCustomPropAssignment;_exports.removeListener=removeListener;_exports.removeScrollLock=removeScrollLock;_exports.resetMouseCanceller=resetMouseCanceller;_exports.resolveCss=resolveCss;_exports.resolveUrl=resolveUrl;_exports.root=root;_exports.rulesForStyle=rulesForStyle;_exports.set=set;_exports.setElementClassRaw=setElementClassRaw;_exports.setLogLevel=setLogLevel;_exports.setTouchAction=setTouchAction;_exports.split=split;_exports.splitSelectorList=splitSelectorList;_exports.startValidating=startValidating;_exports.startValidatingTemplate=startValidatingTemplate;_exports.stringify=stringify;_exports.stringify$1=stringify$1;_exports.stylesFromModule=stylesFromModule;_exports.stylesFromModuleImports=stylesFromModuleImports;_exports.stylesFromModules=stylesFromModules;_exports.stylesFromTemplate=stylesFromTemplate;_exports.templateIsValid=templateIsValid;_exports.templateIsValidating=templateIsValidating;_exports.templatize=templatize;_exports.toCssText=toCssText;_exports.translate=translate;_exports.updateNativeProperties=updateNativeProperties;_exports.validateCallback=validateCallback;_exports.validateContextObject=validateContextObject;_exports.validateNamespace=validateNamespace;_exports.$templatizerBehavior=_exports.$templatize=_exports.$templateStamp=_exports.$templateMapDefault=_exports.$templateMap=_exports.$telemetry=_exports.$styleUtil=_exports.$styleSettings=_exports.$styleGather=_exports.$settings=_exports.$resolveUrl=_exports.$renderStatus=_exports.$propertyEffects=_exports.$propertyAccessors=_exports.$propertiesMixin=_exports.$propertiesChanged=_exports.$polymerLegacy=_exports.$polymerFn=_exports.$polymerElement=_exports.$polymerDom=_exports.$path=_exports.$paperSpinnerBehavior=_exports.$paperRippleBehavior=_exports.$paperMenuButton=_exports.$paperItemBehavior=_exports.$paperInputBehavior=_exports.$paperInputAddonBehavior=_exports.$paperInkyFocusBehavior=_exports.$paperDialogBehavior=_exports.$paperCheckedElementBehavior=_exports.$paperButtonBehavior=_exports.$neonAnimationRunnerBehavior=_exports.$neonAnimationBehavior=_exports.$neonAnimatableBehavior=_exports.$mutableDataBehavior=_exports.$mutableData=_exports.$mixinUtilities=_exports.$mixinFirestore=_exports.$mixinFirebase=_exports.$mixin=_exports.$legacyElementMixin=_exports.$ironValidatableBehavior=_exports.$ironSelection=_exports.$ironSelectable=_exports.$ironScrollTargetBehavior=_exports.$ironScrollManager=_exports.$ironResizableBehavior=_exports.$ironRangeBehavior=_exports.$ironOverlayManager=_exports.$ironOverlayBehavior=_exports.$ironMultiSelectable=_exports.$ironMeta=_exports.$ironMenubarBehavior=_exports.$ironMenuBehavior=_exports.$ironFormElementBehavior=_exports.$ironFocusablesHelper=_exports.$ironFitBehavior=_exports.$ironControlState=_exports.$ironCheckedElementBehavior=_exports.$ironButtonState=_exports.$ironA11yKeysBehavior=_exports.$ironA11yAnnouncer=_exports.$indexEsmDefault$1=_exports.firebase=_exports.$indexEsmDefault=_exports.$indexEsm$4=_exports.$indexEsm$3=_exports.$indexEsm$2=_exports.$indexEsm$1=_exports.$indexEsm=_exports.$htmlTag=_exports.$helpers=_exports.$gestures=_exports.$gestureEventListeners=_exports.$flush=_exports.$flattenedNodesObserver=_exports.$elementMixin=_exports.$domRepeat=_exports.$domModule=_exports.$domIf=_exports.$domBind=_exports.$documentWait=_exports.$dirMixin=_exports.$debounce=_exports.$customStyleInterfaceDefault=_exports.$customStyleInterface$1=_exports.$customStyle=_exports.$cssParse=_exports.$commonUtils=_exports.$commonRegex=_exports.$class=_exports.$caseMap=_exports.$async=_exports.$arraySplice=_exports.$arraySelector=_exports.$applyShimUtils=_exports.$applyShimDefault=_exports.$applyShim$1=_exports.$appScrollEffectsBehavior=_exports.$appLayoutBehavior=void 0;_exports.PropertiesMixin=_exports.PropertiesChanged=_exports.PolymerElement=_exports.Polymer$1=_exports.Polymer=_exports.PaperSpinnerBehavior=_exports.PaperRippleBehavior=_exports.PaperMenuButton=_exports.PaperItemBehaviorImpl=_exports.PaperItemBehavior=_exports.PaperInputHelper=_exports.PaperInputBehaviorImpl=_exports.PaperInputBehavior=_exports.PaperInputAddonBehavior=_exports.PaperInkyFocusBehaviorImpl=_exports.PaperInkyFocusBehavior=_exports.PaperDialogBehaviorImpl=_exports.PaperDialogBehavior=_exports.PaperCheckedElementBehaviorImpl=_exports.PaperCheckedElementBehavior=_exports.PaperButtonBehaviorImpl=_exports.PaperButtonBehavior=_exports.OptionalMutableDataBehavior=_exports.OptionalMutableData=_exports.NeonAnimationRunnerBehaviorImpl=_exports.NeonAnimationRunnerBehavior=_exports.NeonAnimationBehavior=_exports.NeonAnimatableBehavior=_exports.MutableDataBehavior=_exports.MutableData=_exports.MIXIN_MATCH=_exports.MEDIA_MATCH=_exports.Logger=_exports.LogLevel=_exports.LegacyElementMixin=_exports.IronValidatableBehaviorMeta=_exports.IronValidatableBehavior=_exports.IronSelection=_exports.IronSelectableBehavior=_exports.IronScrollTargetBehavior=_exports.IronResizableBehavior=_exports.IronRangeBehavior=_exports.IronOverlayManagerClass=_exports.IronOverlayManager=_exports.IronOverlayBehaviorImpl=_exports.IronOverlayBehavior=_exports.IronMultiSelectableBehaviorImpl=_exports.IronMultiSelectableBehavior=_exports.IronMeta=_exports.IronMenubarBehaviorImpl=_exports.IronMenubarBehavior=_exports.IronMenuBehaviorImpl=_exports.IronMenuBehavior=_exports.IronFormElementBehavior=_exports.IronFocusablesHelper=_exports.IronFitBehavior=_exports.IronControlState=_exports.IronCheckedElementBehaviorImpl=_exports.IronCheckedElementBehavior=_exports.IronButtonStateImpl=_exports.IronButtonState=_exports.IronA11yKeysBehavior=_exports.IronA11yAnnouncer=_exports.IS_VAR=_exports.HOST_SUFFIX=_exports.HOST_PREFIX=_exports.GestureEventListeners=_exports.FlattenedNodesObserver=_exports.FirebaseMixin=_exports.FirebaseError=_exports.FireStoreMixin=_exports.EventType=_exports.EventApi=_exports.ErrorFactory=_exports.ErrorCode=_exports.ElementMixin=_exports.DomRepeat=_exports.DomModule=_exports.DomIf=_exports.DomBind=_exports.DomApi=_exports.DirMixin=_exports.Deferred=_exports.Debouncer=_exports.CustomStyleProvider=_exports.CustomStyleInterfaceInterface=_exports.CustomStyle=_exports.Class=_exports.CONSTANTS=_exports.Base=_exports.BRACKETED=_exports.ArraySelectorMixin=_exports.ArraySelector=_exports.AppScrollEffectsBehavior=_exports.AppLayoutBehavior=_exports.ANIMATION_MATCH=_exports.$wrap=_exports.$vaadinRouter=_exports.$unscopedStyleHandler=_exports.$tslibEs6=void 0;_exports.types=_exports.timeOut=_exports.syncInitialRender=_exports.stringToByteArray=_exports.stringLength=_exports.strictTemplatePolicy=_exports.setSyncInitialRender=_exports.setStrictTemplatePolicy=_exports.setSanitizeDOMValue=_exports.setRootPath=_exports.setPassiveTouchGestures=_exports.setLegacyOptimizations=_exports.setAllowTemplateFromDomModule=_exports.scrollTimingFunction=_exports.scroll=_exports.scopingAttribute=_exports.sanitizeDOMValue=_exports.safeGet=_exports.rootPath=_exports.remove=_exports.registrations=_exports.registerEffect=_exports.recognizers=_exports.querystringDecode=_exports.querystring=_exports.queryAllRoot=_exports.passiveTouchGestures=_exports.nativeShadow=_exports.nativeCssVariables=_exports.microTask=_exports.matchesSelector=_exports.map=_exports.legacyOptimizations=_exports.issuedAtTime=_exports.isValidTimestamp=_exports.isValidFormat=_exports.isNonNullObject=_exports.isEmpty=_exports.isDeep=_exports.isAdmin=_exports.instanceCount=_exports.idlePeriod=_exports.htmlLiteral=_exports.html$2=_exports.html$1=_exports.html=_exports.getValues=_exports.getCount=_exports.getAnyKey=_exports.gestures=_exports.forEach=_exports.flushDebouncers=_exports.flush$1=_exports.flush=_exports.findValue=_exports.findOriginalTarget=_exports.findKey=_exports.extend=_exports.every=_exports.dom=_exports.disableRuntime=_exports.dedupingMixin=_exports.decode=_exports.currentLockingElement=_exports.cssBuild=_exports.createWebChannelTransport=_exports.contains=_exports.clone=_exports.base64Encode=_exports.base64Decode=_exports.base64=_exports.assertionError=_exports.assert=_exports.animationFrame=_exports.allowTemplateFromDomModule=_exports.enqueueDebouncer$1=_exports.enqueueDebouncer=_exports.addDebouncer=_exports.add=_exports._unlockedElementCache=_exports._scrollTimer=_exports._scrollEffects=_exports._lockingElements=_exports._lockedElementCache=_exports._boundScrollHandler=_exports.__assign=_exports.XhrIo=_exports.WebChannel=_exports.VAR_CONSUMED=_exports.VAR_ASSIGN=_exports.UtilitiesMixin=_exports.Templatizer=_exports.TemplateStamp=_exports.TemplateInstanceBase=_exports.StyleNode=_exports.Sha1=_exports.Router=_exports.Resolver=_exports.PropertyEffects=_exports.PropertyAccessors=void 0;_exports.wrap$1=_exports.wrap=_exports.version$1=_exports.version=_exports.validateArgCount=_exports.useShadow=_exports.useNativeCustomElements=_exports.useNativeCSSProperties=_exports.updateStyles=void 0;meta=babelHelpers.interopRequireWildcard(meta);/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */ /* global Reflect, Promise */var extendStatics=function(d,b){extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(d,b){d.__proto__=b}||function(d,b){for(var p in b)if(b.hasOwnProperty(p))d[p]=b[p]};return extendStatics(d,b)};function __extends(d,b){extendStatics(d,b);function __(){this.constructor=d}d.prototype=null===b?Object.create(b):(__.prototype=b.prototype,new __)}var __assign=function(){_exports.__assign=__assign=Object.assign||function __assign(t){for(var s,i=1,n=arguments.length;i<n;i++){s=arguments[i];for(var p in s)if(Object.prototype.hasOwnProperty.call(s,p))t[p]=s[p]}return t};return __assign.apply(this,arguments)};_exports.__assign=__assign;function __rest(s,e){var t={};for(var p in s)if(Object.prototype.hasOwnProperty.call(s,p)&&0>e.indexOf(p))t[p]=s[p];if(null!=s&&"function"===typeof Object.getOwnPropertySymbols)for(var i=0,p=Object.getOwnPropertySymbols(s);i<p.length;i++)if(0>e.indexOf(p[i]))t[p[i]]=s[p[i]];return t}function __decorate(decorators,target,key,desc){var c=arguments.length,r=3>c?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if("object"===typeof Reflect&&"function"===typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;0<=i;i--)if(d=decorators[i])r=(3>c?d(r):3<c?d(target,key,r):d(target,key))||r;return 3<c&&r&&Object.defineProperty(target,key,r),r}function __param(paramIndex,decorator){return function(target,key){decorator(target,key,paramIndex)}}function __metadata(metadataKey,metadataValue){if("object"===typeof Reflect&&"function"===typeof Reflect.metadata)return Reflect.metadata(metadataKey,metadataValue)}function __awaiter(thisArg,_arguments,P,generator){return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator["throw"](value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):new P(function(resolve){resolve(result.value)}).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())})}function __generator(thisArg,body){var _={label:0,sent:function(){if(1&t[0])throw t[1];return t[1]},trys:[],ops:[]},f,y,t,g;return g={next:verb(0),throw:verb(1),return:verb(2)},"function"===typeof Symbol&&(g[Symbol.iterator]=function(){return this}),g;function verb(n){return function(v){return step([n,v])}}function step(op){if(f)throw new TypeError("Generator is already executing.");while(_)try{if(f=1,y&&(t=2&op[0]?y["return"]:op[0]?y["throw"]||((t=y["return"])&&t.call(y),0):y.next)&&!(t=t.call(y,op[1])).done)return t;if(y=0,t)op=[2&op[0],t.value];switch(op[0]){case 0:case 1:t=op;break;case 4:_.label++;return{value:op[1],done:/*lowerOpen=*/ /*lowerOpen=*/ /*lowerOpen=*/ /*lowerOpen=*/ /* excludesMetadataChanges= */ /* updateLimboDocuments= */ /*keepPersistedQueryData=*/ /* keepPersistedQueryData */ /*current=*/ /*current=*/ /*keepPersistedQueryData=*/ /* updateLimboDocuments= */ /*arrayElement=*/ /*arrayElement=*/ /* fromCache= */ /* hasPendingWrites= */ /* fromCache= */ /* hasPendingWrites= */ /*before=*/ /*before=*/!1};case 5:_.label++;y=op[1];op=[0];continue;case 7:op=_.ops.pop();_.trys.pop();continue;default:if(!(t=_.trys,t=0<t.length&&t[t.length-1])&&(6===op[0]||2===op[0])){_=0;continue}if(3===op[0]&&(!t||op[1]>t[0]&&op[1]<t[3])){_.label=op[1];break}if(6===op[0]&&_.label<t[1]){_.label=t[1];t=op;break}if(t&&_.label<t[2]){_.label=t[2];_.ops.push(op);break}if(t[2])_.ops.pop();_.trys.pop();continue;}op=body.call(thisArg,_)}catch(e){op=[6,e];y=0}finally{f=t=0}if(5&op[0])throw op[1];return{value:op[0]?op[1]:void 0,done:!0}}}function __exportStar(m,exports){for(var p in m)if(!exports.hasOwnProperty(p))exports[p]=m[p]}function __values(o){var m="function"===typeof Symbol&&o[Symbol.iterator],i=0;if(m)return m.call(o);return{next:function(){if(o&&i>=o.length)o=void 0;return{value:o&&o[i++],done:!o}}}}function __read(o,n){var m="function"===typeof Symbol&&o[Symbol.iterator];if(!m)return o;var i=m.call(o),r,ar=[],e;try{while((void 0===n||0<n--)&&!(r=i.next()).done)ar.push(r.value)}catch(error){e={error:error}}finally{try{if(r&&!r.done&&(m=i["return"]))m.call(i)}finally{if(e)throw e.error}}return ar}function __spread(){for(var ar=[],i=0;i<arguments.length;i++)ar=ar.concat(__read(arguments[i]));return ar}function __await(v){return this instanceof __await?(this.v=v,this):new __await(v)}function __asyncGenerator(thisArg,_arguments,generator){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var g=generator.apply(thisArg,_arguments||[]),i,q=[];return i={},verb("next"),verb("throw"),verb("return"),i[Symbol.asyncIterator]=function(){return this},i;function verb(n){if(g[n])i[n]=function(v){return new Promise(function(a,b){1<q.push([n,v,a,b])||resume(n,v)})}}function resume(n,v){try{step(g[n](v))}catch(e){settle(q[0][3],e)}}function step(r){r.value instanceof __await?Promise.resolve(r.value.v).then(fulfill,reject):settle(q[0][2],r)}function fulfill(value){resume("next",value)}function reject(value){resume("throw",value)}function settle(f,v){if(f(v),q.shift(),q.length)resume(q[0][0],q[0][1])}}function __asyncDelegator(o){var i,p;return i={},verb("next"),verb("throw",function(e){throw e}),verb("return"),i[Symbol.iterator]=function(){return this},i;function verb(n,f){i[n]=o[n]?function(v){return(p=!p)?{value:__await(o[n](v)),done:"return"===n}:f?f(v):v}:f}}function __asyncValues(o){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var m=o[Symbol.asyncIterator],i;return m?m.call(o):(o="function"===typeof __values?__values(o):o[Symbol.iterator](),i={},verb("next"),verb("throw"),verb("return"),i[Symbol.asyncIterator]=function(){return this},i);function verb(n){i[n]=o[n]&&function(v){return new Promise(function(resolve,reject){v=o[n](v),settle(resolve,reject,v.done,v.value)})}}function settle(resolve,reject,d,v){Promise.resolve(v).then(function(v){resolve({value:v,done:d})},reject)}}function __makeTemplateObject(cooked,raw){if(Object.defineProperty){Object.defineProperty(cooked,"raw",{value:raw})}else{cooked.raw=raw}return cooked};function __importStar(mod){if(mod&&mod.__esModule)return mod;var result={};if(null!=mod)for(var k in mod)if(Object.hasOwnProperty.call(mod,k))result[k]=mod[k];result.default=mod;return result}function __importDefault(mod){return mod&&mod.__esModule?mod:{default:mod}}var tslib_es6={__extends:__extends,get __assign(){return __assign},__rest:__rest,__decorate:__decorate,__param:__param,__metadata:__metadata,__awaiter:__awaiter,__generator:__generator,__exportStar:__exportStar,__values:__values,__read:__read,__spread:__spread,__await:__await,__asyncGenerator:__asyncGenerator,__asyncDelegator:__asyncDelegator,__asyncValues:__asyncValues,__makeTemplateObject:__makeTemplateObject,__importStar:__importStar,__importDefault:__importDefault};_exports.$tslibEs6=tslib_es6;var CONSTANTS={/**
   * @define {boolean} Whether this is the client Node.js SDK.
   */NODE_CLIENT:!1,/**
   * @define {boolean} Whether this is the Admin Node.js SDK.
   */NODE_ADMIN:!1,/**
   * Firebase SDK Version
   */SDK_VERSION:"${JSCORE_VERSION}"};/**
    * @license
    * Copyright 2017 Google Inc.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */ /**
        * Throws an error if the provided assertion is falsy
        * @param {*} assertion The assertion to be tested for falsiness
        * @param {!string} message The message to display if the check fails
        */_exports.CONSTANTS=CONSTANTS;var assert=function(assertion,message){if(!assertion){throw assertionError(message)}};/**
    * Returns an Error object suitable for throwing.
    * @param {string} message
    * @return {!Error}
    */_exports.assert=assert;var assertionError=function(message){return new Error("Firebase Database ("+CONSTANTS.SDK_VERSION+") INTERNAL ASSERT FAILED: "+message)};/**
    * @license
    * Copyright 2017 Google Inc.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */_exports.assertionError=assertionError;var stringToByteArray=function(str){// TODO(user): Use native implementations if/when available
for(var out=[],p=0,i=0,c;i<str.length;i++){c=str.charCodeAt(i);if(128>c){out[p++]=c}else if(2048>c){out[p++]=192|c>>6;out[p++]=128|63&c}else if(55296==(64512&c)&&i+1<str.length&&56320==(64512&str.charCodeAt(i+1))){// Surrogate Pair
c=65536+((1023&c)<<10)+(1023&str.charCodeAt(++i));out[p++]=240|c>>18;out[p++]=128|63&c>>12;out[p++]=128|63&c>>6;out[p++]=128|63&c}else{out[p++]=224|c>>12;out[p++]=128|63&c>>6;out[p++]=128|63&c}}return out},byteArrayToString=function(bytes){// TODO(user): Use native implementations if/when available
var out=[],pos=0,c=0;while(pos<bytes.length){var c1=bytes[pos++];if(128>c1){out[c++]=String.fromCharCode(c1)}else if(191<c1&&224>c1){var c2=bytes[pos++];out[c++]=String.fromCharCode((31&c1)<<6|63&c2)}else if(239<c1&&365>c1){// Surrogate Pair
var c2=bytes[pos++],c3=bytes[pos++],c4=bytes[pos++],u=((7&c1)<<18|(63&c2)<<12|(63&c3)<<6|63&c4)-65536;out[c++]=String.fromCharCode(55296+(u>>10));out[c++]=String.fromCharCode(56320+(1023&u))}else{var c2=bytes[pos++],c3=bytes[pos++];out[c++]=String.fromCharCode((15&c1)<<12|(63&c2)<<6|63&c3)}}return out.join("")},base64={/**
   * Maps bytes to characters.
   * @type {Object}
   * @private
   */byteToCharMap_:null,/**
   * Maps characters to bytes.
   * @type {Object}
   * @private
   */charToByteMap_:null,/**
   * Maps bytes to websafe characters.
   * @type {Object}
   * @private
   */byteToCharMapWebSafe_:null,/**
   * Maps websafe characters to bytes.
   * @type {Object}
   * @private
   */charToByteMapWebSafe_:null,/**
   * Our default alphabet, shared between
   * ENCODED_VALS and ENCODED_VALS_WEBSAFE
   * @type {string}
   */ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZ"+"abcdefghijklmnopqrstuvwxyz"+"0123456789",/**
   * Our default alphabet. Value 64 (=) is special; it means "nothing."
   * @type {string}
   */get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},/**
   * Our websafe alphabet.
   * @type {string}
   */get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},/**
   * Whether this browser supports the atob and btoa functions. This extension
   * started at Mozilla but is now implemented by many browsers. We use the
   * ASSUME_* variables to avoid pulling in the full useragent detection library
   * but still allowing the standard per-browser compilations.
   *
   * @type {boolean}
   */HAS_NATIVE_SUPPORT:"function"===typeof atob,/**
   * Base64-encode an array of bytes.
   *
   * @param input An array of bytes (numbers with
   *     value in [0, 255]) to encode.
   * @param opt_webSafe Boolean indicating we should use the
   *     alternative alphabet.
   * @return The base64 encoded string.
   */encodeByteArray:function(input,opt_webSafe){if(!Array.isArray(input)){throw Error("encodeByteArray takes an array as a parameter")}this.init_();for(var byteToCharMap=opt_webSafe?this.byteToCharMapWebSafe_:this.byteToCharMap_,output=[],i=0;i<input.length;i+=3){var byte1=input[i],haveByte2=i+1<input.length,byte2=haveByte2?input[i+1]:0,haveByte3=i+2<input.length,byte3=haveByte3?input[i+2]:0,outByte1=byte1>>2,outByte2=(3&byte1)<<4|byte2>>4,outByte3=(15&byte2)<<2|byte3>>6,outByte4=63&byte3;if(!haveByte3){outByte4=64;if(!haveByte2){outByte3=64}}output.push(byteToCharMap[outByte1],byteToCharMap[outByte2],byteToCharMap[outByte3],byteToCharMap[outByte4])}return output.join("")},/**
   * Base64-encode a string.
   *
   * @param input A string to encode.
   * @param opt_webSafe If true, we should use the
   *     alternative alphabet.
   * @return The base64 encoded string.
   */encodeString:function(input,opt_webSafe){// Shortcut for Mozilla browsers that implement
// a native base64 encoder in the form of "btoa/atob"
if(this.HAS_NATIVE_SUPPORT&&!opt_webSafe){return btoa(input)}return this.encodeByteArray(stringToByteArray(input),opt_webSafe)},/**
   * Base64-decode a string.
   *
   * @param input to decode.
   * @param opt_webSafe True if we should use the
   *     alternative alphabet.
   * @return string representing the decoded value.
   */decodeString:function(input,opt_webSafe){// Shortcut for Mozilla browsers that implement
// a native base64 encoder in the form of "btoa/atob"
if(this.HAS_NATIVE_SUPPORT&&!opt_webSafe){return atob(input)}return byteArrayToString(this.decodeStringToByteArray(input,opt_webSafe))},/**
   * Base64-decode a string.
   *
   * In base-64 decoding, groups of four characters are converted into three
   * bytes.  If the encoder did not apply padding, the input length may not
   * be a multiple of 4.
   *
   * In this case, the last group will have fewer than 4 characters, and
   * padding will be inferred.  If the group has one or two characters, it decodes
   * to one byte.  If the group has three characters, it decodes to two bytes.
   *
   * @param input Input to decode.
   * @param opt_webSafe True if we should use the web-safe alphabet.
   * @return bytes representing the decoded value.
   */decodeStringToByteArray:function(input,opt_webSafe){this.init_();for(var charToByteMap=opt_webSafe?this.charToByteMapWebSafe_:this.charToByteMap_,output=[],i=0;i<input.length;){var byte1=charToByteMap[input.charAt(i++)],haveByte2=i<input.length,byte2=haveByte2?charToByteMap[input.charAt(i)]:0;++i;var haveByte3=i<input.length,byte3=haveByte3?charToByteMap[input.charAt(i)]:64;++i;var haveByte4=i<input.length,byte4=haveByte4?charToByteMap[input.charAt(i)]:64;++i;if(null==byte1||null==byte2||null==byte3||null==byte4){throw Error()}var outByte1=byte1<<2|byte2>>4;output.push(outByte1);if(64!=byte3){var outByte2=240&byte2<<4|byte3>>2;output.push(outByte2);if(64!=byte4){var outByte3=192&byte3<<6|byte4;output.push(outByte3)}}}return output},/**
   * Lazy static initialization function. Called before
   * accessing any of the static map variables.
   * @private
   */init_:function(){if(!this.byteToCharMap_){this.byteToCharMap_={};this.charToByteMap_={};this.byteToCharMapWebSafe_={};this.charToByteMapWebSafe_={};// We want quick mappings back and forth, so we precompute two maps.
for(var i=0;i<this.ENCODED_VALS.length;i++){this.byteToCharMap_[i]=this.ENCODED_VALS.charAt(i);this.charToByteMap_[this.byteToCharMap_[i]]=i;this.byteToCharMapWebSafe_[i]=this.ENCODED_VALS_WEBSAFE.charAt(i);this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]]=i;// Be forgiving when decoding and correctly decode both encodings.
if(i>=this.ENCODED_VALS_BASE.length){this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)]=i;this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)]=i}}}}};/**
    * Turns an array of numbers into the string given by the concatenation of the
    * characters to which the numbers correspond.
    * @param bytes Array of numbers representing characters.
    * @return Stringification of the array.
    */_exports.base64=base64;/**
    * URL-safe base64 encoding
    */var base64Encode=function(str){var utf8Bytes=stringToByteArray(str);return base64.encodeByteArray(utf8Bytes,!0)};/**
    * URL-safe base64 decoding
    *
    * NOTE: DO NOT use the global atob() function - it does NOT support the
    * base64Url variant encoding.
    *
    * @param str To be decoded
    * @return Decoded result, if possible
    */_exports.base64Encode=base64Encode;var base64Decode=function(str){try{return base64.decodeString(str,!0)}catch(e){console.error("base64Decode failed: ",e)}return null};/**
    * @license
    * Copyright 2017 Google Inc.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */ /**
        * Do a deep-copy of basic JavaScript Objects or Arrays.
        */_exports.base64Decode=base64Decode;function deepCopy(value){return deepExtend(void 0,value)}/**
   * Copy properties from source to target (recursively allows extension
   * of Objects and Arrays).  Scalar values in the target are over-written.
   * If target is undefined, an object of the appropriate type will be created
   * (and returned).
   *
   * We recursively copy all child properties of plain Objects in the source- so
   * that namespace- like dictionaries are merged.
   *
   * Note that the target can be a function, in which case the properties in
   * the source Object are copied onto it as static properties of the Function.
   */function deepExtend(target,source){if(!(source instanceof Object)){return source}switch(source.constructor){case Date:// Treat Dates like scalars; if the target date object had any child
// properties - they will be lost!
var dateValue=source;return new Date(dateValue.getTime());case Object:if(target===void 0){target={}}break;case Array:// Always copy the array source and overwrite the target.
target=[];break;default:// Not a plain Object - treat it as a scalar.
return source;}for(var prop in source){if(!source.hasOwnProperty(prop)){continue}target[prop]=deepExtend(target[prop],source[prop])}return target}// TODO: Really needed (for JSCompiler type checking)?
function patchProperty(obj,prop,value){obj[prop]=value}/**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */var Deferred=/** @class */function(){function Deferred(){var _this=this;this.promise=new Promise(function(resolve,reject){_this.resolve=resolve;_this.reject=reject})}/**
     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
     * and returns a node-style callback which will resolve or reject the Deferred's promise.
     * @param {((?function(?(Error)): (?|undefined))| (?function(?(Error),?=): (?|undefined)))=} callback
     * @return {!function(?(Error), ?=)}
     */Deferred.prototype.wrapCallback=function(callback){var _this=this;return function(error,value){if(error){_this.reject(error)}else{_this.resolve(value)}if("function"===typeof callback){// Attaching noop handler just in case developer wasn't expecting
// promises
_this.promise.catch(function(){});// Some of our callbacks don't expect a value and our own tests
// assert that the parameter length is 1
if(1===callback.length){callback(error)}else{callback(error,value)}}}};return Deferred}();/**
      * @license
      * Copyright 2017 Google Inc.
      *
      * Licensed under the Apache License, Version 2.0 (the "License");
      * you may not use this file except in compliance with the License.
      * You may obtain a copy of the License at
      *
      *   http://www.apache.org/licenses/LICENSE-2.0
      *
      * Unless required by applicable law or agreed to in writing, software
      * distributed under the License is distributed on an "AS IS" BASIS,
      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      * See the License for the specific language governing permissions and
      * limitations under the License.
      */ /**
          * Returns navigator.userAgent string or '' if it's not defined.
          * @return user agent string
          */_exports.Deferred=Deferred;function getUA(){if("undefined"!==typeof navigator&&"string"===typeof navigator.userAgent){return navigator.userAgent}else{return""}}/**
   * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
   *
   * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
   * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
   * wait for a callback.
   */function isMobileCordova(){return"undefined"!==typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA())}/**
   * Detect Node.js.
   *
   * @return true if Node.js environment is detected.
   */ // Node detection logic from: https://github.com/iliakan/detect-node/
function isNode(){try{return"[object process]"===Object.prototype.toString.call(global.process)}catch(e){return!1}}/**
   * Detect Browser Environment
   */function isBrowser(){return"object"===typeof self&&self.self===self}/**
   * Detect React Native.
   *
   * @return true if ReactNative environment is detected.
   */function isReactNative(){return"object"===typeof navigator&&"ReactNative"===navigator.product}/**
   * Detect whether the current SDK build is the Node version.
   *
   * @return true if it's the Node SDK build.
   */function isNodeSdk(){return!0===CONSTANTS.NODE_CLIENT||!0===CONSTANTS.NODE_ADMIN}var ERROR_NAME="FirebaseError",FirebaseError=/** @class */function(_super){__extends(FirebaseError,_super);function FirebaseError(code,message){var _this=_super.call(this,message)||this;_this.code=code;_this.name=ERROR_NAME;// Fix For ES5
// https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
Object.setPrototypeOf(_this,FirebaseError.prototype);// Maintains proper stack trace for where our error was thrown.
// Only available on V8.
if(Error.captureStackTrace){Error.captureStackTrace(_this,ErrorFactory.prototype.create)}return _this}return FirebaseError}(Error);// Based on code from:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
_exports.FirebaseError=FirebaseError;var ErrorFactory=/** @class */function(){function ErrorFactory(service,serviceName,errors){this.service=service;this.serviceName=serviceName;this.errors=errors}ErrorFactory.prototype.create=function(code){for(var data=[],_i=1;_i<arguments.length;_i++){data[_i-1]=arguments[_i]}// Keys with an underscore at the end of their name are not included in
// error.data for some reason.
// TODO: Replace with Object.entries when lib is updated to es2017.
for(var customData=data[0]||{},fullCode=this.service+"/"+code,template=this.errors[code],message=template?replaceTemplate(template,customData):"Error",fullMessage=this.serviceName+": "+message+" ("+fullCode+").",error=new FirebaseError(fullCode,fullMessage),_a=0,_b=Object.keys(customData),key;_a<_b.length;_a++){key=_b[_a];if("_"!==key.slice(-1)){if(key in error){console.warn("Overwriting FirebaseError base field \""+key+"\" can cause unexpected behavior.")}error[key]=customData[key]}}return error};return ErrorFactory}();_exports.ErrorFactory=ErrorFactory;function replaceTemplate(template,data){return template.replace(PATTERN,function(_,key){var value=data[key];return null!=value?value.toString():"<"+key+"?>"})}var PATTERN=/\{\$([^}]+)}/g;/**
                                * @license
                                * Copyright 2017 Google Inc.
                                *
                                * Licensed under the Apache License, Version 2.0 (the "License");
                                * you may not use this file except in compliance with the License.
                                * You may obtain a copy of the License at
                                *
                                *   http://www.apache.org/licenses/LICENSE-2.0
                                *
                                * Unless required by applicable law or agreed to in writing, software
                                * distributed under the License is distributed on an "AS IS" BASIS,
                                * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                * See the License for the specific language governing permissions and
                                * limitations under the License.
                                */ /**
                                    * Evaluates a JSON string into a javascript object.
                                    *
                                    * @param {string} str A string containing JSON.
                                    * @return {*} The javascript object representing the specified JSON.
                                    */function jsonEval(str){return JSON.parse(str)}/**
   * Returns JSON representing a javascript object.
   * @param {*} data Javascript object to be stringified.
   * @return {string} The JSON contents of the object.
   */function stringify(data){return JSON.stringify(data)}/**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */ /**
       * Decodes a Firebase auth. token into constituent parts.
       *
       * Notes:
       * - May return with invalid / incomplete claims if there's no native base64 decoding support.
       * - Doesn't check if the token is actually valid.
       *
       * @param {?string} token
       * @return {{header: *, claims: *, data: *, signature: string}}
       */var decode=function(token){var header={},claims={},data={},signature="";try{var parts=token.split(".");header=jsonEval(base64Decode(parts[0])||"");claims=jsonEval(base64Decode(parts[1])||"");signature=parts[2];data=claims.d||{};delete claims.d}catch(e){}return{header:header,claims:claims,data:data,signature:signature}};/**
    * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the
    * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.
    *
    * Notes:
    * - May return a false negative if there's no native base64 decoding support.
    * - Doesn't check if the token is actually valid.
    *
    * @param {?string} token
    * @return {boolean}
    */_exports.decode=decode;var isValidTimestamp=function(token){var claims=decode(token).claims,now=Math.floor(new Date().getTime()/1e3),validSince,validUntil;if("object"===typeof claims){if(claims.hasOwnProperty("nbf")){validSince=claims.nbf}else if(claims.hasOwnProperty("iat")){validSince=claims.iat}if(claims.hasOwnProperty("exp")){validUntil=claims.exp}else{// token will expire after 24h by default
validUntil=validSince+86400}}return now&&validSince&&validUntil&&now>=validSince&&now<=validUntil};/**
    * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.
    *
    * Notes:
    * - May return null if there's no native base64 decoding support.
    * - Doesn't check if the token is actually valid.
    *
    * @param {?string} token
    * @return {?number}
    */_exports.isValidTimestamp=isValidTimestamp;var issuedAtTime=function(token){var claims=decode(token).claims;if("object"===typeof claims&&claims.hasOwnProperty("iat")){return claims.iat}return null};/**
    * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.
    *
    * Notes:
    * - May return a false negative if there's no native base64 decoding support.
    * - Doesn't check if the token is actually valid.
    *
    * @param {?string} token
    * @return {boolean}
    */_exports.issuedAtTime=issuedAtTime;var isValidFormat=function(token){var decoded=decode(token),claims=decoded.claims;return!!claims&&"object"===typeof claims&&claims.hasOwnProperty("iat")};/**
    * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.
    *
    * Notes:
    * - May return a false negative if there's no native base64 decoding support.
    * - Doesn't check if the token is actually valid.
    *
    * @param {?string} token
    * @return {boolean}
    */_exports.isValidFormat=isValidFormat;var isAdmin=function(token){var claims=decode(token).claims;return"object"===typeof claims&&!0===claims.admin};/**
    * @license
    * Copyright 2017 Google Inc.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */ // See http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/
_exports.isAdmin=isAdmin;var contains=function(obj,key){return Object.prototype.hasOwnProperty.call(obj,key)};_exports.contains=contains;var safeGet=function(obj,key){if(Object.prototype.hasOwnProperty.call(obj,key))return obj[key];// else return undefined.
};/**
    * Enumerates the keys/values in an object, excluding keys defined on the prototype.
    *
    * @param {?Object.<K,V>} obj Object to enumerate.
    * @param {!function(K, V)} fn Function to call for each key and value.
    * @template K,V
    */_exports.safeGet=safeGet;var forEach=function(obj,fn){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){fn(key,obj[key])}}};/**
    * Copies all the (own) properties from one object to another.
    * @param {!Object} objTo
    * @param {!Object} objFrom
    * @return {!Object} objTo
    */_exports.forEach=forEach;var extend=function(objTo,objFrom){forEach(objFrom,function(key,value){objTo[key]=value});return objTo};/**
    * Returns a clone of the specified object.
    * @param {!Object} obj
    * @return {!Object} cloned obj.
    */_exports.extend=extend;var clone=function(obj){return extend({},obj)};/**
    * Returns true if obj has typeof "object" and is not null.  Unlike goog.isObject(), does not return true
    * for functions.
    *
    * @param obj {*} A potential object.
    * @returns {boolean} True if it's an object.
    */_exports.clone=clone;var isNonNullObject=function(obj){return"object"===typeof obj&&null!==obj};_exports.isNonNullObject=isNonNullObject;var isEmpty=function(obj){for(var key in obj){return!1}return!0};_exports.isEmpty=isEmpty;var getCount=function(obj){var rv=0;for(var key in obj){rv++}return rv};_exports.getCount=getCount;var map=function(obj,f,opt_obj){var res={};for(var key in obj){res[key]=f.call(opt_obj,obj[key],key,obj)}return res};_exports.map=map;var findKey=function(obj,fn,opt_this){for(var key in obj){if(fn.call(opt_this,obj[key],key,obj)){return key}}return void 0};_exports.findKey=findKey;var findValue=function(obj,fn,opt_this){var key=findKey(obj,fn,opt_this);return key&&obj[key]};_exports.findValue=findValue;var getAnyKey=function(obj){for(var key in obj){return key}};_exports.getAnyKey=getAnyKey;var getValues=function(obj){var res=[],i=0;for(var key in obj){res[i++]=obj[key]}return res};/**
    * Tests whether every key/value pair in an object pass the test implemented
    * by the provided function
    *
    * @param {?Object.<K,V>} obj Object to test.
    * @param {!function(K, V)} fn Function to call for each key and value.
    * @template K,V
    */_exports.getValues=getValues;var every=function(obj,fn){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){if(!fn(key,obj[key])){return!1}}}return!0};/**
    * @license
    * Copyright 2017 Google Inc.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */ /**
        * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a params
        * object (e.g. {arg: 'val', arg2: 'val2'})
        * Note: You must prepend it with ? when adding it to a URL.
        *
        * @param {!Object} querystringParams
        * @return {string}
        */_exports.every=every;var querystring=function(querystringParams){var params=[];forEach(querystringParams,function(key,value){if(Array.isArray(value)){value.forEach(function(arrayVal){params.push(encodeURIComponent(key)+"="+encodeURIComponent(arrayVal))})}else{params.push(encodeURIComponent(key)+"="+encodeURIComponent(value))}});return params.length?"&"+params.join("&"):""};/**
    * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object (e.g. {arg: 'val', arg2: 'val2'})
    *
    * @param {string} querystring
    * @return {!Object}
    */_exports.querystring=querystring;var querystringDecode=function(querystring){var obj={},tokens=querystring.replace(/^\?/,"").split("&");tokens.forEach(function(token){if(token){var key=token.split("=");obj[key[0]]=key[1]}});return obj};/**
    * @license
    * Copyright 2017 Google Inc.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */ /**
        * @fileoverview SHA-1 cryptographic hash.
        * Variable names follow the notation in FIPS PUB 180-3:
        * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
        *
        * Usage:
        *   var sha1 = new sha1();
        *   sha1.update(bytes);
        *   var hash = sha1.digest();
        *
        * Performance:
        *   Chrome 23:   ~400 Mbit/s
        *   Firefox 16:  ~250 Mbit/s
        *
        */ /**
            * SHA-1 cryptographic hash constructor.
            *
            * The properties declared here are discussed in the above algorithm document.
            * @constructor
            * @final
            * @struct
            */_exports.querystringDecode=querystringDecode;var Sha1=/** @class */function(){function Sha1(){/**
     * Holds the previous values of accumulated variables a-e in the compress_
     * function.
     * @private
     */this.chain_=[];/**
                          * A buffer holding the partially computed hash result.
                          * @private
                          */this.buf_=[];/**
                     * An array of 80 bytes, each a part of the message to be hashed.  Referred to
                     * as the message schedule in the docs.
                     * @private
                     */this.W_=[];/**
                   * Contains data needed to pad messages less than 64 bytes.
                   * @private
                   */this.pad_=[];/**
                     * @private {number}
                     */this.inbuf_=0;/**
                      * @private {number}
                      */this.total_=0;this.blockSize=512/8;this.pad_[0]=128;for(var i=1;i<this.blockSize;++i){this.pad_[i]=0}this.reset()}Sha1.prototype.reset=function(){this.chain_[0]=1732584193;this.chain_[1]=4023233417;this.chain_[2]=2562383102;this.chain_[3]=271733878;this.chain_[4]=3285377520;this.inbuf_=0;this.total_=0};/**
      * Internal compress helper function.
      * @param {!number[]|!Uint8Array|string} buf Block to compress.
      * @param {number=} opt_offset Offset of the block in the buffer.
      * @private
      */Sha1.prototype.compress_=function(buf,opt_offset){if(!opt_offset){opt_offset=0}var W=this.W_;// get 16 big endian words
if("string"===typeof buf){for(var i=0;16>i;i++){// TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
// have a bug that turns the post-increment ++ operator into pre-increment
// during JIT compilation.  We have code that depends heavily on SHA-1 for
// correctness and which is affected by this bug, so I've removed all uses
// of post-increment ++ in which the result value is used.  We can revert
// this change once the Safari bug
// (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
// most clients have been updated.
W[i]=buf.charCodeAt(opt_offset)<<24|buf.charCodeAt(opt_offset+1)<<16|buf.charCodeAt(opt_offset+2)<<8|buf.charCodeAt(opt_offset+3);opt_offset+=4}}else{for(var i=0;16>i;i++){W[i]=buf[opt_offset]<<24|buf[opt_offset+1]<<16|buf[opt_offset+2]<<8|buf[opt_offset+3];opt_offset+=4}}// expand to 80 words
for(var i=16,t;80>i;i++){t=W[i-3]^W[i-8]^W[i-14]^W[i-16];W[i]=4294967295&(t<<1|t>>>31)}// TODO(user): Try to unroll this loop to speed up the computation.
for(var a=this.chain_[0],b=this.chain_[1],c=this.chain_[2],d=this.chain_[3],e=this.chain_[4],f,k,i=0;80>i;i++){if(40>i){if(20>i){f=d^b&(c^d);k=1518500249}else{f=b^c^d;k=1859775393}}else{if(60>i){f=b&c|d&(b|c);k=2400959708}else{f=b^c^d;k=3395469782}}var t=4294967295&(a<<5|a>>>27)+f+e+k+W[i];e=d;d=c;c=4294967295&(b<<30|b>>>2);b=a;a=t}this.chain_[0]=4294967295&this.chain_[0]+a;this.chain_[1]=4294967295&this.chain_[1]+b;this.chain_[2]=4294967295&this.chain_[2]+c;this.chain_[3]=4294967295&this.chain_[3]+d;this.chain_[4]=4294967295&this.chain_[4]+e};Sha1.prototype.update=function(bytes,opt_length){// TODO(johnlenz): tighten the function signature and remove this check
if(null==bytes){return}if(opt_length===void 0){opt_length=bytes.length}var lengthMinusBlock=opt_length-this.blockSize,n=0,buf=this.buf_,inbuf=this.inbuf_;// The outer while loop should execute at most twice.
while(n<opt_length){// When we have no data in the block to top up, we can directly process the
// input buffer (assuming it contains sufficient data). This gives ~25%
// speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
// the data is provided in large chunks (or in multiples of 64 bytes).
if(0==inbuf){while(n<=lengthMinusBlock){this.compress_(bytes,n);n+=this.blockSize}}if("string"===typeof bytes){while(n<opt_length){buf[inbuf]=bytes.charCodeAt(n);++inbuf;++n;if(inbuf==this.blockSize){this.compress_(buf);inbuf=0;// Jump to the outer loop so we use the full-block optimization.
break}}}else{while(n<opt_length){buf[inbuf]=bytes[n];++inbuf;++n;if(inbuf==this.blockSize){this.compress_(buf);inbuf=0;// Jump to the outer loop so we use the full-block optimization.
break}}}}this.inbuf_=inbuf;this.total_+=opt_length};/** @override */Sha1.prototype.digest=function(){var digest=[],totalBits=8*this.total_;// Add pad 0x80 0x00*.
if(56>this.inbuf_){this.update(this.pad_,56-this.inbuf_)}else{this.update(this.pad_,this.blockSize-(this.inbuf_-56))}// Add # bits.
for(var i=this.blockSize-1;56<=i;i--){this.buf_[i]=255&totalBits;totalBits/=256;// Don't use bit-shifting here!
}this.compress_(this.buf_);for(var n=0,i=0;5>i;i++){for(var j=24;0<=j;j-=8){digest[n]=255&this.chain_[i]>>j;++n}}return digest};return Sha1}();/**
      * Helper to make a Subscribe function (just like Promise helps make a
      * Thenable).
      *
      * @param executor Function which can make calls to a single Observer
      *     as a proxy.
      * @param onNoObservers Callback when count of Observers goes to zero.
      */_exports.Sha1=Sha1;function createSubscribe(executor,onNoObservers){var proxy=new ObserverProxy(executor,onNoObservers);return proxy.subscribe.bind(proxy)}/**
   * Implement fan-out for any number of Observers attached via a subscribe
   * function.
   */var ObserverProxy=/** @class */function(){/**
   * @param executor Function which can make calls to a single Observer
   *     as a proxy.
   * @param onNoObservers Callback when count of Observers goes to zero.
   */function ObserverProxy(executor,onNoObservers){var _this=this;this.observers=[];this.unsubscribes=[];this.observerCount=0;// Micro-task scheduling by calling task.then().
this.task=Promise.resolve();this.finalized=!1;this.onNoObservers=onNoObservers;// Call the executor asynchronously so subscribers that are called
// synchronously after the creation of the subscribe function
// can still receive the very first value generated in the executor.
this.task.then(function(){executor(_this)}).catch(function(e){_this.error(e)})}ObserverProxy.prototype.next=function(value){this.forEachObserver(function(observer){observer.next(value)})};ObserverProxy.prototype.error=function(error){this.forEachObserver(function(observer){observer.error(error)});this.close(error)};ObserverProxy.prototype.complete=function(){this.forEachObserver(function(observer){observer.complete()});this.close()};/**
      * Subscribe function that can be used to add an Observer to the fan-out list.
      *
      * - We require that no event is sent to a subscriber sychronously to their
      *   call to subscribe().
      */ObserverProxy.prototype.subscribe=function(nextOrObserver,error,complete){var _this=this,observer;if(nextOrObserver===void 0&&error===void 0&&complete===void 0){throw new Error("Missing Observer.")}// Assemble an Observer object when passed as callback functions.
if(implementsAnyMethods(nextOrObserver,["next","error","complete"])){observer=nextOrObserver}else{observer={next:nextOrObserver,error:error,complete:complete}}if(observer.next===void 0){observer.next=noop}if(observer.error===void 0){observer.error=noop}if(observer.complete===void 0){observer.complete=noop}var unsub=this.unsubscribeOne.bind(this,this.observers.length);// Attempt to subscribe to a terminated Observable - we
// just respond to the Observer with the final error or complete
// event.
if(this.finalized){this.task.then(function(){try{if(_this.finalError){observer.error(_this.finalError)}else{observer.complete()}}catch(e){// nothing
}return})}this.observers.push(observer);return unsub};// Unsubscribe is synchronous - we guarantee that no events are sent to
// any unsubscribed Observer.
ObserverProxy.prototype.unsubscribeOne=function(i){if(this.observers===void 0||this.observers[i]===void 0){return}delete this.observers[i];this.observerCount-=1;if(0===this.observerCount&&this.onNoObservers!==void 0){this.onNoObservers(this)}};ObserverProxy.prototype.forEachObserver=function(fn){if(this.finalized){// Already closed by previous event....just eat the additional values.
return}// Since sendOne calls asynchronously - there is no chance that
// this.observers will become undefined.
for(var i=0;i<this.observers.length;i++){this.sendOne(i,fn)}};// Call the Observer via one of it's callback function. We are careful to
// confirm that the observe has not been unsubscribed since this asynchronous
// function had been queued.
ObserverProxy.prototype.sendOne=function(i,fn){var _this=this;// Execute the callback asynchronously
this.task.then(function(){if(_this.observers!==void 0&&_this.observers[i]!==void 0){try{fn(_this.observers[i])}catch(e){// Ignore exceptions raised in Observers or missing methods of an
// Observer.
// Log error to console. b/31404806
if("undefined"!==typeof console&&console.error){console.error(e)}}}})};ObserverProxy.prototype.close=function(err){var _this=this;if(this.finalized){return}this.finalized=!0;if(err!==void 0){this.finalError=err}// Proxy is no longer needed - garbage collect references
this.task.then(function(){_this.observers=void 0;_this.onNoObservers=void 0})};return ObserverProxy}();/** Turn synchronous function into one called asynchronously. */function async(fn,onError){return function(){for(var args=[],_i=0;_i<arguments.length;_i++){args[_i]=arguments[_i]}Promise.resolve(!0).then(function(){fn.apply(void 0,args)}).catch(function(error){if(onError){onError(error)}})}}/**
   * Return true if the object passed in implements any of the named methods.
   */function implementsAnyMethods(obj,methods){if("object"!==typeof obj||null===obj){return!1}for(var _i=0,methods_1=methods,method;_i<methods_1.length;_i++){method=methods_1[_i];if(method in obj&&"function"===typeof obj[method]){return!0}}return!1}function noop(){}// do nothing
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /**
     * Check to make sure the appropriate number of arguments are provided for a public function.
     * Throws an error if it fails.
     *
     * @param {!string} fnName The function name
     * @param {!number} minCount The minimum number of arguments to allow for the function call
     * @param {!number} maxCount The maximum number of argument to allow for the function call
     * @param {!number} argCount The actual number of arguments provided.
     */var validateArgCount=function(fnName,minCount,maxCount,argCount){var argError;if(argCount<minCount){argError="at least "+minCount}else if(argCount>maxCount){argError=0===maxCount?"none":"no more than "+maxCount}if(argError){var error=fnName+" failed: Was called with "+argCount+(1===argCount?" argument.":" arguments.")+" Expects "+argError+".";throw new Error(error)}};/**
    * Generates a string to prefix an error message about failed argument validation
    *
    * @param {!string} fnName The function name
    * @param {!number} argumentNumber The index of the argument
    * @param {boolean} optional Whether or not the argument is optional
    * @return {!string} The prefix to add to the error thrown for validation.
    */_exports.validateArgCount=validateArgCount;function errorPrefix(fnName,argumentNumber,optional){var argName="";switch(argumentNumber){case 1:argName=optional?"first":"First";break;case 2:argName=optional?"second":"Second";break;case 3:argName=optional?"third":"Third";break;case 4:argName=optional?"fourth":"Fourth";break;default:throw new Error("errorPrefix called with argumentNumber > 4.  Need to update it?");}var error=fnName+" failed: ";error+=argName+" argument ";return error}/**
   * @param {!string} fnName
   * @param {!number} argumentNumber
   * @param {!string} namespace
   * @param {boolean} optional
   */function validateNamespace(fnName,argumentNumber,namespace,optional){if(optional&&!namespace)return;if("string"!==typeof namespace){//TODO: I should do more validation here. We only allow certain chars in namespaces.
throw new Error(errorPrefix(fnName,argumentNumber,optional)+"must be a valid firebase namespace.")}}function validateCallback(fnName,argumentNumber,callback,optional){if(optional&&!callback)return;if("function"!==typeof callback)throw new Error(errorPrefix(fnName,argumentNumber,optional)+"must be a valid function.")}function validateContextObject(fnName,argumentNumber,context,optional){if(optional&&!context)return;if("object"!==typeof context||null===context)throw new Error(errorPrefix(fnName,argumentNumber,optional)+"must be a valid context object.")}/**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */ // Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they
// automatically replaced '\r\n' with '\n', and they didn't handle surrogate pairs,
// so it's been modified.
// Note that not all Unicode characters appear as single characters in JavaScript strings.
// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters
// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first
// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate
// pair).
// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3
/**
 * @param {string} str
 * @return {Array}
 */var stringToByteArray$1=function(str){for(var out=[],p=0,i=0,c;i<str.length;i++){c=str.charCodeAt(i);// Is this the lead surrogate in a surrogate pair?
if(55296<=c&&56319>=c){var high=c-55296;// the high 10 bits.
i++;assert(i<str.length,"Surrogate pair missing trail surrogate.");var low=str.charCodeAt(i)-56320;// the low 10 bits.
c=65536+(high<<10)+low}if(128>c){out[p++]=c}else if(2048>c){out[p++]=192|c>>6;out[p++]=128|63&c}else if(65536>c){out[p++]=224|c>>12;out[p++]=128|63&c>>6;out[p++]=128|63&c}else{out[p++]=240|c>>18;out[p++]=128|63&c>>12;out[p++]=128|63&c>>6;out[p++]=128|63&c}}return out};/**
    * Calculate length without actually converting; useful for doing cheaper validation.
    * @param {string} str
    * @return {number}
    */_exports.stringToByteArray=stringToByteArray$1;var stringLength=function(str){for(var p=0,i=0,c;i<str.length;i++){c=str.charCodeAt(i);if(128>c){p++}else if(2048>c){p+=2}else if(55296<=c&&56319>=c){// Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.
p+=4;i++;// skip trail surrogate.
}else{p+=3}}return p};/**
    * @license
    * Copyright 2017 Google Inc.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */_exports.stringLength=stringLength;var index_esm={CONSTANTS:CONSTANTS,Deferred:Deferred,ErrorFactory:ErrorFactory,FirebaseError:FirebaseError,Sha1:Sha1,assert:assert,assertionError:assertionError,async:async,base64:base64,base64Decode:base64Decode,base64Encode:base64Encode,clone:clone,contains:contains,createSubscribe:createSubscribe,decode:decode,deepCopy:deepCopy,deepExtend:deepExtend,errorPrefix:errorPrefix,every:every,extend:extend,findKey:findKey,findValue:findValue,forEach:forEach,getAnyKey:getAnyKey,getCount:getCount,getUA:getUA,getValues:getValues,isAdmin:isAdmin,isBrowser:isBrowser,isEmpty:isEmpty,isMobileCordova:isMobileCordova,isNode:isNode,isNodeSdk:isNodeSdk,isNonNullObject:isNonNullObject,isReactNative:isReactNative,isValidFormat:isValidFormat,isValidTimestamp:isValidTimestamp,issuedAtTime:issuedAtTime,jsonEval:jsonEval,map:map,patchProperty:patchProperty,querystring:querystring,querystringDecode:querystringDecode,safeGet:safeGet,stringLength:stringLength,stringToByteArray:stringToByteArray$1,stringify:stringify,validateArgCount:validateArgCount,validateCallback:validateCallback,validateContextObject:validateContextObject,validateNamespace:validateNamespace};/**
    * @license
    * Copyright 2017 Google Inc.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    *   http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    */ /**
        * A container for all of the Logger instances
        */_exports.$indexEsm$3=index_esm;var instances=[],LogLevel;/**
                     * The JS SDK supports 5 log levels and also allows a user the ability to
                     * silence the logs altogether.
                     *
                     * The order is a follows:
                     * DEBUG < VERBOSE < INFO < WARN < ERROR
                     *
                     * All of the log types above the current log level will be captured (i.e. if
                     * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
                     * `VERBOSE` logs will not)
                     */_exports.LogLevel=LogLevel;(function(LogLevel){LogLevel[LogLevel.DEBUG=0]="DEBUG";LogLevel[LogLevel.VERBOSE=1]="VERBOSE";LogLevel[LogLevel.INFO=2]="INFO";LogLevel[LogLevel.WARN=3]="WARN";LogLevel[LogLevel.ERROR=4]="ERROR";LogLevel[LogLevel.SILENT=5]="SILENT"})(LogLevel||(_exports.LogLevel=LogLevel={}));/**
                                  * The default log level
                                  */var defaultLogLevel=LogLevel.INFO,defaultLogHandler=function(instance,logType){for(var args=[],_i=2;_i<arguments.length;_i++){args[_i-2]=arguments[_i]}if(logType<instance.logLevel)return;var now=new Date().toISOString();switch(logType){/**
     * By default, `console.debug` is not displayed in the developer console (in
     * chrome). To avoid forcing users to have to opt-in to these logs twice
     * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
     * logs to the `console.log` function.
     */case LogLevel.DEBUG:console.log.apply(console,["["+now+"]  "+instance.name+":"].concat(args));break;case LogLevel.VERBOSE:console.log.apply(console,["["+now+"]  "+instance.name+":"].concat(args));break;case LogLevel.INFO:console.info.apply(console,["["+now+"]  "+instance.name+":"].concat(args));break;case LogLevel.WARN:console.warn.apply(console,["["+now+"]  "+instance.name+":"].concat(args));break;case LogLevel.ERROR:console.error.apply(console,["["+now+"]  "+instance.name+":"].concat(args));break;default:throw new Error("Attempted to log a message with an invalid logType (value: "+logType+")");}},Logger=/** @class */function(){/**
   * Gives you an instance of a Logger to capture messages according to
   * Firebase's logging scheme.
   *
   * @param name The name that the logs will be associated with
   */function Logger(name){this.name=name;/**
                       * The log level of the given Logger instance.
                       */this._logLevel=defaultLogLevel;/**
                                       * The log handler for the Logger instance.
                                       */this._logHandler=defaultLogHandler;/**
                                           * Capture the current instance for later use
                                           */instances.push(this)}Object.defineProperty(Logger.prototype,"logLevel",{get:function(){return this._logLevel},set:function(val){if(!(val in LogLevel)){throw new TypeError("Invalid value assigned to `logLevel`")}this._logLevel=val},enumerable:!0,configurable:!0});Object.defineProperty(Logger.prototype,"logHandler",{get:function(){return this._logHandler},set:function(val){if("function"!==typeof val){throw new TypeError("Value assigned to `logHandler` must be a function")}this._logHandler=val},enumerable:!0,configurable:!0});/**
       * The functions below are all based on the `console` interface
       */Logger.prototype.debug=function(){for(var args=[],_i=0;_i<arguments.length;_i++){args[_i]=arguments[_i]}this._logHandler.apply(this,[this,LogLevel.DEBUG].concat(args))};Logger.prototype.log=function(){for(var args=[],_i=0;_i<arguments.length;_i++){args[_i]=arguments[_i]}this._logHandler.apply(this,[this,LogLevel.VERBOSE].concat(args))};Logger.prototype.info=function(){for(var args=[],_i=0;_i<arguments.length;_i++){args[_i]=arguments[_i]}this._logHandler.apply(this,[this,LogLevel.INFO].concat(args))};Logger.prototype.warn=function(){for(var args=[],_i=0;_i<arguments.length;_i++){args[_i]=arguments[_i]}this._logHandler.apply(this,[this,LogLevel.WARN].concat(args))};Logger.prototype.error=function(){for(var args=[],_i=0;_i<arguments.length;_i++){args[_i]=arguments[_i]}this._logHandler.apply(this,[this,LogLevel.ERROR].concat(args))};return Logger}();/**
                                      * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
                                      * messages on to their corresponding console counterparts (if the log method
                                      * is supported by the current log level)
                                      */_exports.Logger=Logger;/**
      * @license
      * Copyright 2017 Google Inc.
      *
      * Licensed under the Apache License, Version 2.0 (the "License");
      * you may not use this file except in compliance with the License.
      * You may obtain a copy of the License at
      *
      *   http://www.apache.org/licenses/LICENSE-2.0
      *
      * Unless required by applicable law or agreed to in writing, software
      * distributed under the License is distributed on an "AS IS" BASIS,
      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      * See the License for the specific language governing permissions and
      * limitations under the License.
      */function setLogLevel(level){instances.forEach(function(inst){inst.logLevel=level})}var index_esm$1={get LogLevel(){return LogLevel},Logger:Logger,setLogLevel:setLogLevel};_exports.$indexEsm$2=index_esm$1;var _a,ERRORS=(_a={},_a["no-app"/* NO_APP */]="No Firebase App '{$name}' has been created - "+"call Firebase App.initializeApp()",_a["bad-app-name"/* BAD_APP_NAME */]="Illegal App name: '{$name}",_a["duplicate-app"/* DUPLICATE_APP */]="Firebase App named '{$name}' already exists",_a["app-deleted"/* APP_DELETED */]="Firebase App named '{$name}' already deleted",_a["duplicate-service"/* DUPLICATE_SERVICE */]="Firebase service named '{$name}' already registered",_a["invalid-app-argument"/* INVALID_APP_ARGUMENT */]="firebase.{$name}() takes either no argument or a "+"Firebase App instance.",_a),ERROR_FACTORY=new ErrorFactory("app","Firebase",ERRORS),DEFAULT_ENTRY_NAME="[DEFAULT]",tokenListeners=[],FirebaseAppImpl=/** @class */function(){function FirebaseAppImpl(options,config,firebase_){this.firebase_=firebase_;this.isDeleted_=!1;this.services_={};this.name_=config.name;this.automaticDataCollectionEnabled_=config.automaticDataCollectionEnabled||!1;this.options_=deepCopy(options);this.INTERNAL={getUid:function(){return null},getToken:function(){return Promise.resolve(null)},addAuthTokenListener:function(callback){tokenListeners.push(callback);// Make sure callback is called, asynchronously, in the absence of the auth module
setTimeout(function(){return callback(null)},0)},removeAuthTokenListener:function(callback){tokenListeners=tokenListeners.filter(function(listener){return listener!==callback})}}}Object.defineProperty(FirebaseAppImpl.prototype,"automaticDataCollectionEnabled",{get:function(){this.checkDestroyed_();return this.automaticDataCollectionEnabled_},set:function(val){this.checkDestroyed_();this.automaticDataCollectionEnabled_=val},enumerable:!0,configurable:!0});Object.defineProperty(FirebaseAppImpl.prototype,"name",{get:function(){this.checkDestroyed_();return this.name_},enumerable:!0,configurable:!0});Object.defineProperty(FirebaseAppImpl.prototype,"options",{get:function(){this.checkDestroyed_();return this.options_},enumerable:!0,configurable:!0});FirebaseAppImpl.prototype.delete=function(){var _this=this;return new Promise(function(resolve){_this.checkDestroyed_();resolve()}).then(function(){_this.firebase_.INTERNAL.removeApp(_this.name_);for(var services=[],_i=0,_a=Object.keys(_this.services_),serviceKey;_i<_a.length;_i++){serviceKey=_a[_i];for(var _b=0,_c=Object.keys(_this.services_[serviceKey]),instanceKey;_b<_c.length;_b++){instanceKey=_c[_b];services.push(_this.services_[serviceKey][instanceKey])}}return Promise.all(services.filter(function(service){return"INTERNAL"in service}).map(function(service){return service.INTERNAL.delete()}))}).then(function(){_this.isDeleted_=!0;_this.services_={}})};/**
      * Return a service instance associated with this app (creating it
      * on demand), identified by the passed instanceIdentifier.
      *
      * NOTE: Currently storage is the only one that is leveraging this
      * functionality. They invoke it by calling:
      *
      * ```javascript
      * firebase.app().storage('STORAGE BUCKET ID')
      * ```
      *
      * The service name is passed to this already
      * @internal
      */FirebaseAppImpl.prototype._getService=function(name,instanceIdentifier){if(void 0===instanceIdentifier){instanceIdentifier=DEFAULT_ENTRY_NAME}this.checkDestroyed_();if(!this.services_[name]){this.services_[name]={}}if(!this.services_[name][instanceIdentifier]){/**
       * If a custom instance has been defined (i.e. not '[DEFAULT]')
       * then we will pass that instance on, otherwise we pass `null`
       */var instanceSpecifier=instanceIdentifier!==DEFAULT_ENTRY_NAME?instanceIdentifier:void 0,service=this.firebase_.INTERNAL.factories[name](this,this.extendApp.bind(this),instanceSpecifier);this.services_[name][instanceIdentifier]=service}return this.services_[name][instanceIdentifier]};/**
      * Callback function used to extend an App instance at the time
      * of service instance creation.
      */FirebaseAppImpl.prototype.extendApp=function(props){var _this=this;// Copy the object onto the FirebaseAppImpl prototype
deepExtend(this,props);/**
                              * If the app has overwritten the addAuthTokenListener stub, forward
                              * the active token listeners on to the true fxn.
                              *
                              * TODO: This function is required due to our current module
                              * structure. Once we are able to rely strictly upon a single module
                              * implementation, this code should be refactored and Auth should
                              * provide these stubs and the upgrade logic
                              */if(props.INTERNAL&&props.INTERNAL.addAuthTokenListener){tokenListeners.forEach(function(listener){_this.INTERNAL.addAuthTokenListener(listener)});tokenListeners=[]}};/**
      * This function will throw an Error if the App has already been deleted -
      * use before performing API actions on the App.
      */FirebaseAppImpl.prototype.checkDestroyed_=function(){if(this.isDeleted_){throw ERROR_FACTORY.create("app-deleted"/* APP_DELETED */,{name:this.name_})}};return FirebaseAppImpl}();// Prevent dead-code elimination of these methods w/o invalid property
// copying.
FirebaseAppImpl.prototype.name&&FirebaseAppImpl.prototype.options||FirebaseAppImpl.prototype.delete||console.log("dc");var version="6.1.1";/**
                        * @license
                        * Copyright 2019 Google Inc.
                        *
                        * Licensed under the Apache License, Version 2.0 (the "License");
                        * you may not use this file except in compliance with the License.
                        * You may obtain a copy of the License at
                        *
                        *   http://www.apache.org/licenses/LICENSE-2.0
                        *
                        * Unless required by applicable law or agreed to in writing, software
                        * distributed under the License is distributed on an "AS IS" BASIS,
                        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                        * See the License for the specific language governing permissions and
                        * limitations under the License.
                        */function contains$1(obj,key){return Object.prototype.hasOwnProperty.call(obj,key)}/**
   * Because auth can't share code with other components, we attach the utility functions
   * in an internal namespace to share code.
   * This function return a firebase namespace object without
   * any utility functions, so it can be shared between the regular firebaseNamespace and
   * the lite version.
   */function createFirebaseNamespaceCore(firebaseAppImpl){var apps={},factories={},appHooks={},namespace={// Hack to prevent Babel from modifying the object returned
// as the firebase namespace.
// @ts-ignore
__esModule:!0,initializeApp:initializeApp,app:app,apps:null,SDK_VERSION:version,INTERNAL:{registerService:registerService,removeApp:removeApp,factories:factories,useAsService:useAsService}};// Inject a circular default export to allow Babel users who were previously
// using:
//
//   import firebase from 'firebase';
//   which becomes: var firebase = require('firebase').default;
//
// instead of
//
//   import * as firebase from 'firebase';
//   which becomes: var firebase = require('firebase');
patchProperty(namespace,"default",namespace);// firebase.apps is a read-only getter.
Object.defineProperty(namespace,"apps",{get:getApps});/**
       * Called by App.delete() - but before any services associated with the App
       * are deleted.
       */function removeApp(name){var app=apps[name];callAppHooks(app,"delete");delete apps[name]}/**
     * Get the App object for a given name (or DEFAULT).
     */function app(name){name=name||DEFAULT_ENTRY_NAME;if(!contains$1(apps,name)){throw ERROR_FACTORY.create("no-app"/* NO_APP */,{name:name})}return apps[name]}patchProperty(app,"App",firebaseAppImpl);function initializeApp(options,rawConfig){if(void 0===rawConfig){rawConfig={}}if("object"!==typeof rawConfig||null===rawConfig){var name_1=rawConfig;rawConfig={name:name_1}}var config=rawConfig;if(config.name===void 0){config.name=DEFAULT_ENTRY_NAME}var name=config.name;if("string"!==typeof name||!name){throw ERROR_FACTORY.create("bad-app-name"/* BAD_APP_NAME */,{name:name+""})}if(contains$1(apps,name)){throw ERROR_FACTORY.create("duplicate-app"/* DUPLICATE_APP */,{name:name})}var app=new firebaseAppImpl(options,config,namespace);apps[name]=app;callAppHooks(app,"create");return app}/*
     * Return an array of all the non-deleted FirebaseApps.
     */function getApps(){// Make a copy so caller cannot mutate the apps list.
return Object.keys(apps).map(function(name){return apps[name]})}/*
     * Register a Firebase Service.
     *
     * firebase.INTERNAL.registerService()
     *
     * TODO: Implement serviceProperties.
     */function registerService(name,createService,serviceProperties,appHook,allowMultipleInstances){if(void 0===allowMultipleInstances){allowMultipleInstances=!1}// Cannot re-register a service that already exists
if(factories[name]){throw ERROR_FACTORY.create("duplicate-service"/* DUPLICATE_SERVICE */,{name:name})}// Capture the service factory for later service instantiation
factories[name]=createService;// Capture the appHook, if passed
if(appHook){appHooks[name]=appHook;// Run the **new** app hook on all existing apps
getApps().forEach(function(app){appHook("create",app)})}// The Service namespace is an accessor function ...
function serviceNamespace(appArg){if(void 0===appArg){appArg=app()}if("function"!==typeof appArg[name]){// Invalid argument.
// This happens in the following case: firebase.storage('gs:/')
throw ERROR_FACTORY.create("invalid-app-argument"/* INVALID_APP_ARGUMENT */,{name:name})}// Forward service instance lookup to the FirebaseApp.
return appArg[name]()}// ... and a container for service-level properties.
if(serviceProperties!==void 0){deepExtend(serviceNamespace,serviceProperties)}// Monkey-patch the serviceNamespace onto the firebase namespace
namespace[name]=serviceNamespace;// Patch the FirebaseAppImpl prototype
firebaseAppImpl.prototype[name]=function(){for(var args=[],_i=0;_i<arguments.length;_i++){args[_i]=arguments[_i]}var serviceFxn=this._getService.bind(this,name);return serviceFxn.apply(this,allowMultipleInstances?args:[])};return serviceNamespace}function callAppHooks(app,eventName){for(var _i=0,_a=Object.keys(factories);_i<_a.length;_i++){var serviceName=_a[_i],factoryName=useAsService(app,serviceName);// Ignore virtual services
if(null===factoryName){return}if(appHooks[factoryName]){appHooks[factoryName](eventName,app)}}}// Map the requested service to a registered service name
// (used to map auth to serverAuth service when needed).
function useAsService(app,name){if("serverAuth"===name){return null}var useService=name;return useService}return namespace}/**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */ /**
       * Return a firebase namespace object.
       *
       * In production, this will be called exactly once and the result
       * assigned to the 'firebase' global.  It may be called multiple times
       * in unit tests.
       */function createFirebaseNamespace(){var namespace=createFirebaseNamespaceCore(FirebaseAppImpl);namespace.INTERNAL=__assign({},namespace.INTERNAL,{createFirebaseNamespace:createFirebaseNamespace,extendNamespace:extendNamespace,createSubscribe:createSubscribe,ErrorFactory:ErrorFactory,deepExtend:deepExtend});/**
       * Patch the top-level firebase namespace with additional properties.
       *
       * firebase.INTERNAL.extendNamespace()
       */function extendNamespace(props){deepExtend(namespace,props)}return namespace}/**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */var logger=new Logger("@firebase/app");// Firebase Lite detection
if(isBrowser()&&"firebase"in self){logger.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ");var sdkVersion=self.firebase.SDK_VERSION;if(sdkVersion&&0<=sdkVersion.indexOf("LITE")){logger.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ")}}var firebaseNamespace=createFirebaseNamespace(),initializeApp=firebaseNamespace.initializeApp;firebaseNamespace.initializeApp=function(){// Environment check before initializing app
// Do the check in initializeApp, so people have a chance to disable it by setting logLevel
// in @firebase/logger
if(isNode()){logger.warn("\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\n      run in a Node environment.  If running in a Node environment, make sure you\n      are using the bundle specified by the \"main\" field in package.json.\n      \n      If you are using Webpack, you can specify \"main\" as the first item in\n      \"resolve.mainFields\":\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\n      \n      If using Rollup, use the rollup-plugin-node-resolve plugin and set \"module\"\n      to false and \"main\" to true:\n      https://github.com/rollup/rollup-plugin-node-resolve\n      ")}return initializeApp.apply(void 0,arguments)};var firebase=firebaseNamespace;_exports.firebase=_exports.$indexEsmDefault=firebase;var firebase$1={default:firebase,firebase:firebase};_exports.$indexEsm=firebase$1;var commonjsGlobal="undefined"!==typeof globalThis?globalThis:"undefined"!==typeof window?window:"undefined"!==typeof global?global:"undefined"!==typeof self?self:{},g,goog=goog||{},k=commonjsGlobal;function m(a){return"string"==typeof a}function aa(a){return"number"==typeof a}function n(a,b){a=a.split(".");b=b||k;for(var c=0;c<a.length;c++)if(b=b[a[c]],null==b)return null;return b}function ba(){}function p(a){var b=typeof a;if("object"==b){if(a){if(a instanceof Array)return"array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if("[object Window]"==c)return"object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return"array";if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("call"))return"function"}else return"null"}else if("function"==b&&"undefined"==typeof a.call)return"object";return b}function q(a){return"array"==p(a)}function ca(a){var b=p(a);return"array"==b||"object"==b&&"number"==typeof a.length}function r(a){var b=typeof a;return"object"==b&&null!=a||"function"==b}var t="closure_uid_"+(1E9*Math.random()>>>0),da=0;function ea(a,b,c){return a.call.apply(a.bind,arguments)}function fa(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var e=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(e,d);return a.apply(b,e)}}return function(){return a.apply(b,arguments)}}function u(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?u=ea:u=fa;return u.apply(null,arguments)}function v(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var d=c.slice();d.push.apply(d,arguments);return a.apply(this,d)}}var w=Date.now||function(){return+new Date};function x(a,b){function c(){}c.prototype=b.prototype;a.N=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.yb=function(d,e,f){for(var h=Array(arguments.length-2),l=2;l<arguments.length;l++)h[l-2]=arguments[l];return b.prototype[e].apply(d,h)}}function y(){this.j=this.j;this.i=this.i}var ha=0;y.prototype.j=!1;y.prototype.la=function(){if(!this.j&&(this.j=!0,this.G(),0!=ha)){var a=this[t]||(this[t]=++da)}};y.prototype.G=function(){if(this.i)for(;this.i.length;)this.i.shift()()};var ja=Array.prototype.indexOf?function(a,b){return Array.prototype.indexOf.call(a,b,void 0)}:function(a,b){if(m(a))return m(b)&&1==b.length?a.indexOf(b,0):-1;for(var c=0;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1},la=Array.prototype.forEach?function(a,b,c){Array.prototype.forEach.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=m(a)?a.split(""):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)};function ma(a){a:{for(var b=na,c=a.length,d=m(a)?a.split(""):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a)){b=e;break a}b=-1}return 0>b?null:m(a)?a.charAt(b):a[b]}function oa(a){return Array.prototype.concat.apply([],arguments)}function pa(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];return c}return[]}function qa(a){return /^[\s\xa0]*$/.test(a)}var ra=String.prototype.trim?function(a){return a.trim()}:function(a){return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1]};function z(a,b){return-1!=a.indexOf(b)}function sa(a,b){return a<b?-1:a>b?1:0}var A;a:{var ta=k.navigator;if(ta){var ua=ta.userAgent;if(ua){A=ua;break a}}A=""}function va(a,b,c){for(var d in a)b.call(c,a[d],d,a)}function wa(a){var b={},c;for(c in a)b[c]=a[c];return b}var xa="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function ya(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<xa.length;f++)c=xa[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c])}}function za(a){za[" "](a);return a}za[" "]=ba;function Aa(a,b){var c=Ba;return Object.prototype.hasOwnProperty.call(c,a)?c[a]:c[a]=b(a)}var Ca=z(A,"Opera"),B=z(A,"Trident")||z(A,"MSIE"),Da=z(A,"Edge"),Ea=Da||B,Fa=z(A,"Gecko")&&!(z(A.toLowerCase(),"webkit")&&!z(A,"Edge"))&&!(z(A,"Trident")||z(A,"MSIE"))&&!z(A,"Edge"),Ga=z(A.toLowerCase(),"webkit")&&!z(A,"Edge");function Ha(){var a=k.document;return a?a.documentMode:void 0}var Ia;a:{var Ja="",Ka=function(){var a=A;if(Fa)return /rv:([^\);]+)(\)|;)/.exec(a);if(Da)return /Edge\/([\d\.]+)/.exec(a);if(B)return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);if(Ga)return /WebKit\/(\S+)/.exec(a);if(Ca)return /(?:Version)[ \/]?(\S+)/.exec(a)}();Ka&&(Ja=Ka?Ka[1]:"");if(B){var La=Ha();if(null!=La&&La>parseFloat(Ja)){Ia=La+"";break a}}Ia=Ja}var Ba={};function Ma(a){return Aa(a,function(){for(var b=0,c=ra(Ia+"").split("."),d=ra(a+"").split("."),e=Math.max(c.length,d.length),f=0;0==b&&f<e;f++){var h=c[f]||"",l=d[f]||"";do{h=/(\d*)(\D*)(.*)/.exec(h)||["","","",""];l=/(\d*)(\D*)(.*)/.exec(l)||["","","",""];if(0==h[0].length&&0==l[0].length)break;b=sa(0==h[1].length?0:parseInt(h[1],10),0==l[1].length?0:parseInt(l[1],10))||sa(0==h[2].length,0==l[2].length)||sa(h[2],l[2]);h=h[3];l=l[3]}while(0==b)}return 0<=b})}var Na,Oa=k.document;Na=Oa&&B?Ha()||("CSS1Compat"==Oa.compatMode?parseInt(Ia,10):5):void 0;var Pa=!B||9<=+Na,Qa=B&&!Ma("9"),Ra=function(){if(!k.addEventListener||!Object.defineProperty)return!1;var a=!1,b=Object.defineProperty({},"passive",{get:function(){a=!0}});try{k.addEventListener("test",ba,b),k.removeEventListener("test",ba,b)}catch(c){}return a}();function C(a,b){this.type=a;this.a=this.target=b;this.Ja=!0}C.prototype.b=function(){this.Ja=!1};function D(a,b){C.call(this,a?a.type:"");this.relatedTarget=this.a=this.target=null;this.button=this.screenY=this.screenX=this.clientY=this.clientX=0;this.key="";this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1;this.pointerId=0;this.pointerType="";this.c=null;if(a){var c=this.type=a.type,d=a.changedTouches&&a.changedTouches.length?a.changedTouches[0]:null;this.target=a.target||a.srcElement;this.a=b;if(b=a.relatedTarget){if(Fa){a:{try{za(b.nodeName);var e=!0;break a}catch(f){}e=!1}e||(b=null)}}else"mouseover"==c?b=a.fromElement:"mouseout"==c&&(b=a.toElement);this.relatedTarget=b;d?(this.clientX=void 0!==d.clientX?d.clientX:d.pageX,this.clientY=void 0!==d.clientY?d.clientY:d.pageY,this.screenX=d.screenX||0,this.screenY=d.screenY||0):(this.clientX=void 0!==a.clientX?a.clientX:a.pageX,this.clientY=void 0!==a.clientY?a.clientY:a.pageY,this.screenX=a.screenX||0,this.screenY=a.screenY||0);this.button=a.button;this.key=a.key||"";this.ctrlKey=a.ctrlKey;this.altKey=a.altKey;this.shiftKey=a.shiftKey;this.metaKey=a.metaKey;this.pointerId=a.pointerId||0;this.pointerType=m(a.pointerType)?a.pointerType:Sa[a.pointerType]||"";this.c=a;a.defaultPrevented&&this.b()}}x(D,C);var Sa={2:"touch",3:"pen",4:"mouse"};D.prototype.b=function(){D.N.b.call(this);var a=this.c;if(a.preventDefault)a.preventDefault();else if(a.returnValue=!1,Qa)try{if(a.ctrlKey||112<=a.keyCode&&123>=a.keyCode)a.keyCode=-1}catch(b){}};var E="closure_listenable_"+(0|1E6*Math.random()),Ta=0;function Ua(a,b,c,d,e){this.listener=a;this.proxy=null;this.src=b;this.type=c;this.capture=!!d;this.da=e;this.key=++Ta;this.X=this.Z=!1}function Va(a){a.X=!0;a.listener=null;a.proxy=null;a.src=null;a.da=null}function Wa(a){this.src=a;this.a={};this.b=0}Wa.prototype.add=function(a,b,c,d,e){var f=a.toString();a=this.a[f];a||(a=this.a[f]=[],this.b++);var h=Xa(a,b,d,e);-1<h?(b=a[h],c||(b.Z=!1)):(b=new Ua(b,this.src,f,!!d,e),b.Z=c,a.push(b));return b};function Ya(a,b){var c=b.type;if(c in a.a){var d=a.a[c],e=ja(d,b),f;(f=0<=e)&&Array.prototype.splice.call(d,e,1);f&&(Va(b),0==a.a[c].length&&(delete a.a[c],a.b--))}}function Xa(a,b,c,d){for(var e=0,f;e<a.length;++e){f=a[e];if(!f.X&&f.listener==b&&f.capture==!!c&&f.da==d)return e}return-1}var Za="closure_lm_"+(0|1E6*Math.random()),$a={};function bb(a,b,c,d,e){if(d&&d.once)return cb(a,b,c,d,e);if(q(b)){for(var f=0;f<b.length;f++)bb(a,b[f],c,d,e);return null}c=db(c);return a&&a[E]?a.Aa(b,c,r(d)?!!d.capture:!!d,e):eb(a,b,c,!1,d,e)}function eb(a,b,c,d,e,f){if(!b)throw Error("Invalid event type");var h=r(e)?!!e.capture:!!e;if(h&&!Pa)return null;var l=fb(a);l||(a[Za]=l=new Wa(a));c=l.add(b,c,d,h,f);if(c.proxy)return c;d=gb();c.proxy=d;d.src=a;d.listener=c;if(a.addEventListener)Ra||(e=h),void 0===e&&(e=!1),a.addEventListener(b.toString(),d,e);else if(a.attachEvent)a.attachEvent(hb(b.toString()),d);else if(a.addListener&&a.removeListener)a.addListener(d);else throw Error("addEventListener and attachEvent are unavailable.");return c}function gb(){var a=ib,b=Pa?function(c){return a.call(b.src,b.listener,c)}:function(c){c=a.call(b.src,b.listener,c);if(!c)return c};return b}function cb(a,b,c,d,e){if(q(b)){for(var f=0;f<b.length;f++)cb(a,b[f],c,d,e);return null}c=db(c);return a&&a[E]?a.Ba(b,c,r(d)?!!d.capture:!!d,e):eb(a,b,c,!0,d,e)}function jb(a,b,c,d,e){if(q(b))for(var f=0;f<b.length;f++)jb(a,b[f],c,d,e);else(d=r(d)?!!d.capture:!!d,c=db(c),a&&a[E])?(a=a.c,b=(b+"").toString(),b in a.a&&(f=a.a[b],c=Xa(f,c,d,e),-1<c&&(Va(f[c]),Array.prototype.splice.call(f,c,1),0==f.length&&(delete a.a[b],a.b--)))):a&&(a=fb(a))&&(b=a.a[b.toString()],a=-1,b&&(a=Xa(b,c,d,e)),(c=-1<a?b[a]:null)&&kb(c))}function kb(a){if(!aa(a)&&a&&!a.X){var b=a.src;if(b&&b[E])Ya(b.c,a);else{var c=a.type,d=a.proxy;b.removeEventListener?b.removeEventListener(c,d,a.capture):b.detachEvent?b.detachEvent(hb(c),d):b.addListener&&b.removeListener&&b.removeListener(d);(c=fb(b))?(Ya(c,a),0==c.b&&(c.src=null,b[Za]=null)):Va(a)}}}function hb(a){return a in $a?$a[a]:$a[a]="on"+a}function lb(a,b){var c=a.listener,d=a.da||a.src;a.Z&&kb(a);return c.call(d,b)}function ib(a,b){return a.X?!0:Pa?lb(a,new D(b,this)):(b=new D(b||n("window.event"),this),lb(a,b))}function fb(a){a=a[Za];return a instanceof Wa?a:null}var mb="__closure_events_fn_"+(1E9*Math.random()>>>0);function db(a){if("function"==p(a))return a;a[mb]||(a[mb]=function(b){return a.handleEvent(b)});return a[mb]}function G(){y.call(this);this.c=new Wa(this);this.J=this;this.B=null}x(G,y);G.prototype[E]=!0;g=G.prototype;g.addEventListener=function(a,b,c,d){bb(this,a,b,c,d)};g.removeEventListener=function(a,b,c,d){jb(this,a,b,c,d)};g.dispatchEvent=function(a){var b,c=this.B;if(c)for(b=[];c;c=c.B)b.push(c);c=this.J;var d=a.type||a;if(m(a))a=new C(a,c);else if(a instanceof C)a.target=a.target||c;else{var e=a;a=new C(d,c);ya(a,e)}e=!0;if(b)for(var f=b.length-1,h;0<=f;f--){h=a.a=b[f];e=nb(h,d,!0,a)&&e}h=a.a=c;e=nb(h,d,!0,a)&&e;e=nb(h,d,!1,a)&&e;if(b)for(f=0;f<b.length;f++)h=a.a=b[f],e=nb(h,d,!1,a)&&e;return e};g.G=function(){G.N.G.call(this);if(this.c){var a=this.c,c;for(c in a.a){for(var d=a.a[c],e=0;e<d.length;e++)Va(d[e]);delete a.a[c];a.b--}}this.B=null};g.Aa=function(a,b,c,d){return this.c.add(a+"",b,!1,c,d)};g.Ba=function(a,b,c,d){return this.c.add(a+"",b,!0,c,d)};function nb(a,b,c,d){b=a.c.a[b+""];if(!b)return!0;b=b.concat();for(var e=!0,f=0,h;f<b.length;++f){h=b[f];if(h&&!h.X&&h.capture==c){var l=h.listener,F=h.da||h.src;h.Z&&Ya(a.c,h);e=!1!==l.call(F,d)&&e}}return e&&0!=d.Ja}var ob=k.JSON.stringify;function pb(a,b){this.c=a;this.f=b;this.b=0;this.a=null}pb.prototype.get=function(){if(0<this.b){this.b--;var a=this.a;this.a=a.next;a.next=null}else a=this.c();return a};function qb(){this.b=this.a=null}var sb=new pb(function(){return new rb},function(a){a.reset()});qb.prototype.add=function(a,b){var c=sb.get();c.set(a,b);this.b?this.b.next=c:this.a=c;this.b=c};function tb(){var a=ub,b=null;a.a&&(b=a.a,a.a=a.a.next,a.a||(a.b=null),b.next=null);return b}function rb(){this.next=this.b=this.a=null}rb.prototype.set=function(a,b){this.a=a;this.b=b;this.next=null};rb.prototype.reset=function(){this.next=this.b=this.a=null};function vb(a){k.setTimeout(function(){throw a},0)}function wb(a,b){xb||yb();zb||(xb(),zb=!0);ub.add(a,b)}var xb;function yb(){var a=k.Promise.resolve(void 0);xb=function(){a.then(Ab)}}var zb=!1,ub=new qb;function Ab(){for(var a;a=tb();){try{a.a.call(a.b)}catch(c){vb(c)}var b=sb;b.f(a);100>b.b&&(b.b++,a.next=b.a,b.a=a)}zb=!1}function Cb(a,b){G.call(this);this.b=a||1;this.a=b||k;this.f=u(this.gb,this);this.g=w()}x(Cb,G);g=Cb.prototype;g.ba=!1;g.L=null;g.gb=function(){if(this.ba){var a=w()-this.g;0<a&&a<.8*this.b?this.L=this.a.setTimeout(this.f,this.b-a):(this.L&&(this.a.clearTimeout(this.L),this.L=null),this.dispatchEvent("tick"),this.ba&&(Db(this),this.start()))}};g.start=function(){this.ba=!0;this.L||(this.L=this.a.setTimeout(this.f,this.b),this.g=w())};function Db(a){a.ba=!1;a.L&&(a.a.clearTimeout(a.L),a.L=null)}g.G=function(){Cb.N.G.call(this);Db(this);delete this.a};function Eb(a,b,c){if("function"==p(a))c&&(a=u(a,c));else if(a&&"function"==typeof a.handleEvent)a=u(a.handleEvent,a);else throw Error("Invalid listener argument");return 2147483647<+b?-1:k.setTimeout(a,b||0)}function Fb(a,b,c){y.call(this);this.f=null!=c?u(a,c):a;this.c=b;this.b=u(this.ab,this);this.a=[]}x(Fb,y);g=Fb.prototype;g.ea=!1;g.U=null;g.Ua=function(a){this.a=arguments;this.U?this.ea=!0:Gb(this)};g.G=function(){Fb.N.G.call(this);this.U&&(k.clearTimeout(this.U),this.U=null,this.ea=!1,this.a=[])};g.ab=function(){this.U=null;this.ea&&(this.ea=!1,Gb(this))};function Gb(a){a.U=Eb(a.b,a.c);a.f.apply(null,a.a)}function H(a){y.call(this);this.b=a;this.a={}}x(H,y);var Hb=[];function Ib(a,b,c,d){q(c)||(c&&(Hb[0]=c.toString()),c=Hb);for(var e=0,f;e<c.length;e++){f=bb(b,c[e],d||a.handleEvent,!1,a.b||a);if(!f)break;a.a[f.key]=f}}function Jb(a){va(a.a,function(b,c){this.a.hasOwnProperty(c)&&kb(b)},a);a.a={}}H.prototype.G=function(){H.N.G.call(this);Jb(this)};H.prototype.handleEvent=function(){throw Error("EventHandler.handleEvent not implemented")};function Kb(){}var I=new G;function Lb(a){C.call(this,"serverreachability",a)}x(Lb,C);function J(a){I.dispatchEvent(new Lb(I,a))}function Mb(a){C.call(this,"statevent",a)}x(Mb,C);function K(a){I.dispatchEvent(new Mb(I,a))}function Nb(a){C.call(this,"timingevent",a)}x(Nb,C);function Ob(a,b){if("function"!=p(a))throw Error("Fn must not be null and must be a function");return k.setTimeout(function(){a()},b)}var Pb={NO_ERROR:0,hb:1,ob:2,nb:3,kb:4,mb:5,pb:6,Ma:7,TIMEOUT:8,sb:9},Qb={jb:"complete",wb:"success",Na:"error",Ma:"abort",ub:"ready",vb:"readystatechange",TIMEOUT:"timeout",qb:"incrementaldata",tb:"progress",lb:"downloadprogress",xb:"uploadprogress"};function Rb(){}Rb.prototype.a=null;function Sb(a){var b;(b=a.a)||(b=a.a={});return b}function Tb(){}var L={OPEN:"a",ib:"b",Na:"c",rb:"d"};function Ub(){C.call(this,"d")}x(Ub,C);function Vb(){C.call(this,"c")}x(Vb,C);var Wb;function Xb(){}x(Xb,Rb);Wb=new Xb;function M(a,b,c){this.g=a;this.W=b;this.V=c||1;this.I=new H(this);this.O=Yb;a=Ea?125:void 0;this.P=new Cb(a);this.h=null;this.b=!1;this.l=this.D=this.f=this.F=this.v=this.R=this.i=null;this.j=[];this.a=null;this.A=0;this.c=this.w=null;this.o=-1;this.m=!1;this.J=0;this.B=null;this.s=this.S=this.H=!1}var Yb=45E3,Zb={},$b={};g=M.prototype;g.setTimeout=function(a){this.O=a};function ac(a,b,c){a.F=1;a.f=bc(N(b));a.l=c;a.H=!0;cc(a,null)}function dc(a,b,c,d){a.F=1;a.f=bc(N(b));a.l=null;a.H=c;cc(a,d)}function cc(a,b){a.v=w();ec(a);a.D=N(a.f);fc(a.D,"t",a.V);a.A=0;a.a=a.g.$(a.g.Y()?b:null);0<a.J&&(a.B=new Fb(u(a.Ka,a,a.a),a.J));Ib(a.I,a.a,"readystatechange",a.eb);b=a.h?wa(a.h):{};a.l?(a.w||(a.w="POST"),b["Content-Type"]="application/x-www-form-urlencoded",a.a.ca(a.D,a.w,a.l,b)):(a.w="GET",a.a.ca(a.D,a.w,null,b));J(1)}g.eb=function(a){a=a.target;var b=this.B;b&&3==O(a)?b.Ua():this.Ka(a)};g.Ka=function(a){try{if(a==this.a)a:{var b=O(this.a),c=this.a.ya(),d=this.a.T();if(!(3>b||3==b&&!Ea&&!this.a.aa())){this.m||4!=b||7==c||(8==c||0>=d?J(3):J(2));gc(this);var e=this.a.T();this.o=e;var f=this.a.aa();if(this.b=200==e){if(this.S&&!this.s){b:{if(this.a){var h=hc(this.a,"X-HTTP-Initial-Response");if(h&&!qa(h)){var l=h;break b}}l=null}if(l)this.s=!0,ic(this,l);else{this.b=!1;this.c=3;K(12);P(this);jc(this);break a}}this.H?(kc(this,b,f),Ea&&this.b&&3==b&&(Ib(this.I,this.P,"tick",this.cb),this.P.start())):ic(this,f);4==b&&P(this);this.b&&!this.m&&(4==b?this.g.na(this):(this.b=!1,ec(this)))}else 400==e&&0<f.indexOf("Unknown SID")?(this.c=3,K(12)):(this.c=0,K(13)),P(this),jc(this)}}}catch(F){}finally{}};function kc(a,b,c){for(var d=!0,e;!a.m&&a.A<c.length;){e=lc(a,c);if(e==$b){4==b&&(a.c=4,K(14),d=!1);break}else if(e==Zb){a.c=4;K(15);d=!1;break}else ic(a,e)}4==b&&0==c.length&&(a.c=1,K(16),d=!1);a.b=a.b&&d;d||(P(a),jc(a))}g.cb=function(){if(this.a){var a=O(this.a),b=this.a.aa();this.A<b.length&&(gc(this),kc(this,a,b),this.b&&4!=a&&ec(this))}};function lc(a,b){var c=a.A,d=b.indexOf("\n",c);if(-1==d)return $b;c=+b.substring(c,d);if(isNaN(c))return Zb;d+=1;if(d+c>b.length)return $b;b=b.substr(d,c);a.A=d+c;return b}g.cancel=function(){this.m=!0;P(this)};function ec(a){a.R=w()+a.O;mc(a,a.O)}function mc(a,b){if(null!=a.i)throw Error("WatchDog timer not null");a.i=Ob(u(a.bb,a),b)}function gc(a){a.i&&(k.clearTimeout(a.i),a.i=null)}g.bb=function(){this.i=null;var a=w();0<=a-this.R?(2!=this.F&&(J(3),K(17)),P(this),this.c=2,jc(this)):mc(this,this.R-a)};function jc(a){a.g.Da()||a.m||a.g.na(a)}function P(a){gc(a);var b=a.B;b&&"function"==typeof b.la&&b.la();a.B=null;Db(a.P);Jb(a.I);a.a&&(b=a.a,a.a=null,b.abort(),b.la())}function ic(a,b){try{a.g.Ga(a,b),J(4)}catch(c){}}function nc(a){if(a.C&&"function"==typeof a.C)return a.C();if(m(a))return a.split("");if(ca(a)){for(var b=[],c=a.length,d=0;d<c;d++)b.push(a[d]);return b}b=[];c=0;for(d in a)b[c++]=a[d];return b}function oc(a,b){if(a.forEach&&"function"==typeof a.forEach)a.forEach(b,void 0);else if(ca(a)||m(a))la(a,b,void 0);else{if(a.K&&"function"==typeof a.K)var c=a.K();else if(a.C&&"function"==typeof a.C)c=void 0;else if(ca(a)||m(a)){c=[];for(var d=a.length,e=0;e<d;e++)c.push(e)}else for(e in c=[],d=0,a)c[d++]=e;d=nc(a);e=d.length;for(var f=0;f<e;f++)b.call(void 0,d[f],c&&c[f],a)}}function Q(a,b){this.b={};this.a=[];this.c=0;var c=arguments.length;if(1<c){if(c%2)throw Error("Uneven number of arguments");for(var d=0;d<c;d+=2)this.set(arguments[d],arguments[d+1])}else if(a)if(a instanceof Q)for(c=a.K(),d=0;d<c.length;d++)this.set(c[d],a.get(c[d]));else for(d in a)this.set(d,a[d])}g=Q.prototype;g.C=function(){pc(this);for(var a=[],b=0;b<this.a.length;b++)a.push(this.b[this.a[b]]);return a};g.K=function(){pc(this);return this.a.concat()};function qc(a){a.b={};a.a.length=0;a.c=0}function rc(a,b){R(a.b,b)&&(delete a.b[b],a.c--,a.a.length>2*a.c&&pc(a))}function pc(a){if(a.c!=a.a.length){for(var b=0,c=0,d;b<a.a.length;){d=a.a[b];R(a.b,d)&&(a.a[c++]=d);b++}a.a.length=c}if(a.c!=a.a.length){var e={};for(c=b=0;b<a.a.length;)d=a.a[b],R(e,d)||(a.a[c++]=d,e[d]=1),b++;a.a.length=c}}g.get=function(a,b){return R(this.b,a)?this.b[a]:b};g.set=function(a,b){R(this.b,a)||(this.c++,this.a.push(a));this.b[a]=b};g.forEach=function(a,b){for(var c=this.K(),d=0;d<c.length;d++){var e=c[d],f=this.get(e);a.call(b,f,e,this)}};function R(a,b){return Object.prototype.hasOwnProperty.call(a,b)}var sc=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function tc(a,b){if(a){a=a.split("&");for(var c=0;c<a.length;c++){var d=a[c].indexOf("="),e=null;if(0<=d){var f=a[c].substring(0,d);e=a[c].substring(d+1)}else f=a[c];b(f,e?decodeURIComponent(e.replace(/\+/g," ")):"")}}}function S(a,b){this.b=this.j=this.f="";this.i=null;this.g=this.a="";this.h=!1;var c;a instanceof S?(this.h=void 0!==b?b:a.h,uc(this,a.f),this.j=a.j,vc(this,a.b),wc(this,a.i),this.a=a.a,xc(this,yc(a.c)),this.g=a.g):a&&(c=(a+"").match(sc))?(this.h=!!b,uc(this,c[1]||"",!0),this.j=zc(c[2]||""),vc(this,c[3]||"",!0),wc(this,c[4]),this.a=zc(c[5]||"",!0),xc(this,c[6]||"",!0),this.g=zc(c[7]||"")):(this.h=!!b,this.c=new Ac(null,this.h))}S.prototype.toString=function(){var a=[],b=this.f;b&&a.push(Bc(b,Cc,!0),":");var c=this.b;if(c||"file"==b)a.push("//"),(b=this.j)&&a.push(Bc(b,Cc,!0),"@"),a.push(encodeURIComponent(c+"").replace(/%25([0-9a-fA-F]{2})/g,"%$1")),c=this.i,null!=c&&a.push(":",c+"");if(c=this.a)this.b&&"/"!=c.charAt(0)&&a.push("/"),a.push(Bc(c,"/"==c.charAt(0)?Dc:Ec,!0));(c=this.c.toString())&&a.push("?",c);(c=this.g)&&a.push("#",Bc(c,Fc));return a.join("")};S.prototype.resolve=function(a){var b=N(this),c=!!a.f;c?uc(b,a.f):c=!!a.j;c?b.j=a.j:c=!!a.b;c?vc(b,a.b):c=null!=a.i;var d=a.a;if(c)wc(b,a.i);else if(c=!!a.a){if("/"!=d.charAt(0))if(this.b&&!this.a)d="/"+d;else{var e=b.a.lastIndexOf("/");-1!=e&&(d=b.a.substr(0,e+1)+d)}e=d;if(".."==e||"."==e)d="";else if(z(e,"./")||z(e,"/.")){d=0==e.lastIndexOf("/",0);e=e.split("/");for(var f=[],h=0,l;h<e.length;){l=e[h++];"."==l?d&&h==e.length&&f.push(""):".."==l?((1<f.length||1==f.length&&""!=f[0])&&f.pop(),d&&h==e.length&&f.push("")):(f.push(l),d=!0)}d=f.join("/")}else d=e}c?b.a=d:c=""!==a.c.toString();c?xc(b,yc(a.c)):c=!!a.g;c&&(b.g=a.g);return b};function N(a){return new S(a)}function uc(a,b,c){a.f=c?zc(b,!0):b;a.f&&(a.f=a.f.replace(/:$/,""))}function vc(a,b,c){a.b=c?zc(b,!0):b}function wc(a,b){if(b){b=+b;if(isNaN(b)||0>b)throw Error("Bad port number "+b);a.i=b}else a.i=null}function xc(a,b,c){b instanceof Ac?(a.c=b,Gc(a.c,a.h)):(c||(b=Bc(b,Hc)),a.c=new Ac(b,a.h))}function T(a,b,c){a.c.set(b,c)}function fc(a,b,c){q(c)||(c=[c+""]);Ic(a.c,b,c)}function bc(a){T(a,"zx",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^w()).toString(36));return a}function Jc(a){return a instanceof S?N(a):new S(a,void 0)}function Kc(a,b,c,d){var e=new S(null,void 0);a&&uc(e,a);b&&vc(e,b);c&&wc(e,c);d&&(e.a=d);return e}function zc(a,b){return a?b?decodeURI(a.replace(/%25/g,"%2525")):decodeURIComponent(a):""}function Bc(a,b,c){return m(a)?(a=encodeURI(a).replace(b,Lc),c&&(a=a.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),a):null}function Lc(a){a=a.charCodeAt(0);return"%"+(15&a>>4).toString(16)+(15&a).toString(16)}var Cc=/[#\/\?@]/g,Ec=/[#\?:]/g,Dc=/[#\?]/g,Hc=/[#\?@]/g,Fc=/#/g;function Ac(a,b){this.b=this.a=null;this.c=a||null;this.f=!!b}function U(a){a.a||(a.a=new Q,a.b=0,a.c&&tc(a.c,function(b,c){a.add(decodeURIComponent(b.replace(/\+/g," ")),c)}))}g=Ac.prototype;g.add=function(a,b){U(this);this.c=null;a=V(this,a);var c=this.a.get(a);c||this.a.set(a,c=[]);c.push(b);this.b+=1;return this};function Mc(a,b){U(a);b=V(a,b);R(a.a.b,b)&&(a.c=null,a.b-=a.a.get(b).length,rc(a.a,b))}function Nc(a,b){U(a);b=V(a,b);return R(a.a.b,b)}g.forEach=function(a,b){U(this);this.a.forEach(function(c,d){la(c,function(e){a.call(b,e,d,this)},this)},this)};g.K=function(){U(this);for(var a=this.a.C(),b=this.a.K(),c=[],d=0;d<b.length;d++)for(var e=a[d],f=0;f<e.length;f++)c.push(b[d]);return c};g.C=function(a){U(this);var b=[];if(m(a))Nc(this,a)&&(b=oa(b,this.a.get(V(this,a))));else{a=this.a.C();for(var c=0;c<a.length;c++)b=oa(b,a[c])}return b};g.set=function(a,b){U(this);this.c=null;a=V(this,a);Nc(this,a)&&(this.b-=this.a.get(a).length);this.a.set(a,[b]);this.b+=1;return this};g.get=function(a,b){if(!a)return b;a=this.C(a);return 0<a.length?a[0]+"":b};function Ic(a,b,c){Mc(a,b);0<c.length&&(a.c=null,a.a.set(V(a,b),pa(c)),a.b+=c.length)}g.toString=function(){if(this.c)return this.c;if(!this.a)return"";for(var a=[],b=this.a.K(),c=0;c<b.length;c++){var d=b[c],e=encodeURIComponent(d+"");d=this.C(d);for(var f=0,h;f<d.length;f++){h=e;""!==d[f]&&(h+="="+encodeURIComponent(d[f]+""));a.push(h)}}return this.c=a.join("&")};function yc(a){var b=new Ac;b.c=a.c;a.a&&(b.a=new Q(a.a),b.b=a.b);return b}function V(a,b){b=b+"";a.f&&(b=b.toLowerCase());return b}function Gc(a,b){b&&!a.f&&(U(a),a.c=null,a.a.forEach(function(c,d){var e=d.toLowerCase();d!=e&&(Mc(this,d),Ic(this,e,c))},a));a.f=b}function Qc(){}function Rc(){}x(Rc,Qc);function Sc(a){this.a=a;this.b=this.h=null;this.g=!1;this.i=null;this.c=-1;this.l=this.f=null}g=Sc.prototype;g.M=null;function Uc(a){var b=a.a.F.a;if(null!=b)K(4),b?(K(10),Vc(a.a,a,!1)):(K(11),Vc(a.a,a,!0));else{a.b=new M(a,void 0,void 0);a.b.h=a.h;b=a.a;b=Wc(b,b.Y()?a.f:null,a.i);K(4);fc(b,"TYPE","xmlhttp");var c=a.a.j,d=a.a.I;c&&d&&T(b,c,d);dc(a.b,b,!1,a.f)}}g.$=function(a){return this.a.$(a)};g.abort=function(){this.b&&(this.b.cancel(),this.b=null);this.c=-1};g.Da=function(){return!1};g.Ga=function(a,b){this.c=a.o;if(0==this.M){if(!this.a.o&&(a=a.a)){var c=hc(a,"X-Client-Wire-Protocol");this.l=c?c:null;this.a.j&&(a=hc(a,"X-HTTP-Session-Id"))&&(this.a.I=a)}if(b){try{var d=this.a.ja.a.parse(b)}catch(e){b=this.a;b.m=this.c;W(b,2);return}this.f=d[0]}else b=this.a,b.m=this.c,W(b,2)}else if(1==this.M)if(this.g)K(6);else if("11111"==b){if(K(5),this.g=!0,!B||10<=+Na)this.c=200,this.b.cancel(),K(11),Vc(this.a,this,!0)}else K(7),this.g=!1};g.na=function(){this.c=this.b.o;if(this.b.b)0==this.M?(this.M=1,Uc(this)):1==this.M&&(this.g?(K(11),Vc(this.a,this,!0)):(K(10),Vc(this.a,this,!1)));else{0==this.M?K(8):1==this.M&&K(9);var a=this.a;a.m=this.c;W(a,2)}};g.Y=function(){return this.a.Y()};g.ma=function(){return this.a.ma()};function Xc(){this.a=this.b=null}function Yc(){this.a=new Q}function Zc(a){var b=typeof a;return"object"==b&&a||"function"==b?"o"+(a[t]||(a[t]=++da)):b.charAt(0)+a}Yc.prototype.add=function(a){this.a.set(Zc(a),a)};Yc.prototype.C=function(){return this.a.C()};function $c(a,b){this.b=a;this.a=b}function ad(a){this.g=a||bd;k.PerformanceNavigationTiming?(a=k.performance.getEntriesByType("navigation"),a=0<a.length&&("hq"==a[0].nextHopProtocol||"h2"==a[0].nextHopProtocol)):a=!!(k.ka&&k.ka.Ea&&k.ka.Ea()&&k.ka.Ea().zb);this.f=a?this.g:1;this.a=null;1<this.f&&(this.a=new Yc);this.b=null;this.c=[]}var bd=10;function cd(a,b){!a.a&&(z(b,"spdy")||z(b,"quic")||z(b,"h2"))&&(a.f=a.g,a.a=new Yc,a.b&&(dd(a,a.b),a.b=null))}function ed(a){return a.b?!0:a.a?a.a.a.c>=a.f:!1}function fd(a){return a.b?1:a.a?a.a.a.c:0}function gd(a,b){a.b?a=a.b==b:a.a?(b=Zc(b),a=R(a.a.a.b,b)):a=!1;return a}function dd(a,b){a.a?a.a.add(b):a.b=b}function hd(a,b){if(a.b&&a.b==b)a.b=null;else{var c;if(c=a.a)c=Zc(b),c=R(a.a.a.b,c);c&&rc(a.a.a,Zc(b))}}ad.prototype.cancel=function(){this.c=id(this);this.b?(this.b.cancel(),this.b=null):this.a&&0!=this.a.a.c&&(la(this.a.C(),function(a){a.cancel()}),qc(this.a.a))};function id(a){if(null!=a.b)return a.c.concat(a.b.j);if(null!=a.a&&0!=a.a.a.c){var b=a.c;la(a.a.C(),function(c){b=b.concat(c.j)});return b}return pa(a.c)}function jd(){}jd.prototype.stringify=function(a){return k.JSON.stringify(a,void 0)};jd.prototype.parse=function(a){return k.JSON.parse(a,void 0)};function kd(){this.a=new jd}function ld(a,b,c){var d=c||"";try{oc(a,function(e,f){var h=e;r(e)&&(h=ob(e));b.push(d+f+"="+encodeURIComponent(h))})}catch(e){throw b.push(d+"type="+encodeURIComponent("_badmap")),e}}function md(a,b){var c=new Kb;if(k.Image){var d=new Image;d.onload=v(nd,c,d,"TestLoadImage: loaded",!0,b);d.onerror=v(nd,c,d,"TestLoadImage: error",!1,b);d.onabort=v(nd,c,d,"TestLoadImage: abort",!1,b);d.ontimeout=v(nd,c,d,"TestLoadImage: timeout",!1,b);k.setTimeout(function(){if(d.ontimeout)d.ontimeout()},1E4);d.src=a}else b(!1)}function nd(a,b,c,d,e){try{b.onload=null,b.onerror=null,b.onabort=null,b.ontimeout=null,e(d)}catch(f){}}var od=k.JSON.parse;function X(a){G.call(this);this.headers=new Q;this.H=a||null;this.b=!1;this.s=this.a=null;this.A="";this.h=0;this.f="";this.g=this.w=this.l=this.v=!1;this.o=0;this.m=null;this.I=pd;this.D=this.F=!1}x(X,G);var pd="",qd=/^https?$/i,rd=["POST","PUT"];g=X.prototype;g.ca=function(a,b,c,d){if(this.a)throw Error("[goog.net.XhrIo] Object is active with another request="+this.A+"; newUri="+a);b=b?b.toUpperCase():"GET";this.A=a;this.f="";this.h=0;this.v=!1;this.b=!0;this.a=new XMLHttpRequest;this.s=this.H?Sb(this.H):Sb(Wb);this.a.onreadystatechange=u(this.Fa,this);try{this.w=!0,this.a.open(b,a+"",!0),this.w=!1}catch(f){sd(this,f);return}a=c||"";var e=new Q(this.headers);d&&oc(d,function(f,h){e.set(h,f)});d=ma(e.K());c=k.FormData&&a instanceof k.FormData;!(0<=ja(rd,b))||d||c||e.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8");e.forEach(function(f,h){this.a.setRequestHeader(h,f)},this);this.I&&(this.a.responseType=this.I);"withCredentials"in this.a&&this.a.withCredentials!==this.F&&(this.a.withCredentials=this.F);try{td(this),0<this.o&&((this.D=ud(this.a))?(this.a.timeout=this.o,this.a.ontimeout=u(this.Ca,this)):this.m=Eb(this.Ca,this.o,this)),this.l=!0,this.a.send(a),this.l=!1}catch(f){sd(this,f)}};function ud(a){return B&&Ma(9)&&aa(a.timeout)&&void 0!==a.ontimeout}function na(a){return"content-type"==a.toLowerCase()}g.Ca=function(){"undefined"!=typeof goog&&this.a&&(this.f="Timed out after "+this.o+"ms, aborting",this.h=8,this.dispatchEvent("timeout"),this.abort(8))};function sd(a,b){a.b=!1;a.a&&(a.g=!0,a.a.abort(),a.g=!1);a.f=b;a.h=5;vd(a);wd(a)}function vd(a){a.v||(a.v=!0,a.dispatchEvent("complete"),a.dispatchEvent("error"))}g.abort=function(a){this.a&&this.b&&(this.b=!1,this.g=!0,this.a.abort(),this.g=!1,this.h=a||7,this.dispatchEvent("complete"),this.dispatchEvent("abort"),wd(this))};g.G=function(){this.a&&(this.b&&(this.b=!1,this.g=!0,this.a.abort(),this.g=!1),wd(this,!0));X.N.G.call(this)};g.Fa=function(){this.j||(this.w||this.l||this.g?xd(this):this.$a())};g.$a=function(){xd(this)};function xd(a){if(a.b&&"undefined"!=typeof goog&&(!a.s[1]||4!=O(a)||2!=a.T()))if(a.l&&4==O(a))Eb(a.Fa,0,a);else if(a.dispatchEvent("readystatechange"),4==O(a)){a.b=!1;try{var b=a.T();a:switch(b){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var c=!0;break a;default:c=!1;}var d;if(!(d=c)){var e;if(e=0===b){var f=(a.A+"").match(sc)[1]||null;if(!f&&k.self&&k.self.location){var h=k.self.location.protocol;f=h.substr(0,h.length-1)}e=!qd.test(f?f.toLowerCase():"")}d=e}d?(a.dispatchEvent("complete"),a.dispatchEvent("success")):(a.h=6,a.f=a.za()+" ["+a.T()+"]",vd(a))}finally{wd(a)}}}function wd(a,b){if(a.a){td(a);var c=a.a,d=a.s[0]?ba:null;a.a=null;a.s=null;b||a.dispatchEvent("ready");try{c.onreadystatechange=d}catch(e){}}}function td(a){a.a&&a.D&&(a.a.ontimeout=null);a.m&&(k.clearTimeout(a.m),a.m=null)}function O(a){return a.a?a.a.readyState:0}g.T=function(){try{return 2<O(this)?this.a.status:-1}catch(a){return-1}};g.za=function(){try{return 2<O(this)?this.a.statusText:""}catch(a){return""}};g.aa=function(){try{return this.a?this.a.responseText:""}catch(a){return""}};g.Va=function(a){if(this.a){var b=this.a.responseText;a&&0==b.indexOf(a)&&(b=b.substring(a.length));return od(b)}};function hc(a,b){return a.a?a.a.getResponseHeader(b):null}g.ya=function(){return this.h};g.Ya=function(){return m(this.f)?this.f:this.f+""};function yd(a){var b="";va(a,function(c,d){b+=d;b+=":";b+=c;b+="\r\n"});return b}function zd(a,b,c){a:{for(d in c){var d=!1;break a}d=!0}if(d)return a;c=yd(c);if(m(a)){b=encodeURIComponent(b+"");c=null!=c?"="+encodeURIComponent(c+""):"";if(b+=c){c=a.indexOf("#");0>c&&(c=a.length);d=a.indexOf("?");if(0>d||d>c){d=c;var e=""}else e=a.substring(d+1,c);a=[a.substr(0,d),e,a.substr(c)];c=a[1];a[1]=b?c?c+"&"+b:b:c;a=a[0]+(a[1]?"?"+a[1]:"")+a[2]}return a}T(a,b,c);return a}function Ad(a){this.f=[];this.F=new Xc;this.ga=this.pa=this.B=this.ha=this.a=this.I=this.j=this.V=this.g=this.J=this.i=null;this.Ra=this.P=0;this.Pa=!!n("internalChannelParams.failFast",a);this.ia=this.w=this.s=this.l=this.h=this.c=null;this.oa=!0;this.m=this.ra=this.O=-1;this.S=this.v=this.A=0;this.Oa=n("internalChannelParams.baseRetryDelayMs",a)||5E3;this.Sa=n("internalChannelParams.retryDelaySeedMs",a)||1E4;this.Qa=n("internalChannelParams.forwardChannelMaxRetries",a)||2;this.qa=n("internalChannelParams.forwardChannelRequestTimeoutMs",a)||2E4;this.La=a&&a.Ab||void 0;this.D=void 0;this.R=a&&a.supportsCrossDomainXhr||!1;this.H="";this.b=new ad(a&&a.concurrentRequestLimit);this.ja=new kd;this.o=a&&void 0!==a.backgroundChannelTest?a.backgroundChannelTest:!0;(this.W=a&&a.fastHandshake||!1)&&!this.o&&(this.o=!0);a&&a.forceLongPolling&&(this.oa=!1);this.fa=void 0}g=Ad.prototype;g.wa=8;g.u=1;function Bd(a){Cd(a);if(3==a.u){var b=a.P++,c=N(a.B);T(c,"SID",a.H);T(c,"RID",b);T(c,"TYPE","terminate");Dd(a,c);b=new M(a,b,void 0);b.F=2;b.f=bc(N(c));c=!1;k.navigator&&k.navigator.sendBeacon&&(c=k.navigator.sendBeacon(b.f.toString(),""));!c&&k.Image&&(new Image().src=b.f,c=!0);c||(b.a=b.g.$(null),b.a.ca(b.f));b.v=w();ec(b)}Ed(a)}function Cd(a){a.w&&(a.w.abort(),a.w=null);a.a&&(a.a.cancel(),a.a=null);a.l&&(k.clearTimeout(a.l),a.l=null);Fd(a);a.b.cancel();a.h&&(aa(a.h)&&k.clearTimeout(a.h),a.h=null)}function Gd(a,b){a.f.push(new $c(a.Ra++,b));3==a.u&&Hd(a)}g.Da=function(){return 0==this.u};function Hd(a){ed(a.b)||a.h||(a.h=!0,wb(a.Ia,a),a.A=0)}function Id(a,b){if(fd(a.b)>=a.b.f-(a.h?1:0))return!1;if(a.h)return a.f=b.j.concat(a.f),!0;if(1==a.u||2==a.u||a.A>=(a.Pa?0:a.Qa))return!1;a.h=Ob(u(a.Ia,a,b),Jd(a,a.A));a.A++;return!0}g.Ia=function(a){if(this.h)if(this.h=null,1==this.u){if(!a){this.P=Math.floor(1E5*Math.random());a=this.P++;var b=new M(this,a,void 0),c=this.i;this.J&&(c?(c=wa(c),ya(c,this.J)):c=this.J);null===this.g&&(b.h=c);var d;if(this.W)a:{for(var e=d=0;e<this.f.length;e++){b:{var f=this.f[e];if("__data__"in f.a&&(f=f.a.__data__,m(f))){f=f.length;break b}f=void 0}if(void 0===f)break;d+=f;if(4096<d){d=e;break a}if(4096===d||e===this.f.length-1){d=e+1;break a}}d=1E3}else d=1E3;d=Kd(this,b,d);e=N(this.B);T(e,"RID",a);T(e,"CVER",22);this.o&&this.j&&T(e,"X-HTTP-Session-Id",this.j);Dd(this,e);this.g&&c&&zd(e,this.g,c);dd(this.b,b);this.W?(T(e,"$req",d),T(e,"SID","null"),b.S=!0,ac(b,e,null)):ac(b,e,d);this.u=2}}else 3==this.u&&(a?Ld(this,a):0==this.f.length||ed(this.b)||Ld(this))};function Ld(a,b){var c;b?c=b.W:c=a.P++;var d=N(a.B);T(d,"SID",a.H);T(d,"RID",c);T(d,"AID",a.O);Dd(a,d);a.g&&a.i&&zd(d,a.g,a.i);c=new M(a,c,a.A+1);null===a.g&&(c.h=a.i);b&&(a.f=b.j.concat(a.f));b=Kd(a,c,1E3);c.setTimeout(Math.round(.5*a.qa)+Math.round(.5*a.qa*Math.random()));dd(a.b,c);ac(c,d,b)}function Dd(a,b){a.c&&oc({},function(c,d){T(b,d,c)})}function Kd(a,b,c){c=Math.min(a.f.length,c);var d=a.c?u(a.c.Ta,a.c,a):null;a:for(var e=a.f,f=-1,h;;){h=["count="+c];-1==f?0<c?(f=e[0].b,h.push("ofs="+f)):f=0:h.push("ofs="+f);for(var l=!0,F=0;F<c;F++){var Bb=e[F].b,Tc=e[F].a;Bb-=f;if(0>Bb)f=Math.max(0,e[F].b-100),l=!1;else try{ld(Tc,h,"req"+Bb+"_")}catch(Ud){d&&d(Tc)}}if(l){d=h.join("&");break a}}a=a.f.splice(0,c);b.j=a;return d}function Md(a){a.a||a.l||(a.S=1,wb(a.Ha,a),a.v=0)}function Nd(a){if(a.a||a.l||3<=a.v)return!1;a.S++;a.l=Ob(u(a.Ha,a),Jd(a,a.v));a.v++;return!0}g.Ha=function(){this.l=null;this.a=new M(this,"rpc",this.S);null===this.g&&(this.a.h=this.i);this.a.J=0;var a=N(this.pa);T(a,"RID","rpc");T(a,"SID",this.H);T(a,"CI",this.ia?"0":"1");T(a,"AID",this.O);Dd(this,a);T(a,"TYPE","xmlhttp");this.g&&this.i&&zd(a,this.g,this.i);this.D&&this.a.setTimeout(this.D);dc(this.a,a,!0,this.ga)};function Vc(a,b,c){var d=b.l;d&&cd(a.b,d);a.ia=a.oa&&c;a.m=b.c;a.B=Wc(a,null,a.ha);Hd(a)}g.Ga=function(a,b){if(0!=this.u&&(this.a==a||gd(this.b,a)))if(this.m=a.o,!a.s&&gd(this.b,a)&&3==this.u){try{var c=this.ja.a.parse(b)}catch(f){c=null}if(q(c)&&3==c.length){b=c;if(0==b[0])a:{if(!this.l){if(this.a)if(this.a.v+3E3<a.v)Fd(this),this.a.cancel(),this.a=null;else break a;Nd(this);K(18)}}else this.ra=b[1],0<this.ra-this.O&&37500>b[2]&&this.ia&&0==this.v&&!this.s&&(this.s=Ob(u(this.Za,this),6E3));if(1>=fd(this.b)&&this.fa){try{this.fa()}catch(f){}this.fa=void 0}}else W(this,11)}else if((a.s||this.a==a)&&Fd(this),!qa(b))for(b=c=this.ja.a.parse(b),c=0;c<b.length;c++){var d=b[c];this.O=d[0];d=d[1];if(2==this.u){if("c"==d[0]){this.H=d[1];this.ga=d[2];var e=d[3];null!=e&&(this.wa=e);d=d[5];null!=d&&aa(d)&&0<d&&(this.D=1.5*d);this.o&&(d=a.a)&&((e=hc(d,"X-Client-Wire-Protocol"))&&cd(this.b,e),this.j&&(d=hc(d,"X-HTTP-Session-Id")))&&(this.I=d,T(this.B,this.j,d));this.u=3;this.c&&this.c.va();d=a;this.pa=Wc(this,this.Y()?this.ga:null,this.ha);d.s?(hd(this.b,d),(e=this.D)&&d.setTimeout(e),d.i&&(gc(d),ec(d)),this.a=d):Md(this);0<this.f.length&&Hd(this)}else"stop"!=d[0]&&"close"!=d[0]||W(this,7)}else 3==this.u&&("stop"==d[0]||"close"==d[0]?"stop"==d[0]?W(this,7):Bd(this):"noop"!=d[0]&&this.c&&this.c.ua(d),this.v=0)}};g.Za=function(){null!=this.s&&(this.s=null,this.a.cancel(),this.a=null,Nd(this),K(19))};function Fd(a){null!=a.s&&(k.clearTimeout(a.s),a.s=null)}g.na=function(a){var b=null;if(this.a==a){Fd(this);this.a=null;var c=2}else if(gd(this.b,a))b=a.j,hd(this.b,a),c=1;else return;this.m=a.o;if(0!=this.u)if(a.b)1==c?(b=w()-a.v,I.dispatchEvent(new Nb(I,a.l?a.l.length:0,b,this.A)),Hd(this)):Md(this);else{var d=a.c;if(3==d||0==d&&0<this.m||!(1==c&&Id(this,a)||2==c&&Nd(this)))switch(b&&0<b.length&&(a=this.b,a.c=a.c.concat(b)),d){case 1:W(this,5);break;case 4:W(this,10);break;case 3:W(this,6);break;default:W(this,2);}}};function Jd(a,b){var c=a.Oa+Math.floor(Math.random()*a.Sa);a.ma()||(c*=2);return c*b}function W(a,b){if(2==b){var c=null;a.c&&(c=null);var d=u(a.fb,a);c||(c=new S("//www.google.com/images/cleardot.gif"),k.location&&"http"==k.location.protocol||uc(c,"https"),bc(c));md(c.toString(),d)}else K(2);a.u=0;a.c&&a.c.ta(b);Ed(a);Cd(a)}g.fb=function(a){a?K(2):K(1)};function Ed(a){a.u=0;a.m=-1;if(a.c){if(0!=id(a.b).length||0!=a.f.length)a.b.c.length=0,pa(a.f),a.f.length=0;a.c.sa()}}function Wc(a,b,c){var d=Jc(c);if(""!=d.b)b&&vc(d,b+"."+d.b),wc(d,d.i);else{var e=k.location,f;b?f=b+"."+e.hostname:f=e.hostname;d=Kc(e.protocol,f,+e.port,c)}a.V&&va(a.V,function(h,l){T(d,l,h)});b=a.j;c=a.I;b&&c&&T(d,b,c);T(d,"VER",a.wa);Dd(a,d);return d}g.$=function(a){if(a&&!this.R)throw Error("Can't create secondary domain capable XhrIo object.");a=new X(this.La);a.F=this.R;return a};g.ma=function(){return!!this.c&&!0};g.Y=function(){return this.R};function Od(){}g=Od.prototype;g.va=function(){};g.ua=function(){};g.ta=function(){};g.sa=function(){};g.Ta=function(){};function Pd(a){for(var b=arguments[0],c=1,d;c<arguments.length;c++){d=arguments[c];if(0==d.lastIndexOf("/",0))b=d;else{var e;(e=""==b)||(e=b.length-1,e=0<=e&&b.indexOf("/",e)==e);e?b+=d:b+="/"+d}}return b}function Qd(){if(B&&!(10<=+Na))throw Error("Environmental error: no available transport.")}Qd.prototype.a=function(a,b){return new Y(a,b)};function Y(a,b){G.call(this);this.a=new Ad(b);this.g=a;this.m=b&&b.testUrl?b.testUrl:Pd(this.g,"test");this.b=b&&b.messageUrlParams||null;a=b&&b.messageHeaders||null;b&&b.clientProtocolHeaderRequired&&(a?a["X-Client-Protocol"]="webchannel":a={"X-Client-Protocol":"webchannel"});this.a.i=a;a=b&&b.initMessageHeaders||null;b&&b.messageContentType&&(a?a["X-WebChannel-Content-Type"]=b.messageContentType:a={"X-WebChannel-Content-Type":b.messageContentType});b&&b.xa&&(a?a["X-WebChannel-Client-Profile"]=b.xa:a={"X-WebChannel-Client-Profile":b.xa});this.a.J=a;(a=b&&b.httpHeadersOverwriteParam)&&!qa(a)&&(this.a.g=a);this.l=b&&b.supportsCrossDomainXhr||!1;this.h=b&&b.sendRawJson||!1;(b=b&&b.httpSessionIdParam)&&!qa(b)&&(this.a.j=b,a=this.b,null!==a&&b in a&&(a=this.b,b in a&&delete a[b]));this.f=new Z(this)}x(Y,G);g=Y.prototype;g.addEventListener=function(a,b,c,d){Y.N.addEventListener.call(this,a,b,c,d)};g.removeEventListener=function(a,b,c,d){Y.N.removeEventListener.call(this,a,b,c,d)};g.Wa=function(){this.a.c=this.f;this.l&&(this.a.R=!0);var a=this.a,b=this.m,c=this.g,d=this.b||void 0;K(0);a.ha=c;a.V=d||{};a.o&&(a.F.b=[],a.F.a=!1);a.w=new Sc(a);null===a.g&&(a.w.h=a.i);c=b;a.g&&a.i&&(c=zd(b,a.g,a.i));a=a.w;a.i=c;b=Wc(a.a,null,a.i);K(3);c=a.a.F.b;null!=c?(a.f=c[0],a.M=1,Uc(a)):(fc(b,"MODE","init"),!a.a.o&&a.a.j&&fc(b,"X-HTTP-Session-Id",a.a.j),a.b=new M(a,void 0,void 0),a.b.h=a.h,dc(a.b,b,!1,null),a.M=0)};g.close=function(){Bd(this.a)};g.Xa=function(a){if(m(a)){var b={__data__:a};Gd(this.a,b)}else this.h?(b={},b.__data__=ob(a),Gd(this.a,b)):Gd(this.a,a)};g.G=function(){this.a.c=null;delete this.f;Bd(this.a);delete this.a;Y.N.G.call(this)};function Rd(a){Ub.call(this);var b=a.__sm__;if(b){a:{for(var c in b){a=c;break a}a=void 0}(this.c=a)?(a=this.c,this.data=null!==b&&a in b?b[a]:void 0):this.data=b}else this.data=a}x(Rd,Ub);function Sd(){Vb.call(this);this.status=1}x(Sd,Vb);function Z(a){this.a=a}x(Z,Od);Z.prototype.va=function(){this.a.dispatchEvent("a")};Z.prototype.ua=function(a){this.a.dispatchEvent(new Rd(a))};Z.prototype.ta=function(a){this.a.dispatchEvent(new Sd(a))};Z.prototype.sa=function(){this.a.dispatchEvent("b")};var Td=v(function(a,b){function c(){}c.prototype=a.prototype;var d=new c;a.apply(d,Array.prototype.slice.call(arguments,1));return d},Qd);/*
        Copyright 2017 Google Inc.
        Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at
        http://www.apache.org/licenses/LICENSE-2.0
        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
        */Qd.prototype.createWebChannel=Qd.prototype.a;Y.prototype.send=Y.prototype.Xa;Y.prototype.open=Y.prototype.Wa;Y.prototype.close=Y.prototype.close;Pb.NO_ERROR=0;Pb.TIMEOUT=8;Pb.HTTP_ERROR=6;Qb.COMPLETE="complete";Tb.EventType=L;L.OPEN="a";L.CLOSE="b";L.ERROR="c";L.MESSAGE="d";G.prototype.listen=G.prototype.Aa;X.prototype.listenOnce=X.prototype.Ba;X.prototype.getLastError=X.prototype.Ya;X.prototype.getLastErrorCode=X.prototype.ya;X.prototype.getStatus=X.prototype.T;X.prototype.getStatusText=X.prototype.za;X.prototype.getResponseJson=X.prototype.Va;X.prototype.getResponseText=X.prototype.aa;X.prototype.send=X.prototype.ca;var tmp={createWebChannelTransport:Td,ErrorCode:Pb,EventType:Qb,WebChannel:Tb,XhrIo:X};_exports.$indexEsmDefault$1=tmp;var tmp_1=tmp.createWebChannelTransport;_exports.createWebChannelTransport=tmp_1;var tmp_2=tmp.ErrorCode;_exports.ErrorCode=tmp_2;var tmp_3=tmp.EventType;_exports.EventType=tmp_3;var tmp_4=tmp.WebChannel;_exports.WebChannel=tmp_4;var tmp_5=tmp.XhrIo;_exports.XhrIo=tmp_5;var index_esm$2={default:tmp,ErrorCode:tmp_2,EventType:tmp_3,WebChannel:tmp_4,XhrIo:tmp_5,createWebChannelTransport:tmp_1};_exports.$indexEsm$4=index_esm$2;var SDK_VERSION=firebase.SDK_VERSION,logClient=new Logger("@firebase/firestore"),LogLevel$1;/**
                                         * @license
                                         * Copyright 2017 Google Inc.
                                         *
                                         * Licensed under the Apache License, Version 2.0 (the "License");
                                         * you may not use this file except in compliance with the License.
                                         * You may obtain a copy of the License at
                                         *
                                         *   http://www.apache.org/licenses/LICENSE-2.0
                                         *
                                         * Unless required by applicable law or agreed to in writing, software
                                         * distributed under the License is distributed on an "AS IS" BASIS,
                                         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                         * See the License for the specific language governing permissions and
                                         * limitations under the License.
                                         */(function(LogLevel){LogLevel[LogLevel.DEBUG=0]="DEBUG";LogLevel[LogLevel.ERROR=1]="ERROR";LogLevel[LogLevel.SILENT=2]="SILENT"})(LogLevel$1||(LogLevel$1={}));// Helper methods are needed because variables can't be exported as read/write
function getLogLevel(){if(logClient.logLevel===LogLevel.DEBUG){return LogLevel$1.DEBUG}else if(logClient.logLevel===LogLevel.SILENT){return LogLevel$1.SILENT}else{return LogLevel$1.ERROR}}function setLogLevel$1(newLevel){/**
   * Map the new log level to the associated Firebase Log Level
   */switch(newLevel){case LogLevel$1.DEBUG:logClient.logLevel=LogLevel.DEBUG;break;case LogLevel$1.ERROR:logClient.logLevel=LogLevel.ERROR;break;case LogLevel$1.SILENT:logClient.logLevel=LogLevel.SILENT;break;default:logClient.error("Firestore ("+SDK_VERSION+"): Invalid value passed to `setLogLevel`");}}function debug(tag,msg){for(var obj=[],_i=2;_i<arguments.length;_i++){obj[_i-2]=arguments[_i]}if(logClient.logLevel<=LogLevel.DEBUG){var args=obj.map(argToString);logClient.debug.apply(logClient,["Firestore ("+SDK_VERSION+") ["+tag+"]: "+msg].concat(args))}}function error(msg){for(var obj=[],_i=1;_i<arguments.length;_i++){obj[_i-1]=arguments[_i]}if(logClient.logLevel<=LogLevel.ERROR){var args=obj.map(argToString);logClient.error.apply(logClient,["Firestore ("+SDK_VERSION+"): "+msg].concat(args))}}/**
   * Converts an additional log parameter to a string representation.
   */function argToString(obj){if("string"===typeof obj){return obj}else{var platform=PlatformSupport.getPlatform();try{return platform.formatJSON(obj)}catch(e){// Converting to JSON failed, just log the object directly
return obj}}}/**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */ /**
       * Unconditionally fails, throwing an Error with the given message.
       *
       * Returns any so it can be used in expressions:
       * @example
       * let futureVar = fail('not implemented yet');
       */function fail(failure){// Log the failure in addition to throw an exception, just in case the
// exception is swallowed.
var message="FIRESTORE ("+SDK_VERSION+") INTERNAL ASSERTION FAILED: "+failure;error(message);// NOTE: We don't use FirestoreError here because these are internal failures
// that cannot be handled by the user. (Also it would create a circular
// dependency between the error and assert modules which doesn't work.)
throw new Error(message)}/**
   * Fails if the given assertion condition is false, throwing an Error with the
   * given message if it did.
   */function assert$1(assertion,message){if(!assertion){fail(message)}}/**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */ /**
       * Provides singleton helpers where setup code can inject a platform at runtime.
       * setPlatform needs to be set before Firestore is used and must be set exactly
       * once.
       */var PlatformSupport=/** @class */function(){function PlatformSupport(){}PlatformSupport.setPlatform=function(platform){if(PlatformSupport.platform){fail("Platform already defined")}PlatformSupport.platform=platform};PlatformSupport.getPlatform=function(){if(!PlatformSupport.platform){fail("Platform not set")}return PlatformSupport.platform};return PlatformSupport}();/**
      * Returns the representation of an empty "proto" byte string for the
      * platform.
      */function emptyByteString(){return PlatformSupport.getPlatform().emptyByteString}/**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */ // TODO(mcg): Change to a string enum once we've upgraded to typescript 2.4.
//  tslint:disable-next-line:variable-name Intended to look like a TS 2.4 enum
var Code={// Causes are copied from:
// https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
/** Not an error; returned on success. */OK:"ok",/** The operation was cancelled (typically by the caller). */CANCELLED:"cancelled",/** Unknown error or an error from a different error domain. */UNKNOWN:"unknown",/**
   * Client specified an invalid argument. Note that this differs from
   * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are
   * problematic regardless of the state of the system (e.g., a malformed file
   * name).
   */INVALID_ARGUMENT:"invalid-argument",/**
   * Deadline expired before operation could complete. For operations that
   * change the state of the system, this error may be returned even if the
   * operation has completed successfully. For example, a successful response
   * from a server could have been delayed long enough for the deadline to
   * expire.
   */DEADLINE_EXCEEDED:"deadline-exceeded",/** Some requested entity (e.g., file or directory) was not found. */NOT_FOUND:"not-found",/**
   * Some entity that we attempted to create (e.g., file or directory) already
   * exists.
   */ALREADY_EXISTS:"already-exists",/**
   * The caller does not have permission to execute the specified operation.
   * PERMISSION_DENIED must not be used for rejections caused by exhausting
   * some resource (use RESOURCE_EXHAUSTED instead for those errors).
   * PERMISSION_DENIED must not be used if the caller can not be identified
   * (use UNAUTHENTICATED instead for those errors).
   */PERMISSION_DENIED:"permission-denied",/**
   * The request does not have valid authentication credentials for the
   * operation.
   */UNAUTHENTICATED:"unauthenticated",/**
   * Some resource has been exhausted, perhaps a per-user quota, or perhaps the
   * entire file system is out of space.
   */RESOURCE_EXHAUSTED:"resource-exhausted",/**
   * Operation was rejected because the system is not in a state required for
   * the operation's execution. For example, directory to be deleted may be
   * non-empty, an rmdir operation is applied to a non-directory, etc.
   *
   * A litmus test that may help a service implementor in deciding
   * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
   *  (a) Use UNAVAILABLE if the client can retry just the failing call.
   *  (b) Use ABORTED if the client should retry at a higher-level
   *      (e.g., restarting a read-modify-write sequence).
   *  (c) Use FAILED_PRECONDITION if the client should not retry until
   *      the system state has been explicitly fixed. E.g., if an "rmdir"
   *      fails because the directory is non-empty, FAILED_PRECONDITION
   *      should be returned since the client should not retry unless
   *      they have first fixed up the directory by deleting files from it.
   *  (d) Use FAILED_PRECONDITION if the client performs conditional
   *      REST Get/Update/Delete on a resource and the resource on the
   *      server does not match the condition. E.g., conflicting
   *      read-modify-write on the same resource.
   */FAILED_PRECONDITION:"failed-precondition",/**
   * The operation was aborted, typically due to a concurrency issue like
   * sequencer check failures, transaction aborts, etc.
   *
   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
   * and UNAVAILABLE.
   */ABORTED:"aborted",/**
   * Operation was attempted past the valid range. E.g., seeking or reading
   * past end of file.
   *
   * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed
   * if the system state changes. For example, a 32-bit file system will
   * generate INVALID_ARGUMENT if asked to read at an offset that is not in the
   * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from
   * an offset past the current file size.
   *
   * There is a fair bit of overlap between FAILED_PRECONDITION and
   * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)
   * when it applies so that callers who are iterating through a space can
   * easily look for an OUT_OF_RANGE error to detect when they are done.
   */OUT_OF_RANGE:"out-of-range",/** Operation is not implemented or not supported/enabled in this service. */UNIMPLEMENTED:"unimplemented",/**
   * Internal errors. Means some invariants expected by underlying System has
   * been broken. If you see one of these errors, Something is very broken.
   */INTERNAL:"internal",/**
   * The service is currently unavailable. This is a most likely a transient
   * condition and may be corrected by retrying with a backoff.
   *
   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
   * and UNAVAILABLE.
   */UNAVAILABLE:"unavailable",/** Unrecoverable data loss or corruption. */DATA_LOSS:"data-loss"},FirestoreError=/** @class */function(_super){__extends(FirestoreError,_super);function FirestoreError(code,message){var _this=_super.call(this,message)||this;_this.code=code;_this.message=message;_this.name="FirebaseError";// HACK: We write a toString property directly because Error is not a real
// class and so inheritance does not work correctly. We could alternatively
// do the same "back-door inheritance" trick that FirebaseError does.
_this.toString=function(){return _this.name+": [code="+_this.code+"]: "+_this.message};return _this}return FirestoreError}(Error);/**
    * An error class used for Firestore-generated errors. Ideally we should be
    * using FirebaseError, but integrating with it is overly arduous at the moment,
    * so we define our own compatible error class (with a `name` of 'FirebaseError'
    * and compatible `code` and `message` fields.)
    */ /**
           * @license
           * Copyright 2017 Google Inc.
           *
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           *   http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           */ /**
               * Helper function to prevent instantiation through the constructor.
               *
               * This method creates a new constructor that throws when it's invoked.
               * The prototype of that constructor is then set to the prototype of the hidden
               * "class" to expose all the prototype methods and allow for instanceof
               * checks.
               *
               * To also make all the static methods available, all properties of the
               * original constructor are copied to the new constructor.
               */function makeConstructorPrivate(cls,optionalMessage){function PublicConstructor(){var error="This constructor is private.";if(optionalMessage){error+=" ";error+=optionalMessage}throw new FirestoreError(Code.INVALID_ARGUMENT,error)}// Make sure instanceof checks work and all methods are exposed on the public
// constructor
PublicConstructor.prototype=cls.prototype;// Copy any static methods/members
for(var staticProperty in cls){if(cls.hasOwnProperty(staticProperty)){PublicConstructor[staticProperty]=cls[staticProperty]}}return PublicConstructor}/**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */function contains$2(obj,key){return Object.prototype.hasOwnProperty.call(obj,key)}/** Returns the given value if it's defined or the defaultValue otherwise. */function defaulted(value,defaultValue){return value!==void 0?value:defaultValue}function forEachNumber(obj,fn){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){var num=+key;if(!isNaN(num)){fn(num,obj[key])}}}}function values(obj){var vs=[];forEach$1(obj,function(_,v){return vs.push(v)});return vs}function forEach$1(obj,fn){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){fn(key,obj[key])}}}function isEmpty$1(obj){assert$1(null!=obj&&"object"===typeof obj,"isEmpty() expects object parameter.");for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){return!1}}return!0}function shallowCopy(obj){assert$1(obj&&"object"===typeof obj,"shallowCopy() expects object parameter.");var result={};for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){result[key]=obj[key]}}return result}/**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */ /**
       * Validates that no arguments were passed in the invocation of functionName.
       *
       * Forward the magic "arguments" variable as second parameter on which the
       * parameter validation is performed:
       * validateNoArgs('myFunction', arguments);
       */function validateNoArgs(functionName,args){if(0!==args.length){throw new FirestoreError(Code.INVALID_ARGUMENT,"Function "+functionName+"() does not support arguments, "+"but was called with "+formatPlural(args.length,"argument")+".")}}/**
   * Validates the invocation of functionName has the exact number of arguments.
   *
   * Forward the magic "arguments" variable as second parameter on which the
   * parameter validation is performed:
   * validateExactNumberOfArgs('myFunction', arguments, 2);
   */function validateExactNumberOfArgs(functionName,args,numberOfArgs){if(args.length!==numberOfArgs){throw new FirestoreError(Code.INVALID_ARGUMENT,"Function "+functionName+"() requires "+formatPlural(numberOfArgs,"argument")+", but was called with "+formatPlural(args.length,"argument")+".")}}/**
   * Validates the invocation of functionName has at least the provided number of
   * arguments (but can have many more).
   *
   * Forward the magic "arguments" variable as second parameter on which the
   * parameter validation is performed:
   * validateAtLeastNumberOfArgs('myFunction', arguments, 2);
   */function validateAtLeastNumberOfArgs(functionName,args,minNumberOfArgs){if(args.length<minNumberOfArgs){throw new FirestoreError(Code.INVALID_ARGUMENT,"Function "+functionName+"() requires at least "+formatPlural(minNumberOfArgs,"argument")+", but was called with "+formatPlural(args.length,"argument")+".")}}/**
   * Validates the invocation of functionName has number of arguments between
   * the values provided.
   *
   * Forward the magic "arguments" variable as second parameter on which the
   * parameter validation is performed:
   * validateBetweenNumberOfArgs('myFunction', arguments, 2, 3);
   */function validateBetweenNumberOfArgs(functionName,args,minNumberOfArgs,maxNumberOfArgs){if(args.length<minNumberOfArgs||args.length>maxNumberOfArgs){throw new FirestoreError(Code.INVALID_ARGUMENT,"Function "+functionName+"() requires between "+minNumberOfArgs+" and "+(maxNumberOfArgs+" arguments, but was called with ")+formatPlural(args.length,"argument")+".")}}/**
   * Validates the provided argument is an array and has as least the expected
   * number of elements.
   */function validateNamedArrayAtLeastNumberOfElements(functionName,value,name,minNumberOfElements){if(!(value instanceof Array)||value.length<minNumberOfElements){throw new FirestoreError(Code.INVALID_ARGUMENT,"Function "+functionName+"() requires its "+name+" argument to be an "+"array with at least "+(formatPlural(minNumberOfElements,"element")+"."))}}/**
   * Validates the provided positional argument has the native JavaScript type
   * using typeof checks.
   */function validateArgType(functionName,type,position,argument){validateType(functionName,type,ordinal(position)+" argument",argument)}/**
   * Validates the provided argument has the native JavaScript type using
   * typeof checks or is undefined.
   */function validateOptionalArgType(functionName,type,position,argument){if(argument!==void 0){validateArgType(functionName,type,position,argument)}}/**
   * Validates the provided named option has the native JavaScript type using
   * typeof checks.
   */function validateNamedType(functionName,type,optionName,argument){validateType(functionName,type,optionName+" option",argument)}/**
   * Validates the provided named option has the native JavaScript type using
   * typeof checks or is undefined.
   */function validateNamedOptionalType(functionName,type,optionName,argument){if(argument!==void 0){validateNamedType(functionName,type,optionName,argument)}}function validateArrayElements(functionName,optionName,typeDescription,argument,validator){if(!(argument instanceof Array)){throw new FirestoreError(Code.INVALID_ARGUMENT,"Function "+functionName+"() requires its "+optionName+" "+("option to be an array, but it was: "+valueDescription(argument)))}for(var i=0;i<argument.length;++i){if(!validator(argument[i])){throw new FirestoreError(Code.INVALID_ARGUMENT,"Function "+functionName+"() requires all "+optionName+" "+("elements to be "+typeDescription+", but the value at index "+i+" ")+("was: "+valueDescription(argument[i])))}}}function validateOptionalArrayElements(functionName,optionName,typeDescription,argument,validator){if(argument!==void 0){validateArrayElements(functionName,optionName,typeDescription,argument,validator)}}/**
   * Validates that the provided named option equals one of the expected values.
   */function validateNamedPropertyEquals(functionName,inputName,optionName,input,expected){for(var expectedDescription=[],_i=0,expected_1=expected,val;_i<expected_1.length;_i++){val=expected_1[_i];if(val===input){return}expectedDescription.push(valueDescription(val))}var actualDescription=valueDescription(input);throw new FirestoreError(Code.INVALID_ARGUMENT,"Invalid value "+actualDescription+" provided to function "+functionName+"() for option "+("\""+optionName+"\". Acceptable values: "+expectedDescription.join(", ")))}/**
   * Validates that the provided named option equals one of the expected values or
   * is undefined.
   */function validateNamedOptionalPropertyEquals(functionName,inputName,optionName,input,expected){if(input!==void 0){validateNamedPropertyEquals(functionName,inputName,optionName,input,expected)}}/**
   * Validates that the provided argument is a valid enum.
   *
   * @param functionName Function making the validation call.
   * @param enums Array containing all possible values for the enum.
   * @param position Position of the argument in `functionName`.
   * @param argument Arugment to validate.
   */function validateStringEnum(functionName,enums,position,argument){if(!enums.some(function(element){return element===argument})){throw new FirestoreError(Code.INVALID_ARGUMENT,"Invalid value "+valueDescription(argument)+" provided to function "+(functionName+"() for its "+ordinal(position)+" argument. Acceptable ")+("values: "+enums.join(", ")))}}/** Helper to validate the type of a provided input. */function validateType(functionName,type,inputName,input){var valid=!1;if("object"===type){valid=isPlainObject(input)}else if("non-empty string"===type){valid="string"===typeof input&&""!==input}else{valid=typeof input===type}if(!valid){var description=valueDescription(input);throw new FirestoreError(Code.INVALID_ARGUMENT,"Function "+functionName+"() requires its "+inputName+" "+("to be of type "+type+", but it was: "+description))}}/**
   * Returns true if it's a non-null object without a custom prototype
   * (i.e. excludes Array, Date, etc.).
   */function isPlainObject(input){return"object"===typeof input&&null!==input&&(Object.getPrototypeOf(input)===Object.prototype||null===Object.getPrototypeOf(input))}/** Returns a string describing the type / value of the provided input. */function valueDescription(input){if(input===void 0){return"undefined"}else if(null===input){return"null"}else if("string"===typeof input){if(20<input.length){input=input.substring(0,20)+"..."}return JSON.stringify(input)}else if("number"===typeof input||"boolean"===typeof input){return""+input}else if("object"===typeof input){if(input instanceof Array){return"an array"}else{var customObjectName=tryGetCustomObjectType(input);if(customObjectName){return"a custom "+customObjectName+" object"}else{return"an object"}}}else if("function"===typeof input){return"a function"}else{return fail("Unknown wrong type: "+typeof input)}}/** Hacky method to try to get the constructor name for an object. */function tryGetCustomObjectType(input){if(input.constructor){var funcNameRegex=/function\s+([^\s(]+)\s*\(/,results=funcNameRegex.exec(input.constructor.toString());if(results&&1<results.length){return results[1]}}return null}/** Validates the provided argument is defined. */function validateDefined(functionName,position,argument){if(argument===void 0){throw new FirestoreError(Code.INVALID_ARGUMENT,"Function "+functionName+"() requires a valid "+ordinal(position)+" "+"argument, but it was undefined.")}}/**
   * Validates the provided positional argument is an object, and its keys and
   * values match the expected keys and types provided in optionTypes.
   */function validateOptionNames(functionName,options,optionNames){forEach$1(options,function(key,_){if(0>optionNames.indexOf(key)){throw new FirestoreError(Code.INVALID_ARGUMENT,"Unknown option '"+key+"' passed to function "+functionName+"(). "+"Available options: "+optionNames.join(", "))}})}/**
   * Helper method to throw an error that the provided argument did not pass
   * an instanceof check.
   */function invalidClassError(functionName,type,position,argument){var description=valueDescription(argument);return new FirestoreError(Code.INVALID_ARGUMENT,"Function "+functionName+"() requires its "+ordinal(position)+" "+("argument to be a "+type+", but it was: "+description))}/** Converts a number to its english word representation */function ordinal(num){switch(num){case 1:return"first";case 2:return"second";case 3:return"third";default:return num+"th";}}/**
   * Formats the given word as plural conditionally given the preceding number.
   */function formatPlural(num,str){return num+" "+str+(1===num?"":"s")}/**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */ // tslint:disable-next-line:class-as-namespace
var AutoId=/** @class */function(){function AutoId(){}AutoId.newId=function(){// Alphanumeric characters
for(var chars="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",autoId="",i=0;20>i;i++){autoId+=chars.charAt(Math.floor(Math.random()*chars.length))}assert$1(20===autoId.length,"Invalid auto ID: "+autoId);return autoId};return AutoId}();function primitiveComparator(left,right){if(left<right)return-1;if(left>right)return 1;return 0}/** Helper to compare nullable (or undefined-able) objects using isEqual(). */function equals(left,right){if(null!==left&&left!==void 0){return!!(right&&left.isEqual(right))}else{// HACK: Explicitly cast since TypeScript's type narrowing apparently isn't
// smart enough.
return left===right}}/** Helper to compare arrays using isEqual(). */function arrayEquals(left,right){if(left.length!==right.length){return!1}for(var i=0;i<left.length;i++){if(!left[i].isEqual(right[i])){return!1}}return!0}/**
   * Returns the immediate lexicographically-following string. This is useful to
   * construct an inclusive range for indexeddb iterators.
   */function immediateSuccessor(s){// Return the input string, with an additional NUL byte appended.
return s+"\0"}/**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */ /** Helper function to assert Uint8Array is available at runtime. */function assertUint8ArrayAvailable(){if("undefined"===typeof Uint8Array){throw new FirestoreError(Code.UNIMPLEMENTED,"Uint8Arrays are not available in this environment.")}}/** Helper function to assert Base64 functions are available at runtime. */function assertBase64Available(){if(!PlatformSupport.getPlatform().base64Available){throw new FirestoreError(Code.UNIMPLEMENTED,"Blobs are unavailable in Firestore in this environment.")}}/**
   * Immutable class holding a blob (binary data).
   * This class is directly exposed in the public API.
   *
   * Note that while you can't hide the constructor in JavaScript code, we are
   * using the hack above to make sure no-one outside this module can call it.
   */var Blob=/** @class */function(){function Blob(binaryString){assertBase64Available();this._binaryString=binaryString}Blob.fromBase64String=function(base64){validateExactNumberOfArgs("Blob.fromBase64String",arguments,1);validateArgType("Blob.fromBase64String","string",1,base64);assertBase64Available();try{var binaryString=PlatformSupport.getPlatform().atob(base64);return new Blob(binaryString)}catch(e){throw new FirestoreError(Code.INVALID_ARGUMENT,"Failed to construct Blob from Base64 string: "+e)}};Blob.fromUint8Array=function(array){validateExactNumberOfArgs("Blob.fromUint8Array",arguments,1);assertUint8ArrayAvailable();if(!(array instanceof Uint8Array)){throw invalidClassError("Blob.fromUint8Array","Uint8Array",1,array)}// We can't call array.map directly because it expects the return type to
// be a Uint8Array, whereas we can convert it to a regular array by invoking
// map on the Array prototype.
var binaryString=Array.prototype.map.call(array,function(char){return String.fromCharCode(char)}).join("");return new Blob(binaryString)};Blob.prototype.toBase64=function(){validateExactNumberOfArgs("Blob.toBase64",arguments,0);assertBase64Available();return PlatformSupport.getPlatform().btoa(this._binaryString)};Blob.prototype.toUint8Array=function(){validateExactNumberOfArgs("Blob.toUint8Array",arguments,0);assertUint8ArrayAvailable();for(var buffer=new Uint8Array(this._binaryString.length),i=0;i<this._binaryString.length;i++){buffer[i]=this._binaryString.charCodeAt(i)}return buffer};Blob.prototype.toString=function(){return"Blob(base64: "+this.toBase64()+")"};Blob.prototype.isEqual=function(other){return this._binaryString===other._binaryString};/**
      * Actually private to JS consumers of our API, so this function is prefixed
      * with an underscore.
      */Blob.prototype._compareTo=function(other){return primitiveComparator(this._binaryString,other._binaryString)};return Blob}(),PublicBlob=makeConstructorPrivate(Blob,"Use Blob.fromUint8Array() or Blob.fromBase64String() instead."),GeoPoint=/** @class */function(){function GeoPoint(latitude,longitude){validateExactNumberOfArgs("GeoPoint",arguments,2);validateArgType("GeoPoint","number",1,latitude);validateArgType("GeoPoint","number",2,longitude);if(!isFinite(latitude)||-90>latitude||90<latitude){throw new FirestoreError(Code.INVALID_ARGUMENT,"Latitude must be a number between -90 and 90, but was: "+latitude)}if(!isFinite(longitude)||-180>longitude||180<longitude){throw new FirestoreError(Code.INVALID_ARGUMENT,"Longitude must be a number between -180 and 180, but was: "+longitude)}this._lat=latitude;this._long=longitude}Object.defineProperty(GeoPoint.prototype,"latitude",{/**
     * Returns the latitude of this geo point, a number between -90 and 90.
     */get:function(){return this._lat},enumerable:!0,configurable:!0});Object.defineProperty(GeoPoint.prototype,"longitude",{/**
     * Returns the longitude of this geo point, a number between -180 and 180.
     */get:function(){return this._long},enumerable:!0,configurable:!0});GeoPoint.prototype.isEqual=function(other){return this._lat===other._lat&&this._long===other._long};/**
      * Actually private to JS consumers of our API, so this function is prefixed
      * with an underscore.
      */GeoPoint.prototype._compareTo=function(other){return primitiveComparator(this._lat,other._lat)||primitiveComparator(this._long,other._long)};return GeoPoint}(),Timestamp=/** @class */function(){function Timestamp(seconds,nanoseconds){this.seconds=seconds;this.nanoseconds=nanoseconds;if(0>nanoseconds){throw new FirestoreError(Code.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+nanoseconds)}if(1e9<=nanoseconds){throw new FirestoreError(Code.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+nanoseconds)}// Midnight at the beginning of 1/1/1 is the earliest Firestore supports.
if(-62135596800>seconds){throw new FirestoreError(Code.INVALID_ARGUMENT,"Timestamp seconds out of range: "+seconds)}// This will break in the year 10,000.
if(253402300800<=seconds){throw new FirestoreError(Code.INVALID_ARGUMENT,"Timestamp seconds out of range: "+seconds)}}Timestamp.now=function(){return Timestamp.fromMillis(Date.now())};Timestamp.fromDate=function(date){return Timestamp.fromMillis(date.getTime())};Timestamp.fromMillis=function(milliseconds){var seconds=Math.floor(milliseconds/1e3),nanos=1e6*(milliseconds-1e3*seconds);return new Timestamp(seconds,nanos)};Timestamp.prototype.toDate=function(){return new Date(this.toMillis())};Timestamp.prototype.toMillis=function(){return 1e3*this.seconds+this.nanoseconds/1e6};Timestamp.prototype._compareTo=function(other){if(this.seconds===other.seconds){return primitiveComparator(this.nanoseconds,other.nanoseconds)}return primitiveComparator(this.seconds,other.seconds)};Timestamp.prototype.isEqual=function(other){return other.seconds===this.seconds&&other.nanoseconds===this.nanoseconds};Timestamp.prototype.toString=function(){return"Timestamp(seconds="+this.seconds+", nanoseconds="+this.nanoseconds+")"};return Timestamp}(),DatabaseInfo=/** @class */function(){/**
   * Constructs a DatabaseInfo using the provided host, databaseId and
   * persistenceKey.
   *
   * @param databaseId The database to use.
   * @param persistenceKey A unique identifier for this Firestore's local
   * storage (used in conjunction with the databaseId).
   * @param host The Firestore backend host to connect to.
   * @param ssl Whether to use SSL when connecting.
   * @param forceLongPolling Whether to use the forceLongPolling option
   * when using WebChannel as the network transport.
   */function DatabaseInfo(databaseId,persistenceKey,host,ssl,forceLongPolling){this.databaseId=databaseId;this.persistenceKey=persistenceKey;this.host=host;this.ssl=ssl;this.forceLongPolling=forceLongPolling}return DatabaseInfo}(),DEFAULT_DATABASE_NAME="(default)",DatabaseId=/** @class */function(){function DatabaseId(projectId,database){this.projectId=projectId;this.database=database?database:DEFAULT_DATABASE_NAME}Object.defineProperty(DatabaseId.prototype,"isDefaultDatabase",{get:function(){return this.database===DEFAULT_DATABASE_NAME},enumerable:!0,configurable:!0});DatabaseId.prototype.isEqual=function(other){return other instanceof DatabaseId&&other.projectId===this.projectId&&other.database===this.database};DatabaseId.prototype.compareTo=function(other){return primitiveComparator(this.projectId,other.projectId)||primitiveComparator(this.database,other.database)};return DatabaseId}(),DOCUMENT_KEY_NAME="__name__",Path=/** @class */function(){function Path(segments,offset,length){this.init(segments,offset,length)}/**
     * An initialization method that can be called from outside the constructor.
     * We need this so that we can have a non-static construct method that returns
     * the polymorphic `this` type.
     */Path.prototype.init=function(segments,offset,length){if(offset===void 0){offset=0}else if(offset>segments.length){fail("offset "+offset+" out of range "+segments.length)}if(length===void 0){length=segments.length-offset}else if(length>segments.length-offset){fail("length "+length+" out of range "+(segments.length-offset))}this.segments=segments;this.offset=offset;this.len=length};/**
      * Constructs a new instance of Path using the same concrete type as `this`.
      * We need this instead of using the normal constructor, because polymorphic
      * `this` doesn't work on static methods.
      */Path.prototype.construct=function(segments,offset,length){var path=Object.create(Object.getPrototypeOf(this));path.init(segments,offset,length);return path};Object.defineProperty(Path.prototype,"length",{get:function(){return this.len},enumerable:!0,configurable:!0});Path.prototype.isEqual=function(other){return 0===Path.comparator(this,other)};Path.prototype.child=function(nameOrPath){var segments=this.segments.slice(this.offset,this.limit());if(nameOrPath instanceof Path){nameOrPath.forEach(function(segment){segments.push(segment)})}else if("string"===typeof nameOrPath){segments.push(nameOrPath)}else{fail("Unknown parameter type for Path.child(): "+nameOrPath)}return this.construct(segments)};/** The index of one past the last segment of the path. */Path.prototype.limit=function(){return this.offset+this.length};Path.prototype.popFirst=function(size){size=size===void 0?1:size;assert$1(this.length>=size,"Can't call popFirst() with less segments");return this.construct(this.segments,this.offset+size,this.length-size)};Path.prototype.popLast=function(){assert$1(!this.isEmpty(),"Can't call popLast() on empty path");return this.construct(this.segments,this.offset,this.length-1)};Path.prototype.firstSegment=function(){assert$1(!this.isEmpty(),"Can't call firstSegment() on empty path");return this.segments[this.offset]};Path.prototype.lastSegment=function(){return this.get(this.length-1)};Path.prototype.get=function(index){assert$1(index<this.length,"Index out of range");return this.segments[this.offset+index]};Path.prototype.isEmpty=function(){return 0===this.length};Path.prototype.isPrefixOf=function(other){if(other.length<this.length){return!1}for(var i=0;i<this.length;i++){if(this.get(i)!==other.get(i)){return!1}}return!0};Path.prototype.isImmediateParentOf=function(potentialChild){if(this.length+1!==potentialChild.length){return!1}for(var i=0;i<this.length;i++){if(this.get(i)!==potentialChild.get(i)){return!1}}return!0};Path.prototype.forEach=function(fn){for(var i=this.offset,end=this.limit();i<end;i++){fn(this.segments[i])}};Path.prototype.toArray=function(){return this.segments.slice(this.offset,this.limit())};Path.comparator=function(p1,p2){for(var len=Math.min(p1.length,p2.length),i=0;i<len;i++){var left=p1.get(i),right=p2.get(i);if(left<right)return-1;if(left>right)return 1}if(p1.length<p2.length)return-1;if(p1.length>p2.length)return 1;return 0};return Path}(),ResourcePath=/** @class */function(_super){__extends(ResourcePath,_super);function ResourcePath(){return null!==_super&&_super.apply(this,arguments)||this}ResourcePath.prototype.canonicalString=function(){// NOTE: The client is ignorant of any path segments containing escape
// sequences (e.g. __id123__) and just passes them through raw (they exist
// for legacy reasons and should not be used frequently).
return this.toArray().join("/")};ResourcePath.prototype.toString=function(){return this.canonicalString()};/**
      * Creates a resource path from the given slash-delimited string.
      */ResourcePath.fromString=function(path){// NOTE: The client is ignorant of any path segments containing escape
// sequences (e.g. __id123__) and just passes them through raw (they exist
// for legacy reasons and should not be used frequently).
if(0<=path.indexOf("//")){throw new FirestoreError(Code.INVALID_ARGUMENT,"Invalid path ("+path+"). Paths must not contain // in them.")}// We may still have an empty segment at the beginning or end if they had a
// leading or trailing slash (which we allow).
var segments=path.split("/").filter(function(segment){return 0<segment.length});return new ResourcePath(segments)};ResourcePath.EMPTY_PATH=new ResourcePath([]);return ResourcePath}(Path),identifierRegExp=/^[_a-zA-Z][_a-zA-Z0-9]*$/,FieldPath=/** @class */function(_super){__extends(FieldPath,_super);function FieldPath(){return null!==_super&&_super.apply(this,arguments)||this}/**
     * Returns true if the string could be used as a segment in a field path
     * without escaping.
     */FieldPath.isValidIdentifier=function(segment){return identifierRegExp.test(segment)};FieldPath.prototype.canonicalString=function(){return this.toArray().map(function(str){str=str.replace("\\","\\\\").replace("`","\\`");if(!FieldPath.isValidIdentifier(str)){str="`"+str+"`"}return str}).join(".")};FieldPath.prototype.toString=function(){return this.canonicalString()};/**
      * Returns true if this field references the key of a document.
      */FieldPath.prototype.isKeyField=function(){return 1===this.length&&this.get(0)===DOCUMENT_KEY_NAME};/**
      * The field designating the key of a document.
      */FieldPath.keyField=function(){return new FieldPath([DOCUMENT_KEY_NAME])};/**
      * Parses a field string from the given server-formatted string.
      *
      * - Splitting the empty string is not allowed (for now at least).
      * - Empty segments within the string (e.g. if there are two consecutive
      *   separators) are not allowed.
      *
      * TODO(b/37244157): we should make this more strict. Right now, it allows
      * non-identifier path components, even if they aren't escaped.
      */FieldPath.fromServerFormat=function(path){var segments=[],current="",i=0,addCurrentSegment=function(){if(0===current.length){throw new FirestoreError(Code.INVALID_ARGUMENT,"Invalid field path ("+path+"). Paths must not be empty, begin "+"with '.', end with '.', or contain '..'")}segments.push(current);current=""},inBackticks=!1;while(i<path.length){var c=path[i];if("\\"===c){if(i+1===path.length){throw new FirestoreError(Code.INVALID_ARGUMENT,"Path has trailing escape character: "+path)}var next=path[i+1];if(!("\\"===next||"."===next||"`"===next)){throw new FirestoreError(Code.INVALID_ARGUMENT,"Path has invalid escape sequence: "+path)}current+=next;i+=2}else if("`"===c){inBackticks=!inBackticks;i++}else if("."===c&&!inBackticks){addCurrentSegment();i++}else{current+=c;i++}}addCurrentSegment();if(inBackticks){throw new FirestoreError(Code.INVALID_ARGUMENT,"Unterminated ` in path: "+path)}return new FieldPath(segments)};FieldPath.EMPTY_PATH=new FieldPath([]);return FieldPath}(Path),DocumentKey=/** @class */function(){function DocumentKey(path){this.path=path;assert$1(DocumentKey.isDocumentKey(path),"Invalid DocumentKey with an odd number of segments: "+path.toArray().join("/"))}/** Returns true if the document is in the specified collectionId. */DocumentKey.prototype.hasCollectionId=function(collectionId){return 2<=this.path.length&&this.path.get(this.path.length-2)===collectionId};DocumentKey.prototype.isEqual=function(other){return null!==other&&0===ResourcePath.comparator(this.path,other.path)};DocumentKey.prototype.toString=function(){return this.path.toString()};DocumentKey.comparator=function(k1,k2){return ResourcePath.comparator(k1.path,k2.path)};DocumentKey.isDocumentKey=function(path){return 0===path.length%2};/**
      * Creates and returns a new document key with the given segments.
      *
      * @param path The segments of the path to the document
      * @return A new instance of DocumentKey
      */DocumentKey.fromSegments=function(segments){return new DocumentKey(new ResourcePath(segments.slice()))};/**
      * Creates and returns a new document key using '/' to split the string into
      * segments.
      *
      * @param path The slash-separated path string to the document
      * @return A new instance of DocumentKey
      */DocumentKey.fromPathString=function(path){return new DocumentKey(ResourcePath.fromString(path))};DocumentKey.EMPTY=new DocumentKey(new ResourcePath([]));return DocumentKey}(),MaybeDocument=/** @class */function(){function MaybeDocument(key,version){this.key=key;this.version=version}MaybeDocument.compareByKey=function(d1,d2){return DocumentKey.comparator(d1.key,d2.key)};return MaybeDocument}(),Document$1=/** @class */function(_super){__extends(Document,_super);function Document(key,version,data,options,/**
                                                  * Memoized serialized form of the document for optimization purposes (avoids repeated
                                                  * serialization). Might be undefined.
                                                  */proto){var _this=_super.call(this,key,version)||this;_this.data=data;_this.proto=proto;_this.hasLocalMutations=!!options.hasLocalMutations;_this.hasCommittedMutations=!!options.hasCommittedMutations;return _this}Document.prototype.field=function(path){return this.data.field(path)};Document.prototype.fieldValue=function(path){var field=this.field(path);return field?field.value():void 0};Document.prototype.value=function(){return this.data.value()};Document.prototype.isEqual=function(other){return other instanceof Document&&this.key.isEqual(other.key)&&this.version.isEqual(other.version)&&this.data.isEqual(other.data)&&this.hasLocalMutations===other.hasLocalMutations&&this.hasCommittedMutations===other.hasCommittedMutations};Document.prototype.toString=function(){return"Document("+this.key+", "+this.version+", "+this.data.toString()+", "+("{hasLocalMutations: "+this.hasLocalMutations+"}), ")+("{hasCommittedMutations: "+this.hasCommittedMutations+"})")};Object.defineProperty(Document.prototype,"hasPendingWrites",{get:function(){return this.hasLocalMutations||this.hasCommittedMutations},enumerable:!0,configurable:!0});Document.compareByField=function(field,d1,d2){var v1=d1.field(field),v2=d2.field(field);if(v1!==void 0&&v2!==void 0){return v1.compareTo(v2)}else{return fail("Trying to compare documents on fields that don't exist")}};return Document}(MaybeDocument),NoDocument=/** @class */function(_super){__extends(NoDocument,_super);function NoDocument(key,version,options){var _this=_super.call(this,key,version)||this;_this.hasCommittedMutations=!!(options&&options.hasCommittedMutations);return _this}NoDocument.prototype.toString=function(){return"NoDocument("+this.key+", "+this.version+")"};Object.defineProperty(NoDocument.prototype,"hasPendingWrites",{get:function(){return this.hasCommittedMutations},enumerable:!0,configurable:!0});NoDocument.prototype.isEqual=function(other){return other instanceof NoDocument&&other.hasCommittedMutations===this.hasCommittedMutations&&other.version.isEqual(this.version)&&other.key.isEqual(this.key)};return NoDocument}(MaybeDocument),UnknownDocument=/** @class */function(_super){__extends(UnknownDocument,_super);function UnknownDocument(key,version){return _super.call(this,key,version)||this}UnknownDocument.prototype.toString=function(){return"UnknownDocument("+this.key+", "+this.version+")"};Object.defineProperty(UnknownDocument.prototype,"hasPendingWrites",{get:function(){return!0},enumerable:!0,configurable:!0});UnknownDocument.prototype.isEqual=function(other){return other instanceof UnknownDocument&&other.version.isEqual(this.version)&&other.key.isEqual(this.key)};return UnknownDocument}(MaybeDocument),SortedMap=/** @class */function(){function SortedMap(comparator,root){this.comparator=comparator;this.root=root?root:LLRBNode.EMPTY}// Returns a copy of the map, with the specified key/value added or replaced.
SortedMap.prototype.insert=function(key,value){return new SortedMap(this.comparator,this.root.insert(key,value,this.comparator).copy(null,null,LLRBNode.BLACK,null,null))};// Returns a copy of the map, with the specified key removed.
SortedMap.prototype.remove=function(key){return new SortedMap(this.comparator,this.root.remove(key,this.comparator).copy(null,null,LLRBNode.BLACK,null,null))};// Returns the value of the node with the given key, or null.
SortedMap.prototype.get=function(key){var node=this.root;while(!node.isEmpty()){var cmp=this.comparator(key,node.key);if(0===cmp){return node.value}else if(0>cmp){node=node.left}else if(0<cmp){node=node.right}}return null};// Returns the index of the element in this sorted map, or -1 if it doesn't
// exist.
SortedMap.prototype.indexOf=function(key){// Number of nodes that were pruned when descending right
var prunedNodes=0,node=this.root;while(!node.isEmpty()){var cmp=this.comparator(key,node.key);if(0===cmp){return prunedNodes+node.left.size}else if(0>cmp){node=node.left}else{// Count all nodes left of the node plus the node itself
prunedNodes+=node.left.size+1;node=node.right}}// Node not found
return-1};SortedMap.prototype.isEmpty=function(){return this.root.isEmpty()};Object.defineProperty(SortedMap.prototype,"size",{// Returns the total number of nodes in the map.
get:function(){return this.root.size},enumerable:!0,configurable:!0});// Returns the minimum key in the map.
SortedMap.prototype.minKey=function(){return this.root.minKey()};// Returns the maximum key in the map.
SortedMap.prototype.maxKey=function(){return this.root.maxKey()};// Traverses the map in key order and calls the specified action function
// for each key/value pair. If action returns true, traversal is aborted.
// Returns the first truthy value returned by action, or the last falsey
// value returned by action.
SortedMap.prototype.inorderTraversal=function(action){return this.root.inorderTraversal(action)};SortedMap.prototype.forEach=function(fn){this.inorderTraversal(function(k,v){fn(k,v);return!1})};SortedMap.prototype.toString=function(){var descriptions=[];this.inorderTraversal(function(k,v){descriptions.push(k+":"+v);return!1});return"{"+descriptions.join(", ")+"}"};// Traverses the map in reverse key order and calls the specified action
// function for each key/value pair. If action returns true, traversal is
// aborted.
// Returns the first truthy value returned by action, or the last falsey
// value returned by action.
SortedMap.prototype.reverseTraversal=function(action){return this.root.reverseTraversal(action)};// Returns an iterator over the SortedMap.
SortedMap.prototype.getIterator=function(){return new SortedMapIterator(this.root,null,this.comparator,!1)};SortedMap.prototype.getIteratorFrom=function(key){return new SortedMapIterator(this.root,key,this.comparator,!1)};SortedMap.prototype.getReverseIterator=function(){return new SortedMapIterator(this.root,null,this.comparator,!0)};SortedMap.prototype.getReverseIteratorFrom=function(key){return new SortedMapIterator(this.root,key,this.comparator,!0)};return SortedMap}(),SortedMapIterator=/** @class */function(){function SortedMapIterator(node,startKey,comparator,isReverse){this.isReverse=isReverse;this.nodeStack=[];var cmp=1;while(!node.isEmpty()){cmp=startKey?comparator(node.key,startKey):1;// flip the comparison if we're going in reverse
if(isReverse)cmp*=-1;if(0>cmp){// This node is less than our start key. ignore it
if(this.isReverse){node=node.left}else{node=node.right}}else if(0===cmp){// This node is exactly equal to our start key. Push it on the stack,
// but stop iterating;
this.nodeStack.push(node);break}else{// This node is greater than our start key, add it to the stack and move
// to the next one
this.nodeStack.push(node);if(this.isReverse){node=node.right}else{node=node.left}}}}SortedMapIterator.prototype.getNext=function(){assert$1(0<this.nodeStack.length,"getNext() called on iterator when hasNext() is false.");var node=this.nodeStack.pop(),result={key:node.key,value:node.value};if(this.isReverse){node=node.left;while(!node.isEmpty()){this.nodeStack.push(node);node=node.right}}else{node=node.right;while(!node.isEmpty()){this.nodeStack.push(node);node=node.left}}return result};SortedMapIterator.prototype.hasNext=function(){return 0<this.nodeStack.length};SortedMapIterator.prototype.peek=function(){if(0===this.nodeStack.length)return null;var node=this.nodeStack[this.nodeStack.length-1];return{key:node.key,value:node.value}};return SortedMapIterator}(),LLRBNode=/** @class */function(){function LLRBNode(key,value,color,left,right){this.key=key;this.value=value;this.color=null!=color?color:LLRBNode.RED;this.left=null!=left?left:LLRBNode.EMPTY;this.right=null!=right?right:LLRBNode.EMPTY;this.size=this.left.size+1+this.right.size}// Returns a copy of the current node, optionally replacing pieces of it.
LLRBNode.prototype.copy=function(key,value,color,left,right){return new LLRBNode(null!=key?key:this.key,null!=value?value:this.value,null!=color?color:this.color,null!=left?left:this.left,null!=right?right:this.right)};LLRBNode.prototype.isEmpty=function(){return!1};// Traverses the tree in key order and calls the specified action function
// for each node. If action returns true, traversal is aborted.
// Returns the first truthy value returned by action, or the last falsey
// value returned by action.
LLRBNode.prototype.inorderTraversal=function(action){return this.left.inorderTraversal(action)||action(this.key,this.value)||this.right.inorderTraversal(action)};// Traverses the tree in reverse key order and calls the specified action
// function for each node. If action returns true, traversal is aborted.
// Returns the first truthy value returned by action, or the last falsey
// value returned by action.
LLRBNode.prototype.reverseTraversal=function(action){return this.right.reverseTraversal(action)||action(this.key,this.value)||this.left.reverseTraversal(action)};// Returns the minimum node in the tree.
LLRBNode.prototype.min=function(){if(this.left.isEmpty()){return this}else{return this.left.min()}};// Returns the maximum key in the tree.
LLRBNode.prototype.minKey=function(){return this.min().key};// Returns the maximum key in the tree.
LLRBNode.prototype.maxKey=function(){if(this.right.isEmpty()){return this.key}else{return this.right.maxKey()}};// Returns new tree, with the key/value added.
LLRBNode.prototype.insert=function(key,value,comparator){var n=this,cmp=comparator(key,n.key);if(0>cmp){n=n.copy(null,null,null,n.left.insert(key,value,comparator),null)}else if(0===cmp){n=n.copy(null,value,null,null,null)}else{n=n.copy(null,null,null,null,n.right.insert(key,value,comparator))}return n.fixUp()};LLRBNode.prototype.removeMin=function(){if(this.left.isEmpty()){return LLRBNode.EMPTY}var n=this;if(!n.left.isRed()&&!n.left.left.isRed())n=n.moveRedLeft();n=n.copy(null,null,null,n.left.removeMin(),null);return n.fixUp()};// Returns new tree, with the specified item removed.
LLRBNode.prototype.remove=function(key,comparator){var smallest,n=this;if(0>comparator(key,n.key)){if(!n.left.isEmpty()&&!n.left.isRed()&&!n.left.left.isRed()){n=n.moveRedLeft()}n=n.copy(null,null,null,n.left.remove(key,comparator),null)}else{if(n.left.isRed())n=n.rotateRight();if(!n.right.isEmpty()&&!n.right.isRed()&&!n.right.left.isRed()){n=n.moveRedRight()}if(0===comparator(key,n.key)){if(n.right.isEmpty()){return LLRBNode.EMPTY}else{smallest=n.right.min();n=n.copy(smallest.key,smallest.value,null,null,n.right.removeMin())}}n=n.copy(null,null,null,null,n.right.remove(key,comparator))}return n.fixUp()};LLRBNode.prototype.isRed=function(){return this.color};// Returns new tree after performing any needed rotations.
LLRBNode.prototype.fixUp=function(){var n=this;if(n.right.isRed()&&!n.left.isRed())n=n.rotateLeft();if(n.left.isRed()&&n.left.left.isRed())n=n.rotateRight();if(n.left.isRed()&&n.right.isRed())n=n.colorFlip();return n};LLRBNode.prototype.moveRedLeft=function(){var n=this.colorFlip();if(n.right.left.isRed()){n=n.copy(null,null,null,null,n.right.rotateRight());n=n.rotateLeft();n=n.colorFlip()}return n};LLRBNode.prototype.moveRedRight=function(){var n=this.colorFlip();if(n.left.left.isRed()){n=n.rotateRight();n=n.colorFlip()}return n};LLRBNode.prototype.rotateLeft=function(){var nl=this.copy(null,null,LLRBNode.RED,null,this.right.left);return this.right.copy(null,null,this.color,nl,null)};LLRBNode.prototype.rotateRight=function(){var nr=this.copy(null,null,LLRBNode.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,nr)};LLRBNode.prototype.colorFlip=function(){var left=this.left.copy(null,null,!this.left.color,null,null),right=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,left,right)};// For testing.
LLRBNode.prototype.checkMaxDepth=function(){var blackDepth=this.check();if(Math.pow(2,blackDepth)<=this.size+1){return!0}else{return!1}};// In a balanced RB tree, the black-depth (number of black nodes) from root to
// leaves is equal on both sides.  This function verifies that or asserts.
LLRBNode.prototype.check=function(){if(this.isRed()&&this.left.isRed()){throw fail("Red node has red child("+this.key+","+this.value+")")}if(this.right.isRed()){throw fail("Right child of ("+this.key+","+this.value+") is red")}var blackDepth=this.left.check();if(blackDepth!==this.right.check()){throw fail("Black depths differ")}else{return blackDepth+(this.isRed()?0:1)}};// tslint:disable-next-line:no-any Empty node is shared between all LLRB trees.
LLRBNode.EMPTY=null;LLRBNode.RED=!0;LLRBNode.BLACK=!1;return LLRBNode}(),LLRBEmptyNode=/** @class */function(){function LLRBEmptyNode(){this.size=0}// Returns a copy of the current node.
LLRBEmptyNode.prototype.copy=function(key,value,color,left,right){return this};// Returns a copy of the tree, with the specified key/value added.
LLRBEmptyNode.prototype.insert=function(key,value,comparator){return new LLRBNode(key,value)};// Returns a copy of the tree, with the specified key removed.
LLRBEmptyNode.prototype.remove=function(key,comparator){return this};LLRBEmptyNode.prototype.isEmpty=function(){return!0};LLRBEmptyNode.prototype.inorderTraversal=function(action){return!1};LLRBEmptyNode.prototype.reverseTraversal=function(action){return!1};LLRBEmptyNode.prototype.minKey=function(){return null};LLRBEmptyNode.prototype.maxKey=function(){return null};LLRBEmptyNode.prototype.isRed=function(){return!1};// For testing.
LLRBEmptyNode.prototype.checkMaxDepth=function(){return!0};LLRBEmptyNode.prototype.check=function(){return 0};return LLRBEmptyNode}();// Public instance that disallows construction at runtime. This constructor is
// used when exporting Blob on firebase.firestore.Blob and will be called Blob
// publicly. Internally we still use Blob which has a type checked private
// constructor. Note that Blob and PublicBlob can be used interchangeably in
// instanceof checks.
// For our internal TypeScript code PublicBlob doesn't exist as a type, and so
// we need to use Blob as type and export it too.
// tslint:disable-next-line:variable-name We're treating this as a class name.
// end LLRBEmptyNode
LLRBNode.EMPTY=new LLRBEmptyNode;/**
                                       * @license
                                       * Copyright 2017 Google Inc.
                                       *
                                       * Licensed under the Apache License, Version 2.0 (the "License");
                                       * you may not use this file except in compliance with the License.
                                       * You may obtain a copy of the License at
                                       *
                                       *   http://www.apache.org/licenses/LICENSE-2.0
                                       *
                                       * Unless required by applicable law or agreed to in writing, software
                                       * distributed under the License is distributed on an "AS IS" BASIS,
                                       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                       * See the License for the specific language governing permissions and
                                       * limitations under the License.
                                       */var TypeOrder;(function(TypeOrder){// This order is defined by the backend.
TypeOrder[TypeOrder.NullValue=0]="NullValue";TypeOrder[TypeOrder.BooleanValue=1]="BooleanValue";TypeOrder[TypeOrder.NumberValue=2]="NumberValue";TypeOrder[TypeOrder.TimestampValue=3]="TimestampValue";TypeOrder[TypeOrder.StringValue=4]="StringValue";TypeOrder[TypeOrder.BlobValue=5]="BlobValue";TypeOrder[TypeOrder.RefValue=6]="RefValue";TypeOrder[TypeOrder.GeoPointValue=7]="GeoPointValue";TypeOrder[TypeOrder.ArrayValue=8]="ArrayValue";TypeOrder[TypeOrder.ObjectValue=9]="ObjectValue"})(TypeOrder||(TypeOrder={}));/** Defines the return value for pending server timestamps. */var ServerTimestampBehavior;(function(ServerTimestampBehavior){ServerTimestampBehavior[ServerTimestampBehavior.Default=0]="Default";ServerTimestampBehavior[ServerTimestampBehavior.Estimate=1]="Estimate";ServerTimestampBehavior[ServerTimestampBehavior.Previous=2]="Previous"})(ServerTimestampBehavior||(ServerTimestampBehavior={}));/** Holds properties that define field value deserialization options. */var FieldValueOptions=/** @class */function(){function FieldValueOptions(serverTimestampBehavior,timestampsInSnapshots){this.serverTimestampBehavior=serverTimestampBehavior;this.timestampsInSnapshots=timestampsInSnapshots}FieldValueOptions.fromSnapshotOptions=function(options,timestampsInSnapshots){switch(options.serverTimestamps){case"estimate":return new FieldValueOptions(ServerTimestampBehavior.Estimate,timestampsInSnapshots);case"previous":return new FieldValueOptions(ServerTimestampBehavior.Previous,timestampsInSnapshots);case"none":// Fall-through intended.
case void 0:return new FieldValueOptions(ServerTimestampBehavior.Default,timestampsInSnapshots);default:return fail("fromSnapshotOptions() called with invalid options.");}};return FieldValueOptions}(),FieldValue=/** @class */function(){function FieldValue(){}FieldValue.prototype.toString=function(){var val=this.value();return null===val?"null":val.toString()};FieldValue.prototype.defaultCompareTo=function(other){assert$1(this.typeOrder!==other.typeOrder,"Default compareTo should not be used for values of same type.");var cmp=primitiveComparator(this.typeOrder,other.typeOrder);return cmp};return FieldValue}(),NullValue=/** @class */function(_super){__extends(NullValue,_super);function NullValue(){var _this=_super.call(this)||this;_this.typeOrder=TypeOrder.NullValue;// internalValue is unused but we add it to work around
// https://github.com/Microsoft/TypeScript/issues/15585
_this.internalValue=null;return _this}NullValue.prototype.value=function(options){return null};NullValue.prototype.isEqual=function(other){return other instanceof NullValue};NullValue.prototype.compareTo=function(other){if(other instanceof NullValue){return 0}return this.defaultCompareTo(other)};NullValue.INSTANCE=new NullValue;return NullValue}(FieldValue),BooleanValue=/** @class */function(_super){__extends(BooleanValue,_super);function BooleanValue(internalValue){var _this=_super.call(this)||this;_this.internalValue=internalValue;_this.typeOrder=TypeOrder.BooleanValue;return _this}BooleanValue.prototype.value=function(options){return this.internalValue};BooleanValue.prototype.isEqual=function(other){return other instanceof BooleanValue&&this.internalValue===other.internalValue};BooleanValue.prototype.compareTo=function(other){if(other instanceof BooleanValue){return primitiveComparator(this,other)}return this.defaultCompareTo(other)};BooleanValue.of=function(value){return value?BooleanValue.TRUE:BooleanValue.FALSE};BooleanValue.TRUE=new BooleanValue(!0);BooleanValue.FALSE=new BooleanValue(!1);return BooleanValue}(FieldValue),NumberValue=/** @class */function(_super){__extends(NumberValue,_super);function NumberValue(internalValue){var _this=_super.call(this)||this;_this.internalValue=internalValue;_this.typeOrder=TypeOrder.NumberValue;return _this}NumberValue.prototype.value=function(options){return this.internalValue};NumberValue.prototype.compareTo=function(other){if(other instanceof NumberValue){return numericComparator(this.internalValue,other.internalValue)}return this.defaultCompareTo(other)};return NumberValue}(FieldValue);/**
      * A field value represents a datatype as stored by Firestore.
      */ /** Utility function to compare doubles (using Firestore semantics for NaN). */function numericComparator(left,right){if(left<right){return-1}else if(left>right){return 1}else if(left===right){return 0}else{// one or both are NaN.
if(isNaN(left)){return isNaN(right)?0:-1}else{return 1}}}/**
   * Utility function to check numbers for equality using Firestore semantics
   * (NaN === NaN, -0.0 !== 0.0).
   */function numericEquals(left,right){// Implemented based on Object.is() polyfill from
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
if(left===right){// +0 != -0
return 0!==left||1/left===1/right}else{// NaN == NaN
return left!==left&&right!==right}}var IntegerValue=/** @class */function(_super){__extends(IntegerValue,_super);function IntegerValue(internalValue){return _super.call(this,internalValue)||this}IntegerValue.prototype.isEqual=function(other){// NOTE: DoubleValue and IntegerValue instances may compareTo() the same,
// but that doesn't make them equal via isEqual().
if(other instanceof IntegerValue){return numericEquals(this.internalValue,other.internalValue)}else{return!1}};return IntegerValue}(NumberValue),DoubleValue=/** @class */function(_super){__extends(DoubleValue,_super);function DoubleValue(internalValue){var _this=_super.call(this,internalValue)||this;_this.internalValue=internalValue;return _this}DoubleValue.prototype.isEqual=function(other){// NOTE: DoubleValue and IntegerValue instances may compareTo() the same,
// but that doesn't make them equal via isEqual().
if(other instanceof DoubleValue){return numericEquals(this.internalValue,other.internalValue)}else{return!1}};DoubleValue.NAN=new DoubleValue(NaN);DoubleValue.POSITIVE_INFINITY=new DoubleValue(1/0);DoubleValue.NEGATIVE_INFINITY=new DoubleValue(-Infinity);return DoubleValue}(NumberValue),StringValue=/** @class */function(_super){__extends(StringValue,_super);function StringValue(internalValue){var _this=_super.call(this)||this;_this.internalValue=internalValue;_this.typeOrder=TypeOrder.StringValue;return _this}StringValue.prototype.value=function(options){return this.internalValue};StringValue.prototype.isEqual=function(other){return other instanceof StringValue&&this.internalValue===other.internalValue};StringValue.prototype.compareTo=function(other){if(other instanceof StringValue){return primitiveComparator(this.internalValue,other.internalValue)}return this.defaultCompareTo(other)};return StringValue}(FieldValue),TimestampValue=/** @class */function(_super){__extends(TimestampValue,_super);function TimestampValue(internalValue){var _this=_super.call(this)||this;_this.internalValue=internalValue;_this.typeOrder=TypeOrder.TimestampValue;return _this}TimestampValue.prototype.value=function(options){if(!options||options.timestampsInSnapshots){return this.internalValue}else{return this.internalValue.toDate()}};TimestampValue.prototype.isEqual=function(other){return other instanceof TimestampValue&&this.internalValue.isEqual(other.internalValue)};TimestampValue.prototype.compareTo=function(other){if(other instanceof TimestampValue){return this.internalValue._compareTo(other.internalValue)}else if(other instanceof ServerTimestampValue){// Concrete timestamps come before server timestamps.
return-1}else{return this.defaultCompareTo(other)}};return TimestampValue}(FieldValue),ServerTimestampValue=/** @class */function(_super){__extends(ServerTimestampValue,_super);function ServerTimestampValue(localWriteTime,previousValue){var _this=_super.call(this)||this;_this.localWriteTime=localWriteTime;_this.previousValue=previousValue;_this.typeOrder=TypeOrder.TimestampValue;return _this}ServerTimestampValue.prototype.value=function(options){if(options&&options.serverTimestampBehavior===ServerTimestampBehavior.Estimate){return new TimestampValue(this.localWriteTime).value(options)}else if(options&&options.serverTimestampBehavior===ServerTimestampBehavior.Previous){return this.previousValue?this.previousValue.value(options):null}else{return null}};ServerTimestampValue.prototype.isEqual=function(other){return other instanceof ServerTimestampValue&&this.localWriteTime.isEqual(other.localWriteTime)};ServerTimestampValue.prototype.compareTo=function(other){if(other instanceof ServerTimestampValue){return this.localWriteTime._compareTo(other.localWriteTime)}else if(other instanceof TimestampValue){// Server timestamps come after all concrete timestamps.
return 1}else{return this.defaultCompareTo(other)}};ServerTimestampValue.prototype.toString=function(){return"<ServerTimestamp localTime="+this.localWriteTime.toString()+">"};return ServerTimestampValue}(FieldValue),BlobValue=/** @class */function(_super){__extends(BlobValue,_super);function BlobValue(internalValue){var _this=_super.call(this)||this;_this.internalValue=internalValue;_this.typeOrder=TypeOrder.BlobValue;return _this}BlobValue.prototype.value=function(options){return this.internalValue};BlobValue.prototype.isEqual=function(other){return other instanceof BlobValue&&this.internalValue.isEqual(other.internalValue)};BlobValue.prototype.compareTo=function(other){if(other instanceof BlobValue){return this.internalValue._compareTo(other.internalValue)}return this.defaultCompareTo(other)};return BlobValue}(FieldValue),RefValue=/** @class */function(_super){__extends(RefValue,_super);function RefValue(databaseId,key){var _this=_super.call(this)||this;_this.databaseId=databaseId;_this.key=key;_this.typeOrder=TypeOrder.RefValue;return _this}RefValue.prototype.value=function(options){return this.key};RefValue.prototype.isEqual=function(other){if(other instanceof RefValue){return this.key.isEqual(other.key)&&this.databaseId.isEqual(other.databaseId)}else{return!1}};RefValue.prototype.compareTo=function(other){if(other instanceof RefValue){var cmp=this.databaseId.compareTo(other.databaseId);return 0!==cmp?cmp:DocumentKey.comparator(this.key,other.key)}return this.defaultCompareTo(other)};return RefValue}(FieldValue),GeoPointValue=/** @class */function(_super){__extends(GeoPointValue,_super);function GeoPointValue(internalValue){var _this=_super.call(this)||this;_this.internalValue=internalValue;_this.typeOrder=TypeOrder.GeoPointValue;return _this}GeoPointValue.prototype.value=function(options){return this.internalValue};GeoPointValue.prototype.isEqual=function(other){return other instanceof GeoPointValue&&this.internalValue.isEqual(other.internalValue)};GeoPointValue.prototype.compareTo=function(other){if(other instanceof GeoPointValue){return this.internalValue._compareTo(other.internalValue)}return this.defaultCompareTo(other)};return GeoPointValue}(FieldValue),ObjectValue=/** @class */function(_super){__extends(ObjectValue,_super);function ObjectValue(internalValue){var _this=_super.call(this)||this;_this.internalValue=internalValue;_this.typeOrder=TypeOrder.ObjectValue;return _this}ObjectValue.prototype.value=function(options){var result={};this.internalValue.inorderTraversal(function(key,val){result[key]=val.value(options)});return result};ObjectValue.prototype.forEach=function(action){this.internalValue.inorderTraversal(action)};ObjectValue.prototype.isEqual=function(other){if(other instanceof ObjectValue){var it1=this.internalValue.getIterator(),it2=other.internalValue.getIterator();while(it1.hasNext()&&it2.hasNext()){var next1=it1.getNext(),next2=it2.getNext();if(next1.key!==next2.key||!next1.value.isEqual(next2.value)){return!1}}return!it1.hasNext()&&!it2.hasNext()}return!1};ObjectValue.prototype.compareTo=function(other){if(other instanceof ObjectValue){var it1=this.internalValue.getIterator(),it2=other.internalValue.getIterator();while(it1.hasNext()&&it2.hasNext()){var next1=it1.getNext(),next2=it2.getNext(),cmp=primitiveComparator(next1.key,next2.key)||next1.value.compareTo(next2.value);if(cmp){return cmp}}// Only equal if both iterators are exhausted
return primitiveComparator(it1.hasNext(),it2.hasNext())}else{return this.defaultCompareTo(other)}};ObjectValue.prototype.set=function(path,to){assert$1(!path.isEmpty(),"Cannot set field for empty path on ObjectValue");if(1===path.length){return this.setChild(path.firstSegment(),to)}else{var child=this.child(path.firstSegment());if(!(child instanceof ObjectValue)){child=ObjectValue.EMPTY}var newChild=child.set(path.popFirst(),to);return this.setChild(path.firstSegment(),newChild)}};ObjectValue.prototype.delete=function(path){assert$1(!path.isEmpty(),"Cannot delete field for empty path on ObjectValue");if(1===path.length){return new ObjectValue(this.internalValue.remove(path.firstSegment()))}else{// nested field
var child=this.child(path.firstSegment());if(child instanceof ObjectValue){var newChild=child.delete(path.popFirst());return new ObjectValue(this.internalValue.insert(path.firstSegment(),newChild))}else{// Don't actually change a primitive value to an object for a delete
return this}}};ObjectValue.prototype.contains=function(path){return this.field(path)!==void 0};ObjectValue.prototype.field=function(path){assert$1(!path.isEmpty(),"Can't get field of empty path");var field=this;path.forEach(function(pathSegment){if(field instanceof ObjectValue){field=field.internalValue.get(pathSegment)||void 0}else{field=void 0}});return field};ObjectValue.prototype.toString=function(){return this.internalValue.toString()};ObjectValue.prototype.child=function(childName){return this.internalValue.get(childName)||void 0};ObjectValue.prototype.setChild=function(childName,value){return new ObjectValue(this.internalValue.insert(childName,value))};ObjectValue.EMPTY=new ObjectValue(new SortedMap(primitiveComparator));return ObjectValue}(FieldValue),ArrayValue=/** @class */function(_super){__extends(ArrayValue,_super);function ArrayValue(internalValue){var _this=_super.call(this)||this;_this.internalValue=internalValue;_this.typeOrder=TypeOrder.ArrayValue;return _this}ArrayValue.prototype.value=function(options){return this.internalValue.map(function(v){return v.value(options)})};ArrayValue.prototype.forEach=function(action){this.internalValue.forEach(action)};ArrayValue.prototype.isEqual=function(other){if(other instanceof ArrayValue){if(this.internalValue.length!==other.internalValue.length){return!1}for(var i=0;i<this.internalValue.length;i++){if(!this.internalValue[i].isEqual(other.internalValue[i])){return!1}}return!0}return!1};ArrayValue.prototype.compareTo=function(other){if(other instanceof ArrayValue){for(var minLength=Math.min(this.internalValue.length,other.internalValue.length),i=0,cmp;i<minLength;i++){cmp=this.internalValue[i].compareTo(other.internalValue[i]);if(cmp){return cmp}}return primitiveComparator(this.internalValue.length,other.internalValue.length)}else{return this.defaultCompareTo(other)}};ArrayValue.prototype.toString=function(){var descriptions=this.internalValue.map(function(v){return v.toString()});return"["+descriptions.join(",")+"]"};return ArrayValue}(FieldValue),NumberAsAny=Number,MIN_SAFE_INTEGER=NumberAsAny.MIN_SAFE_INTEGER||-(Math.pow(2,53)-1),MAX_SAFE_INTEGER=NumberAsAny.MAX_SAFE_INTEGER||Math.pow(2,53)-1,isInteger=NumberAsAny.isInteger||function(value){return"number"===typeof value&&isFinite(value)&&Math.floor(value)===value};/**
    * Returns whether a variable is either undefined or null.
    */function isNullOrUndefined(value){return null===value||value===void 0}/**
   * Returns whether a value is an integer and in the safe integer range
   * @param value The value to test for being an integer and in the safe range
   */function isSafeInteger(value){return isInteger(value)&&value<=MAX_SAFE_INTEGER&&value>=MIN_SAFE_INTEGER}/**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */var Query=/** @class */function(){/**
   * Initializes a Query with a path and optional additional query constraints.
   * Path must currently be empty if this is a collection group query.
   */function Query(path,collectionGroup,explicitOrderBy,filters,limit,startAt,endAt){if(void 0===collectionGroup){collectionGroup=null}if(void 0===explicitOrderBy){explicitOrderBy=[]}if(void 0===filters){filters=[]}if(void 0===limit){limit=null}if(void 0===startAt){startAt=null}if(void 0===endAt){endAt=null}this.path=path;this.collectionGroup=collectionGroup;this.explicitOrderBy=explicitOrderBy;this.filters=filters;this.limit=limit;this.startAt=startAt;this.endAt=endAt;this.memoizedCanonicalId=null;this.memoizedOrderBy=null;if(this.startAt){this.assertValidBound(this.startAt)}if(this.endAt){this.assertValidBound(this.endAt)}}Query.atPath=function(path){return new Query(path)};Object.defineProperty(Query.prototype,"orderBy",{get:function(){if(null===this.memoizedOrderBy){var inequalityField=this.getInequalityFilterField(),firstOrderByField=this.getFirstOrderByField();if(null!==inequalityField&&null===firstOrderByField){// In order to implicitly add key ordering, we must also add the
// inequality filter field for it to be a valid query.
// Note that the default inequality field and key ordering is ascending.
if(inequalityField.isKeyField()){this.memoizedOrderBy=[KEY_ORDERING_ASC]}else{this.memoizedOrderBy=[new OrderBy(inequalityField),KEY_ORDERING_ASC]}}else{assert$1(null===inequalityField||null!==firstOrderByField&&inequalityField.isEqual(firstOrderByField),"First orderBy should match inequality field.");this.memoizedOrderBy=[];for(var foundKeyOrdering=!1,_i=0,_a=this.explicitOrderBy,orderBy;_i<_a.length;_i++){orderBy=_a[_i];this.memoizedOrderBy.push(orderBy);if(orderBy.field.isKeyField()){foundKeyOrdering=!0}}if(!foundKeyOrdering){// The order of the implicit key ordering always matches the last
// explicit order by
var lastDirection=0<this.explicitOrderBy.length?this.explicitOrderBy[this.explicitOrderBy.length-1].dir:Direction.ASCENDING;this.memoizedOrderBy.push(lastDirection===Direction.ASCENDING?KEY_ORDERING_ASC:KEY_ORDERING_DESC)}}}return this.memoizedOrderBy},enumerable:!0,configurable:!0});Query.prototype.addFilter=function(filter){assert$1(null==this.getInequalityFilterField()||!(filter instanceof RelationFilter)||!filter.isInequality()||filter.field.isEqual(this.getInequalityFilterField()),"Query must only have one inequality field.");assert$1(!this.isDocumentQuery(),"No filtering allowed for document query");var newFilters=this.filters.concat([filter]);return new Query(this.path,this.collectionGroup,this.explicitOrderBy.slice(),newFilters,this.limit,this.startAt,this.endAt)};Query.prototype.addOrderBy=function(orderBy){assert$1(!this.startAt&&!this.endAt,"Bounds must be set after orderBy");// TODO(dimond): validate that orderBy does not list the same key twice.
var newOrderBy=this.explicitOrderBy.concat([orderBy]);return new Query(this.path,this.collectionGroup,newOrderBy,this.filters.slice(),this.limit,this.startAt,this.endAt)};Query.prototype.withLimit=function(limit){return new Query(this.path,this.collectionGroup,this.explicitOrderBy.slice(),this.filters.slice(),limit,this.startAt,this.endAt)};Query.prototype.withStartAt=function(bound){return new Query(this.path,this.collectionGroup,this.explicitOrderBy.slice(),this.filters.slice(),this.limit,bound,this.endAt)};Query.prototype.withEndAt=function(bound){return new Query(this.path,this.collectionGroup,this.explicitOrderBy.slice(),this.filters.slice(),this.limit,this.startAt,bound)};/**
      * Helper to convert a collection group query into a collection query at a
      * specific path. This is used when executing collection group queries, since
      * we have to split the query into a set of collection queries at multiple
      * paths.
      */Query.prototype.asCollectionQueryAtPath=function(path){return new Query(path,/*collectionGroup=*/null,this.explicitOrderBy.slice(),this.filters.slice(),this.limit,this.startAt,this.endAt)};// TODO(b/29183165): This is used to get a unique string from a query to, for
// example, use as a dictionary key, but the implementation is subject to
// collisions. Make it collision-free.
Query.prototype.canonicalId=function(){if(null===this.memoizedCanonicalId){var canonicalId=this.path.canonicalString();if(this.isCollectionGroupQuery()){canonicalId+="|cg:"+this.collectionGroup}canonicalId+="|f:";for(var _i=0,_a=this.filters,filter;_i<_a.length;_i++){filter=_a[_i];canonicalId+=filter.canonicalId();canonicalId+=","}canonicalId+="|ob:";// TODO(dimond): make this collision resistant
for(var _b=0,_c=this.orderBy,orderBy;_b<_c.length;_b++){orderBy=_c[_b];canonicalId+=orderBy.canonicalId();canonicalId+=","}if(!isNullOrUndefined(this.limit)){canonicalId+="|l:";canonicalId+=this.limit}if(this.startAt){canonicalId+="|lb:";canonicalId+=this.startAt.canonicalId()}if(this.endAt){canonicalId+="|ub:";canonicalId+=this.endAt.canonicalId()}this.memoizedCanonicalId=canonicalId}return this.memoizedCanonicalId};Query.prototype.toString=function(){var str="Query("+this.path.canonicalString();if(this.isCollectionGroupQuery()){str+=" collectionGroup="+this.collectionGroup}if(0<this.filters.length){str+=", filters: ["+this.filters.join(", ")+"]"}if(!isNullOrUndefined(this.limit)){str+=", limit: "+this.limit}if(0<this.explicitOrderBy.length){str+=", orderBy: ["+this.explicitOrderBy.join(", ")+"]"}if(this.startAt){str+=", startAt: "+this.startAt.canonicalId()}if(this.endAt){str+=", endAt: "+this.endAt.canonicalId()}return str+")"};Query.prototype.isEqual=function(other){if(this.limit!==other.limit){return!1}if(this.orderBy.length!==other.orderBy.length){return!1}for(var i=0;i<this.orderBy.length;i++){if(!this.orderBy[i].isEqual(other.orderBy[i])){return!1}}if(this.filters.length!==other.filters.length){return!1}for(var i=0;i<this.filters.length;i++){if(!this.filters[i].isEqual(other.filters[i])){return!1}}if(this.collectionGroup!==other.collectionGroup){return!1}if(!this.path.isEqual(other.path)){return!1}if(null!==this.startAt?!this.startAt.isEqual(other.startAt):null!==other.startAt){return!1}return null!==this.endAt?this.endAt.isEqual(other.endAt):null===other.endAt};Query.prototype.docComparator=function(d1,d2){for(var comparedOnKeyField=!1,_i=0,_a=this.orderBy;_i<_a.length;_i++){var orderBy=_a[_i],comp=orderBy.compare(d1,d2);if(0!==comp)return comp;comparedOnKeyField=comparedOnKeyField||orderBy.field.isKeyField()}// Assert that we actually compared by key
assert$1(comparedOnKeyField,"orderBy used that doesn't compare on key field");return 0};Query.prototype.matches=function(doc){return this.matchesPathAndCollectionGroup(doc)&&this.matchesOrderBy(doc)&&this.matchesFilters(doc)&&this.matchesBounds(doc)};Query.prototype.hasLimit=function(){return!isNullOrUndefined(this.limit)};Query.prototype.getFirstOrderByField=function(){return 0<this.explicitOrderBy.length?this.explicitOrderBy[0].field:null};Query.prototype.getInequalityFilterField=function(){for(var _i=0,_a=this.filters,filter;_i<_a.length;_i++){filter=_a[_i];if(filter instanceof RelationFilter&&filter.isInequality()){return filter.field}}return null};Query.prototype.hasArrayContainsFilter=function(){return this.filters.find(function(filter){return filter instanceof RelationFilter&&filter.op===RelationOp.ARRAY_CONTAINS})!==void 0};Query.prototype.isDocumentQuery=function(){return DocumentKey.isDocumentKey(this.path)&&null===this.collectionGroup&&0===this.filters.length};Query.prototype.isCollectionGroupQuery=function(){return null!==this.collectionGroup};Query.prototype.matchesPathAndCollectionGroup=function(doc){var docPath=doc.key.path;if(null!==this.collectionGroup){// NOTE: this.path is currently always empty since we don't expose Collection
// Group queries rooted at a document path yet.
return doc.key.hasCollectionId(this.collectionGroup)&&this.path.isPrefixOf(docPath)}else if(DocumentKey.isDocumentKey(this.path)){// exact match for document queries
return this.path.isEqual(docPath)}else{// shallow ancestor queries by default
return this.path.isImmediateParentOf(docPath)}};/**
      * A document must have a value for every ordering clause in order to show up
      * in the results.
      */Query.prototype.matchesOrderBy=function(doc){for(var _i=0,_a=this.explicitOrderBy,orderBy;_i<_a.length;_i++){orderBy=_a[_i];// order by key always matches
if(!orderBy.field.isKeyField()&&doc.field(orderBy.field)===void 0){return!1}}return!0};Query.prototype.matchesFilters=function(doc){for(var _i=0,_a=this.filters,filter;_i<_a.length;_i++){filter=_a[_i];if(!filter.matches(doc)){return!1}}return!0};/**
      * Makes sure a document is within the bounds, if provided.
      */Query.prototype.matchesBounds=function(doc){if(this.startAt&&!this.startAt.sortsBeforeDocument(this.orderBy,doc)){return!1}if(this.endAt&&this.endAt.sortsBeforeDocument(this.orderBy,doc)){return!1}return!0};Query.prototype.assertValidBound=function(bound){assert$1(bound.position.length<=this.orderBy.length,"Bound is longer than orderBy")};return Query}(),Filter=/** @class */function(){function Filter(){}/**
                        * Creates a filter based on the provided arguments.
                        */Filter.create=function(field,op,value){if(value.isEqual(NullValue.INSTANCE)){if(op!==RelationOp.EQUAL){throw new FirestoreError(Code.INVALID_ARGUMENT,"Invalid query. You can only perform equals comparisons on null.")}return new NullFilter(field)}else if(value.isEqual(DoubleValue.NAN)){if(op!==RelationOp.EQUAL){throw new FirestoreError(Code.INVALID_ARGUMENT,"Invalid query. You can only perform equals comparisons on NaN.")}return new NanFilter(field)}else{return new RelationFilter(field,op,value)}};return Filter}(),RelationOp=/** @class */function(){function RelationOp(name){this.name=name}RelationOp.fromString=function(op){switch(op){case"<":return RelationOp.LESS_THAN;case"<=":return RelationOp.LESS_THAN_OR_EQUAL;case"==":return RelationOp.EQUAL;case">=":return RelationOp.GREATER_THAN_OR_EQUAL;case">":return RelationOp.GREATER_THAN;case"array-contains":return RelationOp.ARRAY_CONTAINS;default:return fail("Unknown relation: "+op);}};RelationOp.prototype.toString=function(){return this.name};RelationOp.prototype.isEqual=function(other){return this.name===other.name};RelationOp.LESS_THAN=new RelationOp("<");RelationOp.LESS_THAN_OR_EQUAL=new RelationOp("<=");RelationOp.EQUAL=new RelationOp("==");RelationOp.GREATER_THAN=new RelationOp(">");RelationOp.GREATER_THAN_OR_EQUAL=new RelationOp(">=");RelationOp.ARRAY_CONTAINS=new RelationOp("array-contains");return RelationOp}(),RelationFilter=/** @class */function(_super){__extends(RelationFilter,_super);function RelationFilter(field,op,value){var _this=_super.call(this)||this;_this.field=field;_this.op=op;_this.value=value;return _this}RelationFilter.prototype.matches=function(doc){if(this.field.isKeyField()){assert$1(this.value instanceof RefValue,"Comparing on key, but filter value not a RefValue");assert$1(this.op!==RelationOp.ARRAY_CONTAINS,"array-contains queries don't make sense on document keys.");var refValue=this.value,comparison=DocumentKey.comparator(doc.key,refValue.key);return this.matchesComparison(comparison)}else{var val=doc.field(this.field);return val!==void 0&&this.matchesValue(val)}};RelationFilter.prototype.matchesValue=function(value){var _this=this;if(this.op===RelationOp.ARRAY_CONTAINS){return value instanceof ArrayValue&&value.internalValue.find(function(element){return element.isEqual(_this.value)})!==void 0}else{// Only compare types with matching backend order (such as double and int).
return this.value.typeOrder===value.typeOrder&&this.matchesComparison(value.compareTo(this.value))}};RelationFilter.prototype.matchesComparison=function(comparison){switch(this.op){case RelationOp.LESS_THAN:return 0>comparison;case RelationOp.LESS_THAN_OR_EQUAL:return 0>=comparison;case RelationOp.EQUAL:return 0===comparison;case RelationOp.GREATER_THAN:return 0<comparison;case RelationOp.GREATER_THAN_OR_EQUAL:return 0<=comparison;default:return fail("Unknown relation op"+this.op);}};RelationFilter.prototype.isInequality=function(){return this.op!==RelationOp.EQUAL&&this.op!==RelationOp.ARRAY_CONTAINS};RelationFilter.prototype.canonicalId=function(){// TODO(b/29183165): Technically, this won't be unique if two values have
// the same description, such as the int 3 and the string "3". So we should
// add the types in here somehow, too.
return this.field.canonicalString()+this.op.toString()+this.value.toString()};RelationFilter.prototype.isEqual=function(other){if(other instanceof RelationFilter){return this.op.isEqual(other.op)&&this.field.isEqual(other.field)&&this.value.isEqual(other.value)}else{return!1}};RelationFilter.prototype.toString=function(){return this.field.canonicalString()+" "+this.op+" "+this.value.value()};return RelationFilter}(Filter),NullFilter=/** @class */function(_super){__extends(NullFilter,_super);function NullFilter(field){var _this=_super.call(this)||this;_this.field=field;return _this}NullFilter.prototype.matches=function(doc){var val=doc.field(this.field);return val!==void 0&&null===val.value()};NullFilter.prototype.canonicalId=function(){return this.field.canonicalString()+" IS null"};NullFilter.prototype.toString=function(){return this.field.canonicalString()+" IS null"};NullFilter.prototype.isEqual=function(other){if(other instanceof NullFilter){return this.field.isEqual(other.field)}else{return!1}};return NullFilter}(Filter),NanFilter=/** @class */function(_super){__extends(NanFilter,_super);function NanFilter(field){var _this=_super.call(this)||this;_this.field=field;return _this}NanFilter.prototype.matches=function(doc){var field=doc.field(this.field),val=field&&field.value();return"number"===typeof val&&isNaN(val)};NanFilter.prototype.canonicalId=function(){return this.field.canonicalString()+" IS NaN"};NanFilter.prototype.toString=function(){return this.field.canonicalString()+" IS NaN"};NanFilter.prototype.isEqual=function(other){if(other instanceof NanFilter){return this.field.isEqual(other.field)}else{return!1}};return NanFilter}(Filter),Direction=/** @class */function(){function Direction(name){this.name=name}Direction.prototype.toString=function(){return this.name};Direction.ASCENDING=new Direction("asc");Direction.DESCENDING=new Direction("desc");return Direction}(),Bound=/** @class */function(){function Bound(position,before){this.position=position;this.before=before}Bound.prototype.canonicalId=function(){// TODO(b/29183165): Make this collision robust.
for(var canonicalId=this.before?"b:":"a:",_i=0,_a=this.position,component;_i<_a.length;_i++){component=_a[_i];canonicalId+=component.toString()}return canonicalId};/**
      * Returns true if a document sorts before a bound using the provided sort
      * order.
      */Bound.prototype.sortsBeforeDocument=function(orderBy,doc){assert$1(this.position.length<=orderBy.length,"Bound has more components than query's orderBy");for(var comparison=0,i=0;i<this.position.length;i++){var orderByComponent=orderBy[i],component=this.position[i];if(orderByComponent.field.isKeyField()){assert$1(component instanceof RefValue,"Bound has a non-key value where the key path is being used.");comparison=DocumentKey.comparator(component.key,doc.key)}else{var docValue=doc.field(orderByComponent.field);assert$1(docValue!==void 0,"Field should exist since document matched the orderBy already.");comparison=component.compareTo(docValue)}if(orderByComponent.dir===Direction.DESCENDING){comparison=-1*comparison}if(0!==comparison){break}}return this.before?0>=comparison:0>comparison};Bound.prototype.isEqual=function(other){if(null===other){return!1}if(this.before!==other.before||this.position.length!==other.position.length){return!1}for(var i=0;i<this.position.length;i++){var thisPosition=this.position[i],otherPosition=other.position[i];return thisPosition.isEqual(otherPosition)}return!0};return Bound}(),OrderBy=/** @class */function(){function OrderBy(field,dir){this.field=field;if(dir===void 0){dir=Direction.ASCENDING}this.dir=dir;this.isKeyOrderBy=field.isKeyField()}OrderBy.prototype.compare=function(d1,d2){var comparison=this.isKeyOrderBy?Document$1.compareByKey(d1,d2):Document$1.compareByField(this.field,d1,d2);switch(this.dir){case Direction.ASCENDING:return comparison;case Direction.DESCENDING:return-1*comparison;default:return fail("Unknown direction: "+this.dir);}};OrderBy.prototype.canonicalId=function(){// TODO(b/29183165): Make this collision robust.
return this.field.canonicalString()+this.dir.toString()};OrderBy.prototype.toString=function(){return this.field.canonicalString()+" ("+this.dir+")"};OrderBy.prototype.isEqual=function(other){return this.dir===other.dir&&this.field.isEqual(other.field)};return OrderBy}(),KEY_ORDERING_ASC=new OrderBy(FieldPath.keyField(),Direction.ASCENDING),KEY_ORDERING_DESC=new OrderBy(FieldPath.keyField(),Direction.DESCENDING),SnapshotVersion=/** @class */function(){function SnapshotVersion(timestamp){this.timestamp=timestamp}// TODO(b/34176344): Once we no longer need to use the old alpha protos,
// delete this constructor and use a timestamp-backed version everywhere.
SnapshotVersion.fromMicroseconds=function(value){var seconds=Math.floor(value/1e6),nanos=1e3*(value%1e6);return new SnapshotVersion(new Timestamp(seconds,nanos))};SnapshotVersion.fromTimestamp=function(value){return new SnapshotVersion(value)};SnapshotVersion.forDeletedDoc=function(){return SnapshotVersion.MIN};SnapshotVersion.prototype.compareTo=function(other){return this.timestamp._compareTo(other.timestamp)};SnapshotVersion.prototype.isEqual=function(other){return this.timestamp.isEqual(other.timestamp)};/** Returns a number representation of the version for use in spec tests. */SnapshotVersion.prototype.toMicroseconds=function(){// Convert to microseconds.
return 1e6*this.timestamp.seconds+this.timestamp.nanoseconds/1e3};SnapshotVersion.prototype.toString=function(){return"SnapshotVersion("+this.timestamp.toString()+")"};SnapshotVersion.prototype.toTimestamp=function(){return this.timestamp};SnapshotVersion.MIN=new SnapshotVersion(new Timestamp(0,0));return SnapshotVersion}(),QueryPurpose;(function(QueryPurpose){/** A regular, normal query. */QueryPurpose[QueryPurpose.Listen=0]="Listen";/**
                                                                                       * The query was used to refill a query after an existence filter mismatch.
                                                                                       */QueryPurpose[QueryPurpose.ExistenceFilterMismatch=1]="ExistenceFilterMismatch";/** The query was used to resolve a limbo document. */QueryPurpose[QueryPurpose.LimboResolution=2]="LimboResolution"})(QueryPurpose||(QueryPurpose={}));/**
                                          * An immutable set of metadata that the local store tracks for each query.
                                          */var QueryData=/** @class */function(){function QueryData(/** The query being listened to. */query,/**
                                                                 * The target ID to which the query corresponds; Assigned by the
                                                                 * LocalStore for user listens and by the SyncEngine for limbo watches.
                                                                 */targetId,/** The purpose of the query. */purpose,/** The sequence number of the last transaction during which this query data was modified */sequenceNumber,/** The latest snapshot version seen for this target. */snapshotVersion,/**
                                                                                                                                                                                                                                                                                                            * An opaque, server-assigned token that allows watching a query to be
                                                                                                                                                                                                                                                                                                            * resumed after disconnecting without retransmitting all the data that
                                                                                                                                                                                                                                                                                                            * matches the query. The resume token essentially identifies a point in
                                                                                                                                                                                                                                                                                                            * time from which the server should resume sending results.
                                                                                                                                                                                                                                                                                                            */resumeToken){if(void 0===snapshotVersion){snapshotVersion=SnapshotVersion.MIN}if(void 0===resumeToken){resumeToken=emptyByteString()}this.query=query;this.targetId=targetId;this.purpose=purpose;this.sequenceNumber=sequenceNumber;this.snapshotVersion=snapshotVersion;this.resumeToken=resumeToken}/**
     * Creates a new query data instance with an updated snapshot version and
     * resume token.
     */QueryData.prototype.copy=function(overwrite){return new QueryData(this.query,this.targetId,this.purpose,overwrite.sequenceNumber===void 0?this.sequenceNumber:overwrite.sequenceNumber,overwrite.snapshotVersion===void 0?this.snapshotVersion:overwrite.snapshotVersion,overwrite.resumeToken===void 0?this.resumeToken:overwrite.resumeToken)};QueryData.prototype.isEqual=function(other){return this.targetId===other.targetId&&this.purpose===other.purpose&&this.sequenceNumber===other.sequenceNumber&&this.snapshotVersion.isEqual(other.snapshotVersion)&&this.resumeToken===other.resumeToken&&this.query.isEqual(other.query)};return QueryData}(),SortedSet=/** @class */function(){function SortedSet(comparator){this.comparator=comparator;this.data=new SortedMap(this.comparator)}/**
     * Creates a SortedSet from the keys of the map.
     * This is currently implemented as an O(n) copy.
     */SortedSet.fromMapKeys=function(map){var keys=new SortedSet(map.comparator);map.forEach(function(key){keys=keys.add(key)});return keys};SortedSet.prototype.has=function(elem){return null!==this.data.get(elem)};SortedSet.prototype.first=function(){return this.data.minKey()};SortedSet.prototype.last=function(){return this.data.maxKey()};Object.defineProperty(SortedSet.prototype,"size",{get:function(){return this.data.size},enumerable:!0,configurable:!0});SortedSet.prototype.indexOf=function(elem){return this.data.indexOf(elem)};/** Iterates elements in order defined by "comparator" */SortedSet.prototype.forEach=function(cb){this.data.inorderTraversal(function(k,v){cb(k);return!1})};/** Iterates over `elem`s such that: range[0] <= elem < range[1]. */SortedSet.prototype.forEachInRange=function(range,cb){var iter=this.data.getIteratorFrom(range[0]);while(iter.hasNext()){var elem=iter.getNext();if(0<=this.comparator(elem.key,range[1]))return;cb(elem.key)}};/**
      * Iterates over `elem`s such that: start <= elem until false is returned.
      */SortedSet.prototype.forEachWhile=function(cb,start){var iter;if(start!==void 0){iter=this.data.getIteratorFrom(start)}else{iter=this.data.getIterator()}while(iter.hasNext()){var elem=iter.getNext(),result=cb(elem.key);if(!result)return}};/** Finds the least element greater than or equal to `elem`. */SortedSet.prototype.firstAfterOrEqual=function(elem){var iter=this.data.getIteratorFrom(elem);return iter.hasNext()?iter.getNext().key:null};SortedSet.prototype.getIterator=function(){return new SortedSetIterator(this.data.getIterator())};SortedSet.prototype.getIteratorFrom=function(key){return new SortedSetIterator(this.data.getIteratorFrom(key))};/** Inserts or updates an element */SortedSet.prototype.add=function(elem){return this.copy(this.data.remove(elem).insert(elem,!0))};/** Deletes an element */SortedSet.prototype.delete=function(elem){if(!this.has(elem))return this;return this.copy(this.data.remove(elem))};SortedSet.prototype.isEmpty=function(){return this.data.isEmpty()};SortedSet.prototype.unionWith=function(other){var result=this;other.forEach(function(elem){result=result.add(elem)});return result};SortedSet.prototype.isEqual=function(other){if(!(other instanceof SortedSet))return!1;if(this.size!==other.size)return!1;var thisIt=this.data.getIterator(),otherIt=other.data.getIterator();while(thisIt.hasNext()){var thisElem=thisIt.getNext().key,otherElem=otherIt.getNext().key;if(0!==this.comparator(thisElem,otherElem))return!1}return!0};SortedSet.prototype.toArray=function(){var res=[];this.forEach(function(targetId){res.push(targetId)});return res};SortedSet.prototype.toString=function(){var result=[];this.forEach(function(elem){return result.push(elem)});return"SortedSet("+result.toString()+")"};SortedSet.prototype.copy=function(data){var result=new SortedSet(this.comparator);result.data=data;return result};return SortedSet}(),SortedSetIterator=/** @class */function(){function SortedSetIterator(iter){this.iter=iter}SortedSetIterator.prototype.getNext=function(){return this.iter.getNext().key};SortedSetIterator.prototype.hasNext=function(){return this.iter.hasNext()};return SortedSetIterator}(),FieldMask=/** @class */function(){function FieldMask(fields){this.fields=fields;// TODO(dimond): validation of FieldMask
}FieldMask.fromSet=function(fields){return new FieldMask(fields)};FieldMask.fromArray=function(fields){var fieldsAsSet=new SortedSet(FieldPath.comparator);fields.forEach(function(fieldPath){return fieldsAsSet=fieldsAsSet.add(fieldPath)});return new FieldMask(fieldsAsSet)};/**
      * Verifies that `fieldPath` is included by at least one field in this field
      * mask.
      *
      * This is an O(n) operation, where `n` is the size of the field mask.
      */FieldMask.prototype.covers=function(fieldPath){var found=!1;this.fields.forEach(function(fieldMaskPath){if(fieldMaskPath.isPrefixOf(fieldPath)){found=!0}});return found};/**
      * Applies this field mask to the provided object value and returns an object
      * that only contains fields that are specified in both the input object and
      * this field mask.
      */FieldMask.prototype.applyTo=function(data){var filteredObject=ObjectValue.EMPTY;this.fields.forEach(function(fieldMaskPath){if(fieldMaskPath.isEmpty()){return data}else{var newValue=data.field(fieldMaskPath);if(newValue!==void 0){filteredObject=filteredObject.set(fieldMaskPath,newValue)}}});return filteredObject};FieldMask.prototype.isEqual=function(other){return this.fields.isEqual(other.fields)};return FieldMask}(),FieldTransform=/** @class */function(){function FieldTransform(field,transform){this.field=field;this.transform=transform}Object.defineProperty(FieldTransform.prototype,"isIdempotent",{/** Whether this field transform is idempotent. */get:function(){return this.transform.isIdempotent},enumerable:!0,configurable:!0});FieldTransform.prototype.isEqual=function(other){return this.field.isEqual(other.field)&&this.transform.isEqual(other.transform)};return FieldTransform}(),MutationResult=/** @class */function(){function MutationResult(/**
                            * The version at which the mutation was committed:
                            *
                            * - For most operations, this is the updateTime in the WriteResult.
                            * - For deletes, the commitTime of the WriteResponse (because deletes are
                            *   not stored and have no updateTime).
                            *
                            * Note that these versions can be different: No-op writes will not change
                            * the updateTime even though the commitTime advances.
                            */version,/**
                                        * The resulting fields returned from the backend after a
                                        * TransformMutation has been committed. Contains one FieldValue for each
                                        * FieldTransform that was in the mutation.
                                        *
                                        * Will be null if the mutation was not a TransformMutation.
                                        */transformResults){this.version=version;this.transformResults=transformResults}return MutationResult}(),MutationType;/**
      * @license
      * Copyright 2017 Google Inc.
      *
      * Licensed under the Apache License, Version 2.0 (the "License");
      * you may not use this file except in compliance with the License.
      * You may obtain a copy of the License at
      *
      *   http://www.apache.org/licenses/LICENSE-2.0
      *
      * Unless required by applicable law or agreed to in writing, software
      * distributed under the License is distributed on an "AS IS" BASIS,
      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      * See the License for the specific language governing permissions and
      * limitations under the License.
      */ /**
          * SortedSet is an immutable (copy-on-write) collection that holds elements
          * in order specified by the provided comparator.
          *
          * NOTE: if provided comparator returns 0 for two elements, we consider them to
          * be equal!
          */(function(MutationType){MutationType[MutationType.Set=0]="Set";MutationType[MutationType.Patch=1]="Patch";MutationType[MutationType.Transform=2]="Transform";MutationType[MutationType.Delete=3]="Delete"})(MutationType||(MutationType={}));/**
                                          * Encodes a precondition for a mutation. This follows the model that the
                                          * backend accepts with the special case of an explicit "empty" precondition
                                          * (meaning no precondition).
                                          */var Precondition=/** @class */function(){function Precondition(updateTime,exists){this.updateTime=updateTime;this.exists=exists;assert$1(updateTime===void 0||exists===void 0,"Precondition can specify \"exists\" or \"updateTime\" but not both")}/** Creates a new Precondition with an exists flag. */Precondition.exists=function(exists){return new Precondition(void 0,exists)};/** Creates a new Precondition based on a version a document exists at. */Precondition.updateTime=function(version){return new Precondition(version)};Object.defineProperty(Precondition.prototype,"isNone",{/** Returns whether this Precondition is empty. */get:function(){return this.updateTime===void 0&&this.exists===void 0},enumerable:!0,configurable:!0});/**
       * Returns true if the preconditions is valid for the given document
       * (or null if no document is available).
       */Precondition.prototype.isValidFor=function(maybeDoc){if(this.updateTime!==void 0){return maybeDoc instanceof Document$1&&maybeDoc.version.isEqual(this.updateTime)}else if(this.exists!==void 0){return this.exists===maybeDoc instanceof Document$1}else{assert$1(this.isNone,"Precondition should be empty");return!0}};Precondition.prototype.isEqual=function(other){return equals(this.updateTime,other.updateTime)&&this.exists===other.exists};Precondition.NONE=new Precondition;return Precondition}(),Mutation=/** @class */function(){function Mutation(){}Mutation.prototype.verifyKeyMatches=function(maybeDoc){if(null!=maybeDoc){assert$1(maybeDoc.key.isEqual(this.key),"Can only apply a mutation to a document with the same key")}};/**
      * Returns the version from the given document for use as the result of a
      * mutation. Mutations are defined to return the version of the base document
      * only if it is an existing document. Deleted and unknown documents have a
      * post-mutation version of SnapshotVersion.MIN.
      */Mutation.getPostMutationVersion=function(maybeDoc){if(maybeDoc instanceof Document$1){return maybeDoc.version}else{return SnapshotVersion.MIN}};return Mutation}(),SetMutation=/** @class */function(_super){__extends(SetMutation,_super);function SetMutation(key,value,precondition){var _this=_super.call(this)||this;_this.key=key;_this.value=value;_this.precondition=precondition;_this.type=MutationType.Set;return _this}SetMutation.prototype.applyToRemoteDocument=function(maybeDoc,mutationResult){this.verifyKeyMatches(maybeDoc);assert$1(null==mutationResult.transformResults,"Transform results received by SetMutation.");// Unlike applyToLocalView, if we're applying a mutation to a remote
// document the server has accepted the mutation so the precondition must
// have held.
var version=mutationResult.version;return new Document$1(this.key,version,this.value,{hasCommittedMutations:!0})};SetMutation.prototype.applyToLocalView=function(maybeDoc,baseDoc,localWriteTime){this.verifyKeyMatches(maybeDoc);if(!this.precondition.isValidFor(maybeDoc)){return maybeDoc}var version=Mutation.getPostMutationVersion(maybeDoc);return new Document$1(this.key,version,this.value,{hasLocalMutations:!0})};Object.defineProperty(SetMutation.prototype,"isIdempotent",{get:function(){return!0},enumerable:!0,configurable:!0});Object.defineProperty(SetMutation.prototype,"fieldMask",{get:function(){return null},enumerable:!0,configurable:!0});SetMutation.prototype.isEqual=function(other){return other instanceof SetMutation&&this.key.isEqual(other.key)&&this.value.isEqual(other.value)&&this.precondition.isEqual(other.precondition)};return SetMutation}(Mutation),PatchMutation=/** @class */function(_super){__extends(PatchMutation,_super);function PatchMutation(key,data,fieldMask,precondition){var _this=_super.call(this)||this;_this.key=key;_this.data=data;_this.fieldMask=fieldMask;_this.precondition=precondition;_this.type=MutationType.Patch;return _this}PatchMutation.prototype.applyToRemoteDocument=function(maybeDoc,mutationResult){this.verifyKeyMatches(maybeDoc);assert$1(null==mutationResult.transformResults,"Transform results received by PatchMutation.");if(!this.precondition.isValidFor(maybeDoc)){// Since the mutation was not rejected, we know that the  precondition
// matched on the backend. We therefore must not have the expected version
// of the document in our cache and return an UnknownDocument with the
// known updateTime.
return new UnknownDocument(this.key,mutationResult.version)}var newData=this.patchDocument(maybeDoc);return new Document$1(this.key,mutationResult.version,newData,{hasCommittedMutations:!0})};PatchMutation.prototype.applyToLocalView=function(maybeDoc,baseDoc,localWriteTime){this.verifyKeyMatches(maybeDoc);if(!this.precondition.isValidFor(maybeDoc)){return maybeDoc}var version=Mutation.getPostMutationVersion(maybeDoc),newData=this.patchDocument(maybeDoc);return new Document$1(this.key,version,newData,{hasLocalMutations:!0})};Object.defineProperty(PatchMutation.prototype,"isIdempotent",{get:function(){return!0},enumerable:!0,configurable:!0});PatchMutation.prototype.isEqual=function(other){return other instanceof PatchMutation&&this.key.isEqual(other.key)&&this.fieldMask.isEqual(other.fieldMask)&&this.precondition.isEqual(other.precondition)};/**
      * Patches the data of document if available or creates a new document. Note
      * that this does not check whether or not the precondition of this patch
      * holds.
      */PatchMutation.prototype.patchDocument=function(maybeDoc){var data;if(maybeDoc instanceof Document$1){data=maybeDoc.data}else{data=ObjectValue.EMPTY}return this.patchObject(data)};PatchMutation.prototype.patchObject=function(data){var _this=this;this.fieldMask.fields.forEach(function(fieldPath){if(!fieldPath.isEmpty()){var newValue=_this.data.field(fieldPath);if(newValue!==void 0){data=data.set(fieldPath,newValue)}else{data=data.delete(fieldPath)}}});return data};return PatchMutation}(Mutation),TransformMutation=/** @class */function(_super){__extends(TransformMutation,_super);function TransformMutation(key,fieldTransforms){var _this=_super.call(this)||this;_this.key=key;_this.fieldTransforms=fieldTransforms;_this.type=MutationType.Transform;// NOTE: We set a precondition of exists: true as a safety-check, since we
// always combine TransformMutations with a SetMutation or PatchMutation which
// (if successful) should end up with an existing document.
_this.precondition=Precondition.exists(!0);return _this}TransformMutation.prototype.applyToRemoteDocument=function(maybeDoc,mutationResult){this.verifyKeyMatches(maybeDoc);assert$1(null!=mutationResult.transformResults,"Transform results missing for TransformMutation.");if(!this.precondition.isValidFor(maybeDoc)){// Since the mutation was not rejected, we know that the  precondition
// matched on the backend. We therefore must not have the expected version
// of the document in our cache and return an UnknownDocument with the
// known updateTime.
return new UnknownDocument(this.key,mutationResult.version)}var doc=this.requireDocument(maybeDoc),transformResults=this.serverTransformResults(maybeDoc,mutationResult.transformResults),version=mutationResult.version,newData=this.transformObject(doc.data,transformResults);return new Document$1(this.key,version,newData,{hasCommittedMutations:!0})};TransformMutation.prototype.applyToLocalView=function(maybeDoc,baseDoc,localWriteTime){this.verifyKeyMatches(maybeDoc);if(!this.precondition.isValidFor(maybeDoc)){return maybeDoc}var doc=this.requireDocument(maybeDoc),transformResults=this.localTransformResults(localWriteTime,baseDoc),newData=this.transformObject(doc.data,transformResults);return new Document$1(this.key,doc.version,newData,{hasLocalMutations:!0})};Object.defineProperty(TransformMutation.prototype,"isIdempotent",{get:function(){for(var _i=0,_a=this.fieldTransforms,fieldTransform;_i<_a.length;_i++){fieldTransform=_a[_i];if(!fieldTransform.isIdempotent){return!1}}return!0},enumerable:!0,configurable:!0});Object.defineProperty(TransformMutation.prototype,"fieldMask",{get:function(){var fieldMask=new SortedSet(FieldPath.comparator);this.fieldTransforms.forEach(function(transform){return fieldMask=fieldMask.add(transform.field)});return new FieldMask(fieldMask)},enumerable:!0,configurable:!0});TransformMutation.prototype.isEqual=function(other){return other instanceof TransformMutation&&this.key.isEqual(other.key)&&arrayEquals(this.fieldTransforms,other.fieldTransforms)&&this.precondition.isEqual(other.precondition)};/**
      * Asserts that the given MaybeDocument is actually a Document and verifies
      * that it matches the key for this mutation. Since we only support
      * transformations with precondition exists this method is guaranteed to be
      * safe.
      */TransformMutation.prototype.requireDocument=function(maybeDoc){assert$1(maybeDoc instanceof Document$1,"Unknown MaybeDocument type "+maybeDoc);var doc=maybeDoc;assert$1(doc.key.isEqual(this.key),"Can only transform a document with the same key");return doc};/**
      * Creates a list of "transform results" (a transform result is a field value
      * representing the result of applying a transform) for use after a
      * TransformMutation has been acknowledged by the server.
      *
      * @param baseDoc The document prior to applying this mutation batch.
      * @param serverTransformResults The transform results received by the server.
      * @return The transform results list.
      */TransformMutation.prototype.serverTransformResults=function(baseDoc,serverTransformResults){var transformResults=[];assert$1(this.fieldTransforms.length===serverTransformResults.length,"server transform result count ("+serverTransformResults.length+") "+("should match field transform count ("+this.fieldTransforms.length+")"));for(var i=0;i<serverTransformResults.length;i++){var fieldTransform=this.fieldTransforms[i],transform=fieldTransform.transform,previousValue=null;if(baseDoc instanceof Document$1){previousValue=baseDoc.field(fieldTransform.field)||null}transformResults.push(transform.applyToRemoteDocument(previousValue,serverTransformResults[i]))}return transformResults};/**
      * Creates a list of "transform results" (a transform result is a field value
      * representing the result of applying a transform) for use when applying a
      * TransformMutation locally.
      *
      * @param localWriteTime The local time of the transform mutation (used to
      *     generate ServerTimestampValues).
      * @param baseDoc The document prior to applying this mutation batch.
      * @return The transform results list.
      */TransformMutation.prototype.localTransformResults=function(localWriteTime,baseDoc){for(var transformResults=[],_i=0,_a=this.fieldTransforms;_i<_a.length;_i++){var fieldTransform=_a[_i],transform=fieldTransform.transform,previousValue=null;if(baseDoc instanceof Document$1){previousValue=baseDoc.field(fieldTransform.field)||null}transformResults.push(transform.applyToLocalView(previousValue,localWriteTime))}return transformResults};TransformMutation.prototype.transformObject=function(data,transformResults){assert$1(transformResults.length===this.fieldTransforms.length,"TransformResults length mismatch.");for(var i=0;i<this.fieldTransforms.length;i++){var fieldTransform=this.fieldTransforms[i],fieldPath=fieldTransform.field;data=data.set(fieldPath,transformResults[i])}return data};return TransformMutation}(Mutation),DeleteMutation=/** @class */function(_super){__extends(DeleteMutation,_super);function DeleteMutation(key,precondition){var _this=_super.call(this)||this;_this.key=key;_this.precondition=precondition;_this.type=MutationType.Delete;return _this}DeleteMutation.prototype.applyToRemoteDocument=function(maybeDoc,mutationResult){this.verifyKeyMatches(maybeDoc);assert$1(null==mutationResult.transformResults,"Transform results received by DeleteMutation.");// Unlike applyToLocalView, if we're applying a mutation to a remote
// document the server has accepted the mutation so the precondition must
// have held.
return new NoDocument(this.key,mutationResult.version,{hasCommittedMutations:!0})};DeleteMutation.prototype.applyToLocalView=function(maybeDoc,baseDoc,localWriteTime){this.verifyKeyMatches(maybeDoc);if(!this.precondition.isValidFor(maybeDoc)){return maybeDoc}if(maybeDoc){assert$1(maybeDoc.key.isEqual(this.key),"Can only apply mutation to document with same key")}return new NoDocument(this.key,SnapshotVersion.forDeletedDoc())};DeleteMutation.prototype.isEqual=function(other){return other instanceof DeleteMutation&&this.key.isEqual(other.key)&&this.precondition.isEqual(other.precondition)};Object.defineProperty(DeleteMutation.prototype,"isIdempotent",{get:function(){return!0},enumerable:!0,configurable:!0});Object.defineProperty(DeleteMutation.prototype,"fieldMask",{get:function(){return null},enumerable:!0,configurable:!0});return DeleteMutation}(Mutation),ServerTimestampTransform=/** @class */function(){function ServerTimestampTransform(){this.isIdempotent=!0}ServerTimestampTransform.prototype.applyToLocalView=function(previousValue,localWriteTime){return new ServerTimestampValue(localWriteTime,previousValue)};ServerTimestampTransform.prototype.applyToRemoteDocument=function(previousValue,transformResult){return transformResult};ServerTimestampTransform.prototype.isEqual=function(other){return other instanceof ServerTimestampTransform};ServerTimestampTransform.instance=new ServerTimestampTransform;return ServerTimestampTransform}(),ArrayUnionTransformOperation=/** @class */function(){function ArrayUnionTransformOperation(elements){this.elements=elements;this.isIdempotent=!0}ArrayUnionTransformOperation.prototype.applyToLocalView=function(previousValue,localWriteTime){return this.apply(previousValue)};ArrayUnionTransformOperation.prototype.applyToRemoteDocument=function(previousValue,transformResult){// The server just sends null as the transform result for array operations,
// so we have to calculate a result the same as we do for local
// applications.
return this.apply(previousValue)};ArrayUnionTransformOperation.prototype.apply=function(previousValue){for(var result=coercedFieldValuesArray(previousValue),_loop_1=function(toUnion){if(!result.find(function(element){return element.isEqual(toUnion)})){result.push(toUnion)}},_i=0,_a=this.elements,toUnion;_i<_a.length;_i++){toUnion=_a[_i];_loop_1(toUnion)}return new ArrayValue(result)};ArrayUnionTransformOperation.prototype.isEqual=function(other){return other instanceof ArrayUnionTransformOperation&&arrayEquals(other.elements,this.elements)};return ArrayUnionTransformOperation}(),ArrayRemoveTransformOperation=/** @class */function(){function ArrayRemoveTransformOperation(elements){this.elements=elements;this.isIdempotent=!0}ArrayRemoveTransformOperation.prototype.applyToLocalView=function(previousValue,localWriteTime){return this.apply(previousValue)};ArrayRemoveTransformOperation.prototype.applyToRemoteDocument=function(previousValue,transformResult){// The server just sends null as the transform result for array operations,
// so we have to calculate a result the same as we do for local
// applications.
return this.apply(previousValue)};ArrayRemoveTransformOperation.prototype.apply=function(previousValue){for(var result=coercedFieldValuesArray(previousValue),_loop_2=function(toRemove){result=result.filter(function(element){return!element.isEqual(toRemove)})},_i=0,_a=this.elements,toRemove;_i<_a.length;_i++){toRemove=_a[_i];_loop_2(toRemove)}return new ArrayValue(result)};ArrayRemoveTransformOperation.prototype.isEqual=function(other){return other instanceof ArrayRemoveTransformOperation&&arrayEquals(other.elements,this.elements)};return ArrayRemoveTransformOperation}(),NumericIncrementTransformOperation=/** @class */function(){function NumericIncrementTransformOperation(operand){this.operand=operand;this.isIdempotent=!1}NumericIncrementTransformOperation.prototype.applyToLocalView=function(previousValue,localWriteTime){// PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit
// precision and resolves overflows by reducing precision, we do not
// manually cap overflows at 2^63.
// Return an integer value iff the previous value and the operand is an
// integer.
if(previousValue instanceof IntegerValue&&this.operand instanceof IntegerValue){var sum=previousValue.internalValue+this.operand.internalValue;return new IntegerValue(sum)}else if(previousValue instanceof NumberValue){var sum=previousValue.internalValue+this.operand.internalValue;return new DoubleValue(sum)}else{// If the existing value is not a number, use the value of the transform as
// the new base value.
return this.operand}};NumericIncrementTransformOperation.prototype.applyToRemoteDocument=function(previousValue,transformResult){assert$1(null!==transformResult,"Didn't receive transformResult for NUMERIC_ADD transform");return transformResult};NumericIncrementTransformOperation.prototype.isEqual=function(other){return other instanceof NumericIncrementTransformOperation&&this.operand.isEqual(other.operand)};return NumericIncrementTransformOperation}();/**
      * A mutation describes a self-contained change to a document. Mutations can
      * create, replace, delete, and update subsets of documents.
      *
      * Mutations not only act on the value of the document but also it version.
      *
      * For local mutations (mutations that haven't been committed yet), we preserve
      * the existing version for Set, Patch, and Transform mutations. For Delete
      * mutations, we reset the version to 0.
      *
      * Here's the expected transition table.
      *
      * MUTATION           APPLIED TO            RESULTS IN
      *
      * SetMutation        Document(v3)          Document(v3)
      * SetMutation        NoDocument(v3)        Document(v0)
      * SetMutation        null                  Document(v0)
      * PatchMutation      Document(v3)          Document(v3)
      * PatchMutation      NoDocument(v3)        NoDocument(v3)
      * PatchMutation      null                  null
      * TransformMutation  Document(v3)          Document(v3)
      * TransformMutation  NoDocument(v3)        NoDocument(v3)
      * TransformMutation  null                  null
      * DeleteMutation     Document(v3)          NoDocument(v0)
      * DeleteMutation     NoDocument(v3)        NoDocument(v0)
      * DeleteMutation     null                  NoDocument(v0)
      *
      * For acknowledged mutations, we use the updateTime of the WriteResponse as
      * the resulting version for Set, Patch, and Transform mutations. As deletes
      * have no explicit update time, we use the commitTime of the WriteResponse for
      * Delete mutations.
      *
      * If a mutation is acknowledged by the backend but fails the precondition check
      * locally, we return an `UnknownDocument` and rely on Watch to send us the
      * updated version.
      *
      * Note that TransformMutations don't create Documents (in the case of being
      * applied to a NoDocument), even though they would on the backend. This is
      * because the client always combines the TransformMutation with a SetMutation
      * or PatchMutation and we only want to apply the transform if the prior
      * mutation resulted in a Document (always true for a SetMutation, but not
      * necessarily for a PatchMutation).
      *
      * ## Subclassing Notes
      *
      * Subclasses of Mutation need to implement applyToRemoteDocument() and
      * applyToLocalView() to implement the actual behavior of applying the mutation
      * to some source document.
      */function coercedFieldValuesArray(value){if(value instanceof ArrayValue){return value.internalValue.slice()}else{// coerce to empty array.
return[]}}/**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */var ExistenceFilter=/** @class */function(){// TODO(b/33078163): just use simplest form of existence filter for now
function ExistenceFilter(count){this.count=count}ExistenceFilter.prototype.isEqual=function(other){return other&&other.count===this.count};return ExistenceFilter}(),RpcCode;/**
      * @license
      * Copyright 2017 Google Inc.
      *
      * Licensed under the Apache License, Version 2.0 (the "License");
      * you may not use this file except in compliance with the License.
      * You may obtain a copy of the License at
      *
      *   http://www.apache.org/licenses/LICENSE-2.0
      *
      * Unless required by applicable law or agreed to in writing, software
      * distributed under the License is distributed on an "AS IS" BASIS,
      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      * See the License for the specific language governing permissions and
      * limitations under the License.
      */ /**
          * Error Codes describing the different ways GRPC can fail. These are copied
          * directly from GRPC's sources here:
          *
          * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
          *
          * Important! The names of these identifiers matter because the string forms
          * are used for reverse lookups from the webchannel stream. Do NOT change the
          * names of these identifiers.
          */(function(RpcCode){RpcCode[RpcCode.OK=0]="OK";RpcCode[RpcCode.CANCELLED=1]="CANCELLED";RpcCode[RpcCode.UNKNOWN=2]="UNKNOWN";RpcCode[RpcCode.INVALID_ARGUMENT=3]="INVALID_ARGUMENT";RpcCode[RpcCode.DEADLINE_EXCEEDED=4]="DEADLINE_EXCEEDED";RpcCode[RpcCode.NOT_FOUND=5]="NOT_FOUND";RpcCode[RpcCode.ALREADY_EXISTS=6]="ALREADY_EXISTS";RpcCode[RpcCode.PERMISSION_DENIED=7]="PERMISSION_DENIED";RpcCode[RpcCode.UNAUTHENTICATED=16]="UNAUTHENTICATED";RpcCode[RpcCode.RESOURCE_EXHAUSTED=8]="RESOURCE_EXHAUSTED";RpcCode[RpcCode.FAILED_PRECONDITION=9]="FAILED_PRECONDITION";RpcCode[RpcCode.ABORTED=10]="ABORTED";RpcCode[RpcCode.OUT_OF_RANGE=11]="OUT_OF_RANGE";RpcCode[RpcCode.UNIMPLEMENTED=12]="UNIMPLEMENTED";RpcCode[RpcCode.INTERNAL=13]="INTERNAL";RpcCode[RpcCode.UNAVAILABLE=14]="UNAVAILABLE";RpcCode[RpcCode.DATA_LOSS=15]="DATA_LOSS"})(RpcCode||(RpcCode={}));/**
                                * Determines whether an error code represents a permanent error when received
                                * in response to a non-write operation.
                                *
                                * See isPermanentWriteError for classifying write errors.
                                */function isPermanentError(code){switch(code){case Code.OK:return fail("Treated status OK as error");case Code.CANCELLED:case Code.UNKNOWN:case Code.DEADLINE_EXCEEDED:case Code.RESOURCE_EXHAUSTED:case Code.INTERNAL:case Code.UNAVAILABLE:// Unauthenticated means something went wrong with our token and we need
// to retry with new credentials which will happen automatically.
case Code.UNAUTHENTICATED:return!1;case Code.INVALID_ARGUMENT:case Code.NOT_FOUND:case Code.ALREADY_EXISTS:case Code.PERMISSION_DENIED:case Code.FAILED_PRECONDITION:// Aborted might be retried in some scenarios, but that is dependant on
// the context and should handled individually by the calling code.
// See https://cloud.google.com/apis/design/errors.
case Code.ABORTED:case Code.OUT_OF_RANGE:case Code.UNIMPLEMENTED:case Code.DATA_LOSS:return!0;default:return fail("Unknown status code: "+code);}}/**
   * Determines whether an error code represents a permanent error when received
   * in response to a write operation.
   *
   * Write operations must be handled specially because as of b/119437764, ABORTED
   * errors on the write stream should be retried too (even though ABORTED errors
   * are not generally retryable).
   *
   * Note that during the initial handshake on the write stream an ABORTED error
   * signals that we should discard our stream token (i.e. it is permanent). This
   * means a handshake error should be classified with isPermanentError, above.
   */function isPermanentWriteError(code){return isPermanentError(code)&&code!==Code.ABORTED}/**
   * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.
   *
   * @returns The Code equivalent to the given status string or undefined if
   *     there is no match.
   */function mapCodeFromRpcStatus(status){// tslint:disable-next-line:no-any lookup by string
var code=RpcCode[status];if(code===void 0){return void 0}return mapCodeFromRpcCode(code)}/**
   * Maps an error Code from GRPC status code number, like 0, 1, or 14. These
   * are not the same as HTTP status codes.
   *
   * @returns The Code equivalent to the given GRPC status code. Fails if there
   *     is no match.
   */function mapCodeFromRpcCode(code){if(code===void 0){// This shouldn't normally happen, but in certain error cases (like trying
// to send invalid proto messages) we may get an error with no GRPC code.
error("GRPC error has no .code");return Code.UNKNOWN}switch(code){case RpcCode.OK:return Code.OK;case RpcCode.CANCELLED:return Code.CANCELLED;case RpcCode.UNKNOWN:return Code.UNKNOWN;case RpcCode.DEADLINE_EXCEEDED:return Code.DEADLINE_EXCEEDED;case RpcCode.RESOURCE_EXHAUSTED:return Code.RESOURCE_EXHAUSTED;case RpcCode.INTERNAL:return Code.INTERNAL;case RpcCode.UNAVAILABLE:return Code.UNAVAILABLE;case RpcCode.UNAUTHENTICATED:return Code.UNAUTHENTICATED;case RpcCode.INVALID_ARGUMENT:return Code.INVALID_ARGUMENT;case RpcCode.NOT_FOUND:return Code.NOT_FOUND;case RpcCode.ALREADY_EXISTS:return Code.ALREADY_EXISTS;case RpcCode.PERMISSION_DENIED:return Code.PERMISSION_DENIED;case RpcCode.FAILED_PRECONDITION:return Code.FAILED_PRECONDITION;case RpcCode.ABORTED:return Code.ABORTED;case RpcCode.OUT_OF_RANGE:return Code.OUT_OF_RANGE;case RpcCode.UNIMPLEMENTED:return Code.UNIMPLEMENTED;case RpcCode.DATA_LOSS:return Code.DATA_LOSS;default:return fail("Unknown status code: "+code);}}/**
   * Maps an RPC code from a Code. This is the reverse operation from
   * mapCodeFromRpcCode and should really only be used in tests.
   */function mapRpcCodeFromCode(code){if(code===void 0){return RpcCode.OK}switch(code){case Code.OK:return RpcCode.OK;case Code.CANCELLED:return RpcCode.CANCELLED;case Code.UNKNOWN:return RpcCode.UNKNOWN;case Code.DEADLINE_EXCEEDED:return RpcCode.DEADLINE_EXCEEDED;case Code.RESOURCE_EXHAUSTED:return RpcCode.RESOURCE_EXHAUSTED;case Code.INTERNAL:return RpcCode.INTERNAL;case Code.UNAVAILABLE:return RpcCode.UNAVAILABLE;case Code.UNAUTHENTICATED:return RpcCode.UNAUTHENTICATED;case Code.INVALID_ARGUMENT:return RpcCode.INVALID_ARGUMENT;case Code.NOT_FOUND:return RpcCode.NOT_FOUND;case Code.ALREADY_EXISTS:return RpcCode.ALREADY_EXISTS;case Code.PERMISSION_DENIED:return RpcCode.PERMISSION_DENIED;case Code.FAILED_PRECONDITION:return RpcCode.FAILED_PRECONDITION;case Code.ABORTED:return RpcCode.ABORTED;case Code.OUT_OF_RANGE:return RpcCode.OUT_OF_RANGE;case Code.UNIMPLEMENTED:return RpcCode.UNIMPLEMENTED;case Code.DATA_LOSS:return RpcCode.DATA_LOSS;default:return fail("Unknown status code: "+code);}}/**
   * Converts an HTTP Status Code to the equivalent error code.
   *
   * @param status An HTTP Status Code, like 200, 404, 503, etc.
   * @returns The equivalent Code. Unknown status codes are mapped to
   *     Code.UNKNOWN.
   */function mapCodeFromHttpStatus(status){// The canonical error codes for Google APIs [1] specify mapping onto HTTP
// status codes but the mapping is not bijective. In each case of ambiguity
// this function chooses a primary error.
//
// [1]
// https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
switch(status){case 200:// OK
return Code.OK;case 400:// Bad Request
return Code.INVALID_ARGUMENT;// Other possibilities based on the forward mapping
// return Code.FAILED_PRECONDITION;
// return Code.OUT_OF_RANGE;
case 401:// Unauthorized
return Code.UNAUTHENTICATED;case 403:// Forbidden
return Code.PERMISSION_DENIED;case 404:// Not Found
return Code.NOT_FOUND;case 409:// Conflict
return Code.ABORTED;// Other possibilities:
// return Code.ALREADY_EXISTS;
case 416:// Range Not Satisfiable
return Code.OUT_OF_RANGE;case 429:// Too Many Requests
return Code.RESOURCE_EXHAUSTED;case 499:// Client Closed Request
return Code.CANCELLED;case 500:// Internal Server Error
return Code.UNKNOWN;// Other possibilities:
// return Code.INTERNAL;
// return Code.DATA_LOSS;
case 501:// Unimplemented
return Code.UNIMPLEMENTED;case 503:// Service Unavailable
return Code.UNAVAILABLE;case 504:// Gateway Timeout
return Code.DEADLINE_EXCEEDED;default:if(200<=status&&300>status)return Code.OK;if(400<=status&&500>status)return Code.FAILED_PRECONDITION;if(500<=status&&600>status)return Code.INTERNAL;return Code.UNKNOWN;}}/**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */var EMPTY_MAYBE_DOCUMENT_MAP=new SortedMap(DocumentKey.comparator);function maybeDocumentMap(){return EMPTY_MAYBE_DOCUMENT_MAP}function nullableMaybeDocumentMap(){return maybeDocumentMap()}var EMPTY_DOCUMENT_MAP=new SortedMap(DocumentKey.comparator);function documentMap(){return EMPTY_DOCUMENT_MAP}var EMPTY_DOCUMENT_VERSION_MAP=new SortedMap(DocumentKey.comparator);function documentVersionMap(){return EMPTY_DOCUMENT_VERSION_MAP}var EMPTY_DOCUMENT_KEY_SET=new SortedSet(DocumentKey.comparator);function documentKeySet(){for(var keys=[],_i=0;_i<arguments.length;_i++){keys[_i]=arguments[_i]}for(var set=EMPTY_DOCUMENT_KEY_SET,_a=0,keys_1=keys,key;_a<keys_1.length;_a++){key=keys_1[_a];set=set.add(key)}return set}var EMPTY_TARGET_ID_SET=new SortedSet(primitiveComparator);function targetIdSet(){return EMPTY_TARGET_ID_SET}/**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */ /**
       * DocumentSet is an immutable (copy-on-write) collection that holds documents
       * in order specified by the provided comparator. We always add a document key
       * comparator on top of what is provided to guarantee document equality based on
       * the key.
       */var DocumentSet=/** @class */function(){/** The default ordering is by key if the comparator is omitted */function DocumentSet(comp){// We are adding document key comparator to the end as it's the only
// guaranteed unique property of a document.
if(comp){this.comparator=function(d1,d2){return comp(d1,d2)||DocumentKey.comparator(d1.key,d2.key)}}else{this.comparator=function(d1,d2){return DocumentKey.comparator(d1.key,d2.key)}}this.keyedMap=documentMap();this.sortedSet=new SortedMap(this.comparator)}/**
     * Returns an empty copy of the existing DocumentSet, using the same
     * comparator.
     */DocumentSet.emptySet=function(oldSet){return new DocumentSet(oldSet.comparator)};DocumentSet.prototype.has=function(key){return null!=this.keyedMap.get(key)};DocumentSet.prototype.get=function(key){return this.keyedMap.get(key)};DocumentSet.prototype.first=function(){return this.sortedSet.minKey()};DocumentSet.prototype.last=function(){return this.sortedSet.maxKey()};DocumentSet.prototype.isEmpty=function(){return this.sortedSet.isEmpty()};/**
      * Returns the index of the provided key in the document set, or -1 if the
      * document key is not present in the set;
      */DocumentSet.prototype.indexOf=function(key){var doc=this.keyedMap.get(key);return doc?this.sortedSet.indexOf(doc):-1};Object.defineProperty(DocumentSet.prototype,"size",{get:function(){return this.sortedSet.size},enumerable:!0,configurable:!0});/** Iterates documents in order defined by "comparator" */DocumentSet.prototype.forEach=function(cb){this.sortedSet.inorderTraversal(function(k,v){cb(k);return!1})};/** Inserts or updates a document with the same key */DocumentSet.prototype.add=function(doc){// First remove the element if we have it.
var set=this.delete(doc.key);return set.copy(set.keyedMap.insert(doc.key,doc),set.sortedSet.insert(doc,null))};/** Deletes a document with a given key */DocumentSet.prototype.delete=function(key){var doc=this.get(key);if(!doc){return this}return this.copy(this.keyedMap.remove(key),this.sortedSet.remove(doc))};DocumentSet.prototype.isEqual=function(other){if(!(other instanceof DocumentSet))return!1;if(this.size!==other.size)return!1;var thisIt=this.sortedSet.getIterator(),otherIt=other.sortedSet.getIterator();while(thisIt.hasNext()){var thisDoc=thisIt.getNext().key,otherDoc=otherIt.getNext().key;if(!thisDoc.isEqual(otherDoc))return!1}return!0};DocumentSet.prototype.toString=function(){var docStrings=[];this.forEach(function(doc){docStrings.push(doc.toString())});if(0===docStrings.length){return"DocumentSet ()"}else{return"DocumentSet (\n  "+docStrings.join("  \n")+"\n)"}};DocumentSet.prototype.copy=function(keyedMap,sortedSet){var newSet=new DocumentSet;newSet.comparator=this.comparator;newSet.keyedMap=keyedMap;newSet.sortedSet=sortedSet;return newSet};return DocumentSet}(),ChangeType;/**
      * @license
      * Copyright 2017 Google Inc.
      *
      * Licensed under the Apache License, Version 2.0 (the "License");
      * you may not use this file except in compliance with the License.
      * You may obtain a copy of the License at
      *
      *   http://www.apache.org/licenses/LICENSE-2.0
      *
      * Unless required by applicable law or agreed to in writing, software
      * distributed under the License is distributed on an "AS IS" BASIS,
      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      * See the License for the specific language governing permissions and
      * limitations under the License.
      */(function(ChangeType){ChangeType[ChangeType.Added=0]="Added";ChangeType[ChangeType.Removed=1]="Removed";ChangeType[ChangeType.Modified=2]="Modified";ChangeType[ChangeType.Metadata=3]="Metadata"})(ChangeType||(ChangeType={}));var SyncState;(function(SyncState){SyncState[SyncState.Local=0]="Local";SyncState[SyncState.Synced=1]="Synced"})(SyncState||(SyncState={}));/**
                                    * DocumentChangeSet keeps track of a set of changes to docs in a query, merging
                                    * duplicate events for the same doc.
                                    */var DocumentChangeSet=/** @class */function(){function DocumentChangeSet(){this.changeMap=new SortedMap(DocumentKey.comparator)}DocumentChangeSet.prototype.track=function(change){var key=change.doc.key,oldChange=this.changeMap.get(key);if(!oldChange){this.changeMap=this.changeMap.insert(key,change);return}// Merge the new change with the existing change.
if(change.type!==ChangeType.Added&&oldChange.type===ChangeType.Metadata){this.changeMap=this.changeMap.insert(key,change)}else if(change.type===ChangeType.Metadata&&oldChange.type!==ChangeType.Removed){this.changeMap=this.changeMap.insert(key,{type:oldChange.type,doc:change.doc})}else if(change.type===ChangeType.Modified&&oldChange.type===ChangeType.Modified){this.changeMap=this.changeMap.insert(key,{type:ChangeType.Modified,doc:change.doc})}else if(change.type===ChangeType.Modified&&oldChange.type===ChangeType.Added){this.changeMap=this.changeMap.insert(key,{type:ChangeType.Added,doc:change.doc})}else if(change.type===ChangeType.Removed&&oldChange.type===ChangeType.Added){this.changeMap=this.changeMap.remove(key)}else if(change.type===ChangeType.Removed&&oldChange.type===ChangeType.Modified){this.changeMap=this.changeMap.insert(key,{type:ChangeType.Removed,doc:oldChange.doc})}else if(change.type===ChangeType.Added&&oldChange.type===ChangeType.Removed){this.changeMap=this.changeMap.insert(key,{type:ChangeType.Modified,doc:change.doc})}else{// This includes these cases, which don't make sense:
// Added->Added
// Removed->Removed
// Modified->Added
// Removed->Modified
// Metadata->Added
// Removed->Metadata
fail("unsupported combination of changes: "+JSON.stringify(change)+" after "+JSON.stringify(oldChange))}};DocumentChangeSet.prototype.getChanges=function(){var changes=[];this.changeMap.inorderTraversal(function(key,change){changes.push(change)});return changes};return DocumentChangeSet}(),ViewSnapshot=/** @class */function(){function ViewSnapshot(query,docs,oldDocs,docChanges,mutatedKeys,fromCache,syncStateChanged,excludesMetadataChanges){this.query=query;this.docs=docs;this.oldDocs=oldDocs;this.docChanges=docChanges;this.mutatedKeys=mutatedKeys;this.fromCache=fromCache;this.syncStateChanged=syncStateChanged;this.excludesMetadataChanges=excludesMetadataChanges}/** Returns a view snapshot as if all documents in the snapshot were added. */ViewSnapshot.fromInitialDocuments=function(query,documents,mutatedKeys,fromCache){var changes=[];documents.forEach(function(doc){changes.push({type:ChangeType.Added,doc:doc})});return new ViewSnapshot(query,documents,DocumentSet.emptySet(documents),changes,mutatedKeys,fromCache,!0,!1)};Object.defineProperty(ViewSnapshot.prototype,"hasPendingWrites",{get:function(){return!this.mutatedKeys.isEmpty()},enumerable:!0,configurable:!0});ViewSnapshot.prototype.isEqual=function(other){if(this.fromCache!==other.fromCache||this.syncStateChanged!==other.syncStateChanged||!this.mutatedKeys.isEqual(other.mutatedKeys)||!this.query.isEqual(other.query)||!this.docs.isEqual(other.docs)||!this.oldDocs.isEqual(other.oldDocs)){return!1}var changes=this.docChanges,otherChanges=other.docChanges;if(changes.length!==otherChanges.length){return!1}for(var i=0;i<changes.length;i++){if(changes[i].type!==otherChanges[i].type||!changes[i].doc.isEqual(otherChanges[i].doc)){return!1}}return!0};return ViewSnapshot}(),RemoteEvent=/** @class */function(){function RemoteEvent(/**
                         * The snapshot version this event brings us up to, or MIN if not set.
                         */snapshotVersion,/**
                                             * A map from target to changes to the target. See TargetChange.
                                             */targetChanges,/**
                                                               * A set of targets that is known to be inconsistent. Listens for these
                                                               * targets should be re-established without resume tokens.
                                                               */targetMismatches,/**
                                                                                    * A set of which documents have changed or been deleted, along with the
                                                                                    * doc's new values (if not deleted).
                                                                                    */documentUpdates,/**
                                                                                                        * A set of which document updates are due only to limbo resolution targets.
                                                                                                        */resolvedLimboDocuments){this.snapshotVersion=snapshotVersion;this.targetChanges=targetChanges;this.targetMismatches=targetMismatches;this.documentUpdates=documentUpdates;this.resolvedLimboDocuments=resolvedLimboDocuments}/**
     * HACK: Views require RemoteEvents in order to determine whether the view is
     * CURRENT, but secondary tabs don't receive remote events. So this method is
     * used to create a synthesized RemoteEvent that can be used to apply a
     * CURRENT status change to a View, for queries executed in a different tab.
     */ // PORTING NOTE: Multi-tab only
RemoteEvent.createSynthesizedRemoteEventForCurrentChange=function(targetId,current){var _a,targetChanges=(_a={},_a[targetId]=TargetChange.createSynthesizedTargetChangeForCurrentChange(targetId,current),_a);return new RemoteEvent(SnapshotVersion.MIN,targetChanges,targetIdSet(),maybeDocumentMap(),documentKeySet())};return RemoteEvent}(),TargetChange=/** @class */function(){function TargetChange(/**
                          * An opaque, server-assigned token that allows watching a query to be resumed
                          * after disconnecting without retransmitting all the data that matches the
                          * query. The resume token essentially identifies a point in time from which
                          * the server should resume sending results.
                          */resumeToken,/**
                                          * The "current" (synced) status of this target. Note that "current"
                                          * has special meaning in the RPC protocol that implies that a target is
                                          * both up-to-date and consistent with the rest of the watch stream.
                                          */current,/**
                                                      * The set of documents that were newly assigned to this target as part of
                                                      * this remote event.
                                                      */addedDocuments,/**
                                                                         * The set of documents that were already assigned to this target but received
                                                                         * an update during this remote event.
                                                                         */modifiedDocuments,/**
                                                                                               * The set of documents that were removed from this target as part of this
                                                                                               * remote event.
                                                                                               */removedDocuments){this.resumeToken=resumeToken;this.current=current;this.addedDocuments=addedDocuments;this.modifiedDocuments=modifiedDocuments;this.removedDocuments=removedDocuments}/**
     * HACK: Views require TargetChanges in order to determine whether the view is
     * CURRENT, but secondary tabs don't receive remote events. So this method is
     * used to create a synthesized TargetChanges that can be used to apply a
     * CURRENT status change to a View, for queries executed in a different tab.
     */ // PORTING NOTE: Multi-tab only
TargetChange.createSynthesizedTargetChangeForCurrentChange=function(targetId,current){return new TargetChange(emptyByteString(),current,documentKeySet(),documentKeySet(),documentKeySet())};return TargetChange}(),DocumentWatchChange=/** @class */function(){function DocumentWatchChange(/** The new document applies to all of these targets. */updatedTargetIds,/** The new document is removed from all of these targets. */removedTargetIds,/** The key of the document for this change. */key,/**
                                                                                                                                                                                                                                              * The new document or NoDocument if it was deleted. Is null if the
                                                                                                                                                                                                                                              * document went out of view without the server sending a new document.
                                                                                                                                                                                                                                              */newDoc){this.updatedTargetIds=updatedTargetIds;this.removedTargetIds=removedTargetIds;this.key=key;this.newDoc=newDoc}return DocumentWatchChange}(),ExistenceFilterChange=/** @class */function(){function ExistenceFilterChange(targetId,existenceFilter){this.targetId=targetId;this.existenceFilter=existenceFilter}return ExistenceFilterChange}(),WatchTargetChangeState;(function(WatchTargetChangeState){WatchTargetChangeState[WatchTargetChangeState.NoChange=0]="NoChange";WatchTargetChangeState[WatchTargetChangeState.Added=1]="Added";WatchTargetChangeState[WatchTargetChangeState.Removed=2]="Removed";WatchTargetChangeState[WatchTargetChangeState.Current=3]="Current";WatchTargetChangeState[WatchTargetChangeState.Reset=4]="Reset"})(WatchTargetChangeState||(WatchTargetChangeState={}));var WatchTargetChange=/** @class */function(){function WatchTargetChange(/** What kind of change occurred to the watch target. */state,/** The target IDs that were added/removed/set. */targetIds,/**
                                                                                                                                                           * An opaque, server-assigned token that allows watching a query to be
                                                                                                                                                           * resumed after disconnecting without retransmitting all the data that
                                                                                                                                                           * matches the query. The resume token essentially identifies a point in
                                                                                                                                                           * time from which the server should resume sending results.
                                                                                                                                                           */resumeToken,/** An RPC error indicating why the watch failed. */cause){if(void 0===resumeToken){resumeToken=emptyByteString()}if(void 0===cause){cause=null}this.state=state;this.targetIds=targetIds;this.resumeToken=resumeToken;this.cause=cause}return WatchTargetChange}(),TargetState=/** @class */function(){function TargetState(){/**
     * The number of pending responses (adds or removes) that we are waiting on.
     * We only consider targets active that have no pending responses.
     */this.pendingResponses=0;/**
                                   * Keeps track of the document changes since the last raised snapshot.
                                   *
                                   * These changes are continuously updated as we receive document updates and
                                   * always reflect the current set of changes against the last issued snapshot.
                                   */this.documentChanges=snapshotChangesMap();/** See public getters for explanations of these fields. */this._resumeToken=emptyByteString();this._current=!1;/**
                            * Whether this target state should be included in the next snapshot. We
                            * initialize to true so that newly-added targets are included in the next
                            * RemoteEvent.
                            */this._hasPendingChanges=!0}Object.defineProperty(TargetState.prototype,"current",{/**
     * Whether this target has been marked 'current'.
     *
     * 'Current' has special meaning in the RPC protocol: It implies that the
     * Watch backend has sent us all changes up to the point at which the target
     * was added and that the target is consistent with the rest of the watch
     * stream.
     */get:function(){return this._current},enumerable:!0,configurable:!0});Object.defineProperty(TargetState.prototype,"resumeToken",{/** The last resume token sent to us for this target. */get:function(){return this._resumeToken},enumerable:!0,configurable:!0});Object.defineProperty(TargetState.prototype,"isPending",{/** Whether this target has pending target adds or target removes. */get:function(){return 0!==this.pendingResponses},enumerable:!0,configurable:!0});Object.defineProperty(TargetState.prototype,"hasPendingChanges",{/** Whether we have modified any state that should trigger a snapshot. */get:function(){return this._hasPendingChanges},enumerable:!0,configurable:!0});/**
       * Applies the resume token to the TargetChange, but only when it has a new
       * value. Empty resumeTokens are discarded.
       */TargetState.prototype.updateResumeToken=function(resumeToken){if(0<resumeToken.length){this._hasPendingChanges=!0;this._resumeToken=resumeToken}};/**
      * Creates a target change from the current set of changes.
      *
      * To reset the document changes after raising this snapshot, call
      * `clearPendingChanges()`.
      */TargetState.prototype.toTargetChange=function(){var addedDocuments=documentKeySet(),modifiedDocuments=documentKeySet(),removedDocuments=documentKeySet();this.documentChanges.forEach(function(key,changeType){switch(changeType){case ChangeType.Added:addedDocuments=addedDocuments.add(key);break;case ChangeType.Modified:modifiedDocuments=modifiedDocuments.add(key);break;case ChangeType.Removed:removedDocuments=removedDocuments.add(key);break;default:fail("Encountered invalid change type: "+changeType);}});return new TargetChange(this._resumeToken,this._current,addedDocuments,modifiedDocuments,removedDocuments)};/**
      * Resets the document changes and sets `hasPendingChanges` to false.
      */TargetState.prototype.clearPendingChanges=function(){this._hasPendingChanges=!1;this.documentChanges=snapshotChangesMap()};TargetState.prototype.addDocumentChange=function(key,changeType){this._hasPendingChanges=!0;this.documentChanges=this.documentChanges.insert(key,changeType)};TargetState.prototype.removeDocumentChange=function(key){this._hasPendingChanges=!0;this.documentChanges=this.documentChanges.remove(key)};TargetState.prototype.recordPendingTargetRequest=function(){this.pendingResponses+=1};TargetState.prototype.recordTargetResponse=function(){this.pendingResponses-=1};TargetState.prototype.markCurrent=function(){this._hasPendingChanges=!0;this._current=!0};return TargetState}(),WatchChangeAggregator=/** @class */function(){function WatchChangeAggregator(metadataProvider){this.metadataProvider=metadataProvider;/** The internal state of all tracked targets. */this.targetStates={};/** Keeps track of the documents to update since the last raised snapshot. */this.pendingDocumentUpdates=maybeDocumentMap();/** A mapping of document keys to their set of target IDs. */this.pendingDocumentTargetMapping=documentTargetMap();/**
                                                              * A list of targets with existence filter mismatches. These targets are
                                                              * known to be inconsistent and their listens needs to be re-established by
                                                              * RemoteStore.
                                                              */this.pendingTargetResets=new SortedSet(primitiveComparator)}/**
     * Processes and adds the DocumentWatchChange to the current set of changes.
     */WatchChangeAggregator.prototype.handleDocumentChange=function(docChange){for(var _i=0,_a=docChange.updatedTargetIds,targetId;_i<_a.length;_i++){targetId=_a[_i];if(docChange.newDoc instanceof Document$1){this.addDocumentToTarget(targetId,docChange.newDoc)}else if(docChange.newDoc instanceof NoDocument){this.removeDocumentFromTarget(targetId,docChange.key,docChange.newDoc)}}for(var _b=0,_c=docChange.removedTargetIds,targetId;_b<_c.length;_b++){targetId=_c[_b];this.removeDocumentFromTarget(targetId,docChange.key,docChange.newDoc)}};/** Processes and adds the WatchTargetChange to the current set of changes. */WatchChangeAggregator.prototype.handleTargetChange=function(targetChange){var _this=this;this.forEachTarget(targetChange,function(targetId){var targetState=_this.ensureTargetState(targetId);switch(targetChange.state){case WatchTargetChangeState.NoChange:if(_this.isActiveTarget(targetId)){targetState.updateResumeToken(targetChange.resumeToken)}break;case WatchTargetChangeState.Added:// We need to decrement the number of pending acks needed from watch
// for this targetId.
targetState.recordTargetResponse();if(!targetState.isPending){// We have a freshly added target, so we need to reset any state
// that we had previously. This can happen e.g. when remove and add
// back a target for existence filter mismatches.
targetState.clearPendingChanges()}targetState.updateResumeToken(targetChange.resumeToken);break;case WatchTargetChangeState.Removed:// We need to keep track of removed targets to we can post-filter and
// remove any target changes.
// We need to decrement the number of pending acks needed from watch
// for this targetId.
targetState.recordTargetResponse();if(!targetState.isPending){_this.removeTarget(targetId)}assert$1(!targetChange.cause,"WatchChangeAggregator does not handle errored targets");break;case WatchTargetChangeState.Current:if(_this.isActiveTarget(targetId)){targetState.markCurrent();targetState.updateResumeToken(targetChange.resumeToken)}break;case WatchTargetChangeState.Reset:if(_this.isActiveTarget(targetId)){// Reset the target and synthesizes removes for all existing
// documents. The backend will re-add any documents that still
// match the target before it sends the next global snapshot.
_this.resetTarget(targetId);targetState.updateResumeToken(targetChange.resumeToken)}break;default:fail("Unknown target watch change state: "+targetChange.state);}})};/**
      * Iterates over all targetIds that the watch change applies to: either the
      * targetIds explicitly listed in the change or the targetIds of all currently
      * active targets.
      */WatchChangeAggregator.prototype.forEachTarget=function(targetChange,fn){if(0<targetChange.targetIds.length){targetChange.targetIds.forEach(fn)}else{forEachNumber(this.targetStates,fn)}};/**
      * Handles existence filters and synthesizes deletes for filter mismatches.
      * Targets that are invalidated by filter mismatches are added to
      * `pendingTargetResets`.
      */WatchChangeAggregator.prototype.handleExistenceFilter=function(watchChange){var targetId=watchChange.targetId,expectedCount=watchChange.existenceFilter.count,queryData=this.queryDataForActiveTarget(targetId);if(queryData){var query=queryData.query;if(query.isDocumentQuery()){if(0===expectedCount){// The existence filter told us the document does not exist. We deduce
// that this document does not exist and apply a deleted document to
// our updates. Without applying this deleted document there might be
// another query that will raise this document as part of a snapshot
// until it is resolved, essentially exposing inconsistency between
// queries.
var key=new DocumentKey(query.path);this.removeDocumentFromTarget(targetId,key,new NoDocument(key,SnapshotVersion.forDeletedDoc()))}else{assert$1(1===expectedCount,"Single document existence filter with count: "+expectedCount)}}else{var currentSize=this.getCurrentDocumentCountForTarget(targetId);if(currentSize!==expectedCount){// Existence filter mismatch: We reset the mapping and raise a new
// snapshot with `isFromCache:true`.
this.resetTarget(targetId);this.pendingTargetResets=this.pendingTargetResets.add(targetId)}}}};/**
      * Converts the currently accumulated state into a remote event at the
      * provided snapshot version. Resets the accumulated changes before returning.
      */WatchChangeAggregator.prototype.createRemoteEvent=function(snapshotVersion){var _this=this,targetChanges={};forEachNumber(this.targetStates,function(targetId,targetState){var queryData=_this.queryDataForActiveTarget(targetId);if(queryData){if(targetState.current&&queryData.query.isDocumentQuery()){// Document queries for document that don't exist can produce an empty
// result set. To update our local cache, we synthesize a document
// delete if we have not previously received the document. This
// resolves the limbo state of the document, removing it from
// limboDocumentRefs.
//
// TODO(dimond): Ideally we would have an explicit lookup query
// instead resulting in an explicit delete message and we could
// remove this special logic.
var key=new DocumentKey(queryData.query.path);if(null===_this.pendingDocumentUpdates.get(key)&&!_this.targetContainsDocument(targetId,key)){_this.removeDocumentFromTarget(targetId,key,new NoDocument(key,snapshotVersion))}}if(targetState.hasPendingChanges){targetChanges[targetId]=targetState.toTargetChange();targetState.clearPendingChanges()}}});var resolvedLimboDocuments=documentKeySet();// We extract the set of limbo-only document updates as the GC logic
// special-cases documents that do not appear in the query cache.
//
// TODO(gsoltis): Expand on this comment once GC is available in the JS
// client.
this.pendingDocumentTargetMapping.forEach(function(key,targets){var isOnlyLimboTarget=!0;targets.forEachWhile(function(targetId){var queryData=_this.queryDataForActiveTarget(targetId);if(queryData&&queryData.purpose!==QueryPurpose.LimboResolution){isOnlyLimboTarget=!1;return!1}return!0});if(isOnlyLimboTarget){resolvedLimboDocuments=resolvedLimboDocuments.add(key)}});var remoteEvent=new RemoteEvent(snapshotVersion,targetChanges,this.pendingTargetResets,this.pendingDocumentUpdates,resolvedLimboDocuments);this.pendingDocumentUpdates=maybeDocumentMap();this.pendingDocumentTargetMapping=documentTargetMap();this.pendingTargetResets=new SortedSet(primitiveComparator);return remoteEvent};/**
      * Adds the provided document to the internal list of document updates and
      * its document key to the given target's mapping.
      */ // Visible for testing.
WatchChangeAggregator.prototype.addDocumentToTarget=function(targetId,document){if(!this.isActiveTarget(targetId)){return}var changeType=this.targetContainsDocument(targetId,document.key)?ChangeType.Modified:ChangeType.Added,targetState=this.ensureTargetState(targetId);targetState.addDocumentChange(document.key,changeType);this.pendingDocumentUpdates=this.pendingDocumentUpdates.insert(document.key,document);this.pendingDocumentTargetMapping=this.pendingDocumentTargetMapping.insert(document.key,this.ensureDocumentTargetMapping(document.key).add(targetId))};/**
      * Removes the provided document from the target mapping. If the
      * document no longer matches the target, but the document's state is still
      * known (e.g. we know that the document was deleted or we received the change
      * that caused the filter mismatch), the new document can be provided
      * to update the remote document cache.
      */ // Visible for testing.
WatchChangeAggregator.prototype.removeDocumentFromTarget=function(targetId,key,updatedDocument){if(!this.isActiveTarget(targetId)){return}var targetState=this.ensureTargetState(targetId);if(this.targetContainsDocument(targetId,key)){targetState.addDocumentChange(key,ChangeType.Removed)}else{// The document may have entered and left the target before we raised a
// snapshot, so we can just ignore the change.
targetState.removeDocumentChange(key)}this.pendingDocumentTargetMapping=this.pendingDocumentTargetMapping.insert(key,this.ensureDocumentTargetMapping(key).delete(targetId));if(updatedDocument){this.pendingDocumentUpdates=this.pendingDocumentUpdates.insert(key,updatedDocument)}};WatchChangeAggregator.prototype.removeTarget=function(targetId){delete this.targetStates[targetId]};/**
      * Returns the current count of documents in the target. This includes both
      * the number of documents that the LocalStore considers to be part of the
      * target as well as any accumulated changes.
      */WatchChangeAggregator.prototype.getCurrentDocumentCountForTarget=function(targetId){var targetState=this.ensureTargetState(targetId),targetChange=targetState.toTargetChange();return this.metadataProvider.getRemoteKeysForTarget(targetId).size+targetChange.addedDocuments.size-targetChange.removedDocuments.size};/**
      * Increment the number of acks needed from watch before we can consider the
      * server to be 'in-sync' with the client's active targets.
      */WatchChangeAggregator.prototype.recordPendingTargetRequest=function(targetId){// For each request we get we need to record we need a response for it.
var targetState=this.ensureTargetState(targetId);targetState.recordPendingTargetRequest()};WatchChangeAggregator.prototype.ensureTargetState=function(targetId){if(!this.targetStates[targetId]){this.targetStates[targetId]=new TargetState}return this.targetStates[targetId]};WatchChangeAggregator.prototype.ensureDocumentTargetMapping=function(key){var targetMapping=this.pendingDocumentTargetMapping.get(key);if(!targetMapping){targetMapping=new SortedSet(primitiveComparator);this.pendingDocumentTargetMapping=this.pendingDocumentTargetMapping.insert(key,targetMapping)}return targetMapping};/**
      * Verifies that the user is still interested in this target (by calling
      * `getQueryDataForTarget()`) and that we are not waiting for pending ADDs
      * from watch.
      */WatchChangeAggregator.prototype.isActiveTarget=function(targetId){return null!==this.queryDataForActiveTarget(targetId)};/**
      * Returns the QueryData for an active target (i.e. a target that the user
      * is still interested in that has no outstanding target change requests).
      */WatchChangeAggregator.prototype.queryDataForActiveTarget=function(targetId){var targetState=this.targetStates[targetId];return targetState&&targetState.isPending?null:this.metadataProvider.getQueryDataForTarget(targetId)};/**
      * Resets the state of a Watch target to its initial state (e.g. sets
      * 'current' to false, clears the resume token and removes its target mapping
      * from all documents).
      */WatchChangeAggregator.prototype.resetTarget=function(targetId){var _this=this;assert$1(!this.targetStates[targetId].isPending,"Should only reset active targets");this.targetStates[targetId]=new TargetState;// Trigger removal for any documents currently mapped to this target.
// These removals will be part of the initial snapshot if Watch does not
// resend these documents.
var existingKeys=this.metadataProvider.getRemoteKeysForTarget(targetId);existingKeys.forEach(function(key){_this.removeDocumentFromTarget(targetId,key,/*updatedDocument=*/null)})};/**
      * Returns whether the LocalStore considers the document to be part of the
      * specified target.
      */WatchChangeAggregator.prototype.targetContainsDocument=function(targetId,key){var existingKeys=this.metadataProvider.getRemoteKeysForTarget(targetId);return existingKeys.has(key)};return WatchChangeAggregator}();/** Tracks the internal state of a Watch target. */function documentTargetMap(){return new SortedMap(DocumentKey.comparator)}function snapshotChangesMap(){return new SortedMap(DocumentKey.comparator)}/**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */var DIRECTIONS=function(){var dirs={};dirs[Direction.ASCENDING.name]="ASCENDING";dirs[Direction.DESCENDING.name]="DESCENDING";return dirs}(),OPERATORS=function(){var ops={};ops[RelationOp.LESS_THAN.name]="LESS_THAN";ops[RelationOp.LESS_THAN_OR_EQUAL.name]="LESS_THAN_OR_EQUAL";ops[RelationOp.GREATER_THAN.name]="GREATER_THAN";ops[RelationOp.GREATER_THAN_OR_EQUAL.name]="GREATER_THAN_OR_EQUAL";ops[RelationOp.EQUAL.name]="EQUAL";ops[RelationOp.ARRAY_CONTAINS.name]="ARRAY_CONTAINS";return ops}(),ISO_REG_EXP=new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);function assertPresent(value,description){assert$1(!isNullOrUndefined(value),description+" is missing")}function parseInt64(value){// TODO(bjornick): Handle int64 greater than 53 bits.
if("number"===typeof value){return value}else if("string"===typeof value){return+value}else{return fail("can't parse "+value)}}/**
   * Generates JsonObject values for the Datastore API suitable for sending to
   * either GRPC stub methods or via the JSON/HTTP REST API.
   * TODO(klimt): We can remove the databaseId argument if we keep the full
   * resource name in documents.
   */var JsonProtoSerializer=/** @class */function(){function JsonProtoSerializer(databaseId,options){this.databaseId=databaseId;this.options=options}JsonProtoSerializer.prototype.emptyByteString=function(){if(this.options.useProto3Json){return""}else{return new Uint8Array(0)}};JsonProtoSerializer.prototype.unsafeCastProtoByteString=function(byteString){// byteStrings can be either string or UInt8Array, but the typings say
// it's always a string. Cast as string to avoid type check failing
return byteString};JsonProtoSerializer.prototype.fromRpcStatus=function(status){var code=status.code===void 0?Code.UNKNOWN:mapCodeFromRpcCode(status.code);return new FirestoreError(code,status.message||"")};/**
      * Returns a value for a number (or undefined) that's appropriate to put into
      * a google.protobuf.Int32Value proto.
      * DO NOT USE THIS FOR ANYTHING ELSE.
      * This method cheats. It's typed as returning "number" because that's what
      * our generated proto interfaces say Int32Value must be. But GRPC actually
      * expects a { value: <number> } struct.
      */JsonProtoSerializer.prototype.toInt32Value=function(val){if(!isNullOrUndefined(val)){// tslint:disable-next-line:no-any We need to match generated Proto types.
return{value:val}}else{return void 0}};/**
      * Returns a number (or null) from a google.protobuf.Int32Value proto.
      * DO NOT USE THIS FOR ANYTHING ELSE.
      * This method cheats. It's typed as accepting "number" because that's what
      * our generated proto interfaces say Int32Value must be, but it actually
      * accepts { value: number } to match our serialization in toInt32Value().
      */JsonProtoSerializer.prototype.fromInt32Value=function(val){var result;if("object"===typeof val){// tslint:disable-next-line:no-any We need to match generated Proto types.
result=val.value}else{// We accept raw numbers (without the {value: ... } wrapper) for
// compatibility with legacy persisted data.
result=val}return isNullOrUndefined(result)?null:result};/**
      * Returns a value for a Date that's appropriate to put into a proto.
      * DO NOT USE THIS FOR ANYTHING ELSE.
      * This method cheats. It's typed as returning "string" because that's what
      * our generated proto interfaces say dates must be. But it's easier and safer
      * to actually return a Timestamp proto.
      */JsonProtoSerializer.prototype.toTimestamp=function(timestamp){return{seconds:""+timestamp.seconds,nanos:timestamp.nanoseconds// tslint:disable-next-line:no-any
}};JsonProtoSerializer.prototype.fromTimestamp=function(date){// The json interface (for the browser) will return an iso timestamp string,
// while the proto js library (for node) will return a
// google.protobuf.Timestamp instance.
if("string"===typeof date){// TODO(b/37282237): Use strings for Proto3 timestamps
// assert(this.options.useProto3Json,
//   'The timestamp string format requires Proto3.');
return this.fromIso8601String(date)}else{assert$1(!!date,"Cannot deserialize null or undefined timestamp.");// TODO(b/37282237): Use strings for Proto3 timestamps
// assert(!this.options.useProto3Json,
//   'The timestamp instance format requires Proto JS.');
var seconds=parseInt64(date.seconds||"0"),nanos=date.nanos||0;return new Timestamp(seconds,nanos)}};JsonProtoSerializer.prototype.fromIso8601String=function(utc){// The date string can have higher precision (nanos) than the Date class
// (millis), so we do some custom parsing here.
// Parse the nanos right out of the string.
var nanos=0,fraction=ISO_REG_EXP.exec(utc);assert$1(!!fraction,"invalid timestamp: "+utc);if(fraction[1]){// Pad the fraction out to 9 digits (nanos).
var nanoStr=fraction[1];nanoStr=(nanoStr+"000000000").substr(0,9);nanos=+nanoStr}// Parse the date to get the seconds.
var date=new Date(utc),seconds=Math.floor(date.getTime()/1e3);return new Timestamp(seconds,nanos)};/**
      * Returns a value for bytes that's appropriate to put in a proto.
      * DO NOT USE THIS FOR ANYTHING ELSE.
      * This method cheats. It's typed as returning "string" because that's what
      * our generated proto interfaces say bytes must be. But it should return
      * an Uint8Array in Node.
      */JsonProtoSerializer.prototype.toBytes=function(bytes){if(this.options.useProto3Json){return bytes.toBase64()}else{// The typings say it's a string, but it needs to be a Uint8Array in Node.
return this.unsafeCastProtoByteString(bytes.toUint8Array())}};/**
      * Parse the blob from the protos into the internal Blob class. Note that the
      * typings assume all blobs are strings, but they are actually Uint8Arrays
      * on Node.
      */JsonProtoSerializer.prototype.fromBlob=function(blob){if("string"===typeof blob){assert$1(this.options.useProto3Json,"Expected bytes to be passed in as Uint8Array, but got a string instead.");return Blob.fromBase64String(blob)}else{assert$1(!this.options.useProto3Json,"Expected bytes to be passed in as Uint8Array, but got a string instead.");return Blob.fromUint8Array(blob)}};JsonProtoSerializer.prototype.toVersion=function(version){return this.toTimestamp(version.toTimestamp())};JsonProtoSerializer.prototype.fromVersion=function(version){assert$1(!!version,"Trying to deserialize version that isn't set");return SnapshotVersion.fromTimestamp(this.fromTimestamp(version))};JsonProtoSerializer.prototype.toResourceName=function(databaseId,path){return this.fullyQualifiedPrefixPath(databaseId).child("documents").child(path).canonicalString()};JsonProtoSerializer.prototype.fromResourceName=function(name){var resource=ResourcePath.fromString(name);assert$1(this.isValidResourceName(resource),"Tried to deserialize invalid key "+resource.toString());return resource};JsonProtoSerializer.prototype.toName=function(key){return this.toResourceName(this.databaseId,key.path)};JsonProtoSerializer.prototype.fromName=function(name){var resource=this.fromResourceName(name);assert$1(resource.get(1)===this.databaseId.projectId,"Tried to deserialize key from different project: "+resource.get(1)+" vs "+this.databaseId.projectId);assert$1(!resource.get(3)&&!this.databaseId.database||resource.get(3)===this.databaseId.database,"Tried to deserialize key from different database: "+resource.get(3)+" vs "+this.databaseId.database);return new DocumentKey(this.extractLocalPathFromResourceName(resource))};JsonProtoSerializer.prototype.toQueryPath=function(path){return this.toResourceName(this.databaseId,path)};JsonProtoSerializer.prototype.fromQueryPath=function(name){var resourceName=this.fromResourceName(name);// In v1beta1 queries for collections at the root did not have a trailing
// "/documents". In v1 all resource paths contain "/documents". Preserve the
// ability to read the v1beta1 form for compatibility with queries persisted
// in the local query cache.
if(4===resourceName.length){return ResourcePath.EMPTY_PATH}return this.extractLocalPathFromResourceName(resourceName)};Object.defineProperty(JsonProtoSerializer.prototype,"encodedDatabaseId",{get:function(){var path=new ResourcePath(["projects",this.databaseId.projectId,"databases",this.databaseId.database]);return path.canonicalString()},enumerable:!0,configurable:!0});JsonProtoSerializer.prototype.fullyQualifiedPrefixPath=function(databaseId){return new ResourcePath(["projects",databaseId.projectId,"databases",databaseId.database])};JsonProtoSerializer.prototype.extractLocalPathFromResourceName=function(resourceName){assert$1(4<resourceName.length&&"documents"===resourceName.get(4),"tried to deserialize invalid key "+resourceName.toString());return resourceName.popFirst(5)};JsonProtoSerializer.prototype.isValidResourceName=function(path){// Resource names have at least 4 components (project ID, database ID)
return 4<=path.length&&"projects"===path.get(0)&&"databases"===path.get(2)};JsonProtoSerializer.prototype.toValue=function(val){if(val instanceof NullValue){return{nullValue:"NULL_VALUE"}}else if(val instanceof BooleanValue){return{booleanValue:val.value()}}else if(val instanceof IntegerValue){return{integerValue:""+val.value()}}else if(val instanceof DoubleValue){var doubleValue=val.value();if(this.options.useProto3Json){// Proto 3 let's us encode NaN and Infinity as string values as
// expected by the backend. This is currently not checked by our unit
// tests because they rely on protobuf.js.
if(isNaN(doubleValue)){return{doubleValue:"NaN"}}else if(doubleValue===1/0){return{doubleValue:"Infinity"}}else if(doubleValue===-Infinity){return{doubleValue:"-Infinity"}}}return{doubleValue:val.value()}}else if(val instanceof StringValue){return{stringValue:val.value()}}else if(val instanceof ObjectValue){return{mapValue:this.toMapValue(val)}}else if(val instanceof ArrayValue){return{arrayValue:this.toArrayValue(val)}}else if(val instanceof TimestampValue){return{timestampValue:this.toTimestamp(val.internalValue)}}else if(val instanceof GeoPointValue){return{geoPointValue:{latitude:val.value().latitude,longitude:val.value().longitude}}}else if(val instanceof BlobValue){return{bytesValue:this.toBytes(val.value())}}else if(val instanceof RefValue){return{referenceValue:this.toResourceName(val.databaseId,val.key.path)}}else{return fail("Unknown FieldValue "+JSON.stringify(val))}};JsonProtoSerializer.prototype.fromValue=function(obj){var _this=this;if("nullValue"in obj){return NullValue.INSTANCE}else if("booleanValue"in obj){return BooleanValue.of(obj.booleanValue)}else if("integerValue"in obj){return new IntegerValue(parseInt64(obj.integerValue))}else if("doubleValue"in obj){if(this.options.useProto3Json){// Proto 3 uses the string values 'NaN' and 'Infinity'.
if("NaN"===obj.doubleValue){return DoubleValue.NAN}else if("Infinity"===obj.doubleValue){return DoubleValue.POSITIVE_INFINITY}else if("-Infinity"===obj.doubleValue){return DoubleValue.NEGATIVE_INFINITY}}return new DoubleValue(obj.doubleValue)}else if("stringValue"in obj){return new StringValue(obj.stringValue)}else if("mapValue"in obj){return this.fromFields(obj.mapValue.fields||{})}else if("arrayValue"in obj){// "values" is not present if the array is empty
assertPresent(obj.arrayValue,"arrayValue");var values=obj.arrayValue.values||[];return new ArrayValue(values.map(function(v){return _this.fromValue(v)}))}else if("timestampValue"in obj){assertPresent(obj.timestampValue,"timestampValue");return new TimestampValue(this.fromTimestamp(obj.timestampValue))}else if("geoPointValue"in obj){assertPresent(obj.geoPointValue,"geoPointValue");var latitude=obj.geoPointValue.latitude||0,longitude=obj.geoPointValue.longitude||0;return new GeoPointValue(new GeoPoint(latitude,longitude))}else if("bytesValue"in obj){assertPresent(obj.bytesValue,"bytesValue");var blob=this.fromBlob(obj.bytesValue);return new BlobValue(blob)}else if("referenceValue"in obj){assertPresent(obj.referenceValue,"referenceValue");var resourceName=this.fromResourceName(obj.referenceValue),dbId=new DatabaseId(resourceName.get(1),resourceName.get(3)),key=new DocumentKey(this.extractLocalPathFromResourceName(resourceName));return new RefValue(dbId,key)}else{return fail("Unknown Value proto "+JSON.stringify(obj))}};/** Creates an api.Document from key and fields (but no create/update time) */JsonProtoSerializer.prototype.toMutationDocument=function(key,fields){return{name:this.toName(key),fields:this.toFields(fields)}};JsonProtoSerializer.prototype.toDocument=function(document){assert$1(!document.hasLocalMutations,"Can't serialize documents with mutations.");return{name:this.toName(document.key),fields:this.toFields(document.data),updateTime:this.toTimestamp(document.version.toTimestamp())}};JsonProtoSerializer.prototype.fromDocument=function(document,hasCommittedMutations){return new Document$1(this.fromName(document.name),this.fromVersion(document.updateTime),this.fromFields(document.fields||{}),{hasCommittedMutations:!!hasCommittedMutations})};JsonProtoSerializer.prototype.toFields=function(fields){var _this=this,result={};fields.forEach(function(key,value){result[key]=_this.toValue(value)});return result};JsonProtoSerializer.prototype.fromFields=function(object){var _this=this,map=object,result=ObjectValue.EMPTY;// Proto map<string, Value> gets mapped to Object, so cast it.
forEach$1(map,function(key,value){result=result.set(new FieldPath([key]),_this.fromValue(value))});return result};JsonProtoSerializer.prototype.toMapValue=function(map){return{fields:this.toFields(map)}};JsonProtoSerializer.prototype.toArrayValue=function(array){var _this=this,result=[];array.forEach(function(value){result.push(_this.toValue(value))});return{values:result}};JsonProtoSerializer.prototype.fromFound=function(doc){assert$1(!!doc.found,"Tried to deserialize a found document from a missing document.");assertPresent(doc.found.name,"doc.found.name");assertPresent(doc.found.updateTime,"doc.found.updateTime");var key=this.fromName(doc.found.name),version=this.fromVersion(doc.found.updateTime),fields=this.fromFields(doc.found.fields||{});return new Document$1(key,version,fields,{},doc.found)};JsonProtoSerializer.prototype.fromMissing=function(result){assert$1(!!result.missing,"Tried to deserialize a missing document from a found document.");assert$1(!!result.readTime,"Tried to deserialize a missing document without a read time.");var key=this.fromName(result.missing),version=this.fromVersion(result.readTime);return new NoDocument(key,version)};JsonProtoSerializer.prototype.fromMaybeDocument=function(result){if("found"in result){return this.fromFound(result)}else if("missing"in result){return this.fromMissing(result)}return fail("invalid batch get response: "+JSON.stringify(result))};JsonProtoSerializer.prototype.toWatchTargetChangeState=function(state){switch(state){case WatchTargetChangeState.Added:return"ADD";case WatchTargetChangeState.Current:return"CURRENT";case WatchTargetChangeState.NoChange:return"NO_CHANGE";case WatchTargetChangeState.Removed:return"REMOVE";case WatchTargetChangeState.Reset:return"RESET";default:return fail("Unknown WatchTargetChangeState: "+state);}};JsonProtoSerializer.prototype.toTestWatchChange=function(watchChange){if(watchChange instanceof ExistenceFilterChange){return{filter:{count:watchChange.existenceFilter.count,targetId:watchChange.targetId}}}if(watchChange instanceof DocumentWatchChange){if(watchChange.newDoc instanceof Document$1){var doc=watchChange.newDoc;return{documentChange:{document:{name:this.toName(doc.key),fields:this.toFields(doc.data),updateTime:this.toVersion(doc.version)},targetIds:watchChange.updatedTargetIds,removedTargetIds:watchChange.removedTargetIds}}}else if(watchChange.newDoc instanceof NoDocument){var doc=watchChange.newDoc;return{documentDelete:{document:this.toName(doc.key),readTime:this.toVersion(doc.version),removedTargetIds:watchChange.removedTargetIds}}}else if(null===watchChange.newDoc){return{documentRemove:{document:this.toName(watchChange.key),removedTargetIds:watchChange.removedTargetIds}}}}if(watchChange instanceof WatchTargetChange){var cause=void 0;if(watchChange.cause){cause={code:mapRpcCodeFromCode(watchChange.cause.code),message:watchChange.cause.message}}return{targetChange:{targetChangeType:this.toWatchTargetChangeState(watchChange.state),targetIds:watchChange.targetIds,resumeToken:this.unsafeCastProtoByteString(watchChange.resumeToken),cause:cause}}}return fail("Unrecognized watch change: "+JSON.stringify(watchChange))};JsonProtoSerializer.prototype.fromWatchChange=function(change){var watchChange;if("targetChange"in change){assertPresent(change.targetChange,"targetChange");// proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'
// if unset
var state=this.fromWatchTargetChangeState(change.targetChange.targetChangeType||"NO_CHANGE"),targetIds=change.targetChange.targetIds||[],resumeToken=change.targetChange.resumeToken||this.emptyByteString(),causeProto=change.targetChange.cause,cause=causeProto&&this.fromRpcStatus(causeProto);watchChange=new WatchTargetChange(state,targetIds,resumeToken,cause||null)}else if("documentChange"in change){assertPresent(change.documentChange,"documentChange");assertPresent(change.documentChange.document,"documentChange.name");assertPresent(change.documentChange.document.name,"documentChange.document.name");assertPresent(change.documentChange.document.updateTime,"documentChange.document.updateTime");var entityChange=change.documentChange,key=this.fromName(entityChange.document.name),version=this.fromVersion(entityChange.document.updateTime),fields=this.fromFields(entityChange.document.fields||{}),doc=new Document$1(key,version,fields,{},entityChange.document),updatedTargetIds=entityChange.targetIds||[],removedTargetIds=entityChange.removedTargetIds||[];watchChange=new DocumentWatchChange(updatedTargetIds,removedTargetIds,doc.key,doc)}else if("documentDelete"in change){assertPresent(change.documentDelete,"documentDelete");assertPresent(change.documentDelete.document,"documentDelete.document");var docDelete=change.documentDelete,key=this.fromName(docDelete.document),version=docDelete.readTime?this.fromVersion(docDelete.readTime):SnapshotVersion.forDeletedDoc(),doc=new NoDocument(key,version),removedTargetIds=docDelete.removedTargetIds||[];watchChange=new DocumentWatchChange([],removedTargetIds,doc.key,doc)}else if("documentRemove"in change){assertPresent(change.documentRemove,"documentRemove");assertPresent(change.documentRemove.document,"documentRemove");var docRemove=change.documentRemove,key=this.fromName(docRemove.document),removedTargetIds=docRemove.removedTargetIds||[];watchChange=new DocumentWatchChange([],removedTargetIds,key,null)}else if("filter"in change){// TODO(dimond): implement existence filter parsing with strategy.
assertPresent(change.filter,"filter");assertPresent(change.filter.targetId,"filter.targetId");var filter=change.filter,count=filter.count||0,existenceFilter=new ExistenceFilter(count),targetId=filter.targetId;watchChange=new ExistenceFilterChange(targetId,existenceFilter)}else{return fail("Unknown change type "+JSON.stringify(change))}return watchChange};JsonProtoSerializer.prototype.fromWatchTargetChangeState=function(state){if("NO_CHANGE"===state){return WatchTargetChangeState.NoChange}else if("ADD"===state){return WatchTargetChangeState.Added}else if("REMOVE"===state){return WatchTargetChangeState.Removed}else if("CURRENT"===state){return WatchTargetChangeState.Current}else if("RESET"===state){return WatchTargetChangeState.Reset}else{return fail("Got unexpected TargetChange.state: "+state)}};JsonProtoSerializer.prototype.versionFromListenResponse=function(change){// We have only reached a consistent snapshot for the entire stream if there
// is a read_time set and it applies to all targets (i.e. the list of
// targets is empty). The backend is guaranteed to send such responses.
if(!("targetChange"in change)){return SnapshotVersion.MIN}var targetChange=change.targetChange;if(targetChange.targetIds&&targetChange.targetIds.length){return SnapshotVersion.MIN}if(!targetChange.readTime){return SnapshotVersion.MIN}return this.fromVersion(targetChange.readTime)};JsonProtoSerializer.prototype.toMutation=function(mutation){var _this=this,result;if(mutation instanceof SetMutation){result={update:this.toMutationDocument(mutation.key,mutation.value)}}else if(mutation instanceof DeleteMutation){result={delete:this.toName(mutation.key)}}else if(mutation instanceof PatchMutation){result={update:this.toMutationDocument(mutation.key,mutation.data),updateMask:this.toDocumentMask(mutation.fieldMask)}}else if(mutation instanceof TransformMutation){result={transform:{document:this.toName(mutation.key),fieldTransforms:mutation.fieldTransforms.map(function(transform){return _this.toFieldTransform(transform)})}}}else{return fail("Unknown mutation type "+mutation.type)}if(!mutation.precondition.isNone){result.currentDocument=this.toPrecondition(mutation.precondition)}return result};JsonProtoSerializer.prototype.fromMutation=function(proto){var _this=this,precondition=proto.currentDocument?this.fromPrecondition(proto.currentDocument):Precondition.NONE;if(proto.update){assertPresent(proto.update.name,"name");var key=this.fromName(proto.update.name),value=this.fromFields(proto.update.fields||{});if(proto.updateMask){var fieldMask=this.fromDocumentMask(proto.updateMask);return new PatchMutation(key,value,fieldMask,precondition)}else{return new SetMutation(key,value,precondition)}}else if(proto.delete){var key=this.fromName(proto.delete);return new DeleteMutation(key,precondition)}else if(proto.transform){var key=this.fromName(proto.transform.document),fieldTransforms=proto.transform.fieldTransforms.map(function(transform){return _this.fromFieldTransform(transform)});assert$1(!0===precondition.exists,"Transforms only support precondition \"exists == true\"");return new TransformMutation(key,fieldTransforms)}else{return fail("unknown mutation proto: "+JSON.stringify(proto))}};JsonProtoSerializer.prototype.toPrecondition=function(precondition){assert$1(!precondition.isNone,"Can't serialize an empty precondition");if(precondition.updateTime!==void 0){return{updateTime:this.toVersion(precondition.updateTime)}}else if(precondition.exists!==void 0){return{exists:precondition.exists}}else{return fail("Unknown precondition")}};JsonProtoSerializer.prototype.fromPrecondition=function(precondition){if(precondition.updateTime!==void 0){return Precondition.updateTime(this.fromVersion(precondition.updateTime))}else if(precondition.exists!==void 0){return Precondition.exists(precondition.exists)}else{return Precondition.NONE}};JsonProtoSerializer.prototype.fromWriteResult=function(proto,commitTime){var _this=this,version=proto.updateTime?this.fromVersion(proto.updateTime):this.fromVersion(commitTime),transformResults=null;// NOTE: Deletes don't have an updateTime.
if(proto.transformResults&&0<proto.transformResults.length){transformResults=proto.transformResults.map(function(result){return _this.fromValue(result)})}return new MutationResult(version,transformResults)};JsonProtoSerializer.prototype.fromWriteResults=function(protos,commitTime){var _this=this;if(protos&&0<protos.length){assert$1(commitTime!==void 0,"Received a write result without a commit time");return protos.map(function(proto){return _this.fromWriteResult(proto,commitTime)})}else{return[]}};JsonProtoSerializer.prototype.toFieldTransform=function(fieldTransform){var _this=this,transform=fieldTransform.transform;if(transform instanceof ServerTimestampTransform){return{fieldPath:fieldTransform.field.canonicalString(),setToServerValue:"REQUEST_TIME"}}else if(transform instanceof ArrayUnionTransformOperation){return{fieldPath:fieldTransform.field.canonicalString(),appendMissingElements:{values:transform.elements.map(function(v){return _this.toValue(v)})}}}else if(transform instanceof ArrayRemoveTransformOperation){return{fieldPath:fieldTransform.field.canonicalString(),removeAllFromArray:{values:transform.elements.map(function(v){return _this.toValue(v)})}}}else if(transform instanceof NumericIncrementTransformOperation){return{fieldPath:fieldTransform.field.canonicalString(),increment:this.toValue(transform.operand)}}else{throw fail("Unknown transform: "+fieldTransform.transform)}};JsonProtoSerializer.prototype.fromFieldTransform=function(proto){var _this=this,transform=null;if("setToServerValue"in proto){assert$1("REQUEST_TIME"===proto.setToServerValue,"Unknown server value transform proto: "+JSON.stringify(proto));transform=ServerTimestampTransform.instance}else if("appendMissingElements"in proto){var values=proto.appendMissingElements.values||[];transform=new ArrayUnionTransformOperation(values.map(function(v){return _this.fromValue(v)}))}else if("removeAllFromArray"in proto){var values=proto.removeAllFromArray.values||[];transform=new ArrayRemoveTransformOperation(values.map(function(v){return _this.fromValue(v)}))}else if("increment"in proto){var operand=this.fromValue(proto.increment);assert$1(operand instanceof NumberValue,"NUMERIC_ADD transform requires a NumberValue");transform=new NumericIncrementTransformOperation(operand)}else{fail("Unknown transform proto: "+JSON.stringify(proto))}var fieldPath=FieldPath.fromServerFormat(proto.fieldPath);return new FieldTransform(fieldPath,transform)};JsonProtoSerializer.prototype.toDocumentsTarget=function(query){return{documents:[this.toQueryPath(query.path)]}};JsonProtoSerializer.prototype.fromDocumentsTarget=function(documentsTarget){var count=documentsTarget.documents.length;assert$1(1===count,"DocumentsTarget contained other than 1 document: "+count);var name=documentsTarget.documents[0];return Query.atPath(this.fromQueryPath(name))};JsonProtoSerializer.prototype.toQueryTarget=function(query){// Dissect the path into parent, collectionId, and optional key filter.
var result={structuredQuery:{}},path=query.path;if(null!==query.collectionGroup){assert$1(0===path.length%2,"Collection Group queries should be within a document path or root.");result.parent=this.toQueryPath(path);result.structuredQuery.from=[{collectionId:query.collectionGroup,allDescendants:!0}]}else{assert$1(0!==path.length%2,"Document queries with filters are not supported.");result.parent=this.toQueryPath(path.popLast());result.structuredQuery.from=[{collectionId:path.lastSegment()}]}var where=this.toFilter(query.filters);if(where){result.structuredQuery.where=where}var orderBy=this.toOrder(query.orderBy);if(orderBy){result.structuredQuery.orderBy=orderBy}var limit=this.toInt32Value(query.limit);if(limit!==void 0){result.structuredQuery.limit=limit}if(query.startAt){result.structuredQuery.startAt=this.toCursor(query.startAt)}if(query.endAt){result.structuredQuery.endAt=this.toCursor(query.endAt)}return result};JsonProtoSerializer.prototype.fromQueryTarget=function(target){var path=this.fromQueryPath(target.parent),query=target.structuredQuery,fromCount=query.from?query.from.length:0,collectionGroup=null;if(0<fromCount){assert$1(1===fromCount,"StructuredQuery.from with more than one collection is not supported.");var from=query.from[0];if(from.allDescendants){collectionGroup=from.collectionId}else{path=path.child(from.collectionId)}}var filterBy=[];if(query.where){filterBy=this.fromFilter(query.where)}var orderBy=[];if(query.orderBy){orderBy=this.fromOrder(query.orderBy)}var limit=null;if(query.limit){limit=this.fromInt32Value(query.limit)}var startAt=null;if(query.startAt){startAt=this.fromCursor(query.startAt)}var endAt=null;if(query.endAt){endAt=this.fromCursor(query.endAt)}return new Query(path,collectionGroup,orderBy,filterBy,limit,startAt,endAt)};JsonProtoSerializer.prototype.toListenRequestLabels=function(queryData){var value=this.toLabel(queryData.purpose);if(null==value){return null}else{return{"goog-listen-tags":value}}};JsonProtoSerializer.prototype.toLabel=function(purpose){switch(purpose){case QueryPurpose.Listen:return null;case QueryPurpose.ExistenceFilterMismatch:return"existence-filter-mismatch";case QueryPurpose.LimboResolution:return"limbo-document";default:return fail("Unrecognized query purpose: "+purpose);}};JsonProtoSerializer.prototype.toTarget=function(queryData){var result,query=queryData.query;if(query.isDocumentQuery()){result={documents:this.toDocumentsTarget(query)}}else{result={query:this.toQueryTarget(query)}}result.targetId=queryData.targetId;if(0<queryData.resumeToken.length){result.resumeToken=this.unsafeCastProtoByteString(queryData.resumeToken)}return result};JsonProtoSerializer.prototype.toFilter=function(filters){var _this=this;if(0===filters.length)return;var protos=filters.map(function(filter){return filter instanceof RelationFilter?_this.toRelationFilter(filter):_this.toUnaryFilter(filter)});if(1===protos.length){return protos[0]}return{compositeFilter:{op:"AND",filters:protos}}};JsonProtoSerializer.prototype.fromFilter=function(filter){var _this=this;if(!filter){return[]}else if(filter.unaryFilter!==void 0){return[this.fromUnaryFilter(filter)]}else if(filter.fieldFilter!==void 0){return[this.fromRelationFilter(filter)]}else if(filter.compositeFilter!==void 0){return filter.compositeFilter.filters.map(function(f){return _this.fromFilter(f)}).reduce(function(accum,current){return accum.concat(current)})}else{return fail("Unknown filter: "+JSON.stringify(filter))}};JsonProtoSerializer.prototype.toOrder=function(orderBys){var _this=this;if(0===orderBys.length)return;return orderBys.map(function(order){return _this.toPropertyOrder(order)})};JsonProtoSerializer.prototype.fromOrder=function(orderBys){var _this=this;return orderBys.map(function(order){return _this.fromPropertyOrder(order)})};JsonProtoSerializer.prototype.toCursor=function(cursor){var _this=this;return{before:cursor.before,values:cursor.position.map(function(component){return _this.toValue(component)})}};JsonProtoSerializer.prototype.fromCursor=function(cursor){var _this=this,before=!!cursor.before,position=cursor.values.map(function(component){return _this.fromValue(component)});return new Bound(position,before)};// visible for testing
JsonProtoSerializer.prototype.toDirection=function(dir){return DIRECTIONS[dir.name]};// visible for testing
JsonProtoSerializer.prototype.fromDirection=function(dir){switch(dir){case"ASCENDING":return Direction.ASCENDING;case"DESCENDING":return Direction.DESCENDING;default:return void 0;}};// visible for testing
JsonProtoSerializer.prototype.toOperatorName=function(op){return OPERATORS[op.name]};JsonProtoSerializer.prototype.fromOperatorName=function(op){switch(op){case"EQUAL":return RelationOp.EQUAL;case"GREATER_THAN":return RelationOp.GREATER_THAN;case"GREATER_THAN_OR_EQUAL":return RelationOp.GREATER_THAN_OR_EQUAL;case"LESS_THAN":return RelationOp.LESS_THAN;case"LESS_THAN_OR_EQUAL":return RelationOp.LESS_THAN_OR_EQUAL;case"ARRAY_CONTAINS":return RelationOp.ARRAY_CONTAINS;case"OPERATOR_UNSPECIFIED":return fail("Unspecified relation");default:return fail("Unknown relation");}};JsonProtoSerializer.prototype.toFieldPathReference=function(path){return{fieldPath:path.canonicalString()}};JsonProtoSerializer.prototype.fromFieldPathReference=function(fieldReference){return FieldPath.fromServerFormat(fieldReference.fieldPath)};// visible for testing
JsonProtoSerializer.prototype.toPropertyOrder=function(orderBy){return{field:this.toFieldPathReference(orderBy.field),direction:this.toDirection(orderBy.dir)}};JsonProtoSerializer.prototype.fromPropertyOrder=function(orderBy){return new OrderBy(this.fromFieldPathReference(orderBy.field),this.fromDirection(orderBy.direction))};// visible for testing
JsonProtoSerializer.prototype.toRelationFilter=function(filter){if(filter instanceof RelationFilter){return{fieldFilter:{field:this.toFieldPathReference(filter.field),op:this.toOperatorName(filter.op),value:this.toValue(filter.value)}}}else{return fail("Unrecognized filter: "+JSON.stringify(filter))}};JsonProtoSerializer.prototype.fromRelationFilter=function(filter){return new RelationFilter(this.fromFieldPathReference(filter.fieldFilter.field),this.fromOperatorName(filter.fieldFilter.op),this.fromValue(filter.fieldFilter.value))};// visible for testing
JsonProtoSerializer.prototype.toUnaryFilter=function(filter){if(filter instanceof NanFilter){return{unaryFilter:{field:this.toFieldPathReference(filter.field),op:"IS_NAN"}}}else if(filter instanceof NullFilter){return{unaryFilter:{field:this.toFieldPathReference(filter.field),op:"IS_NULL"}}}else{return fail("Unrecognized filter: "+JSON.stringify(filter))}};JsonProtoSerializer.prototype.fromUnaryFilter=function(filter){switch(filter.unaryFilter.op){case"IS_NAN":var nanField=this.fromFieldPathReference(filter.unaryFilter.field);return new NanFilter(nanField);case"IS_NULL":var nullField=this.fromFieldPathReference(filter.unaryFilter.field);return new NullFilter(nullField);case"OPERATOR_UNSPECIFIED":return fail("Unspecified filter");default:return fail("Unknown filter");}};JsonProtoSerializer.prototype.toDocumentMask=function(fieldMask){var canonicalFields=[];fieldMask.fields.forEach(function(field){return canonicalFields.push(field.canonicalString())});return{fieldPaths:canonicalFields}};JsonProtoSerializer.prototype.fromDocumentMask=function(proto){var paths=proto.fieldPaths||[],fields=paths.map(function(path){return FieldPath.fromServerFormat(path)});return FieldMask.fromArray(fields)};return JsonProtoSerializer}(),NoopConnectivityMonitor=/** @class */function(){function NoopConnectivityMonitor(){}NoopConnectivityMonitor.prototype.addCallback=function(callback){// No-op.
};NoopConnectivityMonitor.prototype.shutdown=function(){// No-op.
};return NoopConnectivityMonitor}(),LOG_TAG="ConnectivityMonitor",BrowserConnectivityMonitor=/** @class */function(){function BrowserConnectivityMonitor(){var _this=this;this.networkAvailableListener=function(){return _this.onNetworkAvailable()};this.networkUnavailableListener=function(){return _this.onNetworkUnavailable()};this.callbacks=[];this.configureNetworkMonitoring()}BrowserConnectivityMonitor.prototype.addCallback=function(callback){this.callbacks.push(callback)};BrowserConnectivityMonitor.prototype.shutdown=function(){window.removeEventListener("online",this.networkAvailableListener);window.removeEventListener("offline",this.networkUnavailableListener)};BrowserConnectivityMonitor.prototype.configureNetworkMonitoring=function(){window.addEventListener("online",this.networkAvailableListener);window.addEventListener("offline",this.networkUnavailableListener)};BrowserConnectivityMonitor.prototype.onNetworkAvailable=function(){debug(LOG_TAG,"Network connectivity changed: AVAILABLE");for(var _i=0,_a=this.callbacks,callback;_i<_a.length;_i++){callback=_a[_i];callback(0/* AVAILABLE */)}};BrowserConnectivityMonitor.prototype.onNetworkUnavailable=function(){debug(LOG_TAG,"Network connectivity changed: UNAVAILABLE");for(var _i=0,_a=this.callbacks,callback;_i<_a.length;_i++){callback=_a[_i];callback(1/* UNAVAILABLE */)}};return BrowserConnectivityMonitor}(),StreamBridge=/** @class */function(){function StreamBridge(args){this.sendFn=args.sendFn;this.closeFn=args.closeFn}StreamBridge.prototype.onOpen=function(callback){assert$1(!this.wrappedOnOpen,"Called onOpen on stream twice!");this.wrappedOnOpen=callback};StreamBridge.prototype.onClose=function(callback){assert$1(!this.wrappedOnClose,"Called onClose on stream twice!");this.wrappedOnClose=callback};StreamBridge.prototype.onMessage=function(callback){assert$1(!this.wrappedOnMessage,"Called onMessage on stream twice!");this.wrappedOnMessage=callback};StreamBridge.prototype.close=function(){this.closeFn()};StreamBridge.prototype.send=function(msg){this.sendFn(msg)};StreamBridge.prototype.callOnOpen=function(){assert$1(this.wrappedOnOpen!==void 0,"Cannot call onOpen because no callback was set");this.wrappedOnOpen()};StreamBridge.prototype.callOnClose=function(err){assert$1(this.wrappedOnClose!==void 0,"Cannot call onClose because no callback was set");this.wrappedOnClose(err)};StreamBridge.prototype.callOnMessage=function(msg){assert$1(this.wrappedOnMessage!==void 0,"Cannot call onMessage because no callback was set");this.wrappedOnMessage(msg)};return StreamBridge}(),LOG_TAG$1="Connection",RPC_STREAM_SERVICE="google.firestore.v1.Firestore",RPC_URL_VERSION="v1",RPC_NAME_REST_MAPPING={BatchGetDocuments:"batchGet",Commit:"commit"},X_GOOG_API_CLIENT_VALUE="gl-js/ fire/"+SDK_VERSION,XHR_TIMEOUT_SECS=15,WebChannelConnection=/** @class */function(){function WebChannelConnection(info){this.databaseId=info.databaseId;var proto=info.ssl?"https":"http";this.baseUrl=proto+"://"+info.host;this.forceLongPolling=info.forceLongPolling}/**
     * Modifies the headers for a request, adding any authorization token if
     * present and any additional headers for the request.
     */WebChannelConnection.prototype.modifyHeadersForRequest=function(headers,token){if(token){for(var header in token.authHeaders){if(token.authHeaders.hasOwnProperty(header)){headers[header]=token.authHeaders[header]}}}headers["X-Goog-Api-Client"]=X_GOOG_API_CLIENT_VALUE};WebChannelConnection.prototype.invokeRPC=function(rpcName,request,token){var _this=this,url=this.makeUrl(rpcName);return new Promise(function(resolve,reject){// tslint:disable-next-line:no-any XhrIo doesn't have TS typings.
var xhr=new tmp_5;xhr.listenOnce(tmp_3.COMPLETE,function(){try{switch(xhr.getLastErrorCode()){case tmp_2.NO_ERROR:var json=xhr.getResponseJson();debug(LOG_TAG$1,"XHR received:",JSON.stringify(json));resolve(json);break;case tmp_2.TIMEOUT:debug(LOG_TAG$1,"RPC \""+rpcName+"\" timed out");reject(new FirestoreError(Code.DEADLINE_EXCEEDED,"Request time out"));break;case tmp_2.HTTP_ERROR:var status_1=xhr.getStatus();debug(LOG_TAG$1,"RPC \""+rpcName+"\" failed with status:",status_1,"response text:",xhr.getResponseText());if(0<status_1){reject(new FirestoreError(mapCodeFromHttpStatus(status_1),"Server responded with status "+xhr.getStatusText()))}else{// If we received an HTTP_ERROR but there's no status code,
// it's most probably a connection issue
debug(LOG_TAG$1,"RPC \""+rpcName+"\" failed");reject(new FirestoreError(Code.UNAVAILABLE,"Connection failed."))}break;default:fail("RPC \""+rpcName+"\" failed with unanticipated "+"webchannel error "+xhr.getLastErrorCode()+": "+xhr.getLastError()+", giving up.");}}finally{debug(LOG_TAG$1,"RPC \""+rpcName+"\" completed.")}});var requestString=JSON.stringify(request);debug(LOG_TAG$1,"XHR sending: ",url+" "+requestString);// Content-Type: text/plain will avoid preflight requests which might
// mess with CORS and redirects by proxies. If we add custom headers
// we will need to change this code to potentially use the
// $httpOverwrite parameter supported by ESF to avoid
// triggering preflight requests.
var headers={"Content-Type":"text/plain"};_this.modifyHeadersForRequest(headers,token);xhr.send(url,"POST",requestString,headers,XHR_TIMEOUT_SECS)})};WebChannelConnection.prototype.invokeStreamingRPC=function(rpcName,request,token){// The REST API automatically aggregates all of the streamed results, so we
// can just use the normal invoke() method.
return this.invokeRPC(rpcName,request,token)};WebChannelConnection.prototype.openStream=function(rpcName,token){var urlParts=[this.baseUrl,"/",RPC_STREAM_SERVICE,"/",rpcName,"/channel"],webchannelTransport=tmp_1(),request={// Background channel test avoids the initial two test calls and decreases
// initial cold start time.
// TODO(dimond): wenboz@ mentioned this might affect use with proxies and
// we should monitor closely for any reports.
backgroundChannelTest:!0,// Required for backend stickiness, routing behavior is based on this
// parameter.
httpSessionIdParam:"gsessionid",initMessageHeaders:{},messageUrlParams:{// This param is used to improve routing and project isolation by the
// backend and must be included in every request.
database:"projects/"+this.databaseId.projectId+"/databases/"+this.databaseId.database},sendRawJson:!0,supportsCrossDomainXhr:!0,internalChannelParams:{// Override the default timeout (randomized between 10-20 seconds) since
// a large write batch on a slow internet connection may take a long
// time to send to the backend. Rather than have WebChannel impose a
// tight timeout which could lead to infinite timeouts and retries, we
// set it very large (5-10 minutes) and rely on the browser's builtin
// timeouts to kick in if the request isn't working.
forwardChannelRequestTimeoutMs:1e3*(60*10)},forceLongPolling:this.forceLongPolling};this.modifyHeadersForRequest(request.initMessageHeaders,token);// Sending the custom headers we just added to request.initMessageHeaders
// (Authorization, etc.) will trigger the browser to make a CORS preflight
// request because the XHR will no longer meet the criteria for a "simple"
// CORS request:
// https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests
//
// Therefore to avoid the CORS preflight request (an extra network
// roundtrip), we use the httpHeadersOverwriteParam option to specify that
// the headers should instead be encoded into a special "$httpHeaders" query
// parameter, which is recognized by the webchannel backend. This is
// formally defined here:
// https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L32
//
// But for some unclear reason (see
// https://github.com/firebase/firebase-js-sdk/issues/703), this breaks
// ReactNative and so we exclude it, which just means ReactNative may be
// subject to the extra network roundtrip for CORS preflight.
if(!isReactNative()){request.httpHeadersOverwriteParam="$httpHeaders"}var url=urlParts.join("");debug(LOG_TAG$1,"Creating WebChannel: "+url+" "+request);// tslint:disable-next-line:no-any Because listen isn't defined on it.
var channel=webchannelTransport.createWebChannel(url,request),opened=!1,closed=!1,streamBridge=new StreamBridge({sendFn:function(msg){if(!closed){if(!opened){debug(LOG_TAG$1,"Opening WebChannel transport.");channel.open();opened=!0}debug(LOG_TAG$1,"WebChannel sending:",msg);channel.send(msg)}else{debug(LOG_TAG$1,"Not sending because WebChannel is closed:",msg)}},closeFn:function(){return channel.close()}}),unguardedEventListen=function(type,fn){// TODO(dimond): closure typing seems broken because WebChannel does
// not implement goog.events.Listenable
channel.listen(type,function(param){try{fn(param)}catch(e){setTimeout(function(){throw e},0)}})};// WebChannel supports sending the first message with the handshake - saving
// a network round trip. However, it will have to call send in the same
// JS event loop as open. In order to enforce this, we delay actually
// opening the WebChannel until send is called. Whether we have called
// open is tracked with this variable.
unguardedEventListen(tmp_4.EventType.OPEN,function(){if(!closed){debug(LOG_TAG$1,"WebChannel transport opened.")}});unguardedEventListen(tmp_4.EventType.CLOSE,function(){if(!closed){closed=!0;debug(LOG_TAG$1,"WebChannel transport closed");streamBridge.callOnClose()}});unguardedEventListen(tmp_4.EventType.ERROR,function(err){if(!closed){closed=!0;debug(LOG_TAG$1,"WebChannel transport errored:",err);streamBridge.callOnClose(new FirestoreError(Code.UNAVAILABLE,"The operation could not be completed"))}});unguardedEventListen(tmp_4.EventType.MESSAGE,function(msg){if(!closed){var msgData=msg.data[0];assert$1(!!msgData,"Got a webchannel message without data.");// TODO(b/35143891): There is a bug in One Platform that caused errors
// (and only errors) to be wrapped in an extra array. To be forward
// compatible with the bug we need to check either condition. The latter
// can be removed once the fix has been rolled out.
var error=// tslint:disable-next-line:no-any msgData.error is not typed.
msgData.error||msgData[0]&&msgData[0].error;if(error){debug(LOG_TAG$1,"WebChannel received error:",error);// error.status will be a string like 'OK' or 'NOT_FOUND'.
var status_2=error.status,code=mapCodeFromRpcStatus(status_2),message=error.message;if(code===void 0){code=Code.INTERNAL;message="Unknown error status: "+status_2+" with message "+error.message}// Mark closed so no further events are propagated
closed=!0;streamBridge.callOnClose(new FirestoreError(code,message));channel.close()}else{debug(LOG_TAG$1,"WebChannel received:",msgData);streamBridge.callOnMessage(msgData)}}});setTimeout(function(){// Technically we could/should wait for the WebChannel opened event,
// but because we want to send the first message with the WebChannel
// handshake we pretend the channel opened here (asynchronously), and
// then delay the actual open until the first message is sent.
streamBridge.callOnOpen()},0);return streamBridge};// visible for testing
WebChannelConnection.prototype.makeUrl=function(rpcName){var urlRpcName=RPC_NAME_REST_MAPPING[rpcName];assert$1(urlRpcName!==void 0,"Unknown REST mapping for: "+rpcName);var url=[this.baseUrl,"/",RPC_URL_VERSION,"/projects/",this.databaseId.projectId,"/databases/",this.databaseId.database,"/documents",":",urlRpcName];return url.join("")};return WebChannelConnection}(),BrowserPlatform=/** @class */function(){function BrowserPlatform(){this.emptyByteString="";this.base64Available="undefined"!==typeof atob}Object.defineProperty(BrowserPlatform.prototype,"document",{get:function(){return"undefined"!==typeof document?document:null},enumerable:!0,configurable:!0});Object.defineProperty(BrowserPlatform.prototype,"window",{get:function(){return"undefined"!==typeof window?window:null},enumerable:!0,configurable:!0});BrowserPlatform.prototype.loadConnection=function(databaseInfo){return Promise.resolve(new WebChannelConnection(databaseInfo))};BrowserPlatform.prototype.newConnectivityMonitor=function(){if(this.window){return new BrowserConnectivityMonitor}else{return new NoopConnectivityMonitor}};BrowserPlatform.prototype.newSerializer=function(databaseId){return new JsonProtoSerializer(databaseId,{useProto3Json:!0})};BrowserPlatform.prototype.formatJSON=function(value){return JSON.stringify(value)};BrowserPlatform.prototype.atob=function(encoded){return atob(encoded)};BrowserPlatform.prototype.btoa=function(raw){return btoa(raw)};return BrowserPlatform}();/**
      * @license
      * Copyright 2019 Google Inc.
      *
      * Licensed under the Apache License, Version 2.0 (the "License");
      * you may not use this file except in compliance with the License.
      * You may obtain a copy of the License at
      *
      *   http://www.apache.org/licenses/LICENSE-2.0
      *
      * Unless required by applicable law or agreed to in writing, software
      * distributed under the License is distributed on an "AS IS" BASIS,
      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      * See the License for the specific language governing permissions and
      * limitations under the License.
      */ /**
      * @license
      * Copyright 2017 Google Inc.
      *
      * Licensed under the Apache License, Version 2.0 (the "License");
      * you may not use this file except in compliance with the License.
      * You may obtain a copy of the License at
      *
      *   http://www.apache.org/licenses/LICENSE-2.0
      *
      * Unless required by applicable law or agreed to in writing, software
      * distributed under the License is distributed on an "AS IS" BASIS,
      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      * See the License for the specific language governing permissions and
      * limitations under the License.
      */ /**
          * This code needs to run before Firestore is used. This can be achieved in
          * several ways:
          *   1) Through the JSCompiler compiling this code and then (automatically)
          *      executing it before exporting the Firestore symbols.
          *   2) Through importing this module first in a Firestore main module
          */PlatformSupport.setPlatform(new BrowserPlatform);/**
                                                     * @license
                                                     * Copyright 2018 Google Inc.
                                                     *
                                                     * Licensed under the Apache License, Version 2.0 (the "License");
                                                     * you may not use this file except in compliance with the License.
                                                     * You may obtain a copy of the License at
                                                     *
                                                     *   http://www.apache.org/licenses/LICENSE-2.0
                                                     *
                                                     * Unless required by applicable law or agreed to in writing, software
                                                     * distributed under the License is distributed on an "AS IS" BASIS,
                                                     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                     * See the License for the specific language governing permissions and
                                                     * limitations under the License.
                                                     */ /**
                                                         * `ListenSequence` is a monotonic sequence. It is initialized with a minimum value to
                                                         * exceed. All subsequent calls to next will return increasing values. If provided with a
                                                         * `SequenceNumberSyncer`, it will additionally bump its next value when told of a new value, as
                                                         * well as write out sequence numbers that it produces via `next()`.
                                                         */var ListenSequence=/** @class */function(){function ListenSequence(previousValue,sequenceNumberSyncer){var _this=this;this.previousValue=previousValue;if(sequenceNumberSyncer){sequenceNumberSyncer.sequenceNumberHandler=function(sequenceNumber){return _this.setPreviousValue(sequenceNumber)};this.writeNewSequenceNumber=function(sequenceNumber){return sequenceNumberSyncer.writeSequenceNumber(sequenceNumber)}}}ListenSequence.prototype.setPreviousValue=function(externalPreviousValue){this.previousValue=Math.max(externalPreviousValue,this.previousValue);return this.previousValue};ListenSequence.prototype.next=function(){var nextValue=++this.previousValue;if(this.writeNewSequenceNumber){this.writeNewSequenceNumber(nextValue)}return nextValue};ListenSequence.INVALID=-1;return ListenSequence}(),Deferred$1=/** @class */function(){function Deferred(){var _this=this;this.promise=new Promise(function(resolve,reject){_this.resolve=resolve;_this.reject=reject})}return Deferred}(),TimerId;/**
      * @license
      * Copyright 2017 Google Inc.
      *
      * Licensed under the Apache License, Version 2.0 (the "License");
      * you may not use this file except in compliance with the License.
      * You may obtain a copy of the License at
      *
      *   http://www.apache.org/licenses/LICENSE-2.0
      *
      * Unless required by applicable law or agreed to in writing, software
      * distributed under the License is distributed on an "AS IS" BASIS,
      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      * See the License for the specific language governing permissions and
      * limitations under the License.
      */(function(TimerId){/** All can be used with runDelayedOperationsEarly() to run all timers. */TimerId.All="all";/**
                                                                                                     * The following 4 timers are used in persistent_stream.ts for the listen and
                                                                                                     * write streams. The "Idle" timer is used to close the stream due to
                                                                                                     * inactivity. The "ConnectionBackoff" timer is used to restart a stream once
                                                                                                     * the appropriate backoff delay has elapsed.
                                                                                                     */TimerId.ListenStreamIdle="listen_stream_idle";TimerId.ListenStreamConnectionBackoff="listen_stream_connection_backoff";TimerId.WriteStreamIdle="write_stream_idle";TimerId.WriteStreamConnectionBackoff="write_stream_connection_backoff";/**
                                                                                * A timer used in online_state_tracker.ts to transition from
                                                                                * OnlineState.Unknown to Offline after a set timeout, rather than waiting
                                                                                * indefinitely for success or failure.
                                                                                */TimerId.OnlineStateTimeout="online_state_timeout";/**
                                                           * A timer used to update the client metadata in IndexedDb, which is used
                                                           * to determine the primary leaseholder.
                                                           */TimerId.ClientMetadataRefresh="client_metadata_refresh";/** A timer used to periodically attempt LRU Garbage collection */TimerId.LruGarbageCollection="lru_garbage_collection"})(TimerId||(TimerId={}));/**
                                * Represents an operation scheduled to be run in the future on an AsyncQueue.
                                *
                                * It is created via DelayedOperation.createAndSchedule().
                                *
                                * Supports cancellation (via cancel()) and early execution (via skipDelay()).
                                */var DelayedOperation=/** @class */function(){function DelayedOperation(asyncQueue,timerId,targetTimeMs,op,removalCallback){this.asyncQueue=asyncQueue;this.timerId=timerId;this.targetTimeMs=targetTimeMs;this.op=op;this.removalCallback=removalCallback;this.deferred=new Deferred$1;this.then=this.deferred.promise.then.bind(this.deferred.promise);this.catch=this.deferred.promise.catch.bind(this.deferred.promise);// It's normal for the deferred promise to be canceled (due to cancellation)
// and so we attach a dummy catch callback to avoid
// 'UnhandledPromiseRejectionWarning' log spam.
this.deferred.promise.catch(function(err){})}/**
     * Creates and returns a DelayedOperation that has been scheduled to be
     * executed on the provided asyncQueue after the provided delayMs.
     *
     * @param asyncQueue The queue to schedule the operation on.
     * @param id A Timer ID identifying the type of operation this is.
     * @param delayMs The delay (ms) before the operation should be scheduled.
     * @param op The operation to run.
     * @param removalCallback A callback to be called synchronously once the
     *   operation is executed or canceled, notifying the AsyncQueue to remove it
     *   from its delayedOperations list.
     *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
     *   the DelayedOperation class public.
     */DelayedOperation.createAndSchedule=function(asyncQueue,timerId,delayMs,op,removalCallback){var targetTime=Date.now()+delayMs,delayedOp=new DelayedOperation(asyncQueue,timerId,targetTime,op,removalCallback);delayedOp.start(delayMs);return delayedOp};/**
      * Starts the timer. This is called immediately after construction by
      * createAndSchedule().
      */DelayedOperation.prototype.start=function(delayMs){var _this=this;this.timerHandle=setTimeout(function(){return _this.handleDelayElapsed()},delayMs)};/**
      * Queues the operation to run immediately (if it hasn't already been run or
      * canceled).
      */DelayedOperation.prototype.skipDelay=function(){return this.handleDelayElapsed()};/**
      * Cancels the operation if it hasn't already been executed or canceled. The
      * promise will be rejected.
      *
      * As long as the operation has not yet been run, calling cancel() provides a
      * guarantee that the operation will not be run.
      */DelayedOperation.prototype.cancel=function(reason){if(null!==this.timerHandle){this.clearTimeout();this.deferred.reject(new FirestoreError(Code.CANCELLED,"Operation cancelled"+(reason?": "+reason:"")))}};DelayedOperation.prototype.handleDelayElapsed=function(){var _this=this;this.asyncQueue.enqueueAndForget(function(){if(null!==_this.timerHandle){_this.clearTimeout();return _this.op().then(function(result){return _this.deferred.resolve(result)})}else{return Promise.resolve()}})};DelayedOperation.prototype.clearTimeout=function(){if(null!==this.timerHandle){this.removalCallback(this);clearTimeout(this.timerHandle);this.timerHandle=null}};return DelayedOperation}(),AsyncQueue=/** @class */function(){function AsyncQueue(){// The last promise in the queue.
this.tail=Promise.resolve();// Operations scheduled to be queued in the future. Operations are
// automatically removed after they are run or canceled.
this.delayedOperations=[];// Flag set while there's an outstanding AsyncQueue operation, used for
// assertion sanity-checks.
this.operationInProgress=!1}/**
     * Adds a new operation to the queue without waiting for it to complete (i.e.
     * we ignore the Promise result).
     */AsyncQueue.prototype.enqueueAndForget=function(op){// tslint:disable-next-line:no-floating-promises
this.enqueue(op)};/**
      * Adds a new operation to the queue. Returns a promise that will be resolved
      * when the promise returned by the new operation is (with its value).
      */AsyncQueue.prototype.enqueue=function(op){var _this=this;this.verifyNotFailed();var newTail=this.tail.then(function(){_this.operationInProgress=!0;return op().catch(function(error$1){_this.failure=error$1;_this.operationInProgress=!1;var message=error$1.stack||error$1.message||"";error("INTERNAL UNHANDLED ERROR: ",message);// Escape the promise chain and throw the error globally so that
// e.g. any global crash reporting library detects and reports it.
// (but not for simulated errors in our tests since this breaks mocha)
if(0>message.indexOf("Firestore Test Simulated Error")){setTimeout(function(){throw error$1},0)}// Re-throw the error so that this.tail becomes a rejected Promise and
// all further attempts to chain (via .then) will just short-circuit
// and return the rejected Promise.
throw error$1}).then(function(result){_this.operationInProgress=!1;return result})});this.tail=newTail;return newTail};/**
      * Schedules an operation to be queued on the AsyncQueue once the specified
      * `delayMs` has elapsed. The returned CancelablePromise can be used to cancel
      * the operation prior to its running.
      */AsyncQueue.prototype.enqueueAfterDelay=function(timerId,delayMs,op){var _this=this;this.verifyNotFailed();assert$1(0<=delayMs,"Attempted to schedule an operation with a negative delay of "+delayMs);// While not necessarily harmful, we currently don't expect to have multiple
// ops with the same timer id in the queue, so defensively reject them.
assert$1(!this.containsDelayedOperation(timerId),"Attempted to schedule multiple operations with timer id "+timerId+".");var delayedOp=DelayedOperation.createAndSchedule(this,timerId,delayMs,op,function(op){return _this.removeDelayedOperation(op)});this.delayedOperations.push(delayedOp);return delayedOp};AsyncQueue.prototype.verifyNotFailed=function(){if(this.failure){fail("AsyncQueue is already failed: "+(this.failure.stack||this.failure.message))}};/**
      * Verifies there's an operation currently in-progress on the AsyncQueue.
      * Unfortunately we can't verify that the running code is in the promise chain
      * of that operation, so this isn't a foolproof check, but it should be enough
      * to catch some bugs.
      */AsyncQueue.prototype.verifyOperationInProgress=function(){assert$1(this.operationInProgress,"verifyOpInProgress() called when no op in progress on this queue.")};/**
      * Waits until all currently queued tasks are finished executing. Delayed
      * operations are not run.
      */AsyncQueue.prototype.drain=function(){return this.enqueue(function(){return Promise.resolve()})};/**
      * For Tests: Determine if a delayed operation with a particular TimerId
      * exists.
      */AsyncQueue.prototype.containsDelayedOperation=function(timerId){for(var _i=0,_a=this.delayedOperations,op;_i<_a.length;_i++){op=_a[_i];if(op.timerId===timerId){return!0}}return!1};/**
      * For Tests: Runs some or all delayed operations early.
      *
      * @param lastTimerId Delayed operations up to and including this TimerId will
      *  be drained. Throws if no such operation exists. Pass TimerId.All to run
      *  all delayed operations.
      * @returns a Promise that resolves once all operations have been run.
      */AsyncQueue.prototype.runDelayedOperationsEarly=function(lastTimerId){var _this=this;// Note that draining may generate more delayed ops, so we do that first.
return this.drain().then(function(){assert$1(lastTimerId===TimerId.All||_this.containsDelayedOperation(lastTimerId),"Attempted to drain to missing operation "+lastTimerId);// Run ops in the same order they'd run if they ran naturally.
_this.delayedOperations.sort(function(a,b){return a.targetTimeMs-b.targetTimeMs});for(var _i=0,_a=_this.delayedOperations,op;_i<_a.length;_i++){op=_a[_i];op.skipDelay();if(lastTimerId!==TimerId.All&&op.timerId===lastTimerId){break}}return _this.drain()})};/** Called once a DelayedOperation is run or canceled. */AsyncQueue.prototype.removeDelayedOperation=function(op){// NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.
var index=this.delayedOperations.indexOf(op);assert$1(0<=index,"Delayed operation not found.");this.delayedOperations.splice(index,1)};return AsyncQueue}(),escapeChar="\x01",encodedSeparatorChar="\x01",encodedNul="\x10",encodedEscape="\x11";/**
                               * Encodes a resource path into a IndexedDb-compatible string form.
                               */function encode(path){for(var result="",i=0;i<path.length;i++){if(0<result.length){result=encodeSeparator(result)}result=encodeSegment(path.get(i),result)}return encodeSeparator(result)}/** Encodes a single segment of a resource path into the given result */function encodeSegment(segment,resultBuf){for(var result=resultBuf,length=segment.length,i=0,c;i<length;i++){c=segment.charAt(i);switch(c){case"\0":result+=escapeChar+encodedNul;break;case escapeChar:result+=escapeChar+encodedEscape;break;default:result+=c;}}return result}/** Encodes a path separator into the given result */function encodeSeparator(result){return result+escapeChar+encodedSeparatorChar}/**
   * Decodes the given IndexedDb-compatible string form of a resource path into
   * a ResourcePath instance. Note that this method is not suitable for use with
   * decoding resource names from the server; those are One Platform format
   * strings.
   */function decode$1(path){// Event the empty path must encode as a path of at least length 2. A path
// with exactly 2 must be the empty path.
var length=path.length;assert$1(2<=length,"Invalid path "+path);if(2===length){assert$1(path.charAt(0)===escapeChar&&path.charAt(1)===encodedSeparatorChar,"Non-empty path "+path+" had length 2");return ResourcePath.EMPTY_PATH}// Escape characters cannot exist past the second-to-last position in the
// source value.
for(var lastReasonableEscapeIndex=length-2,segments=[],segmentBuilder="",start=0,end;start<length;){// The last two characters of a valid encoded path must be a separator, so
// there must be an end to this segment.
end=path.indexOf(escapeChar,start);if(0>end||end>lastReasonableEscapeIndex){fail("Invalid encoded resource path: \""+path+"\"")}var next=path.charAt(end+1);switch(next){case encodedSeparatorChar:var currentPiece=path.substring(start,end),segment=void 0;if(0===segmentBuilder.length){// Avoid copying for the common case of a segment that excludes \0
// and \001
segment=currentPiece}else{segmentBuilder+=currentPiece;segment=segmentBuilder;segmentBuilder=""}segments.push(segment);break;case encodedNul:segmentBuilder+=path.substring(start,end);segmentBuilder+="\0";break;case encodedEscape:// The escape character can be used in the output to encode itself.
segmentBuilder+=path.substring(start,end+1);break;default:fail("Invalid encoded resource path: \""+path+"\"");}start=end+2}return new ResourcePath(segments)}/**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */var BATCHID_UNKNOWN=-1,MutationBatch=/** @class */function(){/**
   * @param batchId The unique ID of this mutation batch.
   * @param localWriteTime The original write time of this mutation.
   * @param baseMutations Mutations that are used to populate the base
   * values when this mutation is applied locally. This can be used to locally
   * overwrite values that are persisted in the remote document cache. Base
   * mutations are never sent to the backend.
   * @param mutations The user-provided mutations in this mutation batch.
   * User-provided mutations are applied both locally and remotely on the
   * backend.
   */function MutationBatch(batchId,localWriteTime,baseMutations,mutations){this.batchId=batchId;this.localWriteTime=localWriteTime;this.baseMutations=baseMutations;this.mutations=mutations;assert$1(0<mutations.length,"Cannot create an empty mutation batch")}/**
     * Applies all the mutations in this MutationBatch to the specified document
     * to create a new remote document
     *
     * @param docKey The key of the document to apply mutations to.
     * @param maybeDoc The document to apply mutations to.
     * @param batchResult The result of applying the MutationBatch to the
     * backend.
     */MutationBatch.prototype.applyToRemoteDocument=function(docKey,maybeDoc,batchResult){if(maybeDoc){assert$1(maybeDoc.key.isEqual(docKey),"applyToRemoteDocument: key "+docKey+" should match maybeDoc key\n        "+maybeDoc.key)}var mutationResults=batchResult.mutationResults;assert$1(mutationResults.length===this.mutations.length,"Mismatch between mutations length\n      ("+this.mutations.length+") and mutation results length\n      ("+mutationResults.length+").");for(var i=0,mutation;i<this.mutations.length;i++){mutation=this.mutations[i];if(mutation.key.isEqual(docKey)){var mutationResult=mutationResults[i];maybeDoc=mutation.applyToRemoteDocument(maybeDoc,mutationResult)}}return maybeDoc};/**
      * Computes the local view of a document given all the mutations in this
      * batch.
      *
      * @param docKey The key of the document to apply mutations to.
      * @param maybeDoc The document to apply mutations to.
      */MutationBatch.prototype.applyToLocalView=function(docKey,maybeDoc){if(maybeDoc){assert$1(maybeDoc.key.isEqual(docKey),"applyToLocalDocument: key "+docKey+" should match maybeDoc key\n        "+maybeDoc.key)}// First, apply the base state. This allows us to apply non-idempotent
// transform against a consistent set of values.
for(var _i=0,_a=this.baseMutations,mutation;_i<_a.length;_i++){mutation=_a[_i];if(mutation.key.isEqual(docKey)){maybeDoc=mutation.applyToLocalView(maybeDoc,maybeDoc,this.localWriteTime)}}// Second, apply all user-provided mutations.
for(var baseDoc=maybeDoc,_b=0,_c=this.mutations,mutation;_b<_c.length;_b++){mutation=_c[_b];if(mutation.key.isEqual(docKey)){maybeDoc=mutation.applyToLocalView(maybeDoc,baseDoc,this.localWriteTime)}}return maybeDoc};/**
      * Computes the local view for all provided documents given the mutations in
      * this batch.
      */MutationBatch.prototype.applyToLocalDocumentSet=function(maybeDocs){var _this=this,mutatedDocuments=maybeDocs;// TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations
// directly (as done in `applyToLocalView()`), we can reduce the complexity
// to O(n).
this.mutations.forEach(function(m){var mutatedDocument=_this.applyToLocalView(m.key,maybeDocs.get(m.key));if(mutatedDocument){mutatedDocuments=mutatedDocuments.insert(m.key,mutatedDocument)}});return mutatedDocuments};MutationBatch.prototype.keys=function(){return this.mutations.reduce(function(keys,m){return keys.add(m.key)},documentKeySet())};MutationBatch.prototype.isEqual=function(other){return this.batchId===other.batchId&&arrayEquals(this.mutations,other.mutations)&&arrayEquals(this.baseMutations,other.baseMutations)};return MutationBatch}(),MutationBatchResult=/** @class */function(){function MutationBatchResult(batch,commitVersion,mutationResults,streamToken,/**
                                                                                    * A pre-computed mapping from each mutated document to the resulting
                                                                                    * version.
                                                                                    */docVersions){this.batch=batch;this.commitVersion=commitVersion;this.mutationResults=mutationResults;this.streamToken=streamToken;this.docVersions=docVersions}/**
     * Creates a new MutationBatchResult for the given batch and results. There
     * must be one result for each mutation in the batch. This static factory
     * caches a document=>version mapping (docVersions).
     */MutationBatchResult.from=function(batch,commitVersion,results,streamToken){assert$1(batch.mutations.length===results.length,"Mutations sent "+batch.mutations.length+" must equal results received "+results.length);for(var versionMap=documentVersionMap(),mutations=batch.mutations,i=0;i<mutations.length;i++){versionMap=versionMap.insert(mutations[i].key,results[i].version)}return new MutationBatchResult(batch,commitVersion,results,streamToken,versionMap)};return MutationBatchResult}(),PersistencePromise=/** @class */function(){function PersistencePromise(callback){var _this=this;// NOTE: next/catchCallback will always point to our own wrapper functions,
// not the user's raw next() or catch() callbacks.
// tslint:disable-next-line:no-any Accept any result type for the next call in the Promise chain.
this.nextCallback=null;// tslint:disable-next-line:no-any Accept any result type for the error handler.
this.catchCallback=null;// When the operation resolves, we'll set result or error and mark isDone.
this.result=void 0;this.error=void 0;this.isDone=!1;// Set to true when .then() or .catch() are called and prevents additional
// chaining.
this.callbackAttached=!1;callback(function(value){_this.isDone=!0;_this.result=value;if(_this.nextCallback){// value should be defined unless T is Void, but we can't express
// that in the type system.
_this.nextCallback(value)}},function(error){_this.isDone=!0;_this.error=error;if(_this.catchCallback){_this.catchCallback(error)}})}PersistencePromise.prototype.catch=function(fn){return this.next(void 0,fn)};PersistencePromise.prototype.next=function(nextFn,catchFn){var _this=this;if(this.callbackAttached){fail("Called next() or catch() twice for PersistencePromise")}this.callbackAttached=!0;if(this.isDone){if(!this.error){return this.wrapSuccess(nextFn,this.result)}else{return this.wrapFailure(catchFn,this.error)}}else{return new PersistencePromise(function(resolve,reject){_this.nextCallback=function(value){_this.wrapSuccess(nextFn,value).next(resolve,reject)};_this.catchCallback=function(error){_this.wrapFailure(catchFn,error).next(resolve,reject)}})}};PersistencePromise.prototype.toPromise=function(){var _this=this;return new Promise(function(resolve,reject){_this.next(resolve,reject)})};PersistencePromise.prototype.wrapUserFunction=function(fn){try{var result=fn();if(result instanceof PersistencePromise){return result}else{return PersistencePromise.resolve(result)}}catch(e){return PersistencePromise.reject(e)}};PersistencePromise.prototype.wrapSuccess=function(nextFn,value){if(nextFn){return this.wrapUserFunction(function(){return nextFn(value)})}else{// If there's no nextFn, then R must be the same as T but we
// can't express that in the type system.
// tslint:disable-next-line:no-any
return PersistencePromise.resolve(value)}};PersistencePromise.prototype.wrapFailure=function(catchFn,error){if(catchFn){return this.wrapUserFunction(function(){return catchFn(error)})}else{return PersistencePromise.reject(error)}};PersistencePromise.resolve=function(result){return new PersistencePromise(function(resolve,reject){resolve(result)})};PersistencePromise.reject=function(error){return new PersistencePromise(function(resolve,reject){reject(error)})};PersistencePromise.waitFor=function(// tslint:disable-next-line:no-any Accept all Promise types in waitFor().
all){return new PersistencePromise(function(resolve,reject){var expectedCount=0,resolvedCount=0,done=!1;all.forEach(function(element){++expectedCount;element.next(function(){++resolvedCount;if(done&&resolvedCount===expectedCount){resolve()}},function(err){return reject(err)})});done=!0;if(resolvedCount===expectedCount){resolve()}})};/**
      * Given an array of predicate functions that asynchronously evaluate to a
      * boolean, implements a short-circuiting `or` between the results. Predicates
      * will be evaluated until one of them returns `true`, then stop. The final
      * result will be whether any of them returned `true`.
      */PersistencePromise.or=function(predicates){for(var p=PersistencePromise.resolve(!1),_loop_1=function(predicate){p=p.next(function(isTrue){if(isTrue){return PersistencePromise.resolve(isTrue)}else{return predicate()}})},_i=0,predicates_1=predicates,predicate;_i<predicates_1.length;_i++){predicate=predicates_1[_i];_loop_1(predicate)}return p};/**
      * Given an iterable, call the given function on each element in the
      * collection and wait for all of the resulting concurrent PersistencePromises
      * to resolve.
      */PersistencePromise.forEach=function(collection,f){var _this=this,promises=[];collection.forEach(function(r,s){promises.push(f.call(_this,r,s))});return this.waitFor(promises)};return PersistencePromise}(),IndexedDbMutationQueue=/** @class */function(){function IndexedDbMutationQueue(/**
                                    * The normalized userId (e.g. null UID => "" userId) used to store /
                                    * retrieve mutations.
                                    */userId,serializer,indexManager,referenceDelegate){this.userId=userId;this.serializer=serializer;this.indexManager=indexManager;this.referenceDelegate=referenceDelegate;/**
                                                 * Caches the document keys for pending mutation batches. If the mutation
                                                 * has been removed from IndexedDb, the cached value may continue to
                                                 * be used to retrieve the batch's document keys. To remove a cached value
                                                 * locally, `removeCachedMutationKeys()` should be invoked either directly
                                                 * or through `removeMutationBatches()`.
                                                 *
                                                 * With multi-tab, when the primary client acknowledges or rejects a mutation,
                                                 * this cache is used by secondary clients to invalidate the local
                                                 * view of the documents that were previously affected by the mutation.
                                                 */ // PORTING NOTE: Multi-tab only.
this.documentKeysByBatchId={}}/**
     * Creates a new mutation queue for the given user.
     * @param user The user for which to create a mutation queue.
     * @param serializer The serializer to use when persisting to IndexedDb.
     */IndexedDbMutationQueue.forUser=function(user,serializer,indexManager,referenceDelegate){// TODO(mcg): Figure out what constraints there are on userIDs
// In particular, are there any reserved characters? are empty ids allowed?
// For the moment store these together in the same mutations table assuming
// that empty userIDs aren't allowed.
assert$1(""!==user.uid,"UserID must not be an empty string.");var userId=user.isAuthenticated()?user.uid:"";return new IndexedDbMutationQueue(userId,serializer,indexManager,referenceDelegate)};IndexedDbMutationQueue.prototype.checkEmpty=function(transaction){var empty=!0,range=IDBKeyRange.bound([this.userId,Number.NEGATIVE_INFINITY],[this.userId,Number.POSITIVE_INFINITY]);return mutationsStore(transaction).iterate({index:DbMutationBatch.userMutationsIndex,range:range},function(key,value,control){empty=!1;control.done()}).next(function(){return empty})};IndexedDbMutationQueue.prototype.acknowledgeBatch=function(transaction,batch,streamToken){return this.getMutationQueueMetadata(transaction).next(function(metadata){metadata.lastStreamToken=convertStreamToken(streamToken);return mutationQueuesStore(transaction).put(metadata)})};IndexedDbMutationQueue.prototype.getLastStreamToken=function(transaction){return this.getMutationQueueMetadata(transaction).next(function(metadata){return metadata.lastStreamToken})};IndexedDbMutationQueue.prototype.setLastStreamToken=function(transaction,streamToken){return this.getMutationQueueMetadata(transaction).next(function(metadata){metadata.lastStreamToken=convertStreamToken(streamToken);return mutationQueuesStore(transaction).put(metadata)})};IndexedDbMutationQueue.prototype.addMutationBatch=function(transaction,localWriteTime,baseMutations,mutations){var _this=this,documentStore=documentMutationsStore(transaction),mutationStore=mutationsStore(transaction);// The IndexedDb implementation in Chrome (and Firefox) does not handle
// compound indices that include auto-generated keys correctly. To ensure
// that the index entry is added correctly in all browsers, we perform two
// writes: The first write is used to retrieve the next auto-generated Batch
// ID, and the second write populates the index and stores the actual
// mutation batch.
// See: https://bugs.chromium.org/p/chromium/issues/detail?id=701972
// tslint:disable-next-line:no-any We write an empty object to obtain key
return mutationStore.add({}).next(function(batchId){assert$1("number"===typeof batchId,"Auto-generated key is not a number");var batch=new MutationBatch(batchId,localWriteTime,baseMutations,mutations),dbBatch=_this.serializer.toDbMutationBatch(_this.userId,batch);_this.documentKeysByBatchId[batchId]=batch.keys();for(var promises=[],_i=0,mutations_1=mutations;_i<mutations_1.length;_i++){var mutation=mutations_1[_i],indexKey=DbDocumentMutation.key(_this.userId,mutation.key.path,batchId);promises.push(mutationStore.put(dbBatch));promises.push(documentStore.put(indexKey,DbDocumentMutation.PLACEHOLDER));promises.push(_this.indexManager.addToCollectionParentIndex(transaction,mutation.key.path.popLast()))}return PersistencePromise.waitFor(promises).next(function(){return batch})})};IndexedDbMutationQueue.prototype.lookupMutationBatch=function(transaction,batchId){var _this=this;return mutationsStore(transaction).get(batchId).next(function(dbBatch){if(dbBatch){assert$1(dbBatch.userId===_this.userId,"Unexpected user '"+dbBatch.userId+"' for mutation batch "+batchId);return _this.serializer.fromDbMutationBatch(dbBatch)}return null})};IndexedDbMutationQueue.prototype.lookupMutationKeys=function(transaction,batchId){var _this=this;if(this.documentKeysByBatchId[batchId]){return PersistencePromise.resolve(this.documentKeysByBatchId[batchId])}else{return this.lookupMutationBatch(transaction,batchId).next(function(batch){if(batch){var keys=batch.keys();_this.documentKeysByBatchId[batchId]=keys;return keys}else{return null}})}};IndexedDbMutationQueue.prototype.getNextMutationBatchAfterBatchId=function(transaction,batchId){var _this=this;return this.getMutationQueueMetadata(transaction).next(function(metadata){var nextBatchId=batchId+1,range=IDBKeyRange.lowerBound([_this.userId,nextBatchId]),foundBatch=null;return mutationsStore(transaction).iterate({index:DbMutationBatch.userMutationsIndex,range:range},function(key,dbBatch,control){if(dbBatch.userId===_this.userId){assert$1(dbBatch.batchId>=nextBatchId,"Should have found mutation after "+nextBatchId);foundBatch=_this.serializer.fromDbMutationBatch(dbBatch)}control.done()}).next(function(){return foundBatch})})};IndexedDbMutationQueue.prototype.getAllMutationBatches=function(transaction){var _this=this,range=IDBKeyRange.bound([this.userId,BATCHID_UNKNOWN],[this.userId,Number.POSITIVE_INFINITY]);return mutationsStore(transaction).loadAll(DbMutationBatch.userMutationsIndex,range).next(function(dbBatches){return dbBatches.map(function(dbBatch){return _this.serializer.fromDbMutationBatch(dbBatch)})})};IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKey=function(transaction,documentKey){var _this=this,indexPrefix=DbDocumentMutation.prefixForPath(this.userId,documentKey.path),indexStart=IDBKeyRange.lowerBound(indexPrefix),results=[];// Scan the document-mutation index starting with a prefix starting with
// the given documentKey.
return documentMutationsStore(transaction).iterate({range:indexStart},function(indexKey,_,control){var userID=indexKey[0],encodedPath=indexKey[1],batchId=indexKey[2],path=decode$1(encodedPath);// Only consider rows matching exactly the specific key of
// interest. Note that because we order by path first, and we
// order terminators before path separators, we'll encounter all
// the index rows for documentKey contiguously. In particular, all
// the rows for documentKey will occur before any rows for
// documents nested in a subcollection beneath documentKey so we
// can stop as soon as we hit any such row.
if(userID!==_this.userId||!documentKey.path.isEqual(path)){control.done();return}// Look up the mutation batch in the store.
return mutationsStore(transaction).get(batchId).next(function(mutation){if(!mutation){throw fail("Dangling document-mutation reference found: "+indexKey+" which points to "+batchId)}assert$1(mutation.userId===_this.userId,"Unexpected user '"+mutation.userId+"' for mutation batch "+batchId);results.push(_this.serializer.fromDbMutationBatch(mutation))})}).next(function(){return results})};IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKeys=function(transaction,documentKeys){var _this=this,uniqueBatchIDs=new SortedSet(primitiveComparator),promises=[];documentKeys.forEach(function(documentKey){var indexStart=DbDocumentMutation.prefixForPath(_this.userId,documentKey.path),range=IDBKeyRange.lowerBound(indexStart),promise=documentMutationsStore(transaction).iterate({range:range},function(indexKey,_,control){var userID=indexKey[0],encodedPath=indexKey[1],batchID=indexKey[2],path=decode$1(encodedPath);// Only consider rows matching exactly the specific key of
// interest. Note that because we order by path first, and we
// order terminators before path separators, we'll encounter all
// the index rows for documentKey contiguously. In particular, all
// the rows for documentKey will occur before any rows for
// documents nested in a subcollection beneath documentKey so we
// can stop as soon as we hit any such row.
if(userID!==_this.userId||!documentKey.path.isEqual(path)){control.done();return}uniqueBatchIDs=uniqueBatchIDs.add(batchID)});promises.push(promise)});return PersistencePromise.waitFor(promises).next(function(){return _this.lookupMutationBatches(transaction,uniqueBatchIDs)})};IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingQuery=function(transaction,query){var _this=this;assert$1(!query.isDocumentQuery(),"Document queries shouldn't go down this path");assert$1(!query.isCollectionGroupQuery(),"CollectionGroup queries should be handled in LocalDocumentsView");var queryPath=query.path,immediateChildrenLength=queryPath.length+1,indexPrefix=DbDocumentMutation.prefixForPath(this.userId,queryPath),indexStart=IDBKeyRange.lowerBound(indexPrefix),uniqueBatchIDs=new SortedSet(primitiveComparator);return documentMutationsStore(transaction).iterate({range:indexStart},function(indexKey,_,control){var userID=indexKey[0],encodedPath=indexKey[1],batchID=indexKey[2],path=decode$1(encodedPath);if(userID!==_this.userId||!queryPath.isPrefixOf(path)){control.done();return}// Rows with document keys more than one segment longer than the
// query path can't be matches. For example, a query on 'rooms'
// can't match the document /rooms/abc/messages/xyx.
// TODO(mcg): we'll need a different scanner when we implement
// ancestor queries.
if(path.length!==immediateChildrenLength){return}uniqueBatchIDs=uniqueBatchIDs.add(batchID)}).next(function(){return _this.lookupMutationBatches(transaction,uniqueBatchIDs)})};IndexedDbMutationQueue.prototype.lookupMutationBatches=function(transaction,batchIDs){var _this=this,results=[],promises=[];// TODO(rockwood): Implement this using iterate.
batchIDs.forEach(function(batchId){promises.push(mutationsStore(transaction).get(batchId).next(function(mutation){if(null===mutation){throw fail("Dangling document-mutation reference found, "+"which points to "+batchId)}assert$1(mutation.userId===_this.userId,"Unexpected user '"+mutation.userId+"' for mutation batch "+batchId);results.push(_this.serializer.fromDbMutationBatch(mutation))}))});return PersistencePromise.waitFor(promises).next(function(){return results})};IndexedDbMutationQueue.prototype.removeMutationBatch=function(transaction,batch){var _this=this;return removeMutationBatch(transaction.simpleDbTransaction,this.userId,batch).next(function(removedDocuments){_this.removeCachedMutationKeys(batch.batchId);return PersistencePromise.forEach(removedDocuments,function(key){return _this.referenceDelegate.removeMutationReference(transaction,key)})})};IndexedDbMutationQueue.prototype.removeCachedMutationKeys=function(batchId){delete this.documentKeysByBatchId[batchId]};IndexedDbMutationQueue.prototype.performConsistencyCheck=function(txn){var _this=this;return this.checkEmpty(txn).next(function(empty){if(!empty){return PersistencePromise.resolve()}// Verify that there are no entries in the documentMutations index if
// the queue is empty.
var startRange=IDBKeyRange.lowerBound(DbDocumentMutation.prefixForUser(_this.userId)),danglingMutationReferences=[];return documentMutationsStore(txn).iterate({range:startRange},function(key,_,control){var userID=key[0];if(userID!==_this.userId){control.done();return}else{var path=decode$1(key[1]);danglingMutationReferences.push(path)}}).next(function(){assert$1(0===danglingMutationReferences.length,"Document leak -- detected dangling mutation references when queue is empty. "+"Dangling keys: "+danglingMutationReferences.map(function(p){return p.canonicalString()}))})})};IndexedDbMutationQueue.prototype.containsKey=function(txn,key){return mutationQueueContainsKey(txn,this.userId,key)};// PORTING NOTE: Multi-tab only (state is held in memory in other clients).
/** Returns the mutation queue's metadata from IndexedDb. */IndexedDbMutationQueue.prototype.getMutationQueueMetadata=function(transaction){var _this=this;return mutationQueuesStore(transaction).get(this.userId).next(function(metadata){return metadata||new DbMutationQueue(_this.userId,BATCHID_UNKNOWN,/*lastStreamToken=*/"")})};return IndexedDbMutationQueue}();/**
                           * A batch of mutations that will be sent as one unit to the backend.
                           */ /**
      * @return true if the mutation queue for the given user contains a pending
      *         mutation for the given key.
      */function mutationQueueContainsKey(txn,userId,key){var indexKey=DbDocumentMutation.prefixForPath(userId,key.path),encodedPath=indexKey[1],startRange=IDBKeyRange.lowerBound(indexKey),containsKey=!1;return documentMutationsStore(txn).iterate({range:startRange,keysOnly:!0},function(key,value,control){var userID=key[0],keyPath=key[1],/*batchID*/_=key[2];if(userID===userId&&keyPath===encodedPath){containsKey=!0}control.done()}).next(function(){return containsKey})}/** Returns true if any mutation queue contains the given document. */function mutationQueuesContainKey(txn,docKey){var found=!1;return mutationQueuesStore(txn).iterateSerial(function(userId){return mutationQueueContainsKey(txn,userId,docKey).next(function(containsKey){if(containsKey){found=!0}return PersistencePromise.resolve(!containsKey)})}).next(function(){return found})}/**
   * Delete a mutation batch and the associated document mutations.
   * @return A PersistencePromise of the document mutations that were removed.
   */function removeMutationBatch(txn,userId,batch){var mutationStore=txn.store(DbMutationBatch.store),indexTxn=txn.store(DbDocumentMutation.store),promises=[],range=IDBKeyRange.only(batch.batchId),numDeleted=0,removePromise=mutationStore.iterate({range:range},function(key,value,control){numDeleted++;return control.delete()});promises.push(removePromise.next(function(){assert$1(1===numDeleted,"Dangling document-mutation reference found: Missing batch "+batch.batchId)}));for(var removedDocuments=[],_i=0,_a=batch.mutations;_i<_a.length;_i++){var mutation=_a[_i],indexKey=DbDocumentMutation.key(userId,mutation.key.path,batch.batchId);promises.push(indexTxn.delete(indexKey));removedDocuments.push(mutation.key)}return PersistencePromise.waitFor(promises).next(function(){return removedDocuments})}function convertStreamToken(token){if(token instanceof Uint8Array){// TODO(b/78771403): Convert tokens to strings during deserialization
assert$1("YES"===process.env.USE_MOCK_PERSISTENCE,"Persisting non-string stream tokens is only supported with mock persistence.");return token.toString()}else{return token}}/**
   * Helper to get a typed SimpleDbStore for the mutations object store.
   */function mutationsStore(txn){return IndexedDbPersistence.getStore(txn,DbMutationBatch.store)}/**
   * Helper to get a typed SimpleDbStore for the mutationQueues object store.
   */function documentMutationsStore(txn){return IndexedDbPersistence.getStore(txn,DbDocumentMutation.store)}/**
   * Helper to get a typed SimpleDbStore for the mutationQueues object store.
   */function mutationQueuesStore(txn){return IndexedDbPersistence.getStore(txn,DbMutationQueue.store)}/**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */var RESERVED_BITS=1,GeneratorIds;(function(GeneratorIds){GeneratorIds[GeneratorIds.QueryCache=0]="QueryCache";GeneratorIds[GeneratorIds.SyncEngine=1]="SyncEngine";// The target IDs for limbo detection are odd (end in 1).
})(GeneratorIds||(GeneratorIds={}));/**
                                          * Generates monotonically increasing target IDs for sending targets to the
                                          * watch stream.
                                          *
                                          * The client constructs two generators, one for the query cache (via
                                          * forQueryCache()), and one for limbo documents (via forSyncEngine()). These
                                          * two generators produce non-overlapping IDs (by using even and odd IDs
                                          * respectively).
                                          *
                                          * By separating the target ID space, the query cache can generate target IDs
                                          * that persist across client restarts, while sync engine can independently
                                          * generate in-memory target IDs that are transient and can be reused after a
                                          * restart.
                                          */ // TODO(mrschmidt): Explore removing this class in favor of generating these IDs
// directly in SyncEngine and LocalStore.
var TargetIdGenerator=/** @class */function(){/**
   * Instantiates a new TargetIdGenerator. If a seed is provided, the generator
   * will use the seed value as the next target ID.
   */function TargetIdGenerator(generatorId,seed){this.generatorId=generatorId;assert$1((generatorId&RESERVED_BITS)===generatorId,"Generator ID "+generatorId+" contains more than "+RESERVED_BITS+" reserved bits");this.seek(seed!==void 0?seed:this.generatorId)}TargetIdGenerator.prototype.next=function(){var nextId=this.nextId;this.nextId+=1<<RESERVED_BITS;return nextId};/**
      * Returns the ID that follows the given ID. Subsequent calls to `next()`
      * use the newly returned target ID as their base.
      */ // PORTING NOTE: Multi-tab only.
TargetIdGenerator.prototype.after=function(targetId){this.seek(targetId+(1<<RESERVED_BITS));return this.next()};TargetIdGenerator.prototype.seek=function(targetId){assert$1((targetId&RESERVED_BITS)===this.generatorId,"Cannot supply target ID from different generator ID");this.nextId=targetId};TargetIdGenerator.forQueryCache=function(){// We seed the query cache generator to return '2' as its first ID, as there
// is no differentiation in the protocol layer between an unset number and
// the number '0'. If we were to sent a target with target ID '0', the
// backend would consider it unset and replace it with its own ID.
var targetIdGenerator=new TargetIdGenerator(GeneratorIds.QueryCache,2);return targetIdGenerator};TargetIdGenerator.forSyncEngine=function(){// Sync engine assigns target IDs for limbo document detection.
return new TargetIdGenerator(GeneratorIds.SyncEngine)};return TargetIdGenerator}(),LOG_TAG$2="SimpleDb",SimpleDb=/** @class */function(){function SimpleDb(db){this.db=db}/**
     * Opens the specified database, creating or upgrading it if necessary.
     *
     * Note that `version` must not be a downgrade. IndexedDB does not support downgrading the schema
     * version. We currently do not support any way to do versioning outside of IndexedDB's versioning
     * mechanism, as only version-upgrade transactions are allowed to do things like create
     * objectstores.
     */SimpleDb.openOrCreate=function(name,version,schemaConverter){assert$1(SimpleDb.isAvailable(),"IndexedDB not supported in current environment.");debug(LOG_TAG$2,"Opening database:",name);return new PersistencePromise(function(resolve,reject){// TODO(mikelehen): Investigate browser compatibility.
// https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB
// suggests IE9 and older WebKit browsers handle upgrade
// differently. They expect setVersion, as described here:
// https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion
var request=window.indexedDB.open(name,version);request.onsuccess=function(event){var db=event.target.result;resolve(new SimpleDb(db))};request.onblocked=function(){reject(new FirestoreError(Code.FAILED_PRECONDITION,"Cannot upgrade IndexedDB schema while another tab is open. "+"Close all tabs that access Firestore and reload this page to proceed."))};request.onerror=function(event){var error=event.target.error;if("VersionError"===error.name){reject(new FirestoreError(Code.FAILED_PRECONDITION,"A newer version of the Firestore SDK was previously used and so the persisted "+"data is not compatible with the version of the SDK you are now using. The SDK "+"will operate with persistence disabled. If you need persistence, please "+"re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB "+"data for your app to start fresh."))}else{reject(error)}};request.onupgradeneeded=function(event){debug(LOG_TAG$2,"Database \""+name+"\" requires upgrade from version:",event.oldVersion);var db=event.target.result,txn=new SimpleDbTransaction(request.transaction);// We are provided a version upgrade transaction from the request, so
// we wrap that in a SimpleDbTransaction to allow use of our friendlier
// API for schema migration operations.
schemaConverter.createOrUpgrade(db,txn,event.oldVersion,SCHEMA_VERSION).next(function(){debug(LOG_TAG$2,"Database upgrade to version "+SCHEMA_VERSION+" complete")})}}).toPromise()};/** Deletes the specified database. */SimpleDb.delete=function(name){debug(LOG_TAG$2,"Removing database:",name);return wrapRequest(window.indexedDB.deleteDatabase(name)).toPromise()};/** Returns true if IndexedDB is available in the current environment. */SimpleDb.isAvailable=function(){if("undefined"===typeof window||null==window.indexedDB){return!1}// We extensively use indexed array values and compound keys,
// which IE and Edge do not support. However, they still have indexedDB
// defined on the window, so we need to check for them here and make sure
// to return that persistence is not enabled for those browsers.
// For tracking support of this feature, see here:
// https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/
// If we are running in Node using the IndexedDBShim, `window` is defined,
// but `window.navigator` is not. In this case, we support IndexedDB and
// return `true`.
if(window.navigator===void 0){return"YES"===process.env.USE_MOCK_PERSISTENCE}// Check the UA string to find out the browser.
// TODO(mikelehen): Move this logic into packages/util/environment.ts
var ua=window.navigator.userAgent,iOSVersion=SimpleDb.getIOSVersion(ua),isUnsupportedIOS=0<iOSVersion&&10>iOSVersion,androidVersion=SimpleDb.getAndroidVersion(ua),isUnsupportedAndroid=0<androidVersion&&4.5>androidVersion;// IE 10
// ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';
// IE 11
// ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';
// Edge
// ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,
// like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';
// iOS Safari: Disable for users running iOS version < 10.
if(0<ua.indexOf("MSIE ")||0<ua.indexOf("Trident/")||0<ua.indexOf("Edge/")||isUnsupportedIOS||isUnsupportedAndroid){return!1}else{return!0}};/** Helper to get a typed SimpleDbStore from a transaction. */SimpleDb.getStore=function(txn,store){return txn.store(store)};// visible for testing
/** Parse User Agent to determine iOS version. Returns -1 if not found. */SimpleDb.getIOSVersion=function(ua){var iOSVersionRegex=ua.match(/i(?:phone|pad|pod) os ([\d_]+)/i),version=iOSVersionRegex?iOSVersionRegex[1].split("_")[0]:"-1";return+version};// visible for testing
/** Parse User Agent to determine Android version. Returns -1 if not found. */SimpleDb.getAndroidVersion=function(ua){var androidVersionRegex=ua.match(/Android ([\d.]+)/i),version=androidVersionRegex?androidVersionRegex[1].split(".").slice(0,2).join("."):"-1";return+version};SimpleDb.prototype.setVersionChangeListener=function(versionChangeListener){this.db.onversionchange=function(event){return versionChangeListener(event)}};SimpleDb.prototype.runTransaction=function(mode,objectStores,transactionFn){var transaction=SimpleDbTransaction.open(this.db,mode,objectStores),transactionFnResult=transactionFn(transaction).catch(function(error){// Abort the transaction if there was an error.
transaction.abort(error);// We cannot actually recover, and calling `abort()` will cause the transaction's
// completion promise to be rejected. This in turn means that we won't use
// `transactionFnResult` below. We return a rejection here so that we don't add the
// possibility of returning `void` to the type of `transactionFnResult`.
return PersistencePromise.reject(error)}).toPromise();// As noted above, errors are propagated by aborting the transaction. So
// we swallow any error here to avoid the browser logging it as unhandled.
transactionFnResult.catch(function(){});// Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to
// fire), but still return the original transactionFnResult back to the
// caller.
return transaction.completionPromise.then(function(){return transactionFnResult})};SimpleDb.prototype.close=function(){this.db.close()};return SimpleDb}(),IterationController=/** @class */function(){function IterationController(dbCursor){this.dbCursor=dbCursor;this.shouldStop=!1;this.nextKey=null}Object.defineProperty(IterationController.prototype,"isDone",{get:function(){return this.shouldStop},enumerable:!0,configurable:!0});Object.defineProperty(IterationController.prototype,"skipToKey",{get:function(){return this.nextKey},enumerable:!0,configurable:!0});Object.defineProperty(IterationController.prototype,"cursor",{set:function(value){this.dbCursor=value},enumerable:!0,configurable:!0});/**
       * This function can be called to stop iteration at any point.
       */IterationController.prototype.done=function(){this.shouldStop=!0};/**
      * This function can be called to skip to that next key, which could be
      * an index or a primary key.
      */IterationController.prototype.skip=function(key){this.nextKey=key};/**
      * Delete the current cursor value from the object store.
      *
      * NOTE: You CANNOT do this with a keysOnly query.
      */IterationController.prototype.delete=function(){return wrapRequest(this.dbCursor.delete())};return IterationController}(),SimpleDbTransaction=/** @class */function(){function SimpleDbTransaction(transaction){var _this=this;this.transaction=transaction;this.aborted=!1;/**
                           * A promise that resolves with the result of the IndexedDb transaction.
                           */this.completionDeferred=new Deferred$1;this.transaction.oncomplete=function(){_this.completionDeferred.resolve()};this.transaction.onabort=function(){if(transaction.error){_this.completionDeferred.reject(transaction.error)}else{_this.completionDeferred.resolve()}};this.transaction.onerror=function(event){_this.completionDeferred.reject(event.target.error)}}SimpleDbTransaction.open=function(db,mode,objectStoreNames){return new SimpleDbTransaction(db.transaction(objectStoreNames,mode))};Object.defineProperty(SimpleDbTransaction.prototype,"completionPromise",{get:function(){return this.completionDeferred.promise},enumerable:!0,configurable:!0});SimpleDbTransaction.prototype.abort=function(error){if(error){this.completionDeferred.reject(error)}if(!this.aborted){debug(LOG_TAG$2,"Aborting transaction:",error?error.message:"Client-initiated abort");this.aborted=!0;this.transaction.abort()}};/**
      * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All
      * operations performed on the SimpleDbStore happen within the context of this
      * transaction and it cannot be used anymore once the transaction is
      * completed.
      *
      * Note that we can't actually enforce that the KeyType and ValueType are
      * correct, but they allow type safety through the rest of the consuming code.
      */SimpleDbTransaction.prototype.store=function(storeName){var store=this.transaction.objectStore(storeName);assert$1(!!store,"Object store not part of transaction: "+storeName);return new SimpleDbStore(store)};return SimpleDbTransaction}(),SimpleDbStore=/** @class */function(){function SimpleDbStore(store){this.store=store}SimpleDbStore.prototype.put=function(keyOrValue,value){var request;if(value!==void 0){debug(LOG_TAG$2,"PUT",this.store.name,keyOrValue,value);request=this.store.put(value,keyOrValue)}else{debug(LOG_TAG$2,"PUT",this.store.name,"<auto-key>",keyOrValue);request=this.store.put(keyOrValue)}return wrapRequest(request)};/**
      * Adds a new value into an Object Store and returns the new key. Similar to
      * IndexedDb's `add()`, this method will fail on primary key collisions.
      *
      * @param value The object to write.
      * @return The key of the value to add.
      */SimpleDbStore.prototype.add=function(value){debug(LOG_TAG$2,"ADD",this.store.name,value,value);var request=this.store.add(value);return wrapRequest(request)};/**
      * Gets the object with the specified key from the specified store, or null
      * if no object exists with the specified key.
      *
      * @key The key of the object to get.
      * @return The object with the specified key or null if no object exists.
      */SimpleDbStore.prototype.get=function(key){var _this=this,request=this.store.get(key);// tslint:disable-next-line:no-any We're doing an unsafe cast to ValueType.
return wrapRequest(request).next(function(result){// Normalize nonexistence to null.
if(result===void 0){result=null}debug(LOG_TAG$2,"GET",_this.store.name,key,result);return result})};SimpleDbStore.prototype.delete=function(key){debug(LOG_TAG$2,"DELETE",this.store.name,key);var request=this.store.delete(key);return wrapRequest(request)};/**
      * If we ever need more of the count variants, we can add overloads. For now,
      * all we need is to count everything in a store.
      *
      * Returns the number of rows in the store.
      */SimpleDbStore.prototype.count=function(){debug(LOG_TAG$2,"COUNT",this.store.name);var request=this.store.count();return wrapRequest(request)};SimpleDbStore.prototype.loadAll=function(indexOrRange,range){var cursor=this.cursor(this.options(indexOrRange,range)),results=[];return this.iterateCursor(cursor,function(key,value){results.push(value)}).next(function(){return results})};SimpleDbStore.prototype.deleteAll=function(indexOrRange,range){debug(LOG_TAG$2,"DELETE ALL",this.store.name);var options=this.options(indexOrRange,range);options.keysOnly=!1;var cursor=this.cursor(options);return this.iterateCursor(cursor,function(key,value,control){// NOTE: Calling delete() on a cursor is documented as more efficient than
// calling delete() on an object store with a single key
// (https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete),
// however, this requires us *not* to use a keysOnly cursor
// (https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/delete). We
// may want to compare the performance of each method.
return control.delete()})};SimpleDbStore.prototype.iterate=function(optionsOrCallback,callback){var options;if(!callback){options={};callback=optionsOrCallback}else{options=optionsOrCallback}var cursor=this.cursor(options);return this.iterateCursor(cursor,callback)};/**
      * Iterates over a store, but waits for the given callback to complete for
      * each entry before iterating the next entry. This allows the callback to do
      * asynchronous work to determine if this iteration should continue.
      *
      * The provided callback should return `true` to continue iteration, and
      * `false` otherwise.
      */SimpleDbStore.prototype.iterateSerial=function(callback){var cursorRequest=this.cursor({});return new PersistencePromise(function(resolve,reject){cursorRequest.onerror=function(event){reject(event.target.error)};cursorRequest.onsuccess=function(event){var cursor=event.target.result;if(!cursor){resolve();return}callback(cursor.primaryKey,cursor.value).next(function(shouldContinue){if(shouldContinue){cursor.continue()}else{resolve()}})}})};SimpleDbStore.prototype.iterateCursor=function(cursorRequest,fn){var results=[];return new PersistencePromise(function(resolve,reject){cursorRequest.onerror=function(event){reject(event.target.error)};cursorRequest.onsuccess=function(event){var cursor=event.target.result;if(!cursor){resolve();return}var controller=new IterationController(cursor),userResult=fn(cursor.primaryKey,cursor.value,controller);if(userResult instanceof PersistencePromise){var userPromise=userResult.catch(function(err){controller.done();return PersistencePromise.reject(err)});results.push(userPromise)}if(controller.isDone){resolve()}else if(null===controller.skipToKey){cursor.continue()}else{cursor.continue(controller.skipToKey)}}}).next(function(){return PersistencePromise.waitFor(results)})};SimpleDbStore.prototype.options=function(indexOrRange,range){var indexName=void 0;if(indexOrRange!==void 0){if("string"===typeof indexOrRange){indexName=indexOrRange}else{assert$1(range===void 0,"3rd argument must not be defined if 2nd is a range.");range=indexOrRange}}return{index:indexName,range:range}};SimpleDbStore.prototype.cursor=function(options){var direction="next";if(options.reverse){direction="prev"}if(options.index){var index=this.store.index(options.index);if(options.keysOnly){return index.openKeyCursor(options.range,direction)}else{return index.openCursor(options.range,direction)}}else{return this.store.openCursor(options.range,direction)}};return SimpleDbStore}();/**
      * @license
      * Copyright 2017 Google Inc.
      *
      * Licensed under the Apache License, Version 2.0 (the "License");
      * you may not use this file except in compliance with the License.
      * You may obtain a copy of the License at
      *
      *   http://www.apache.org/licenses/LICENSE-2.0
      *
      * Unless required by applicable law or agreed to in writing, software
      * distributed under the License is distributed on an "AS IS" BASIS,
      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      * See the License for the specific language governing permissions and
      * limitations under the License.
      */ /**
      * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror
      * handlers to resolve / reject the PersistencePromise as appropriate.
      */function wrapRequest(request){return new PersistencePromise(function(resolve,reject){request.onsuccess=function(event){var result=event.target.result;resolve(result)};request.onerror=function(event){reject(event.target.error)}})}/**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */var IndexedDbQueryCache=/** @class */function(){function IndexedDbQueryCache(referenceDelegate,serializer){this.referenceDelegate=referenceDelegate;this.serializer=serializer;// PORTING NOTE: We don't cache global metadata for the query cache, since
// some of it (in particular `highestTargetId`) can be modified by secondary
// tabs. We could perhaps be more granular (and e.g. still cache
// `lastRemoteSnapshotVersion` in memory) but for simplicity we currently go
// to IndexedDb whenever we need to read metadata. We can revisit if it turns
// out to have a meaningful performance impact.
this.targetIdGenerator=TargetIdGenerator.forQueryCache()}IndexedDbQueryCache.prototype.allocateTargetId=function(transaction){var _this=this;return this.retrieveMetadata(transaction).next(function(metadata){metadata.highestTargetId=_this.targetIdGenerator.after(metadata.highestTargetId);return _this.saveMetadata(transaction,metadata).next(function(){return metadata.highestTargetId})})};IndexedDbQueryCache.prototype.getLastRemoteSnapshotVersion=function(transaction){return this.retrieveMetadata(transaction).next(function(metadata){return SnapshotVersion.fromTimestamp(new Timestamp(metadata.lastRemoteSnapshotVersion.seconds,metadata.lastRemoteSnapshotVersion.nanoseconds))})};IndexedDbQueryCache.prototype.getHighestSequenceNumber=function(transaction){return getHighestListenSequenceNumber(transaction.simpleDbTransaction)};IndexedDbQueryCache.prototype.setTargetsMetadata=function(transaction,highestListenSequenceNumber,lastRemoteSnapshotVersion){var _this=this;return this.retrieveMetadata(transaction).next(function(metadata){metadata.highestListenSequenceNumber=highestListenSequenceNumber;if(lastRemoteSnapshotVersion){metadata.lastRemoteSnapshotVersion=lastRemoteSnapshotVersion.toTimestamp()}if(highestListenSequenceNumber>metadata.highestListenSequenceNumber){metadata.highestListenSequenceNumber=highestListenSequenceNumber}return _this.saveMetadata(transaction,metadata)})};IndexedDbQueryCache.prototype.addQueryData=function(transaction,queryData){var _this=this;return this.saveQueryData(transaction,queryData).next(function(){return _this.retrieveMetadata(transaction).next(function(metadata){metadata.targetCount+=1;_this.updateMetadataFromQueryData(queryData,metadata);return _this.saveMetadata(transaction,metadata)})})};IndexedDbQueryCache.prototype.updateQueryData=function(transaction,queryData){return this.saveQueryData(transaction,queryData)};IndexedDbQueryCache.prototype.removeQueryData=function(transaction,queryData){var _this=this;return this.removeMatchingKeysForTargetId(transaction,queryData.targetId).next(function(){return targetsStore(transaction).delete(queryData.targetId)}).next(function(){return _this.retrieveMetadata(transaction)}).next(function(metadata){assert$1(0<metadata.targetCount,"Removing from an empty query cache");metadata.targetCount-=1;return _this.saveMetadata(transaction,metadata)})};/**
      * Drops any targets with sequence number less than or equal to the upper bound, excepting those
      * present in `activeTargetIds`. Document associations for the removed targets are also removed.
      * Returns the number of targets removed.
      */IndexedDbQueryCache.prototype.removeTargets=function(txn,upperBound,activeTargetIds){var _this=this,count=0,promises=[];return targetsStore(txn).iterate(function(key,value){var queryData=_this.serializer.fromDbTarget(value);if(queryData.sequenceNumber<=upperBound&&activeTargetIds[queryData.targetId]===void 0){count++;promises.push(_this.removeQueryData(txn,queryData))}}).next(function(){return PersistencePromise.waitFor(promises)}).next(function(){return count})};/**
      * Call provided function with each `QueryData` that we have cached.
      */IndexedDbQueryCache.prototype.forEachTarget=function(txn,f){var _this=this;return targetsStore(txn).iterate(function(key,value){var queryData=_this.serializer.fromDbTarget(value);f(queryData)})};IndexedDbQueryCache.prototype.retrieveMetadata=function(transaction){return retrieveMetadata(transaction.simpleDbTransaction)};IndexedDbQueryCache.prototype.saveMetadata=function(transaction,metadata){return globalTargetStore(transaction).put(DbTargetGlobal.key,metadata)};IndexedDbQueryCache.prototype.saveQueryData=function(transaction,queryData){return targetsStore(transaction).put(this.serializer.toDbTarget(queryData))};/**
      * In-place updates the provided metadata to account for values in the given
      * QueryData. Saving is done separately. Returns true if there were any
      * changes to the metadata.
      */IndexedDbQueryCache.prototype.updateMetadataFromQueryData=function(queryData,metadata){var updated=!1;if(queryData.targetId>metadata.highestTargetId){metadata.highestTargetId=queryData.targetId;updated=!0}if(queryData.sequenceNumber>metadata.highestListenSequenceNumber){metadata.highestListenSequenceNumber=queryData.sequenceNumber;updated=!0}return updated};IndexedDbQueryCache.prototype.getQueryCount=function(transaction){return this.retrieveMetadata(transaction).next(function(metadata){return metadata.targetCount})};IndexedDbQueryCache.prototype.getQueryData=function(transaction,query){var _this=this,canonicalId=query.canonicalId(),range=IDBKeyRange.bound([canonicalId,Number.NEGATIVE_INFINITY],[canonicalId,Number.POSITIVE_INFINITY]),result=null;// Iterating by the canonicalId may yield more than one result because
// canonicalId values are not required to be unique per target. This query
// depends on the queryTargets index to be efficient.
return targetsStore(transaction).iterate({range:range,index:DbTarget.queryTargetsIndexName},function(key,value,control){var found=_this.serializer.fromDbTarget(value);// After finding a potential match, check that the query is
// actually equal to the requested query.
if(query.isEqual(found.query)){result=found;control.done()}}).next(function(){return result})};IndexedDbQueryCache.prototype.addMatchingKeys=function(txn,keys,targetId){var _this=this,promises=[],store=documentTargetStore(txn);// PORTING NOTE: The reverse index (documentsTargets) is maintained by
// IndexedDb.
keys.forEach(function(key){var path=encode(key.path);promises.push(store.put(new DbTargetDocument(targetId,path)));promises.push(_this.referenceDelegate.addReference(txn,key))});return PersistencePromise.waitFor(promises)};IndexedDbQueryCache.prototype.removeMatchingKeys=function(txn,keys,targetId){var _this=this,store=documentTargetStore(txn);// PORTING NOTE: The reverse index (documentsTargets) is maintained by
// IndexedDb.
return PersistencePromise.forEach(keys,function(key){var path=encode(key.path);return PersistencePromise.waitFor([store.delete([targetId,path]),_this.referenceDelegate.removeReference(txn,key)])})};IndexedDbQueryCache.prototype.removeMatchingKeysForTargetId=function(txn,targetId){var store=documentTargetStore(txn),range=IDBKeyRange.bound([targetId],[targetId+1],!1,!0);return store.delete(range)};IndexedDbQueryCache.prototype.getMatchingKeysForTargetId=function(txn,targetId){var range=IDBKeyRange.bound([targetId],[targetId+1],!1,!0),store=documentTargetStore(txn),result=documentKeySet();return store.iterate({range:range,keysOnly:!0},function(key,_,control){var path=decode$1(key[1]),docKey=new DocumentKey(path);result=result.add(docKey)}).next(function(){return result})};IndexedDbQueryCache.prototype.containsKey=function(txn,key){var path=encode(key.path),range=IDBKeyRange.bound([path],[immediateSuccessor(path)],!1,!0),count=0;return documentTargetStore(txn).iterate({index:DbTargetDocument.documentTargetsIndex,keysOnly:!0,range:range},function(_a,_,control){var targetId=_a[0],path=_a[1];// Having a sentinel row for a document does not count as containing that document;
// For the query cache, containing the document means the document is part of some
// target.
if(0!==targetId){count++;control.done()}}).next(function(){return 0<count})};IndexedDbQueryCache.prototype.getQueryDataForTarget=function(transaction,targetId){var _this=this;return targetsStore(transaction).get(targetId).next(function(found){if(found){return _this.serializer.fromDbTarget(found)}else{return null}})};return IndexedDbQueryCache}();/**
      * Helper to get a typed SimpleDbStore for the queries object store.
      */function targetsStore(txn){return IndexedDbPersistence.getStore(txn,DbTarget.store)}/**
   * Helper to get a typed SimpleDbStore for the target globals object store.
   */function globalTargetStore(txn){return IndexedDbPersistence.getStore(txn,DbTargetGlobal.store)}function retrieveMetadata(txn){var globalStore=SimpleDb.getStore(txn,DbTargetGlobal.store);return globalStore.get(DbTargetGlobal.key).next(function(metadata){assert$1(null!==metadata,"Missing metadata row.");return metadata})}function getHighestListenSequenceNumber(txn){return retrieveMetadata(txn).next(function(targetGlobal){return targetGlobal.highestListenSequenceNumber})}/**
   * Helper to get a typed SimpleDbStore for the document target object store.
   */function documentTargetStore(txn){return IndexedDbPersistence.getStore(txn,DbTargetDocument.store)}/**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */ /**
       * A map implementation that uses objects as keys. Objects must implement the
       * Equatable interface and must be immutable. Entries in the map are stored
       * together with the key being produced from the mapKeyFn. This map
       * automatically handles collisions of keys.
       */var ObjectMap=/** @class */function(){function ObjectMap(mapKeyFn){this.mapKeyFn=mapKeyFn;/**
                               * The inner map for a key -> value pair. Due to the possibility of
                               * collisions we keep a list of entries that we do a linear search through
                               * to find an actual match. Note that collisions should be rare, so we still
                               * expect near constant time lookups in practice.
                               */this.inner={}}/** Get a value for this key, or undefined if it does not exist. */ObjectMap.prototype.get=function(key){var id=this.mapKeyFn(key),matches=this.inner[id];if(matches===void 0){return void 0}for(var _i=0,matches_1=matches;_i<matches_1.length;_i++){var _a=matches_1[_i],otherKey=_a[0],value=_a[1];if(otherKey.isEqual(key)){return value}}return void 0};ObjectMap.prototype.has=function(key){return this.get(key)!==void 0};/** Put this key and value in the map. */ObjectMap.prototype.set=function(key,value){var id=this.mapKeyFn(key),matches=this.inner[id];if(matches===void 0){this.inner[id]=[[key,value]];return}for(var i=0;i<matches.length;i++){if(matches[i][0].isEqual(key)){matches[i]=[key,value];return}}matches.push([key,value])};/**
      * Remove this key from the map. Returns a boolean if anything was deleted.
      */ObjectMap.prototype.delete=function(key){var id=this.mapKeyFn(key),matches=this.inner[id];if(matches===void 0){return!1}for(var i=0;i<matches.length;i++){if(matches[i][0].isEqual(key)){if(1===matches.length){delete this.inner[id]}else{matches.splice(i,1)}return!0}}return!1};ObjectMap.prototype.forEach=function(fn){forEach$1(this.inner,function(_,entries){for(var _i=0,entries_1=entries;_i<entries_1.length;_i++){var _a=entries_1[_i],k=_a[0],v=_a[1];fn(k,v)}})};ObjectMap.prototype.isEmpty=function(){return isEmpty$1(this.inner)};return ObjectMap}(),RemoteDocumentChangeBuffer=/** @class */function(){function RemoteDocumentChangeBuffer(){this.changes=maybeDocumentMap();this.documentSizes=new ObjectMap(function(key){return key.toString()})}/** Buffers a `RemoteDocumentCache.addEntry()` call. */RemoteDocumentChangeBuffer.prototype.addEntry=function(maybeDocument){var changes=this.assertChanges();this.changes=changes.insert(maybeDocument.key,maybeDocument)};// NOTE: removeEntry() is intentionally omitted. If it needs to be added in
// the future it must take byte counting into account.
/**
   * Looks up an entry in the cache. The buffered changes will first be checked,
   * and if no buffered change applies, this will forward to
   * `RemoteDocumentCache.getEntry()`.
   *
   * @param transaction The transaction in which to perform any persistence
   *     operations.
   * @param documentKey The key of the entry to look up.
   * @return The cached Document or NoDocument entry, or null if we have nothing
   * cached.
   */RemoteDocumentChangeBuffer.prototype.getEntry=function(transaction,documentKey){var _this=this,changes=this.assertChanges(),bufferedEntry=changes.get(documentKey);if(bufferedEntry){return PersistencePromise.resolve(bufferedEntry)}else{// Record the size of everything we load from the cache so we can compute a delta later.
return this.getFromCache(transaction,documentKey).next(function(getResult){if(null===getResult){_this.documentSizes.set(documentKey,0);return null}else{_this.documentSizes.set(documentKey,getResult.size);return getResult.maybeDocument}})}};/**
      * Looks up several entries in the cache, forwarding to
      * `RemoteDocumentCache.getEntry()`.
      *
      * @param transaction The transaction in which to perform any persistence
      *     operations.
      * @param documentKeys The keys of the entries to look up.
      * @return A map of cached `Document`s or `NoDocument`s, indexed by key. If an
      *     entry cannot be found, the corresponding key will be mapped to a null
      *     value.
      */RemoteDocumentChangeBuffer.prototype.getEntries=function(transaction,documentKeys){var _this=this;// Record the size of everything we load from the cache so we can compute
// a delta later.
return this.getAllFromCache(transaction,documentKeys).next(function(_a){var maybeDocuments=_a.maybeDocuments,sizeMap=_a.sizeMap;// Note: `getAllFromCache` returns two maps instead of a single map from
// keys to `DocumentSizeEntry`s. This is to allow returning the
// `NullableMaybeDocumentMap` directly, without a conversion.
sizeMap.forEach(function(documentKey,size){_this.documentSizes.set(documentKey,size)});return maybeDocuments})};/**
      * Applies buffered changes to the underlying RemoteDocumentCache, using
      * the provided transaction.
      */RemoteDocumentChangeBuffer.prototype.apply=function(transaction){var result=this.applyChanges(transaction);// We should not buffer any more changes.
this.changes=null;return result};/** Helper to assert this.changes is not null and return it. */RemoteDocumentChangeBuffer.prototype.assertChanges=function(){assert$1(null!==this.changes,"Changes have already been applied.");return this.changes};return RemoteDocumentChangeBuffer}(),REMOTE_DOCUMENT_CHANGE_MISSING_ERR_MSG="The remote document changelog no longer contains all changes for all "+"local query views. It may be necessary to rebuild these views.",IndexedDbRemoteDocumentCache=/** @class */function(){/**
   * @param {LocalSerializer} serializer The document serializer.
   * @param {IndexManager} indexManager The query indexes that need to be maintained.
   * @param keepDocumentChangeLog Whether to keep a document change log in
   * IndexedDb. This change log is required for Multi-Tab synchronization, but
   * not needed in clients that don't share access to their remote document
   * cache.
   */function IndexedDbRemoteDocumentCache(serializer,indexManager,keepDocumentChangeLog){this.serializer=serializer;this.indexManager=indexManager;this.keepDocumentChangeLog=keepDocumentChangeLog;/** The last id read by `getNewDocumentChanges()`. */this._lastProcessedDocumentChangeId=0}Object.defineProperty(IndexedDbRemoteDocumentCache.prototype,"lastProcessedDocumentChangeId",{get:function(){return this._lastProcessedDocumentChangeId},enumerable:!0,configurable:!0});/**
       * Starts up the remote document cache.
       *
       * Reads the ID of the last  document change from the documentChanges store.
       * Existing changes will not be returned as part of
       * `getNewDocumentChanges()`.
       */ // PORTING NOTE: This is only used for multi-tab synchronization.
IndexedDbRemoteDocumentCache.prototype.start=function(transaction){var store=SimpleDb.getStore(transaction,DbRemoteDocumentChanges.store);return this.synchronizeLastDocumentChangeId(store)};/**
      * Adds the supplied entries to the cache. Adds the given size delta to the cached size.
      */IndexedDbRemoteDocumentCache.prototype.addEntries=function(transaction,entries,sizeDelta){var promises=[];if(0<entries.length){for(var documentStore=remoteDocumentsStore(transaction),changedKeys=documentKeySet(),_i=0,entries_1=entries;_i<entries_1.length;_i++){var _a=entries_1[_i],key=_a.key,doc=_a.doc;promises.push(documentStore.put(dbKey(key),doc));changedKeys=changedKeys.add(key);promises.push(this.indexManager.addToCollectionParentIndex(transaction,key.path.popLast()))}if(this.keepDocumentChangeLog){promises.push(documentChangesStore(transaction).put({changes:this.serializer.toDbResourcePaths(changedKeys)}))}promises.push(this.updateSize(transaction,sizeDelta))}return PersistencePromise.waitFor(promises)};/**
      * Removes a document from the cache. Note that this method does *not* do any
      * size accounting. It is the responsibility of the caller to count the bytes removed
      * and issue a final updateSize() call after removing documents.
      *
      * @param documentKey The key of the document to remove
      * @return The size of the document that was removed.
      */IndexedDbRemoteDocumentCache.prototype.removeEntry=function(transaction,documentKey){// We don't need to keep changelog for these removals since `removeEntry` is
// only used for garbage collection.
var store=remoteDocumentsStore(transaction),key=dbKey(documentKey);return store.get(key).next(function(document){if(document){return store.delete(key).next(function(){return dbDocumentSize(document)})}else{return PersistencePromise.resolve(0)}})};IndexedDbRemoteDocumentCache.prototype.getEntry=function(transaction,documentKey){var _this=this;return remoteDocumentsStore(transaction).get(dbKey(documentKey)).next(function(dbRemoteDoc){return dbRemoteDoc?_this.serializer.fromDbRemoteDocument(dbRemoteDoc):null})};/**
      * Looks up an entry in the cache.
      *
      * @param documentKey The key of the entry to look up.
      * @return The cached MaybeDocument entry and its size, or null if we have nothing cached.
      */IndexedDbRemoteDocumentCache.prototype.getSizedEntry=function(transaction,documentKey){var _this=this;return remoteDocumentsStore(transaction).get(dbKey(documentKey)).next(function(dbRemoteDoc){return dbRemoteDoc?{maybeDocument:_this.serializer.fromDbRemoteDocument(dbRemoteDoc),size:dbDocumentSize(dbRemoteDoc)}:null})};IndexedDbRemoteDocumentCache.prototype.getEntries=function(transaction,documentKeys){var _this=this,results=nullableMaybeDocumentMap();return this.forEachDbEntry(transaction,documentKeys,function(key,dbRemoteDoc){if(dbRemoteDoc){results=results.insert(key,_this.serializer.fromDbRemoteDocument(dbRemoteDoc))}else{results=results.insert(key,null)}}).next(function(){return results})};/**
      * Looks up several entries in the cache.
      *
      * @param documentKeys The set of keys entries to look up.
      * @return A map of MaybeDocuments indexed by key (if a document cannot be
      *     found, the key will be mapped to null) and a map of sizes indexed by
      *     key (zero if the key cannot be found).
      */IndexedDbRemoteDocumentCache.prototype.getSizedEntries=function(transaction,documentKeys){var _this=this,results=nullableMaybeDocumentMap(),sizeMap=new SortedMap(DocumentKey.comparator);return this.forEachDbEntry(transaction,documentKeys,function(key,dbRemoteDoc){if(dbRemoteDoc){results=results.insert(key,_this.serializer.fromDbRemoteDocument(dbRemoteDoc));sizeMap=sizeMap.insert(key,dbDocumentSize(dbRemoteDoc))}else{results=results.insert(key,null);sizeMap=sizeMap.insert(key,0)}}).next(function(){return{maybeDocuments:results,sizeMap:sizeMap}})};IndexedDbRemoteDocumentCache.prototype.forEachDbEntry=function(transaction,documentKeys,callback){if(documentKeys.isEmpty()){return PersistencePromise.resolve()}var range=IDBKeyRange.bound(documentKeys.first().path.toArray(),documentKeys.last().path.toArray()),keyIter=documentKeys.getIterator(),nextKey=keyIter.getNext();return remoteDocumentsStore(transaction).iterate({range:range},function(potentialKeyRaw,dbRemoteDoc,control){var potentialKey=DocumentKey.fromSegments(potentialKeyRaw);// Go through keys not found in cache.
while(nextKey&&0>DocumentKey.comparator(nextKey,potentialKey)){callback(nextKey,null);nextKey=keyIter.getNext()}if(nextKey&&nextKey.isEqual(potentialKey)){// Key found in cache.
callback(nextKey,dbRemoteDoc);nextKey=keyIter.hasNext()?keyIter.getNext():null}// Skip to the next key (if there is one).
if(nextKey){control.skip(nextKey.path.toArray())}else{control.done()}}).next(function(){// The rest of the keys are not in the cache. One case where `iterate`
// above won't go through them is when the cache is empty.
while(nextKey){callback(nextKey,null);nextKey=keyIter.hasNext()?keyIter.getNext():null}})};IndexedDbRemoteDocumentCache.prototype.getDocumentsMatchingQuery=function(transaction,query){var _this=this;assert$1(!query.isCollectionGroupQuery(),"CollectionGroup queries should be handled in LocalDocumentsView");var results=documentMap(),immediateChildrenPathLength=query.path.length+1,startKey=query.path.toArray(),range=IDBKeyRange.lowerBound(startKey);return remoteDocumentsStore(transaction).iterate({range:range},function(key,dbRemoteDoc,control){// The query is actually returning any path that starts with the query
// path prefix which may include documents in subcollections. For
// example, a query on 'rooms' will return rooms/abc/messages/xyx but we
// shouldn't match it. Fix this by discarding rows with document keys
// more than one segment longer than the query path.
if(key.length!==immediateChildrenPathLength){return}var maybeDoc=_this.serializer.fromDbRemoteDocument(dbRemoteDoc);if(!query.path.isPrefixOf(maybeDoc.key.path)){control.done()}else if(maybeDoc instanceof Document$1&&query.matches(maybeDoc)){results=results.insert(maybeDoc.key,maybeDoc)}}).next(function(){return results})};IndexedDbRemoteDocumentCache.prototype.getNewDocumentChanges=function(transaction){var _this=this;assert$1(this.keepDocumentChangeLog,"Can only call getNewDocumentChanges() when document change log is enabled");var changedKeys=documentKeySet(),changedDocs=maybeDocumentMap(),range=IDBKeyRange.lowerBound(this._lastProcessedDocumentChangeId+1),firstIteration=!0,changesStore=documentChangesStore(transaction);return changesStore.iterate({range:range},function(_,documentChange){if(firstIteration){firstIteration=!1;// If our client was throttled for more than 30 minutes, another
// client may have garbage collected the remote document changelog.
if(_this._lastProcessedDocumentChangeId+1!==documentChange.id){// Reset the `lastProcessedDocumentChangeId` to allow further
// invocations to successfully return the changes after this
// rejection.
return _this.synchronizeLastDocumentChangeId(changesStore).next(function(){return PersistencePromise.reject(new FirestoreError(Code.DATA_LOSS,REMOTE_DOCUMENT_CHANGE_MISSING_ERR_MSG))})}}changedKeys=changedKeys.unionWith(_this.serializer.fromDbResourcePaths(documentChange.changes));_this._lastProcessedDocumentChangeId=documentChange.id}).next(function(){var documentPromises=[];changedKeys.forEach(function(key){documentPromises.push(_this.getEntry(transaction,key).next(function(maybeDocument){var doc=maybeDocument||new NoDocument(key,SnapshotVersion.forDeletedDoc());changedDocs=changedDocs.insert(key,doc)}))});return PersistencePromise.waitFor(documentPromises)}).next(function(){return changedDocs})};/**
      * Removes all changes in the remote document changelog through `changeId`
      * (inclusive).
      */IndexedDbRemoteDocumentCache.prototype.removeDocumentChangesThroughChangeId=function(transaction,changeId){var range=IDBKeyRange.upperBound(changeId);return documentChangesStore(transaction).delete(range)};IndexedDbRemoteDocumentCache.prototype.synchronizeLastDocumentChangeId=function(documentChangesStore){var _this=this;// If there are no existing changes, we set `lastProcessedDocumentChangeId`
// to 0 since IndexedDb's auto-generated keys start at 1.
this._lastProcessedDocumentChangeId=0;return documentChangesStore.iterate({keysOnly:!0,reverse:!0},function(key,value,control){_this._lastProcessedDocumentChangeId=key;control.done()})};IndexedDbRemoteDocumentCache.prototype.newChangeBuffer=function(){return new IndexedDbRemoteDocumentChangeBuffer(this)};IndexedDbRemoteDocumentCache.prototype.getSize=function(txn){return this.getMetadata(txn).next(function(metadata){return metadata.byteSize})};IndexedDbRemoteDocumentCache.prototype.getMetadata=function(txn){return documentGlobalStore(txn).get(DbRemoteDocumentGlobal.key).next(function(metadata){assert$1(!!metadata,"Missing document cache metadata");return metadata})};IndexedDbRemoteDocumentCache.prototype.setMetadata=function(txn,metadata){return documentGlobalStore(txn).put(DbRemoteDocumentGlobal.key,metadata)};/**
      * Adds the given delta to the cached current size. Callers to removeEntry *must* call this
      * afterwards to update the size of the cache.
      *
      * @param sizeDelta
      */IndexedDbRemoteDocumentCache.prototype.updateSize=function(txn,sizeDelta){var _this=this;return this.getMetadata(txn).next(function(metadata){metadata.byteSize+=sizeDelta;return _this.setMetadata(txn,metadata)})};return IndexedDbRemoteDocumentCache}();/**
      * @license
      * Copyright 2017 Google Inc.
      *
      * Licensed under the Apache License, Version 2.0 (the "License");
      * you may not use this file except in compliance with the License.
      * You may obtain a copy of the License at
      *
      *   http://www.apache.org/licenses/LICENSE-2.0
      *
      * Unless required by applicable law or agreed to in writing, software
      * distributed under the License is distributed on an "AS IS" BASIS,
      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      * See the License for the specific language governing permissions and
      * limitations under the License.
      */ /**
          * An in-memory buffer of entries to be written to a RemoteDocumentCache.
          * It can be used to batch up a set of changes to be written to the cache, but
          * additionally supports reading entries back with the `getEntry()` method,
          * falling back to the underlying RemoteDocumentCache if no entry is
          * buffered.
          *
          * Entries added to the cache *must* be read first. This is to facilitate
          * calculating the size delta of the pending changes.
          *
          * PORTING NOTE: This class was implemented then removed from other platforms.
          * If byte-counting ends up being needed on the other platforms, consider
          * porting this class as part of that implementation work.
          */function documentGlobalStore(txn){return IndexedDbPersistence.getStore(txn,DbRemoteDocumentGlobal.store)}/**
   * Handles the details of adding and updating documents in the IndexedDbRemoteDocumentCache
   */var IndexedDbRemoteDocumentChangeBuffer=/** @class */function(_super){__extends(IndexedDbRemoteDocumentChangeBuffer,_super);function IndexedDbRemoteDocumentChangeBuffer(documentCache){var _this=_super.call(this)||this;_this.documentCache=documentCache;return _this}IndexedDbRemoteDocumentChangeBuffer.prototype.applyChanges=function(transaction){var _this=this,changes=this.assertChanges(),delta=0,toApply=[];changes.forEach(function(key,maybeDocument){var doc=_this.documentCache.serializer.toDbRemoteDocument(maybeDocument),previousSize=_this.documentSizes.get(key);// NOTE: if we ever decide we need to support doing writes without
// reading first, this assert will need to change to do the read automatically.
assert$1(previousSize!==void 0,"Attempting to change document "+key.toString()+" without having read it first");var size=dbDocumentSize(doc);delta+=size-previousSize;toApply.push({key:key,doc:doc})});return this.documentCache.addEntries(transaction,toApply,delta)};IndexedDbRemoteDocumentChangeBuffer.prototype.getFromCache=function(transaction,documentKey){return this.documentCache.getSizedEntry(transaction,documentKey)};IndexedDbRemoteDocumentChangeBuffer.prototype.getAllFromCache=function(transaction,documentKeys){return this.documentCache.getSizedEntries(transaction,documentKeys)};return IndexedDbRemoteDocumentChangeBuffer}(RemoteDocumentChangeBuffer);function isDocumentChangeMissingError(err){return err.code===Code.DATA_LOSS&&err.message===REMOTE_DOCUMENT_CHANGE_MISSING_ERR_MSG}/**
   * Helper to get a typed SimpleDbStore for the remoteDocuments object store.
   */function remoteDocumentsStore(txn){return IndexedDbPersistence.getStore(txn,DbRemoteDocument.store)}/**
   * Helper to get a typed SimpleDbStore for the remoteDocumentChanges object
   * store.
   */function documentChangesStore(txn){return IndexedDbPersistence.getStore(txn,DbRemoteDocumentChanges.store)}function dbKey(docKey){return docKey.path.toArray()}/**
   * Retrusn an approximate size for the given document.
   */function dbDocumentSize(doc){var value;if(doc.document){value=doc.document}else if(doc.unknownDocument){value=doc.unknownDocument}else if(doc.noDocument){value=doc.noDocument}else{throw fail("Unknown remote document type")}return JSON.stringify(value).length}/**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */ /**
       * An in-memory implementation of IndexManager.
       */var MemoryIndexManager=/** @class */function(){function MemoryIndexManager(){this.collectionParentIndex=new MemoryCollectionParentIndex}MemoryIndexManager.prototype.addToCollectionParentIndex=function(transaction,collectionPath){this.collectionParentIndex.add(collectionPath);return PersistencePromise.resolve()};MemoryIndexManager.prototype.getCollectionParents=function(transaction,collectionId){return PersistencePromise.resolve(this.collectionParentIndex.getEntries(collectionId))};return MemoryIndexManager}(),MemoryCollectionParentIndex=/** @class */function(){function MemoryCollectionParentIndex(){this.index={}}// Returns false if the entry already existed.
MemoryCollectionParentIndex.prototype.add=function(collectionPath){assert$1(1===collectionPath.length%2,"Expected a collection path.");var collectionId=collectionPath.lastSegment(),parentPath=collectionPath.popLast(),existingParents=this.index[collectionId]||new SortedSet(ResourcePath.comparator),added=!existingParents.has(parentPath);this.index[collectionId]=existingParents.add(parentPath);return added};MemoryCollectionParentIndex.prototype.getEntries=function(collectionId){var parentPaths=this.index[collectionId]||new SortedSet(ResourcePath.comparator);return parentPaths.toArray()};return MemoryCollectionParentIndex}(),SCHEMA_VERSION=8,SchemaConverter=/** @class */function(){function SchemaConverter(serializer){this.serializer=serializer}/**
     * Performs database creation and schema upgrades.
     *
     * Note that in production, this method is only ever used to upgrade the schema
     * to SCHEMA_VERSION. Different values of toVersion are only used for testing
     * and local feature development.
     */SchemaConverter.prototype.createOrUpgrade=function(db,txn,fromVersion,toVersion){var _this=this;assert$1(fromVersion<toVersion&&0<=fromVersion&&toVersion<=SCHEMA_VERSION,"Unexpected schema upgrade from v"+fromVersion+" to v{toVersion}.");if(1>fromVersion&&1<=toVersion){createPrimaryClientStore(db);createMutationQueue(db);createQueryCache(db);createRemoteDocumentCache(db)}// Migration 2 to populate the targetGlobal object no longer needed since
// migration 3 unconditionally clears it.
var p=PersistencePromise.resolve();if(3>fromVersion&&3<=toVersion){// Brand new clients don't need to drop and recreate--only clients that
// potentially have corrupt data.
if(0!==fromVersion){dropQueryCache(db);createQueryCache(db)}p=p.next(function(){return writeEmptyTargetGlobalEntry(txn)})}if(4>fromVersion&&4<=toVersion){if(0!==fromVersion){// Schema version 3 uses auto-generated keys to generate globally unique
// mutation batch IDs (this was previously ensured internally by the
// client). To migrate to the new schema, we have to read all mutations
// and write them back out. We preserve the existing batch IDs to guarantee
// consistency with other object stores. Any further mutation batch IDs will
// be auto-generated.
p=p.next(function(){return upgradeMutationBatchSchemaAndMigrateData(db,txn)})}p=p.next(function(){createClientMetadataStore(db);createRemoteDocumentChangesStore(db)})}if(5>fromVersion&&5<=toVersion){p=p.next(function(){return _this.removeAcknowledgedMutations(txn)})}if(6>fromVersion&&6<=toVersion){p=p.next(function(){createDocumentGlobalStore(db);return _this.addDocumentGlobal(txn)})}if(7>fromVersion&&7<=toVersion){p=p.next(function(){return _this.ensureSequenceNumbers(txn)})}if(8>fromVersion&&8<=toVersion){p=p.next(function(){return _this.createCollectionParentIndex(db,txn)})}return p};SchemaConverter.prototype.addDocumentGlobal=function(txn){var byteCount=0;return txn.store(DbRemoteDocument.store).iterate(function(_,doc){byteCount+=dbDocumentSize(doc)}).next(function(){var metadata=new DbRemoteDocumentGlobal(byteCount);return txn.store(DbRemoteDocumentGlobal.store).put(DbRemoteDocumentGlobal.key,metadata)})};SchemaConverter.prototype.removeAcknowledgedMutations=function(txn){var _this=this,queuesStore=txn.store(DbMutationQueue.store),mutationsStore=txn.store(DbMutationBatch.store);return queuesStore.loadAll().next(function(queues){return PersistencePromise.forEach(queues,function(queue){var range=IDBKeyRange.bound([queue.userId,BATCHID_UNKNOWN],[queue.userId,queue.lastAcknowledgedBatchId]);return mutationsStore.loadAll(DbMutationBatch.userMutationsIndex,range).next(function(dbBatches){return PersistencePromise.forEach(dbBatches,function(dbBatch){assert$1(dbBatch.userId===queue.userId,"Cannot process batch "+dbBatch.batchId+" from unexpected user");var batch=_this.serializer.fromDbMutationBatch(dbBatch);return removeMutationBatch(txn,queue.userId,batch).next(function(){})})})})})};/**
      * Ensures that every document in the remote document cache has a corresponding sentinel row
      * with a sequence number. Missing rows are given the most recently used sequence number.
      */SchemaConverter.prototype.ensureSequenceNumbers=function(txn){var documentTargetStore=txn.store(DbTargetDocument.store),documentsStore=txn.store(DbRemoteDocument.store);return getHighestListenSequenceNumber(txn).next(function(currentSequenceNumber){var writeSentinelKey=function(path){return documentTargetStore.put(new DbTargetDocument(0,encode(path),currentSequenceNumber))},promises=[];return documentsStore.iterate(function(key,doc){var path=new ResourcePath(key),docSentinelKey=sentinelKey(path);promises.push(documentTargetStore.get(docSentinelKey).next(function(maybeSentinel){if(!maybeSentinel){return writeSentinelKey(path)}else{return PersistencePromise.resolve()}}))}).next(function(){return PersistencePromise.waitFor(promises)})})};SchemaConverter.prototype.createCollectionParentIndex=function(db,txn){// Create the index.
db.createObjectStore(DbCollectionParent.store,{keyPath:DbCollectionParent.keyPath});var collectionParentsStore=txn.store(DbCollectionParent.store),cache=new MemoryCollectionParentIndex,addEntry=function(collectionPath){if(cache.add(collectionPath)){var collectionId=collectionPath.lastSegment(),parentPath=collectionPath.popLast();return collectionParentsStore.put({collectionId:collectionId,parent:encode(parentPath)})}};// Helper to add an index entry iff we haven't already written it.
// Index existing remote documents.
return txn.store(DbRemoteDocument.store).iterate({keysOnly:!0},function(pathSegments,_){var path=new ResourcePath(pathSegments);return addEntry(path.popLast())}).next(function(){// Index existing mutations.
return txn.store(DbDocumentMutation.store).iterate({keysOnly:!0},function(_a,_){var userID=_a[0],encodedPath=_a[1],batchId=_a[2],path=decode$1(encodedPath);return addEntry(path.popLast())})})};return SchemaConverter}();/**
      * Internal implementation of the collection-parent index exposed by MemoryIndexManager.
      * Also used for in-memory caching by IndexedDbIndexManager and initial index population
      * in indexeddb_schema.ts
      */function sentinelKey(path){return[0,encode(path)]}/**
   * Wrapper class to store timestamps (seconds and nanos) in IndexedDb objects.
   */var DbTimestamp=/** @class */function(){function DbTimestamp(seconds,nanoseconds){this.seconds=seconds;this.nanoseconds=nanoseconds}return DbTimestamp}(),DbPrimaryClient=/** @class */function(){function DbPrimaryClient(ownerId,/** Whether to allow shared access from multiple tabs. */allowTabSynchronization,leaseTimestampMs){this.ownerId=ownerId;this.allowTabSynchronization=allowTabSynchronization;this.leaseTimestampMs=leaseTimestampMs}/**
     * Name of the IndexedDb object store.
     *
     * Note that the name 'owner' is chosen to ensure backwards compatibility with
     * older clients that only supported single locked access to the persistence
     * layer.
     */DbPrimaryClient.store="owner";/**
                                    * The key string used for the single object that exists in the
                                    * DbPrimaryClient store.
                                    */DbPrimaryClient.key="owner";return DbPrimaryClient}();/**
      * A singleton object to be stored in the 'owner' store in IndexedDb.
      *
      * A given database can have a single primary tab assigned at a given time. That
      * tab must validate that it is still holding the primary lease before every
      * operation that requires locked access. The primary tab should regularly
      * write an updated timestamp to this lease to prevent other tabs from
      * "stealing" the primary lease
      */function createPrimaryClientStore(db){db.createObjectStore(DbPrimaryClient.store)}/**
   * An object to be stored in the 'mutationQueues' store in IndexedDb.
   *
   * Each user gets a single queue of MutationBatches to apply to the server.
   * DbMutationQueue tracks the metadata about the queue.
   */var DbMutationQueue=/** @class */function(){function DbMutationQueue(/**
                             * The normalized user ID to which this queue belongs.
                             */userId,/**
                                        * An identifier for the highest numbered batch that has been acknowledged
                                        * by the server. All MutationBatches in this queue with batchIds less
                                        * than or equal to this value are considered to have been acknowledged by
                                        * the server.
                                        *
                                        * NOTE: this is deprecated and no longer used by the code.
                                        */lastAcknowledgedBatchId,/**
                                                                    * A stream token that was previously sent by the server.
                                                                    *
                                                                    * See StreamingWriteRequest in datastore.proto for more details about
                                                                    * usage.
                                                                    *
                                                                    * After sending this token, earlier tokens may not be used anymore so
                                                                    * only a single stream token is retained.
                                                                    */lastStreamToken){this.userId=userId;this.lastAcknowledgedBatchId=lastAcknowledgedBatchId;this.lastStreamToken=lastStreamToken}/** Name of the IndexedDb object store.  */DbMutationQueue.store="mutationQueues";/** Keys are automatically assigned via the userId property. */DbMutationQueue.keyPath="userId";return DbMutationQueue}(),DbMutationBatch=/** @class */function(){function DbMutationBatch(/**
                             * The normalized user ID to which this batch belongs.
                             */userId,/**
                                        * An identifier for this batch, allocated using an auto-generated key.
                                        */batchId,/**
                                                    * The local write time of the batch, stored as milliseconds since the
                                                    * epoch.
                                                    */localWriteTimeMs,/**
                                                                         * A list of "mutations" that represent a partial base state from when this
                                                                         * write batch was initially created. During local application of the write
                                                                         * batch, these baseMutations are applied prior to the real writes in order
                                                                         * to override certain document fields from the remote document cache. This
                                                                         * is necessary in the case of non-idempotent writes (e.g. `increment()`
                                                                         * transforms) to make sure that the local view of the modified documents
                                                                         * doesn't flicker if the remote document cache receives the result of the
                                                                         * non-idempotent write before the write is removed from the queue.
                                                                         *
                                                                         * These mutations are never sent to the backend.
                                                                         */baseMutations,/**
                                                                                           * A list of mutations to apply. All mutations will be applied atomically.
                                                                                           *
                                                                                           * Mutations are serialized via JsonProtoSerializer.toMutation().
                                                                                           */mutations){this.userId=userId;this.batchId=batchId;this.localWriteTimeMs=localWriteTimeMs;this.baseMutations=baseMutations;this.mutations=mutations}/** Name of the IndexedDb object store.  */DbMutationBatch.store="mutations";/** Keys are automatically assigned via the userId, batchId properties. */DbMutationBatch.keyPath="batchId";/** The index name for lookup of mutations by user. */DbMutationBatch.userMutationsIndex="userMutationsIndex";/** The user mutations index is keyed by [userId, batchId] pairs. */DbMutationBatch.userMutationsKeyPath=["userId","batchId"];return DbMutationBatch}();/**
      * An object to be stored in the 'mutations' store in IndexedDb.
      *
      * Represents a batch of user-level mutations intended to be sent to the server
      * in a single write. Each user-level batch gets a separate DbMutationBatch
      * with a new batchId.
      */function createMutationQueue(db){db.createObjectStore(DbMutationQueue.store,{keyPath:DbMutationQueue.keyPath});var mutationBatchesStore=db.createObjectStore(DbMutationBatch.store,{keyPath:DbMutationBatch.keyPath,autoIncrement:!0});mutationBatchesStore.createIndex(DbMutationBatch.userMutationsIndex,DbMutationBatch.userMutationsKeyPath,{unique:!0});db.createObjectStore(DbDocumentMutation.store)}/**
   * Upgrade function to migrate the 'mutations' store from V1 to V3. Loads
   * and rewrites all data.
   */function upgradeMutationBatchSchemaAndMigrateData(db,txn){var v1MutationsStore=txn.store(DbMutationBatch.store);return v1MutationsStore.loadAll().next(function(existingMutations){db.deleteObjectStore(DbMutationBatch.store);var mutationsStore=db.createObjectStore(DbMutationBatch.store,{keyPath:DbMutationBatch.keyPath,autoIncrement:!0});mutationsStore.createIndex(DbMutationBatch.userMutationsIndex,DbMutationBatch.userMutationsKeyPath,{unique:!0});var v3MutationsStore=txn.store(DbMutationBatch.store),writeAll=existingMutations.map(function(mutation){return v3MutationsStore.put(mutation)});return PersistencePromise.waitFor(writeAll)})}/**
   * An object to be stored in the 'documentMutations' store in IndexedDb.
   *
   * A manually maintained index of all the mutation batches that affect a given
   * document key. The rows in this table are references based on the contents of
   * DbMutationBatch.mutations.
   */var DbDocumentMutation=/** @class */function(){function DbDocumentMutation(){}/**
                                    * Creates a [userId] key for use in the DbDocumentMutations index to iterate
                                    * over all of a user's document mutations.
                                    */DbDocumentMutation.prefixForUser=function(userId){return[userId]};/**
      * Creates a [userId, encodedPath] key for use in the DbDocumentMutations
      * index to iterate over all at document mutations for a given path or lower.
      */DbDocumentMutation.prefixForPath=function(userId,path){return[userId,encode(path)]};/**
      * Creates a full index key of [userId, encodedPath, batchId] for inserting
      * and deleting into the DbDocumentMutations index.
      */DbDocumentMutation.key=function(userId,path,batchId){return[userId,encode(path),batchId]};DbDocumentMutation.store="documentMutations";/**
                                                   * Because we store all the useful information for this store in the key,
                                                   * there is no useful information to store as the value. The raw (unencoded)
                                                   * path cannot be stored because IndexedDb doesn't store prototype
                                                   * information.
                                                   */DbDocumentMutation.PLACEHOLDER=new DbDocumentMutation;return DbDocumentMutation}();function createRemoteDocumentCache(db){db.createObjectStore(DbRemoteDocument.store)}/**
   * Represents the known absence of a document at a particular version.
   * Stored in IndexedDb as part of a DbRemoteDocument object.
   */var DbNoDocument=/** @class */function(){function DbNoDocument(path,readTime){this.path=path;this.readTime=readTime}return DbNoDocument}(),DbUnknownDocument=/** @class */function(){function DbUnknownDocument(path,version){this.path=path;this.version=version}return DbUnknownDocument}(),DbRemoteDocument=/** @class */function(){function DbRemoteDocument(/**
                              * Set to an instance of DbUnknownDocument if the data for a document is
                              * not known, but it is known that a document exists at the specified
                              * version (e.g. it had a successful update applied to it)
                              */unknownDocument,/**
                                                  * Set to an instance of a DbNoDocument if it is known that no document
                                                  * exists.
                                                  */noDocument,/**
                                                                 * Set to an instance of a Document if there's a cached version of the
                                                                 * document.
                                                                 */document,/**
                                                                              * Documents that were written to the remote document store based on
                                                                              * a write acknowledgment are marked with `hasCommittedMutations`. These
                                                                              * documents are potentially inconsistent with the backend's copy and use
                                                                              * the write's commit version as their document version.
                                                                              */hasCommittedMutations){this.unknownDocument=unknownDocument;this.noDocument=noDocument;this.document=document;this.hasCommittedMutations=hasCommittedMutations}DbRemoteDocument.store="remoteDocuments";return DbRemoteDocument}(),DbRemoteDocumentGlobal=/** @class */function(){/**
   * @param byteSize Approximately the total size in bytes of all the documents in the document
   * cache.
   */function DbRemoteDocumentGlobal(byteSize){this.byteSize=byteSize}DbRemoteDocumentGlobal.store="remoteDocumentGlobal";DbRemoteDocumentGlobal.key="remoteDocumentGlobalKey";return DbRemoteDocumentGlobal}();/**
      * Represents a document that is known to exist but whose data is unknown.
      * Stored in IndexedDb as part of a DbRemoteDocument object.
      */function createDocumentGlobalStore(db){db.createObjectStore(DbRemoteDocumentGlobal.store)}/**
   * An object to be stored in the 'targets' store in IndexedDb.
   *
   * This is based on and should be kept in sync with the proto used in the iOS
   * client.
   *
   * Each query the client listens to against the server is tracked on disk so
   * that the query can be efficiently resumed on restart.
   */var DbTarget=/** @class */function(){function DbTarget(/**
                      * An auto-generated sequential numeric identifier for the query.
                      *
                      * Queries are stored using their canonicalId as the key, but these
                      * canonicalIds can be quite long so we additionally assign a unique
                      * queryId which can be used by referenced data structures (e.g.
                      * indexes) to minimize the on-disk cost.
                      */targetId,/**
                                   * The canonical string representing this query. This is not unique.
                                   */canonicalId,/**
                                                   * The last readTime received from the Watch Service for this query.
                                                   *
                                                   * This is the same value as TargetChange.read_time in the protos.
                                                   */readTime,/**
                                                                * An opaque, server-assigned token that allows watching a query to be
                                                                * resumed after disconnecting without retransmitting all the data
                                                                * that matches the query. The resume token essentially identifies a
                                                                * point in time from which the server should resume sending results.
                                                                *
                                                                * This is related to the snapshotVersion in that the resumeToken
                                                                * effectively also encodes that value, but the resumeToken is opaque
                                                                * and sometimes encodes additional information.
                                                                *
                                                                * A consequence of this is that the resumeToken should be used when
                                                                * asking the server to reason about where this client is in the watch
                                                                * stream, but the client should use the snapshotVersion for its own
                                                                * purposes.
                                                                *
                                                                * This is the same value as TargetChange.resume_token in the protos.
                                                                */resumeToken,/**
                                                                                * A sequence number representing the last time this query was
                                                                                * listened to, used for garbage collection purposes.
                                                                                *
                                                                                * Conventionally this would be a timestamp value, but device-local
                                                                                * clocks are unreliable and they must be able to create new listens
                                                                                * even while disconnected. Instead this should be a monotonically
                                                                                * increasing number that's incremented on each listen call.
                                                                                *
                                                                                * This is different from the queryId since the queryId is an
                                                                                * immutable identifier assigned to the Query on first use while
                                                                                * lastListenSequenceNumber is updated every time the query is
                                                                                * listened to.
                                                                                */lastListenSequenceNumber,/**
                                                                                                             * The query for this target.
                                                                                                             *
                                                                                                             * Because canonical ids are not unique we must store the actual query. We
                                                                                                             * use the proto to have an object we can persist without having to
                                                                                                             * duplicate translation logic to and from a `Query` object.
                                                                                                             */query){this.targetId=targetId;this.canonicalId=canonicalId;this.readTime=readTime;this.resumeToken=resumeToken;this.lastListenSequenceNumber=lastListenSequenceNumber;this.query=query}DbTarget.store="targets";/** Keys are automatically assigned via the targetId property. */DbTarget.keyPath="targetId";/** The name of the queryTargets index. */DbTarget.queryTargetsIndexName="queryTargetsIndex";/**
                                                         * The index of all canonicalIds to the targets that they match. This is not
                                                         * a unique mapping because canonicalId does not promise a unique name for all
                                                         * possible queries, so we append the targetId to make the mapping unique.
                                                         */DbTarget.queryTargetsKeyPath=["canonicalId","targetId"];return DbTarget}(),DbTargetDocument=/** @class */function(){function DbTargetDocument(/**
                              * The targetId identifying a target or 0 for a sentinel row.
                              */targetId,/**
                                           * The path to the document, as encoded in the key.
                                           */path,/**
                                                    * If this is a sentinel row, this should be the sequence number of the last
                                                    * time the document specified by `path` was used. Otherwise, it should be
                                                    * `undefined`.
                                                    */sequenceNumber){this.targetId=targetId;this.path=path;this.sequenceNumber=sequenceNumber;assert$1(0===targetId===(sequenceNumber!==void 0),// tslint:disable-next-line:max-line-length
"A target-document row must either have targetId == 0 and a defined sequence number, or a non-zero targetId and no sequence number")}/** Name of the IndexedDb object store.  */DbTargetDocument.store="targetDocuments";/** Keys are automatically assigned via the targetId, path properties. */DbTargetDocument.keyPath=["targetId","path"];/** The index name for the reverse index. */DbTargetDocument.documentTargetsIndex="documentTargetsIndex";/** We also need to create the reverse index for these properties. */DbTargetDocument.documentTargetsKeyPath=["path","targetId"];return DbTargetDocument}(),DbTargetGlobal=/** @class */function(){function DbTargetGlobal(/**
                            * The highest numbered target id across all targets.
                            *
                            * See DbTarget.targetId.
                            */highestTargetId,/**
                                                * The highest numbered lastListenSequenceNumber across all targets.
                                                *
                                                * See DbTarget.lastListenSequenceNumber.
                                                */highestListenSequenceNumber,/**
                                                                                * A global snapshot version representing the last consistent snapshot we
                                                                                * received from the backend. This is monotonically increasing and any
                                                                                * snapshots received from the backend prior to this version (e.g. for
                                                                                * targets resumed with a resumeToken) should be suppressed (buffered)
                                                                                * until the backend has caught up to this snapshot version again. This
                                                                                * prevents our cache from ever going backwards in time.
                                                                                */lastRemoteSnapshotVersion,/**
                                                                                                              * The number of targets persisted.
                                                                                                              */targetCount){this.highestTargetId=highestTargetId;this.highestListenSequenceNumber=highestListenSequenceNumber;this.lastRemoteSnapshotVersion=lastRemoteSnapshotVersion;this.targetCount=targetCount}/**
     * The key string used for the single object that exists in the
     * DbTargetGlobal store.
     */DbTargetGlobal.key="targetGlobalKey";DbTargetGlobal.store="targetGlobal";return DbTargetGlobal}(),DbCollectionParent=/** @class */function(){function DbCollectionParent(/**
                                * The collectionId (e.g. 'messages')
                                */collectionId,/**
                                                 * The path to the parent (either a document location or an empty path for
                                                 * a root-level collection).
                                                 */parent){this.collectionId=collectionId;this.parent=parent}/** Name of the IndexedDb object store. */DbCollectionParent.store="collectionParents";/** Keys are automatically assigned via the collectionId, parent properties. */DbCollectionParent.keyPath=["collectionId","parent"];return DbCollectionParent}();/**
      * An object representing an association between a target and a document, or a
      * sentinel row marking the last sequence number at which a document was used.
      * Each document cached must have a corresponding sentinel row before lru
      * garbage collection is enabled.
      *
      * The target associations and sentinel rows are co-located so that orphaned
      * documents and their sequence numbers can be identified efficiently via a scan
      * of this store.
      */function createQueryCache(db){var targetDocumentsStore=db.createObjectStore(DbTargetDocument.store,{keyPath:DbTargetDocument.keyPath});targetDocumentsStore.createIndex(DbTargetDocument.documentTargetsIndex,DbTargetDocument.documentTargetsKeyPath,{unique:!0});var targetStore=db.createObjectStore(DbTarget.store,{keyPath:DbTarget.keyPath});// NOTE: This is unique only because the TargetId is the suffix.
targetStore.createIndex(DbTarget.queryTargetsIndexName,DbTarget.queryTargetsKeyPath,{unique:!0});db.createObjectStore(DbTargetGlobal.store)}function dropQueryCache(db){db.deleteObjectStore(DbTargetDocument.store);db.deleteObjectStore(DbTarget.store);db.deleteObjectStore(DbTargetGlobal.store)}/**
   * Creates the target global singleton row.
   *
   * @param {IDBTransaction} txn The version upgrade transaction for indexeddb
   */function writeEmptyTargetGlobalEntry(txn){var globalStore=txn.store(DbTargetGlobal.store),metadata=new DbTargetGlobal(/*highestTargetId=*/0,/*lastListenSequenceNumber=*/0,SnapshotVersion.MIN.toTimestamp(),/*targetCount=*/0);return globalStore.put(DbTargetGlobal.key,metadata)}/**
   * An object store to store the keys of changed documents. This is used to
   * facilitate storing document changelogs in the Remote Document Cache.
   *
   * PORTING NOTE: This is used for change propagation during multi-tab syncing
   * and not needed on iOS and Android.
   */var DbRemoteDocumentChanges=/** @class */function(){function DbRemoteDocumentChanges(/** The keys of the changed documents. */changes){this.changes=changes}/** Name of the IndexedDb object store.  */DbRemoteDocumentChanges.store="remoteDocumentChanges";/** Keys are auto-generated via the `id` property. */DbRemoteDocumentChanges.keyPath="id";return DbRemoteDocumentChanges}();function createRemoteDocumentChangesStore(db){db.createObjectStore(DbRemoteDocumentChanges.store,{keyPath:"id",autoIncrement:!0})}/**
   * A record of the metadata state of each client.
   *
   * PORTING NOTE: This is used to synchronize multi-tab state and does not need
   * to be ported to iOS or Android.
   */var DbClientMetadata=/** @class */function(){function DbClientMetadata(/** The auto-generated client id assigned at client startup. */clientId,/** The last time this state was updated. */updateTimeMs,/** Whether the client's network connection is enabled. */networkEnabled,/** Whether this client is running in a foreground tab. */inForeground,/**
                                                                                                                                                                                                                                                                                                                   * The last change read from the DbRemoteDocumentChanges store.
                                                                                                                                                                                                                                                                                                                   * Can be undefined for backwards compatibility.
                                                                                                                                                                                                                                                                                                                   */lastProcessedDocumentChangeId){this.clientId=clientId;this.updateTimeMs=updateTimeMs;this.networkEnabled=networkEnabled;this.inForeground=inForeground;this.lastProcessedDocumentChangeId=lastProcessedDocumentChangeId}/** Name of the IndexedDb object store. */DbClientMetadata.store="clientMetadata";/** Keys are automatically assigned via the clientId properties. */DbClientMetadata.keyPath="clientId";return DbClientMetadata}();function createClientMetadataStore(db){db.createObjectStore(DbClientMetadata.store,{keyPath:DbClientMetadata.keyPath})}// Visible for testing
var V1_STORES=[DbMutationQueue.store,DbMutationBatch.store,DbDocumentMutation.store,DbRemoteDocument.store,DbTarget.store,DbPrimaryClient.store,DbTargetGlobal.store,DbTargetDocument.store],V3_STORES=V1_STORES,V4_STORES=V3_STORES.concat([DbClientMetadata.store,DbRemoteDocumentChanges.store]),V6_STORES=V4_STORES.concat([DbRemoteDocumentGlobal.store]),V8_STORES=V6_STORES.concat([DbCollectionParent.store]),ALL_STORES=V8_STORES,IndexedDbIndexManager=/** @class */function(){function IndexedDbIndexManager(){/**
     * An in-memory copy of the index entries we've already written since the SDK
     * launched. Used to avoid re-writing the same entry repeatedly.
     *
     * This is *NOT* a complete cache of what's in persistence and so can never be used to
     * satisfy reads.
     */this.collectionParentsCache=new MemoryCollectionParentIndex}IndexedDbIndexManager.prototype.addToCollectionParentIndex=function(transaction,collectionPath){assert$1(1===collectionPath.length%2,"Expected a collection path.");if(this.collectionParentsCache.add(collectionPath)){assert$1(1<=collectionPath.length,"Invalid collection path.");var collectionId=collectionPath.lastSegment(),parentPath=collectionPath.popLast();return collectionParentsStore(transaction).put({collectionId:collectionId,parent:encode(parentPath)})}return PersistencePromise.resolve()};IndexedDbIndexManager.prototype.getCollectionParents=function(transaction,collectionId){var parentPaths=[],range=IDBKeyRange.bound([collectionId,""],[immediateSuccessor(collectionId),""],!1,!0);return collectionParentsStore(transaction).loadAll(range).next(function(entries){for(var _i=0,entries_1=entries,entry;_i<entries_1.length;_i++){entry=entries_1[_i];// This collectionId guard shouldn't be necessary (and isn't as long
// as we're running in a real browser), but there's a bug in
// indexeddbshim that breaks our range in our tests running in node:
// https://github.com/axemclion/IndexedDBShim/issues/334
if(entry.collectionId!==collectionId){break}parentPaths.push(decode$1(entry.parent))}return parentPaths})};return IndexedDbIndexManager}();// V2 is no longer usable (see comment at top of file)
// Visible for testing
/**
      * Helper to get a typed SimpleDbStore for the collectionParents
      * document store.
      */function collectionParentsStore(txn){return IndexedDbPersistence.getStore(txn,DbCollectionParent.store)}/**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */ /** Serializer for values stored in the LocalStore. */var LocalSerializer=/** @class */function(){function LocalSerializer(remoteSerializer){this.remoteSerializer=remoteSerializer}/** Decodes a remote document from storage locally to a Document. */LocalSerializer.prototype.fromDbRemoteDocument=function(remoteDoc){if(remoteDoc.document){return this.remoteSerializer.fromDocument(remoteDoc.document,!!remoteDoc.hasCommittedMutations)}else if(remoteDoc.noDocument){var key=DocumentKey.fromSegments(remoteDoc.noDocument.path),version=this.fromDbTimestamp(remoteDoc.noDocument.readTime);return new NoDocument(key,version,{hasCommittedMutations:!!remoteDoc.hasCommittedMutations})}else if(remoteDoc.unknownDocument){var key=DocumentKey.fromSegments(remoteDoc.unknownDocument.path),version=this.fromDbTimestamp(remoteDoc.unknownDocument.version);return new UnknownDocument(key,version)}else{return fail("Unexpected DbRemoteDocument")}};/** Encodes a document for storage locally. */LocalSerializer.prototype.toDbRemoteDocument=function(maybeDoc){if(maybeDoc instanceof Document$1){var doc=maybeDoc.proto?maybeDoc.proto:this.remoteSerializer.toDocument(maybeDoc),hasCommittedMutations=maybeDoc.hasCommittedMutations;return new DbRemoteDocument(/* unknownDocument= */null,/* noDocument= */null,doc,hasCommittedMutations)}else if(maybeDoc instanceof NoDocument){var path=maybeDoc.key.path.toArray(),readTime=this.toDbTimestamp(maybeDoc.version),hasCommittedMutations=maybeDoc.hasCommittedMutations;return new DbRemoteDocument(/* unknownDocument= */null,new DbNoDocument(path,readTime),/* document= */null,hasCommittedMutations)}else if(maybeDoc instanceof UnknownDocument){var path=maybeDoc.key.path.toArray(),readTime=this.toDbTimestamp(maybeDoc.version);return new DbRemoteDocument(new DbUnknownDocument(path,readTime),/* noDocument= */null,/* document= */null,!0)}else{return fail("Unexpected MaybeDocumment")}};LocalSerializer.prototype.toDbTimestamp=function(snapshotVersion){var timestamp=snapshotVersion.toTimestamp();return new DbTimestamp(timestamp.seconds,timestamp.nanoseconds)};LocalSerializer.prototype.fromDbTimestamp=function(dbTimestamp){var timestamp=new Timestamp(dbTimestamp.seconds,dbTimestamp.nanoseconds);return SnapshotVersion.fromTimestamp(timestamp)};/** Encodes a batch of mutations into a DbMutationBatch for local storage. */LocalSerializer.prototype.toDbMutationBatch=function(userId,batch){var _this=this,serializedBaseMutations=batch.baseMutations.map(function(m){return _this.remoteSerializer.toMutation(m)}),serializedMutations=batch.mutations.map(function(m){return _this.remoteSerializer.toMutation(m)});return new DbMutationBatch(userId,batch.batchId,batch.localWriteTime.toMillis(),serializedBaseMutations,serializedMutations)};/** Decodes a DbMutationBatch into a MutationBatch */LocalSerializer.prototype.fromDbMutationBatch=function(dbBatch){var _this=this,baseMutations=(dbBatch.baseMutations||[]).map(function(m){return _this.remoteSerializer.fromMutation(m)}),mutations=dbBatch.mutations.map(function(m){return _this.remoteSerializer.fromMutation(m)}),timestamp=Timestamp.fromMillis(dbBatch.localWriteTimeMs);return new MutationBatch(dbBatch.batchId,timestamp,baseMutations,mutations)};/*
      * Encodes a set of document keys into an array of EncodedResourcePaths.
      */LocalSerializer.prototype.toDbResourcePaths=function(keys){var encodedKeys=[];keys.forEach(function(key){encodedKeys.push(encode(key.path))});return encodedKeys};/** Decodes an array of EncodedResourcePaths into a set of document keys. */LocalSerializer.prototype.fromDbResourcePaths=function(encodedPaths){for(var keys=documentKeySet(),_i=0,encodedPaths_1=encodedPaths,documentKey;_i<encodedPaths_1.length;_i++){documentKey=encodedPaths_1[_i];keys=keys.add(new DocumentKey(decode$1(documentKey)))}return keys};/** Decodes a DbTarget into QueryData */LocalSerializer.prototype.fromDbTarget=function(dbTarget){var version=this.fromDbTimestamp(dbTarget.readTime),query;if(isDocumentQuery(dbTarget.query)){query=this.remoteSerializer.fromDocumentsTarget(dbTarget.query)}else{query=this.remoteSerializer.fromQueryTarget(dbTarget.query)}return new QueryData(query,dbTarget.targetId,QueryPurpose.Listen,dbTarget.lastListenSequenceNumber,version,dbTarget.resumeToken)};/** Encodes QueryData into a DbTarget for storage locally. */LocalSerializer.prototype.toDbTarget=function(queryData){assert$1(QueryPurpose.Listen===queryData.purpose,"Only queries with purpose "+QueryPurpose.Listen+" may be stored, got "+queryData.purpose);var dbTimestamp=this.toDbTimestamp(queryData.snapshotVersion),queryProto;if(queryData.query.isDocumentQuery()){queryProto=this.remoteSerializer.toDocumentsTarget(queryData.query)}else{queryProto=this.remoteSerializer.toQueryTarget(queryData.query)}var resumeToken;if(queryData.resumeToken instanceof Uint8Array){// TODO(b/78771403): Convert tokens to strings during deserialization
assert$1("YES"===process.env.USE_MOCK_PERSISTENCE,"Persisting non-string stream tokens is only supported with mock persistence .");resumeToken=queryData.resumeToken.toString()}else{resumeToken=queryData.resumeToken}// lastListenSequenceNumber is always 0 until we do real GC.
return new DbTarget(queryData.targetId,queryData.query.canonicalId(),dbTimestamp,resumeToken,queryData.sequenceNumber,queryProto)};return LocalSerializer}();/**
      * A helper function for figuring out what kind of query has been stored.
      */function isDocumentQuery(dbQuery){return dbQuery.documents!==void 0}/**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */function bufferEntryComparator(_a,_b){var aSequence=_a[0],aIndex=_a[1],bSequence=_b[0],bIndex=_b[1],seqCmp=primitiveComparator(aSequence,bSequence);if(0===seqCmp){// This order doesn't matter, but we can bias against churn by sorting
// entries created earlier as less than newer entries.
return primitiveComparator(aIndex,bIndex)}else{return seqCmp}}/**
   * Used to calculate the nth sequence number. Keeps a rolling buffer of the
   * lowest n values passed to `addElement`, and finally reports the largest of
   * them in `maxValue`.
   */var RollingSequenceNumberBuffer=/** @class */function(){function RollingSequenceNumberBuffer(maxElements){this.maxElements=maxElements;this.buffer=new SortedSet(bufferEntryComparator);this.previousIndex=0}RollingSequenceNumberBuffer.prototype.nextIndex=function(){return++this.previousIndex};RollingSequenceNumberBuffer.prototype.addElement=function(sequenceNumber){var entry=[sequenceNumber,this.nextIndex()];if(this.buffer.size<this.maxElements){this.buffer=this.buffer.add(entry)}else{var highestValue=this.buffer.last();if(0>bufferEntryComparator(entry,highestValue)){this.buffer=this.buffer.delete(highestValue).add(entry)}}};Object.defineProperty(RollingSequenceNumberBuffer.prototype,"maxValue",{get:function(){// Guaranteed to be non-empty. If we decide we are not collecting any
// sequence numbers, nthSequenceNumber below short-circuits. If we have
// decided that we are collecting n sequence numbers, it's because n is some
// percentage of the existing sequence numbers. That means we should never
// be in a situation where we are collecting sequence numbers but don't
// actually have any.
return this.buffer.last()[0]},enumerable:!0,configurable:!0});return RollingSequenceNumberBuffer}(),GC_DID_NOT_RUN={didRun:!1,sequenceNumbersCollected:0,targetsRemoved:0,documentsRemoved:0},LruParams=/** @class */function(){function LruParams(// When we attempt to collect, we will only do so if the cache size is greater than this
// threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.
cacheSizeCollectionThreshold,// The percentage of sequence numbers that we will attempt to collect
percentileToCollect,// A cap on the total number of sequence numbers that will be collected. This prevents
// us from collecting a huge number of sequence numbers if the cache has grown very large.
maximumSequenceNumbersToCollect){this.cacheSizeCollectionThreshold=cacheSizeCollectionThreshold;this.percentileToCollect=percentileToCollect;this.maximumSequenceNumbersToCollect=maximumSequenceNumbersToCollect}LruParams.withCacheSize=function(cacheSize){return new LruParams(cacheSize,LruParams.DEFAULT_COLLECTION_PERCENTILE,LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT)};LruParams.COLLECTION_DISABLED=-1;LruParams.MINIMUM_CACHE_SIZE_BYTES=1024*(1024*1);LruParams.DEFAULT_CACHE_SIZE_BYTES=1024*(1024*40);LruParams.DEFAULT_COLLECTION_PERCENTILE=10;LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT=1e3;LruParams.DEFAULT=new LruParams(LruParams.DEFAULT_CACHE_SIZE_BYTES,LruParams.DEFAULT_COLLECTION_PERCENTILE,LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);LruParams.DISABLED=new LruParams(LruParams.COLLECTION_DISABLED,0,0);return LruParams}(),INITIAL_GC_DELAY_MS=1e3*(60*1),REGULAR_GC_DELAY_MS=1e3*(60*5),LruScheduler=/** @class */function(){function LruScheduler(garbageCollector,asyncQueue,localStore){this.garbageCollector=garbageCollector;this.asyncQueue=asyncQueue;this.localStore=localStore;this.gcTask=null}LruScheduler.prototype.start=function(){assert$1(null===this.gcTask,"Cannot start an already started LruScheduler");if(this.garbageCollector.params.cacheSizeCollectionThreshold!==LruParams.COLLECTION_DISABLED){this.scheduleGC()}};LruScheduler.prototype.stop=function(){if(this.gcTask){this.gcTask.cancel();this.gcTask=null}};Object.defineProperty(LruScheduler.prototype,"started",{get:function(){return null!==this.gcTask},enumerable:!0,configurable:!0});LruScheduler.prototype.scheduleGC=function(){var _this=this;assert$1(null===this.gcTask,"Cannot schedule GC while a task is pending");var delay=this.hasRun?REGULAR_GC_DELAY_MS:INITIAL_GC_DELAY_MS;debug("LruGarbageCollector","Garbage collection scheduled in "+delay+"ms");this.gcTask=this.asyncQueue.enqueueAfterDelay(TimerId.LruGarbageCollection,delay,function(){_this.gcTask=null;_this.hasRun=!0;return _this.localStore.collectGarbage(_this.garbageCollector).then(function(){return _this.scheduleGC()}).catch(ignoreIfPrimaryLeaseLoss)})};return LruScheduler}(),LruGarbageCollector=/** @class */function(){function LruGarbageCollector(delegate,params){this.delegate=delegate;this.params=params}/** Given a percentile of target to collect, returns the number of targets to collect. */LruGarbageCollector.prototype.calculateTargetCount=function(txn,percentile){return this.delegate.getSequenceNumberCount(txn).next(function(targetCount){return Math.floor(percentile/100*targetCount)})};/** Returns the nth sequence number, counting in order from the smallest. */LruGarbageCollector.prototype.nthSequenceNumber=function(txn,n){var _this=this;if(0===n){return PersistencePromise.resolve(ListenSequence.INVALID)}var buffer=new RollingSequenceNumberBuffer(n);return this.delegate.forEachTarget(txn,function(target){return buffer.addElement(target.sequenceNumber)}).next(function(){return _this.delegate.forEachOrphanedDocumentSequenceNumber(txn,function(sequenceNumber){return buffer.addElement(sequenceNumber)})}).next(function(){return buffer.maxValue})};/**
      * Removes targets with a sequence number equal to or less than the given upper bound, and removes
      * document associations with those targets.
      */LruGarbageCollector.prototype.removeTargets=function(txn,upperBound,activeTargetIds){return this.delegate.removeTargets(txn,upperBound,activeTargetIds)};/**
      * Removes documents that have a sequence number equal to or less than the upper bound and are not
      * otherwise pinned.
      */LruGarbageCollector.prototype.removeOrphanedDocuments=function(txn,upperBound){return this.delegate.removeOrphanedDocuments(txn,upperBound)};LruGarbageCollector.prototype.collect=function(txn,activeTargetIds){var _this=this;if(this.params.cacheSizeCollectionThreshold===LruParams.COLLECTION_DISABLED){debug("LruGarbageCollector","Garbage collection skipped; disabled");return PersistencePromise.resolve(GC_DID_NOT_RUN)}return this.getCacheSize(txn).next(function(cacheSize){if(cacheSize<_this.params.cacheSizeCollectionThreshold){debug("LruGarbageCollector","Garbage collection skipped; Cache size "+cacheSize+" "+("is lower than threshold "+_this.params.cacheSizeCollectionThreshold));return GC_DID_NOT_RUN}else{return _this.runGarbageCollection(txn,activeTargetIds)}})};LruGarbageCollector.prototype.getCacheSize=function(txn){return this.delegate.getCacheSize(txn)};LruGarbageCollector.prototype.runGarbageCollection=function(txn,activeTargetIds){var _this=this,upperBoundSequenceNumber,sequenceNumbersToCollect,targetsRemoved,startTs,countedTargetsTs,foundUpperBoundTs,removedTargetsTs,removedDocumentsTs;startTs=Date.now();return this.calculateTargetCount(txn,this.params.percentileToCollect).next(function(sequenceNumbers){// Cap at the configured max
if(sequenceNumbers>_this.params.maximumSequenceNumbersToCollect){debug("LruGarbageCollector","Capping sequence numbers to collect down "+("to the maximum of "+_this.params.maximumSequenceNumbersToCollect+" ")+("from "+sequenceNumbers));sequenceNumbersToCollect=_this.params.maximumSequenceNumbersToCollect}else{sequenceNumbersToCollect=sequenceNumbers}countedTargetsTs=Date.now();return _this.nthSequenceNumber(txn,sequenceNumbersToCollect)}).next(function(upperBound){upperBoundSequenceNumber=upperBound;foundUpperBoundTs=Date.now();return _this.removeTargets(txn,upperBoundSequenceNumber,activeTargetIds)}).next(function(numTargetsRemoved){targetsRemoved=numTargetsRemoved;removedTargetsTs=Date.now();return _this.removeOrphanedDocuments(txn,upperBoundSequenceNumber)}).next(function(documentsRemoved){removedDocumentsTs=Date.now();if(getLogLevel()<=LogLevel$1.DEBUG){var desc="LRU Garbage Collection\n"+("\tCounted targets in "+(countedTargetsTs-startTs)+"ms\n")+("\tDetermined least recently used "+sequenceNumbersToCollect+" in ")+(foundUpperBoundTs-countedTargetsTs+"ms\n")+("\tRemoved "+targetsRemoved+" targets in ")+(removedTargetsTs-foundUpperBoundTs+"ms\n")+("\tRemoved "+documentsRemoved+" documents in ")+(removedDocumentsTs-removedTargetsTs+"ms\n")+("Total Duration: "+(removedDocumentsTs-startTs)+"ms");debug("LruGarbageCollector",desc)}return PersistencePromise.resolve({didRun:!0,sequenceNumbersCollected:sequenceNumbersToCollect,targetsRemoved:targetsRemoved,documentsRemoved:documentsRemoved})})};return LruGarbageCollector}(),PersistenceTransaction=/** @class */function(){function PersistenceTransaction(){}return PersistenceTransaction}(),LOG_TAG$3="IndexedDbPersistence",MAX_CLIENT_AGE_MS=1e3*(60*30),MAX_PRIMARY_ELIGIBLE_AGE_MS=5e3,CLIENT_METADATA_REFRESH_INTERVAL_MS=4e3,PRIMARY_LEASE_LOST_ERROR_MSG="The current tab is not in the required state to perform this operation. "+"It might be necessary to refresh the browser tab.",PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG="Another tab has exclusive access to the persistence layer. "+"To allow shared access, make sure to invoke "+"`enablePersistence()` with `synchronizeTabs:true` in all tabs.",UNSUPPORTED_PLATFORM_ERROR_MSG="This platform is either missing"+" IndexedDB or is known to have an incomplete implementation. Offline"+" persistence has been disabled.",ZOMBIED_CLIENTS_KEY_PREFIX="firestore_zombie",IndexedDbTransaction=/** @class */function(_super){__extends(IndexedDbTransaction,_super);function IndexedDbTransaction(simpleDbTransaction,currentSequenceNumber){var _this=_super.call(this)||this;_this.simpleDbTransaction=simpleDbTransaction;_this.currentSequenceNumber=currentSequenceNumber;return _this}return IndexedDbTransaction}(PersistenceTransaction),IndexedDbPersistence=/** @class */function(){// Note that `multiClientParams` must be present to enable multi-client support while multi-tab
// is still experimental. When multi-client is switched to always on, `multiClientParams` will
// no longer be optional.
function IndexedDbPersistence(persistenceKey,clientId,platform,queue,serializer,lruParams,multiClientParams){this.persistenceKey=persistenceKey;this.clientId=clientId;this.queue=queue;this.multiClientParams=multiClientParams;this._started=!1;this.isPrimary=!1;this.networkEnabled=!0;this.inForeground=!1;/** The last time we garbage collected the Remote Document Changelog. */this.lastGarbageCollectionTime=Number.NEGATIVE_INFINITY;/** A listener to notify on primary state changes. */this.primaryStateListener=function(_){return Promise.resolve()};if(!IndexedDbPersistence.isAvailable()){throw new FirestoreError(Code.UNIMPLEMENTED,UNSUPPORTED_PLATFORM_ERROR_MSG)}this.referenceDelegate=new IndexedDbLruDelegate(this,lruParams);this.dbName=persistenceKey+IndexedDbPersistence.MAIN_DATABASE;this.serializer=new LocalSerializer(serializer);this.document=platform.document;this.allowTabSynchronization=multiClientParams!==void 0;this.queryCache=new IndexedDbQueryCache(this.referenceDelegate,this.serializer);this.indexManager=new IndexedDbIndexManager;this.remoteDocumentCache=new IndexedDbRemoteDocumentCache(this.serializer,this.indexManager,/*keepDocumentChangeLog=*/this.allowTabSynchronization);if(platform.window&&platform.window.localStorage){this.window=platform.window;this.webStorage=this.window.localStorage}else{throw new FirestoreError(Code.UNIMPLEMENTED,"IndexedDB persistence is only available on platforms that support LocalStorage.")}}IndexedDbPersistence.getStore=function(txn,store){if(txn instanceof IndexedDbTransaction){return SimpleDb.getStore(txn.simpleDbTransaction,store)}else{throw fail("IndexedDbPersistence must use instances of IndexedDbTransaction")}};IndexedDbPersistence.createIndexedDbPersistence=function(persistenceKey,clientId,platform,queue,serializer,lruParams){return __awaiter(this,void 0,void 0,function(){var persistence;return __generator(this,function(_a){switch(_a.label){case 0:persistence=new IndexedDbPersistence(persistenceKey,clientId,platform,queue,serializer,lruParams);return[4/*yield*/,persistence.start()];case 1:_a.sent();return[2/*return*/,persistence];}})})};IndexedDbPersistence.createMultiClientIndexedDbPersistence=function(persistenceKey,clientId,platform,queue,serializer,lruParams,multiClientParams){return __awaiter(this,void 0,void 0,function(){var persistence;return __generator(this,function(_a){switch(_a.label){case 0:persistence=new IndexedDbPersistence(persistenceKey,clientId,platform,queue,serializer,lruParams,multiClientParams);return[4/*yield*/,persistence.start()];case 1:_a.sent();return[2/*return*/,persistence];}})})};/**
      * Attempt to start IndexedDb persistence.
      *
      * @return {Promise<void>} Whether persistence was enabled.
      */IndexedDbPersistence.prototype.start=function(){var _this=this;assert$1(!this.started,"IndexedDbPersistence double-started!");assert$1(null!==this.window,"Expected 'window' to be defined");return SimpleDb.openOrCreate(this.dbName,SCHEMA_VERSION,new SchemaConverter(this.serializer)).then(function(db){_this.simpleDb=db;// NOTE: This is expected to fail sometimes (in the case of another tab already
// having the persistence lock), so it's the first thing we should do.
return _this.updateClientMetadataAndTryBecomePrimary()}).then(function(){_this.attachVisibilityHandler();_this.attachWindowUnloadHook();_this.scheduleClientMetadataAndPrimaryLeaseRefreshes();return _this.startRemoteDocumentCache()}).then(function(){return _this.simpleDb.runTransaction("readonly",[DbTargetGlobal.store],function(txn){return getHighestListenSequenceNumber(txn).next(function(highestListenSequenceNumber){var sequenceNumberSyncer=_this.multiClientParams?_this.multiClientParams.sequenceNumberSyncer:void 0;_this.listenSequence=new ListenSequence(highestListenSequenceNumber,sequenceNumberSyncer)})})}).then(function(){_this._started=!0}).catch(function(reason){_this.simpleDb&&_this.simpleDb.close();return Promise.reject(reason)})};IndexedDbPersistence.prototype.startRemoteDocumentCache=function(){var _this=this;return this.simpleDb.runTransaction("readonly",ALL_STORES,function(txn){return _this.remoteDocumentCache.start(txn)})};IndexedDbPersistence.prototype.setPrimaryStateListener=function(primaryStateListener){var _this=this;this.primaryStateListener=function(primaryState){return __awaiter(_this,void 0,void 0,function(){return __generator(this,function(_a){if(this.started){return[2/*return*/,primaryStateListener(primaryState)]}return[2/*return*/]})})};return primaryStateListener(this.isPrimary)};IndexedDbPersistence.prototype.setDatabaseDeletedListener=function(databaseDeletedListener){var _this=this;this.simpleDb.setVersionChangeListener(function(event){return __awaiter(_this,void 0,void 0,function(){return __generator(this,function(_a){switch(_a.label){case 0:if(!(null===event.newVersion))return[3/*break*/,2];return[4/*yield*/,databaseDeletedListener()];case 1:_a.sent();_a.label=2;case 2:return[2/*return*/];}})})})};IndexedDbPersistence.prototype.setNetworkEnabled=function(networkEnabled){var _this=this;if(this.networkEnabled!==networkEnabled){this.networkEnabled=networkEnabled;// Schedule a primary lease refresh for immediate execution. The eventual
// lease update will be propagated via `primaryStateListener`.
this.queue.enqueueAndForget(function(){return __awaiter(_this,void 0,void 0,function(){return __generator(this,function(_a){switch(_a.label){case 0:if(!this.started)return[3/*break*/,2];return[4/*yield*/,this.updateClientMetadataAndTryBecomePrimary()];case 1:_a.sent();_a.label=2;case 2:return[2/*return*/];}})})})}};/**
      * Updates the client metadata in IndexedDb and attempts to either obtain or
      * extend the primary lease for the local client. Asynchronously notifies the
      * primary state listener if the client either newly obtained or released its
      * primary lease.
      */IndexedDbPersistence.prototype.updateClientMetadataAndTryBecomePrimary=function(){var _this=this;return this.simpleDb.runTransaction("readwrite",ALL_STORES,function(txn){var metadataStore=clientMetadataStore(txn);return metadataStore.put(new DbClientMetadata(_this.clientId,Date.now(),_this.networkEnabled,_this.inForeground,_this.remoteDocumentCache.lastProcessedDocumentChangeId)).next(function(){if(_this.isPrimary){return _this.verifyPrimaryLease(txn).next(function(success){if(!success){_this.isPrimary=!1;_this.queue.enqueueAndForget(function(){return _this.primaryStateListener(!1)})}})}}).next(function(){return _this.canActAsPrimary(txn)}).next(function(canActAsPrimary){var wasPrimary=_this.isPrimary;_this.isPrimary=canActAsPrimary;if(wasPrimary!==_this.isPrimary){_this.queue.enqueueAndForget(function(){return _this.primaryStateListener(_this.isPrimary)})}if(wasPrimary&&!_this.isPrimary){return _this.releasePrimaryLeaseIfHeld(txn)}else if(_this.isPrimary){return _this.acquireOrExtendPrimaryLease(txn)}})})};IndexedDbPersistence.prototype.verifyPrimaryLease=function(txn){var _this=this,store=primaryClientStore(txn);return store.get(DbPrimaryClient.key).next(function(primaryClient){return PersistencePromise.resolve(_this.isLocalClient(primaryClient))})};IndexedDbPersistence.prototype.removeClientMetadata=function(txn){var metadataStore=clientMetadataStore(txn);return metadataStore.delete(this.clientId)};/**
      * If the garbage collection threshold has passed, prunes the
      * RemoteDocumentChanges and the ClientMetadata store based on the last update
      * time of all clients.
      */IndexedDbPersistence.prototype.maybeGarbageCollectMultiClientState=function(){return __awaiter(this,void 0,void 0,function(){var activeClients_1,inactiveClients_1,_this=this;return __generator(this,function(_a){switch(_a.label){case 0:if(!(this.isPrimary&&!this.isWithinAge(this.lastGarbageCollectionTime,MAX_CLIENT_AGE_MS)))return[3/*break*/,2];this.lastGarbageCollectionTime=Date.now();inactiveClients_1=[];return[4/*yield*/,this.runTransaction("maybeGarbageCollectMultiClientState","readwrite-primary",function(txn){var metadataStore=IndexedDbPersistence.getStore(txn,DbClientMetadata.store);return metadataStore.loadAll().next(function(existingClients){activeClients_1=_this.filterActiveClients(existingClients,MAX_CLIENT_AGE_MS);inactiveClients_1=existingClients.filter(function(client){return-1===activeClients_1.indexOf(client)})}).next(function(){// Delete metadata for clients that are no longer considered active.
return PersistencePromise.forEach(inactiveClients_1,function(inactiveClient){return metadataStore.delete(inactiveClient.clientId)})}).next(function(){// Retrieve the minimum change ID from the set of active clients.
// The primary client doesn't read from the document change log,
// and hence we exclude it when we determine the minimum
// `lastProcessedDocumentChangeId`.
activeClients_1=activeClients_1.filter(function(client){return client.clientId!==_this.clientId});if(0<activeClients_1.length){var processedChangeIds=activeClients_1.map(function(client){return client.lastProcessedDocumentChangeId||0}),oldestChangeId=Math.min.apply(Math,processedChangeIds);return _this.remoteDocumentCache.removeDocumentChangesThroughChangeId(txn,oldestChangeId)}})})];case 1:_a.sent();// Delete potential leftover entries that may continue to mark the
// inactive clients as zombied in LocalStorage.
// Ideally we'd delete the IndexedDb and LocalStorage zombie entries for
// the client atomically, but we can't. So we opt to delete the IndexedDb
// entries first to avoid potentially reviving a zombied client.
inactiveClients_1.forEach(function(inactiveClient){_this.window.localStorage.removeItem(_this.zombiedClientLocalStorageKey(inactiveClient.clientId))});_a.label=2;case 2:return[2/*return*/];}})})};/**
      * Schedules a recurring timer to update the client metadata and to either
      * extend or acquire the primary lease if the client is eligible.
      */IndexedDbPersistence.prototype.scheduleClientMetadataAndPrimaryLeaseRefreshes=function(){var _this=this;this.clientMetadataRefresher=this.queue.enqueueAfterDelay(TimerId.ClientMetadataRefresh,CLIENT_METADATA_REFRESH_INTERVAL_MS,function(){return _this.updateClientMetadataAndTryBecomePrimary().then(function(){return _this.maybeGarbageCollectMultiClientState()}).then(function(){return _this.scheduleClientMetadataAndPrimaryLeaseRefreshes()})})};/** Checks whether `client` is the local client. */IndexedDbPersistence.prototype.isLocalClient=function(client){return client?client.ownerId===this.clientId:!1};/**
      * Evaluate the state of all active clients and determine whether the local
      * client is or can act as the holder of the primary lease. Returns whether
      * the client is eligible for the lease, but does not actually acquire it.
      * May return 'false' even if there is no active leaseholder and another
      * (foreground) client should become leaseholder instead.
      */IndexedDbPersistence.prototype.canActAsPrimary=function(txn){var _this=this,store=primaryClientStore(txn);return store.get(DbPrimaryClient.key).next(function(currentPrimary){var currentLeaseIsValid=null!==currentPrimary&&_this.isWithinAge(currentPrimary.leaseTimestampMs,MAX_PRIMARY_ELIGIBLE_AGE_MS)&&!_this.isClientZombied(currentPrimary.ownerId);// A client is eligible for the primary lease if:
// - its network is enabled and the client's tab is in the foreground.
// - its network is enabled and no other client's tab is in the
//   foreground.
// - every clients network is disabled and the client's tab is in the
//   foreground.
// - every clients network is disabled and no other client's tab is in
//   the foreground.
if(currentLeaseIsValid){if(_this.isLocalClient(currentPrimary)&&_this.networkEnabled){return!0}if(!_this.isLocalClient(currentPrimary)){if(!currentPrimary.allowTabSynchronization){// Fail the `canActAsPrimary` check if the current leaseholder has
// not opted into multi-tab synchronization. If this happens at
// client startup, we reject the Promise returned by
// `enablePersistence()` and the user can continue to use Firestore
// with in-memory persistence.
// If this fails during a lease refresh, we will instead block the
// AsyncQueue from executing further operations. Note that this is
// acceptable since mixing & matching different `synchronizeTabs`
// settings is not supported.
//
// TODO(b/114226234): Remove this check when `synchronizeTabs` can
// no longer be turned off.
throw new FirestoreError(Code.FAILED_PRECONDITION,PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG)}return!1}}if(_this.networkEnabled&&_this.inForeground){return!0}return clientMetadataStore(txn).loadAll().next(function(existingClients){// Process all existing clients and determine whether at least one of
// them is better suited to obtain the primary lease.
var preferredCandidate=_this.filterActiveClients(existingClients,MAX_PRIMARY_ELIGIBLE_AGE_MS).find(function(otherClient){if(_this.clientId!==otherClient.clientId){var otherClientHasBetterNetworkState=!_this.networkEnabled&&otherClient.networkEnabled,otherClientHasBetterVisibility=!_this.inForeground&&otherClient.inForeground,otherClientHasSameNetworkState=_this.networkEnabled===otherClient.networkEnabled;if(otherClientHasBetterNetworkState||otherClientHasBetterVisibility&&otherClientHasSameNetworkState){return!0}}return!1});return preferredCandidate===void 0})}).next(function(canActAsPrimary){if(_this.isPrimary!==canActAsPrimary){debug(LOG_TAG$3,"Client "+(canActAsPrimary?"is":"is not")+" eligible for a primary lease.")}return canActAsPrimary})};IndexedDbPersistence.prototype.shutdown=function(){return __awaiter(this,void 0,void 0,function(){var _this=this;return __generator(this,function(_a){switch(_a.label){case 0:// The shutdown() operations are idempotent and can be called even when
// start() aborted (e.g. because it couldn't acquire the persistence lease).
this._started=!1;this.markClientZombied();if(this.clientMetadataRefresher){this.clientMetadataRefresher.cancel()}this.detachVisibilityHandler();this.detachWindowUnloadHook();return[4/*yield*/,this.simpleDb.runTransaction("readwrite",[DbPrimaryClient.store,DbClientMetadata.store],function(txn){return _this.releasePrimaryLeaseIfHeld(txn).next(function(){return _this.removeClientMetadata(txn)})})];case 1:_a.sent();this.simpleDb.close();// Remove the entry marking the client as zombied from LocalStorage since
// we successfully deleted its metadata from IndexedDb.
this.removeClientZombiedEntry();return[2/*return*/];}})})};/**
      * Returns clients that are not zombied and have an updateTime within the
      * provided threshold.
      */IndexedDbPersistence.prototype.filterActiveClients=function(clients,activityThresholdMs){var _this=this;return clients.filter(function(client){return _this.isWithinAge(client.updateTimeMs,activityThresholdMs)&&!_this.isClientZombied(client.clientId)})};IndexedDbPersistence.prototype.getActiveClients=function(){var _this=this;return this.simpleDb.runTransaction("readonly",[DbClientMetadata.store],function(txn){return clientMetadataStore(txn).loadAll().next(function(clients){return _this.filterActiveClients(clients,MAX_CLIENT_AGE_MS).map(function(clientMetadata){return clientMetadata.clientId})})})};IndexedDbPersistence.clearPersistence=function(persistenceKey){return __awaiter(this,void 0,void 0,function(){var dbName;return __generator(this,function(_a){switch(_a.label){case 0:if(!IndexedDbPersistence.isAvailable()){return[2/*return*/,Promise.resolve()]}dbName=persistenceKey+IndexedDbPersistence.MAIN_DATABASE;return[4/*yield*/,SimpleDb.delete(dbName)];case 1:_a.sent();return[2/*return*/];}})})};Object.defineProperty(IndexedDbPersistence.prototype,"started",{get:function(){return this._started},enumerable:!0,configurable:!0});IndexedDbPersistence.prototype.getMutationQueue=function(user){assert$1(this.started,"Cannot initialize MutationQueue before persistence is started.");return IndexedDbMutationQueue.forUser(user,this.serializer,this.indexManager,this.referenceDelegate)};IndexedDbPersistence.prototype.getQueryCache=function(){assert$1(this.started,"Cannot initialize QueryCache before persistence is started.");return this.queryCache};IndexedDbPersistence.prototype.getRemoteDocumentCache=function(){assert$1(this.started,"Cannot initialize RemoteDocumentCache before persistence is started.");return this.remoteDocumentCache};IndexedDbPersistence.prototype.getIndexManager=function(){assert$1(this.started,"Cannot initialize IndexManager before persistence is started.");return this.indexManager};IndexedDbPersistence.prototype.runTransaction=function(action,mode,transactionOperation){var _this=this;debug(LOG_TAG$3,"Starting transaction:",action);// Do all transactions as readwrite against all object stores, since we
// are the only reader/writer.
return this.simpleDb.runTransaction("readonly"===mode?"readonly":"readwrite",ALL_STORES,function(simpleDbTxn){if("readwrite-primary"===mode){// While we merely verify that we have (or can acquire) the lease
// immediately, we wait to extend the primary lease until after
// executing transactionOperation(). This ensures that even if the
// transactionOperation takes a long time, we'll use a recent
// leaseTimestampMs in the extended (or newly acquired) lease.
return _this.verifyPrimaryLease(simpleDbTxn).next(function(success){if(!success){error("Failed to obtain primary lease for action '"+action+"'.");_this.isPrimary=!1;_this.queue.enqueueAndForget(function(){return _this.primaryStateListener(!1)});throw new FirestoreError(Code.FAILED_PRECONDITION,PRIMARY_LEASE_LOST_ERROR_MSG)}return transactionOperation(new IndexedDbTransaction(simpleDbTxn,_this.listenSequence.next()))}).next(function(result){return _this.acquireOrExtendPrimaryLease(simpleDbTxn).next(function(){return result})})}else{return _this.verifyAllowTabSynchronization(simpleDbTxn).next(function(){return transactionOperation(new IndexedDbTransaction(simpleDbTxn,_this.listenSequence.next()))})}})};/**
      * Verifies that the current tab is the primary leaseholder or alternatively
      * that the leaseholder has opted into multi-tab synchronization.
      */ // TODO(b/114226234): Remove this check when `synchronizeTabs` can no longer
// be turned off.
IndexedDbPersistence.prototype.verifyAllowTabSynchronization=function(txn){var _this=this,store=primaryClientStore(txn);return store.get(DbPrimaryClient.key).next(function(currentPrimary){var currentLeaseIsValid=null!==currentPrimary&&_this.isWithinAge(currentPrimary.leaseTimestampMs,MAX_PRIMARY_ELIGIBLE_AGE_MS)&&!_this.isClientZombied(currentPrimary.ownerId);if(currentLeaseIsValid&&!_this.isLocalClient(currentPrimary)){if(!currentPrimary.allowTabSynchronization){throw new FirestoreError(Code.FAILED_PRECONDITION,PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG)}}})};/**
      * Obtains or extends the new primary lease for the local client. This
      * method does not verify that the client is eligible for this lease.
      */IndexedDbPersistence.prototype.acquireOrExtendPrimaryLease=function(txn){var newPrimary=new DbPrimaryClient(this.clientId,this.allowTabSynchronization,Date.now());return primaryClientStore(txn).put(DbPrimaryClient.key,newPrimary)};IndexedDbPersistence.isAvailable=function(){return SimpleDb.isAvailable()};/**
      * Generates a string used as a prefix when storing data in IndexedDB and
      * LocalStorage.
      */IndexedDbPersistence.buildStoragePrefix=function(databaseInfo){// Use two different prefix formats:
//
//   * firestore / persistenceKey / projectID . databaseID / ...
//   * firestore / persistenceKey / projectID / ...
//
// projectIDs are DNS-compatible names and cannot contain dots
// so there's no danger of collisions.
var database=databaseInfo.databaseId.projectId;if(!databaseInfo.databaseId.isDefaultDatabase){database+="."+databaseInfo.databaseId.database}return"firestore/"+databaseInfo.persistenceKey+"/"+database+"/"};/** Checks the primary lease and removes it if we are the current primary. */IndexedDbPersistence.prototype.releasePrimaryLeaseIfHeld=function(txn){var _this=this,store=primaryClientStore(txn);return store.get(DbPrimaryClient.key).next(function(primaryClient){if(_this.isLocalClient(primaryClient)){debug(LOG_TAG$3,"Releasing primary lease.");return store.delete(DbPrimaryClient.key)}else{return PersistencePromise.resolve()}})};/** Verifies that `updateTimeMs` is within `maxAgeMs`. */IndexedDbPersistence.prototype.isWithinAge=function(updateTimeMs,maxAgeMs){var now=Date.now(),minAcceptable=now-maxAgeMs,maxAcceptable=now;if(updateTimeMs<minAcceptable){return!1}else if(updateTimeMs>maxAcceptable){error("Detected an update time that is in the future: "+updateTimeMs+" > "+maxAcceptable);return!1}return!0};IndexedDbPersistence.prototype.attachVisibilityHandler=function(){var _this=this;if(null!==this.document&&"function"===typeof this.document.addEventListener){this.documentVisibilityHandler=function(){_this.queue.enqueueAndForget(function(){_this.inForeground="visible"===_this.document.visibilityState;return _this.updateClientMetadataAndTryBecomePrimary()})};this.document.addEventListener("visibilitychange",this.documentVisibilityHandler);this.inForeground="visible"===this.document.visibilityState}};IndexedDbPersistence.prototype.detachVisibilityHandler=function(){if(this.documentVisibilityHandler){assert$1(null!==this.document&&"function"===typeof this.document.addEventListener,"Expected 'document.addEventListener' to be a function");this.document.removeEventListener("visibilitychange",this.documentVisibilityHandler);this.documentVisibilityHandler=null}};/**
      * Attaches a window.unload handler that will synchronously write our
      * clientId to a "zombie client id" location in LocalStorage. This can be used
      * by tabs trying to acquire the primary lease to determine that the lease
      * is no longer valid even if the timestamp is recent. This is particularly
      * important for the refresh case (so the tab correctly re-acquires the
      * primary lease). LocalStorage is used for this rather than IndexedDb because
      * it is a synchronous API and so can be used reliably from  an unload
      * handler.
      */IndexedDbPersistence.prototype.attachWindowUnloadHook=function(){var _this=this;if("function"===typeof this.window.addEventListener){this.windowUnloadHandler=function(){// Note: In theory, this should be scheduled on the AsyncQueue since it
// accesses internal state. We execute this code directly during shutdown
// to make sure it gets a chance to run.
_this.markClientZombied();_this.queue.enqueueAndForget(function(){// Attempt graceful shutdown (including releasing our primary lease),
// but there's no guarantee it will complete.
return _this.shutdown()})};this.window.addEventListener("unload",this.windowUnloadHandler)}};IndexedDbPersistence.prototype.detachWindowUnloadHook=function(){if(this.windowUnloadHandler){assert$1("function"===typeof this.window.removeEventListener,"Expected 'window.removeEventListener' to be a function");this.window.removeEventListener("unload",this.windowUnloadHandler);this.windowUnloadHandler=null}};/**
      * Returns whether a client is "zombied" based on its LocalStorage entry.
      * Clients become zombied when their tab closes without running all of the
      * cleanup logic in `shutdown()`.
      */IndexedDbPersistence.prototype.isClientZombied=function(clientId){try{var isZombied=null!==this.webStorage.getItem(this.zombiedClientLocalStorageKey(clientId));debug(LOG_TAG$3,"Client '"+clientId+"' "+(isZombied?"is":"is not")+" zombied in LocalStorage");return isZombied}catch(e){// Gracefully handle if LocalStorage isn't working.
error(LOG_TAG$3,"Failed to get zombied client id.",e);return!1}};/**
      * Record client as zombied (a client that had its tab closed). Zombied
      * clients are ignored during primary tab selection.
      */IndexedDbPersistence.prototype.markClientZombied=function(){try{this.webStorage.setItem(this.zombiedClientLocalStorageKey(this.clientId),Date.now()+"")}catch(e){// Gracefully handle if LocalStorage isn't available / working.
error("Failed to set zombie client id.",e)}};/** Removes the zombied client entry if it exists. */IndexedDbPersistence.prototype.removeClientZombiedEntry=function(){try{this.webStorage.removeItem(this.zombiedClientLocalStorageKey(this.clientId))}catch(e){// Ignore
}};IndexedDbPersistence.prototype.zombiedClientLocalStorageKey=function(clientId){return ZOMBIED_CLIENTS_KEY_PREFIX+"_"+this.persistenceKey+"_"+clientId};/**
      * The name of the main (and currently only) IndexedDB database. this name is
      * appended to the prefix provided to the IndexedDbPersistence constructor.
      */IndexedDbPersistence.MAIN_DATABASE="main";return IndexedDbPersistence}();function isPrimaryLeaseLostError(err){return err.code===Code.FAILED_PRECONDITION&&err.message===PRIMARY_LEASE_LOST_ERROR_MSG}/**
   * Verifies the error thrown by a LocalStore operation. If a LocalStore
   * operation fails because the primary lease has been taken by another client,
   * we ignore the error (the persistence layer will immediately call
   * `applyPrimaryLease` to propagate the primary state change). All other errors
   * are re-thrown.
   *
   * @param err An error returned by a LocalStore operation.
   * @return A Promise that resolves after we recovered, or the original error.
   */function ignoreIfPrimaryLeaseLoss(err){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(_a){if(isPrimaryLeaseLostError(err)){debug(LOG_TAG$3,"Unexpectedly lost primary lease")}else{throw err}return[2/*return*/]})})}/**
   * Helper to get a typed SimpleDbStore for the primary client object store.
   */function primaryClientStore(txn){return txn.store(DbPrimaryClient.store)}/**
   * Helper to get a typed SimpleDbStore for the client metadata object store.
   */function clientMetadataStore(txn){return txn.store(DbClientMetadata.store)}/** Provides LRU functionality for IndexedDB persistence. */var IndexedDbLruDelegate=/** @class */function(){function IndexedDbLruDelegate(db,params){this.db=db;this.garbageCollector=new LruGarbageCollector(this,params)}IndexedDbLruDelegate.prototype.getSequenceNumberCount=function(txn){var docCountPromise=this.orphanedDocmentCount(txn),targetCountPromise=this.db.getQueryCache().getQueryCount(txn);return targetCountPromise.next(function(targetCount){return docCountPromise.next(function(docCount){return targetCount+docCount})})};IndexedDbLruDelegate.prototype.orphanedDocmentCount=function(txn){var orphanedCount=0;return this.forEachOrphanedDocumentSequenceNumber(txn,function(_){orphanedCount++}).next(function(){return orphanedCount})};IndexedDbLruDelegate.prototype.forEachTarget=function(txn,f){return this.db.getQueryCache().forEachTarget(txn,f)};IndexedDbLruDelegate.prototype.forEachOrphanedDocumentSequenceNumber=function(txn,f){return this.forEachOrphanedDocument(txn,function(docKey,sequenceNumber){return f(sequenceNumber)})};IndexedDbLruDelegate.prototype.setInMemoryPins=function(inMemoryPins){this.inMemoryPins=inMemoryPins};IndexedDbLruDelegate.prototype.addReference=function(txn,key){return writeSentinelKey(txn,key)};IndexedDbLruDelegate.prototype.removeReference=function(txn,key){return writeSentinelKey(txn,key)};IndexedDbLruDelegate.prototype.removeTargets=function(txn,upperBound,activeTargetIds){return this.db.getQueryCache().removeTargets(txn,upperBound,activeTargetIds)};IndexedDbLruDelegate.prototype.removeMutationReference=function(txn,key){return writeSentinelKey(txn,key)};/**
      * Returns true if anything would prevent this document from being garbage
      * collected, given that the document in question is not present in any
      * targets and has a sequence number less than or equal to the upper bound for
      * the collection run.
      */IndexedDbLruDelegate.prototype.isPinned=function(txn,docKey){if(this.inMemoryPins.containsKey(docKey)){return PersistencePromise.resolve(!0)}else{return mutationQueuesContainKey(txn,docKey)}};IndexedDbLruDelegate.prototype.removeOrphanedDocuments=function(txn,upperBound){var _this=this,count=0,bytesRemoved=0,promises=[],iteration=this.forEachOrphanedDocument(txn,function(docKey,sequenceNumber){if(sequenceNumber<=upperBound){var p=_this.isPinned(txn,docKey).next(function(isPinned){if(!isPinned){count++;return _this.removeOrphanedDocument(txn,docKey).next(function(documentBytes){bytesRemoved+=documentBytes})}});promises.push(p)}});// Wait for iteration first to make sure we have a chance to add all of the
// removal promises to the array.
return iteration.next(function(){return PersistencePromise.waitFor(promises)}).next(function(){return _this.db.getRemoteDocumentCache().updateSize(txn,-bytesRemoved)}).next(function(){return count})};/**
      * Clears a document from the cache. The document is assumed to be orphaned, so target-document
      * associations are not queried. We remove it from the remote document cache, as well as remove
      * its sentinel row.
      */IndexedDbLruDelegate.prototype.removeOrphanedDocument=function(txn,docKey){var totalBytesRemoved=0,documentCache=this.db.getRemoteDocumentCache();return PersistencePromise.waitFor([documentTargetStore(txn).delete(sentinelKey$1(docKey)),documentCache.removeEntry(txn,docKey).next(function(bytesRemoved){totalBytesRemoved+=bytesRemoved})]).next(function(){return totalBytesRemoved})};IndexedDbLruDelegate.prototype.removeTarget=function(txn,queryData){var updated=queryData.copy({sequenceNumber:txn.currentSequenceNumber});return this.db.getQueryCache().updateQueryData(txn,updated)};IndexedDbLruDelegate.prototype.updateLimboDocument=function(txn,key){return writeSentinelKey(txn,key)};/**
      * Call provided function for each document in the cache that is 'orphaned'. Orphaned
      * means not a part of any target, so the only entry in the target-document index for
      * that document will be the sentinel row (targetId 0), which will also have the sequence
      * number for the last time the document was accessed.
      */IndexedDbLruDelegate.prototype.forEachOrphanedDocument=function(txn,f){var store=documentTargetStore(txn),nextToReport=ListenSequence.INVALID,nextPath;return store.iterate({index:DbTargetDocument.documentTargetsIndex},function(_a,_b){var targetId=_a[0],docKey=_a[1],path=_b.path,sequenceNumber=_b.sequenceNumber;if(0===targetId){// if nextToReport is valid, report it, this is a new key so the
// last one must not be a member of any targets.
if(nextToReport!==ListenSequence.INVALID){f(new DocumentKey(decode$1(nextPath)),nextToReport)}// set nextToReport to be this sequence number. It's the next one we
// might report, if we don't find any targets for this document.
// Note that the sequence number must be defined when the targetId
// is 0.
nextToReport=sequenceNumber;nextPath=path}else{// set nextToReport to be invalid, we know we don't need to report
// this one since we found a target for it.
nextToReport=ListenSequence.INVALID}}).next(function(){// Since we report sequence numbers after getting to the next key, we
// need to check if the last key we iterated over was an orphaned
// document and report it.
if(nextToReport!==ListenSequence.INVALID){f(new DocumentKey(decode$1(nextPath)),nextToReport)}})};IndexedDbLruDelegate.prototype.getCacheSize=function(txn){return this.db.getRemoteDocumentCache().getSize(txn)};return IndexedDbLruDelegate}();function sentinelKey$1(key){return[0,encode(key.path)]}/**
   * @return A value suitable for writing a sentinel row in the target-document
   * store.
   */function sentinelRow(key,sequenceNumber){return new DbTargetDocument(0,encode(key.path),sequenceNumber)}function writeSentinelKey(txn,key){return documentTargetStore(txn).put(sentinelRow(key,txn.currentSequenceNumber))}/**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */ /**
       * A readonly view of the local state of all documents we're tracking (i.e. we
       * have a cached version in remoteDocumentCache or local mutations for the
       * document). The view is computed by applying the mutations in the
       * MutationQueue to the RemoteDocumentCache.
       */var LocalDocumentsView=/** @class */function(){function LocalDocumentsView(remoteDocumentCache,mutationQueue,indexManager){this.remoteDocumentCache=remoteDocumentCache;this.mutationQueue=mutationQueue;this.indexManager=indexManager}/**
     * Get the local view of the document identified by `key`.
     *
     * @return Local view of the document or null if we don't have any cached
     * state for it.
     */LocalDocumentsView.prototype.getDocument=function(transaction,key){var _this=this;return this.mutationQueue.getAllMutationBatchesAffectingDocumentKey(transaction,key).next(function(batches){return _this.getDocumentInternal(transaction,key,batches)})};/** Internal version of `getDocument` that allows reusing batches. */LocalDocumentsView.prototype.getDocumentInternal=function(transaction,key,inBatches){return this.remoteDocumentCache.getEntry(transaction,key).next(function(doc){for(var _i=0,inBatches_1=inBatches,batch;_i<inBatches_1.length;_i++){batch=inBatches_1[_i];doc=batch.applyToLocalView(key,doc)}return doc})};// Returns the view of the given `docs` as they would appear after applying
// all mutations in the given `batches`.
LocalDocumentsView.prototype.applyLocalMutationsToDocuments=function(transaction,docs,batches){var results=nullableMaybeDocumentMap();docs.forEach(function(key,localView){for(var _i=0,batches_1=batches,batch;_i<batches_1.length;_i++){batch=batches_1[_i];localView=batch.applyToLocalView(key,localView)}results=results.insert(key,localView)});return results};/**
      * Gets the local view of the documents identified by `keys`.
      *
      * If we don't have cached state for a document in `keys`, a NoDocument will
      * be stored for that key in the resulting set.
      */LocalDocumentsView.prototype.getDocuments=function(transaction,keys){var _this=this;return this.remoteDocumentCache.getEntries(transaction,keys).next(function(docs){return _this.getLocalViewOfDocuments(transaction,docs)})};/**
      * Similar to `getDocuments`, but creates the local view from the given
      * `baseDocs` without retrieving documents from the local store.
      */LocalDocumentsView.prototype.getLocalViewOfDocuments=function(transaction,baseDocs){var _this=this;return this.mutationQueue.getAllMutationBatchesAffectingDocumentKeys(transaction,baseDocs).next(function(batches){var docs=_this.applyLocalMutationsToDocuments(transaction,baseDocs,batches),results=maybeDocumentMap();docs.forEach(function(key,maybeDoc){// TODO(http://b/32275378): Don't conflate missing / deleted.
if(!maybeDoc){maybeDoc=new NoDocument(key,SnapshotVersion.forDeletedDoc())}results=results.insert(key,maybeDoc)});return results})};/** Performs a query against the local view of all documents. */LocalDocumentsView.prototype.getDocumentsMatchingQuery=function(transaction,query){if(query.isDocumentQuery()){return this.getDocumentsMatchingDocumentQuery(transaction,query.path)}else if(query.isCollectionGroupQuery()){return this.getDocumentsMatchingCollectionGroupQuery(transaction,query)}else{return this.getDocumentsMatchingCollectionQuery(transaction,query)}};LocalDocumentsView.prototype.getDocumentsMatchingDocumentQuery=function(transaction,docPath){// Just do a simple document lookup.
return this.getDocument(transaction,new DocumentKey(docPath)).next(function(maybeDoc){var result=documentMap();if(maybeDoc instanceof Document$1){result=result.insert(maybeDoc.key,maybeDoc)}return result})};LocalDocumentsView.prototype.getDocumentsMatchingCollectionGroupQuery=function(transaction,query){var _this=this;assert$1(query.path.isEmpty(),"Currently we only support collection group queries at the root.");var collectionId=query.collectionGroup,results=documentMap();return this.indexManager.getCollectionParents(transaction,collectionId).next(function(parents){// Perform a collection query against each parent that contains the
// collectionId and aggregate the results.
return PersistencePromise.forEach(parents,function(parent){var collectionQuery=query.asCollectionQueryAtPath(parent.child(collectionId));return _this.getDocumentsMatchingCollectionQuery(transaction,collectionQuery).next(function(r){r.forEach(function(key,doc){results=results.insert(key,doc)})})}).next(function(){return results})})};LocalDocumentsView.prototype.getDocumentsMatchingCollectionQuery=function(transaction,query){var _this=this,results;// Query the remote documents and overlay mutations.
return this.remoteDocumentCache.getDocumentsMatchingQuery(transaction,query).next(function(queryResults){results=queryResults;return _this.mutationQueue.getAllMutationBatchesAffectingQuery(transaction,query)}).next(function(matchingMutationBatches){for(var _i=0,matchingMutationBatches_1=matchingMutationBatches,batch;_i<matchingMutationBatches_1.length;_i++){batch=matchingMutationBatches_1[_i];for(var _a=0,_b=batch.mutations;_a<_b.length;_a++){var mutation=_b[_a],key=mutation.key;// Only process documents belonging to the collection.
if(!query.path.isImmediateParentOf(key.path)){continue}var baseDoc=results.get(key),mutatedDoc=mutation.applyToLocalView(baseDoc,baseDoc,batch.localWriteTime);if(mutatedDoc instanceof Document$1){results=results.insert(key,mutatedDoc)}else{results=results.remove(key)}}}}).next(function(){// Finally, filter out any documents that don't actually match
// the query.
results.forEach(function(key,doc){if(!query.matches(doc)){results=results.remove(key)}});return results})};return LocalDocumentsView}(),ReferenceSet=/** @class */function(){function ReferenceSet(){// A set of outstanding references to a document sorted by key.
this.refsByKey=new SortedSet(DocReference.compareByKey);// A set of outstanding references to a document sorted by target id.
this.refsByTarget=new SortedSet(DocReference.compareByTargetId)}/** Returns true if the reference set contains no references. */ReferenceSet.prototype.isEmpty=function(){return this.refsByKey.isEmpty()};/** Adds a reference to the given document key for the given ID. */ReferenceSet.prototype.addReference=function(key,id){var ref=new DocReference(key,id);this.refsByKey=this.refsByKey.add(ref);this.refsByTarget=this.refsByTarget.add(ref)};/** Add references to the given document keys for the given ID. */ReferenceSet.prototype.addReferences=function(keys,id){var _this=this;keys.forEach(function(key){return _this.addReference(key,id)})};/**
      * Removes a reference to the given document key for the given
      * ID.
      */ReferenceSet.prototype.removeReference=function(key,id){this.removeRef(new DocReference(key,id))};ReferenceSet.prototype.removeReferences=function(keys,id){var _this=this;keys.forEach(function(key){return _this.removeReference(key,id)})};/**
      * Clears all references with a given ID. Calls removeRef() for each key
      * removed.
      */ReferenceSet.prototype.removeReferencesForId=function(id){var _this=this,emptyKey=DocumentKey.EMPTY,startRef=new DocReference(emptyKey,id),endRef=new DocReference(emptyKey,id+1),keys=[];this.refsByTarget.forEachInRange([startRef,endRef],function(ref){_this.removeRef(ref);keys.push(ref.key)});return keys};ReferenceSet.prototype.removeAllReferences=function(){var _this=this;this.refsByKey.forEach(function(ref){return _this.removeRef(ref)})};ReferenceSet.prototype.removeRef=function(ref){this.refsByKey=this.refsByKey.delete(ref);this.refsByTarget=this.refsByTarget.delete(ref)};ReferenceSet.prototype.referencesForId=function(id){var emptyKey=DocumentKey.EMPTY,startRef=new DocReference(emptyKey,id),endRef=new DocReference(emptyKey,id+1),keys=documentKeySet();this.refsByTarget.forEachInRange([startRef,endRef],function(ref){keys=keys.add(ref.key)});return keys};ReferenceSet.prototype.containsKey=function(key){var ref=new DocReference(key,0),firstRef=this.refsByKey.firstAfterOrEqual(ref);return null!==firstRef&&key.isEqual(firstRef.key)};return ReferenceSet}(),DocReference=/** @class */function(){function DocReference(key,targetOrBatchId){this.key=key;this.targetOrBatchId=targetOrBatchId}/** Compare by key then by ID */DocReference.compareByKey=function(left,right){return DocumentKey.comparator(left.key,right.key)||primitiveComparator(left.targetOrBatchId,right.targetOrBatchId)};/** Compare by ID then by key */DocReference.compareByTargetId=function(left,right){return primitiveComparator(left.targetOrBatchId,right.targetOrBatchId)||DocumentKey.comparator(left.key,right.key)};return DocReference}(),LOG_TAG$4="LocalStore",LocalStore=/** @class */function(){function LocalStore(/** Manages our in-memory or durable persistence. */persistence,initialUser){this.persistence=persistence;/**
                                     * The set of document references maintained by any local views.
                                     */this.localViewReferences=new ReferenceSet;/** Maps a targetID to data about its query. */this.queryDataByTarget={};assert$1(persistence.started,"LocalStore was passed an unstarted persistence implementation");this.persistence.referenceDelegate.setInMemoryPins(this.localViewReferences);this.mutationQueue=persistence.getMutationQueue(initialUser);this.remoteDocuments=persistence.getRemoteDocumentCache();this.queryCache=persistence.getQueryCache();this.localDocuments=new LocalDocumentsView(this.remoteDocuments,this.mutationQueue,this.persistence.getIndexManager())}/**
     * Tells the LocalStore that the currently authenticated user has changed.
     *
     * In response the local store switches the mutation queue to the new user and
     * returns any resulting document changes.
     */ // PORTING NOTE: Android and iOS only return the documents affected by the
// change.
LocalStore.prototype.handleUserChange=function(user){var _this=this;return this.persistence.runTransaction("Handle user change","readonly",function(txn){// Swap out the mutation queue, grabbing the pending mutation batches
// before and after.
var oldBatches;return _this.mutationQueue.getAllMutationBatches(txn).next(function(promisedOldBatches){oldBatches=promisedOldBatches;_this.mutationQueue=_this.persistence.getMutationQueue(user);// Recreate our LocalDocumentsView using the new
// MutationQueue.
_this.localDocuments=new LocalDocumentsView(_this.remoteDocuments,_this.mutationQueue,_this.persistence.getIndexManager());return _this.mutationQueue.getAllMutationBatches(txn)}).next(function(newBatches){for(var removedBatchIds=[],addedBatchIds=[],changedKeys=documentKeySet(),_i=0,oldBatches_1=oldBatches,batch;_i<oldBatches_1.length;_i++){batch=oldBatches_1[_i];removedBatchIds.push(batch.batchId);for(var _a=0,_b=batch.mutations,mutation;_a<_b.length;_a++){mutation=_b[_a];changedKeys=changedKeys.add(mutation.key)}}for(var _c=0,newBatches_1=newBatches,batch;_c<newBatches_1.length;_c++){batch=newBatches_1[_c];addedBatchIds.push(batch.batchId);for(var _d=0,_e=batch.mutations,mutation;_d<_e.length;_d++){mutation=_e[_d];changedKeys=changedKeys.add(mutation.key)}}// Return the set of all (potentially) changed documents and the list
// of mutation batch IDs that were affected by change.
return _this.localDocuments.getDocuments(txn,changedKeys).next(function(affectedDocuments){return{affectedDocuments:affectedDocuments,removedBatchIds:removedBatchIds,addedBatchIds:addedBatchIds}})})})};/* Accept locally generated Mutations and commit them to storage. */LocalStore.prototype.localWrite=function(mutations){var _this=this,localWriteTime=Timestamp.now(),keys=mutations.reduce(function(keys,m){return keys.add(m.key)},documentKeySet());return this.persistence.runTransaction("Locally write mutations","readwrite",function(txn){// Load and apply all existing mutations. This lets us compute the
// current base state for all non-idempotent transforms before applying
// any additional user-provided writes.
return _this.localDocuments.getDocuments(txn,keys).next(function(existingDocs){// For non-idempotent mutations (such as `FieldValue.increment()`),
// we record the base state in a separate patch mutation. This is
// later used to guarantee consistent values and prevents flicker
// even if the backend sends us an update that already includes our
// transform.
for(var baseMutations=[],_i=0,mutations_1=mutations;_i<mutations_1.length;_i++){var mutation=mutations_1[_i],maybeDoc=existingDocs.get(mutation.key);if(!mutation.isIdempotent){// Theoretically, we should only include non-idempotent fields
// in this field mask as this mask is used to populate the base
// state for all DocumentTransforms.  By  including all fields,
// we incorrectly prevent rebasing of idempotent transforms
// (such as `arrayUnion()`) when any non-idempotent transforms
// are present.
var fieldMask=mutation.fieldMask;if(fieldMask){var baseValues=maybeDoc instanceof Document$1?fieldMask.applyTo(maybeDoc.data):ObjectValue.EMPTY;// NOTE: The base state should only be applied if there's some
// existing document to override, so use a Precondition of
// exists=true
baseMutations.push(new PatchMutation(mutation.key,baseValues,fieldMask,Precondition.exists(!0)))}}}return _this.mutationQueue.addMutationBatch(txn,localWriteTime,baseMutations,mutations).next(function(batch){var changes=batch.applyToLocalDocumentSet(existingDocs);return{batchId:batch.batchId,changes:changes}})})})};/** Returns the local view of the documents affected by a mutation batch. */ // PORTING NOTE: Multi-tab only.
LocalStore.prototype.lookupMutationDocuments=function(batchId){var _this=this;return this.persistence.runTransaction("Lookup mutation documents","readonly",function(txn){return _this.mutationQueue.lookupMutationKeys(txn,batchId).next(function(keys){if(keys){return _this.localDocuments.getDocuments(txn,keys)}else{return PersistencePromise.resolve(null)}})})};/**
      * Acknowledge the given batch.
      *
      * On the happy path when a batch is acknowledged, the local store will
      *
      *  + remove the batch from the mutation queue;
      *  + apply the changes to the remote document cache;
      *  + recalculate the latency compensated view implied by those changes (there
      *    may be mutations in the queue that affect the documents but haven't been
      *    acknowledged yet); and
      *  + give the changed documents back the sync engine
      *
      * @returns The resulting (modified) documents.
      */LocalStore.prototype.acknowledgeBatch=function(batchResult){var _this=this;return this.persistence.runTransaction("Acknowledge batch","readwrite-primary",function(txn){var affected=batchResult.batch.keys(),documentBuffer=_this.remoteDocuments.newChangeBuffer();return _this.mutationQueue.acknowledgeBatch(txn,batchResult.batch,batchResult.streamToken).next(function(){return _this.applyWriteToRemoteDocuments(txn,batchResult,documentBuffer)}).next(function(){return documentBuffer.apply(txn)}).next(function(){return _this.mutationQueue.performConsistencyCheck(txn)}).next(function(){return _this.localDocuments.getDocuments(txn,affected)})})};/**
      * Remove mutations from the MutationQueue for the specified batch;
      * LocalDocuments will be recalculated.
      *
      * @returns The resulting modified documents.
      */LocalStore.prototype.rejectBatch=function(batchId){var _this=this;return this.persistence.runTransaction("Reject batch","readwrite-primary",function(txn){var affectedKeys;return _this.mutationQueue.lookupMutationBatch(txn,batchId).next(function(batch){assert$1(null!==batch,"Attempt to reject nonexistent batch!");affectedKeys=batch.keys();return _this.mutationQueue.removeMutationBatch(txn,batch)}).next(function(){return _this.mutationQueue.performConsistencyCheck(txn)}).next(function(){return _this.localDocuments.getDocuments(txn,affectedKeys)})})};/** Returns the last recorded stream token for the current user. */LocalStore.prototype.getLastStreamToken=function(){var _this=this;return this.persistence.runTransaction("Get last stream token","readonly",function(txn){return _this.mutationQueue.getLastStreamToken(txn)})};/**
      * Sets the stream token for the current user without acknowledging any
      * mutation batch. This is usually only useful after a stream handshake or in
      * response to an error that requires clearing the stream token.
      */LocalStore.prototype.setLastStreamToken=function(streamToken){var _this=this;return this.persistence.runTransaction("Set last stream token","readwrite-primary",function(txn){return _this.mutationQueue.setLastStreamToken(txn,streamToken)})};/**
      * Returns the last consistent snapshot processed (used by the RemoteStore to
      * determine whether to buffer incoming snapshots from the backend).
      */LocalStore.prototype.getLastRemoteSnapshotVersion=function(){var _this=this;return this.persistence.runTransaction("Get last remote snapshot version","readonly",function(txn){return _this.queryCache.getLastRemoteSnapshotVersion(txn)})};/**
      * Update the "ground-state" (remote) documents. We assume that the remote
      * event reflects any write batches that have been acknowledged or rejected
      * (i.e. we do not re-apply local mutations to updates from this event).
      *
      * LocalDocuments are re-calculated if there are remaining mutations in the
      * queue.
      */LocalStore.prototype.applyRemoteEvent=function(remoteEvent){var _this=this,documentBuffer=this.remoteDocuments.newChangeBuffer();return this.persistence.runTransaction("Apply remote event","readwrite-primary",function(txn){var promises=[],authoritativeUpdates=documentKeySet();forEachNumber(remoteEvent.targetChanges,function(targetId,change){// Do not ref/unref unassigned targetIds - it may lead to leaks.
var queryData=_this.queryDataByTarget[targetId];if(!queryData)return;// When a global snapshot contains updates (either add or modify) we
// can completely trust these updates as authoritative and blindly
// apply them to our cache (as a defensive measure to promote
// self-healing in the unfortunate case that our cache is ever somehow
// corrupted / out-of-sync).
//
// If the document is only updated while removing it from a target
// then watch isn't obligated to send the absolute latest version: it
// can send the first version that caused the document not to match.
change.addedDocuments.forEach(function(key){authoritativeUpdates=authoritativeUpdates.add(key)});change.modifiedDocuments.forEach(function(key){authoritativeUpdates=authoritativeUpdates.add(key)});promises.push(_this.queryCache.removeMatchingKeys(txn,change.removedDocuments,targetId).next(function(){return _this.queryCache.addMatchingKeys(txn,change.addedDocuments,targetId)}));// Update the resume token if the change includes one. Don't clear
// any preexisting value.
var resumeToken=change.resumeToken;if(0<resumeToken.length){var oldQueryData=queryData;queryData=queryData.copy({resumeToken:resumeToken,snapshotVersion:remoteEvent.snapshotVersion});_this.queryDataByTarget[targetId]=queryData;if(LocalStore.shouldPersistQueryData(oldQueryData,queryData,change)){promises.push(_this.queryCache.updateQueryData(txn,queryData))}}});var changedDocs=maybeDocumentMap(),updatedKeys=documentKeySet();remoteEvent.documentUpdates.forEach(function(key,doc){updatedKeys=updatedKeys.add(key)});// Each loop iteration only affects its "own" doc, so it's safe to get all the remote
// documents in advance in a single call.
promises.push(documentBuffer.getEntries(txn,updatedKeys).next(function(existingDocs){remoteEvent.documentUpdates.forEach(function(key,doc){var existingDoc=existingDocs.get(key);// If a document update isn't authoritative, make sure we don't
// apply an old document version to the remote cache. We make an
// exception for SnapshotVersion.MIN which can happen for
// manufactured events (e.g. in the case of a limbo document
// resolution failing).
if(null==existingDoc||doc.version.isEqual(SnapshotVersion.MIN)||authoritativeUpdates.has(doc.key)&&!existingDoc.hasPendingWrites||0<=doc.version.compareTo(existingDoc.version)){documentBuffer.addEntry(doc);changedDocs=changedDocs.insert(key,doc)}else{debug(LOG_TAG$4,"Ignoring outdated watch update for ",key,". Current version:",existingDoc.version," Watch version:",doc.version)}if(remoteEvent.resolvedLimboDocuments.has(key)){promises.push(_this.persistence.referenceDelegate.updateLimboDocument(txn,key))}})}));// HACK: The only reason we allow a null snapshot version is so that we
// can synthesize remote events when we get permission denied errors while
// trying to resolve the state of a locally cached document that is in
// limbo.
var remoteVersion=remoteEvent.snapshotVersion;if(!remoteVersion.isEqual(SnapshotVersion.MIN)){var updateRemoteVersion=_this.queryCache.getLastRemoteSnapshotVersion(txn).next(function(lastRemoteVersion){assert$1(0<=remoteVersion.compareTo(lastRemoteVersion),"Watch stream reverted to previous snapshot?? "+remoteVersion+" < "+lastRemoteVersion);return _this.queryCache.setTargetsMetadata(txn,txn.currentSequenceNumber,remoteVersion)});promises.push(updateRemoteVersion)}return PersistencePromise.waitFor(promises).next(function(){return documentBuffer.apply(txn)}).next(function(){return _this.localDocuments.getLocalViewOfDocuments(txn,changedDocs)})})};/**
      * Returns true if the newQueryData should be persisted during an update of
      * an active target. QueryData should always be persisted when a target is
      * being released and should not call this function.
      *
      * While the target is active, QueryData updates can be omitted when nothing
      * about the target has changed except metadata like the resume token or
      * snapshot version. Occasionally it's worth the extra write to prevent these
      * values from getting too stale after a crash, but this doesn't have to be
      * too frequent.
      */LocalStore.shouldPersistQueryData=function(oldQueryData,newQueryData,change){// Avoid clearing any existing value
if(0===newQueryData.resumeToken.length)return!1;// Any resume token is interesting if there isn't one already.
if(0===oldQueryData.resumeToken.length)return!0;// Don't allow resume token changes to be buffered indefinitely. This
// allows us to be reasonably up-to-date after a crash and avoids needing
// to loop over all active queries on shutdown. Especially in the browser
// we may not get time to do anything interesting while the current tab is
// closing.
var timeDelta=newQueryData.snapshotVersion.toMicroseconds()-oldQueryData.snapshotVersion.toMicroseconds();if(timeDelta>=this.RESUME_TOKEN_MAX_AGE_MICROS)return!0;// Otherwise if the only thing that has changed about a target is its resume
// token it's not worth persisting. Note that the RemoteStore keeps an
// in-memory view of the currently active targets which includes the current
// resume token, so stream failure or user changes will still use an
// up-to-date resume token regardless of what we do here.
var changes=change.addedDocuments.size+change.modifiedDocuments.size+change.removedDocuments.size;return 0<changes};/**
      * Notify local store of the changed views to locally pin documents.
      */LocalStore.prototype.notifyLocalViewChanges=function(viewChanges){var _this=this;return this.persistence.runTransaction("notifyLocalViewChanges","readwrite",function(txn){return PersistencePromise.forEach(viewChanges,function(viewChange){_this.localViewReferences.addReferences(viewChange.addedKeys,viewChange.targetId);_this.localViewReferences.removeReferences(viewChange.removedKeys,viewChange.targetId);return PersistencePromise.forEach(viewChange.removedKeys,function(key){return _this.persistence.referenceDelegate.removeReference(txn,key)})})})};/**
      * Gets the mutation batch after the passed in batchId in the mutation queue
      * or null if empty.
      * @param afterBatchId If provided, the batch to search after.
      * @returns The next mutation or null if there wasn't one.
      */LocalStore.prototype.nextMutationBatch=function(afterBatchId){var _this=this;return this.persistence.runTransaction("Get next mutation batch","readonly",function(txn){if(afterBatchId===void 0){afterBatchId=BATCHID_UNKNOWN}return _this.mutationQueue.getNextMutationBatchAfterBatchId(txn,afterBatchId)})};/**
      * Read the current value of a Document with a given key or null if not
      * found - used for testing.
      */LocalStore.prototype.readDocument=function(key){var _this=this;return this.persistence.runTransaction("read document","readonly",function(txn){return _this.localDocuments.getDocument(txn,key)})};/**
      * Assigns the given query an internal ID so that its results can be pinned so
      * they don't get GC'd. A query must be allocated in the local store before
      * the store can be used to manage its view.
      */LocalStore.prototype.allocateQuery=function(query){var _this=this;return this.persistence.runTransaction("Allocate query","readwrite",function(txn){var queryData;return _this.queryCache.getQueryData(txn,query).next(function(cached){if(cached){// This query has been listened to previously, so reuse the
// previous targetID.
// TODO(mcg): freshen last accessed date?
queryData=cached;return PersistencePromise.resolve()}else{return _this.queryCache.allocateTargetId(txn).next(function(targetId){queryData=new QueryData(query,targetId,QueryPurpose.Listen,txn.currentSequenceNumber);return _this.queryCache.addQueryData(txn,queryData)})}}).next(function(){assert$1(!_this.queryDataByTarget[queryData.targetId],"Tried to allocate an already allocated query: "+query);_this.queryDataByTarget[queryData.targetId]=queryData;return queryData})})};/**
      * Unpin all the documents associated with the given query. If
      * `keepPersistedQueryData` is set to false and Eager GC enabled, the method
      * directly removes the associated query data from the query cache.
      */ // PORTING NOTE: `keepPersistedQueryData` is multi-tab only.
LocalStore.prototype.releaseQuery=function(query,keepPersistedQueryData){var _this=this,mode=keepPersistedQueryData?"readwrite":"readwrite-primary";return this.persistence.runTransaction("Release query",mode,function(txn){return _this.queryCache.getQueryData(txn,query).next(function(queryData){assert$1(null!=queryData,"Tried to release nonexistent query: "+query);var targetId=queryData.targetId,cachedQueryData=_this.queryDataByTarget[targetId],removed=_this.localViewReferences.removeReferencesForId(targetId);delete _this.queryDataByTarget[targetId];if(!keepPersistedQueryData){return PersistencePromise.forEach(removed,function(key){return _this.persistence.referenceDelegate.removeReference(txn,key)}).next(function(){return _this.persistence.referenceDelegate.removeTarget(txn,cachedQueryData)})}else{return PersistencePromise.resolve()}})})};/**
      * Runs the specified query against all the documents in the local store and
      * returns the results.
      */LocalStore.prototype.executeQuery=function(query){var _this=this;return this.persistence.runTransaction("Execute query","readonly",function(txn){return _this.localDocuments.getDocumentsMatchingQuery(txn,query)})};/**
      * Returns the keys of the documents that are associated with the given
      * target id in the remote table.
      */LocalStore.prototype.remoteDocumentKeys=function(targetId){var _this=this;return this.persistence.runTransaction("Remote document keys","readonly",function(txn){return _this.queryCache.getMatchingKeysForTargetId(txn,targetId)})};// PORTING NOTE: Multi-tab only.
LocalStore.prototype.getActiveClients=function(){return this.persistence.getActiveClients()};// PORTING NOTE: Multi-tab only.
LocalStore.prototype.removeCachedMutationBatchMetadata=function(batchId){this.mutationQueue.removeCachedMutationKeys(batchId)};// PORTING NOTE: Multi-tab only.
LocalStore.prototype.setNetworkEnabled=function(networkEnabled){this.persistence.setNetworkEnabled(networkEnabled)};LocalStore.prototype.applyWriteToRemoteDocuments=function(txn,batchResult,documentBuffer){var _this=this,batch=batchResult.batch,docKeys=batch.keys(),promiseChain=PersistencePromise.resolve();docKeys.forEach(function(docKey){promiseChain=promiseChain.next(function(){return documentBuffer.getEntry(txn,docKey)}).next(function(remoteDoc){var doc=remoteDoc,ackVersion=batchResult.docVersions.get(docKey);assert$1(null!==ackVersion,"ackVersions should contain every doc in the write.");if(!doc||0>doc.version.compareTo(ackVersion)){doc=batch.applyToRemoteDocument(docKey,doc,batchResult);if(!doc){assert$1(!remoteDoc,"Mutation batch "+batch+" applied to document "+remoteDoc+" resulted in null")}else{documentBuffer.addEntry(doc)}}})});return promiseChain.next(function(){return _this.mutationQueue.removeMutationBatch(txn,batch)})};LocalStore.prototype.collectGarbage=function(garbageCollector){var _this=this;return this.persistence.runTransaction("Collect garbage","readwrite-primary",function(txn){return garbageCollector.collect(txn,_this.queryDataByTarget)})};// PORTING NOTE: Multi-tab only.
LocalStore.prototype.getQueryForTarget=function(targetId){var _this=this;if(this.queryDataByTarget[targetId]){return Promise.resolve(this.queryDataByTarget[targetId].query)}else{return this.persistence.runTransaction("Get query data","readonly",function(txn){return _this.queryCache.getQueryDataForTarget(txn,targetId).next(function(queryData){return queryData?queryData.query:null})})}};// PORTING NOTE: Multi-tab only.
LocalStore.prototype.getNewDocumentChanges=function(){var _this=this;return this.persistence.runTransaction("Get new document changes","readonly",function(txn){return _this.remoteDocuments.getNewDocumentChanges(txn)})};/**
      * The maximum time to leave a resume token buffered without writing it out.
      * This value is arbitrary: it's long enough to avoid several writes
      * (possibly indefinitely if updates come more frequently than this) but
      * short enough that restarting after crashing will still have a pretty
      * recent resume token.
      */LocalStore.RESUME_TOKEN_MAX_AGE_MICROS=1e6*(60*5);return LocalStore}(),MemoryMutationQueue=/** @class */function(){function MemoryMutationQueue(indexManager,referenceDelegate){this.indexManager=indexManager;this.referenceDelegate=referenceDelegate;/**
                                                 * The set of all mutations that have been sent but not yet been applied to
                                                 * the backend.
                                                 */this.mutationQueue=[];/** Next value to use when assigning sequential IDs to each mutation batch. */this.nextBatchId=1;/** The last received stream token from the server, used to acknowledge which
                           * responses the client has processed. Stream tokens are opaque checkpoint
                           * markers whose only real value is their inclusion in the next request.
                           */this.lastStreamToken=emptyByteString();/** An ordered mapping between documents and the mutations batch IDs. */this.batchesByDocumentKey=new SortedSet(DocReference.compareByKey)}MemoryMutationQueue.prototype.checkEmpty=function(transaction){return PersistencePromise.resolve(0===this.mutationQueue.length)};MemoryMutationQueue.prototype.acknowledgeBatch=function(transaction,batch,streamToken){var batchId=batch.batchId,batchIndex=this.indexOfExistingBatchId(batchId,"acknowledged");assert$1(0===batchIndex,"Can only acknowledge the first batch in the mutation queue");// Verify that the batch in the queue is the one to be acknowledged.
var check=this.mutationQueue[batchIndex];assert$1(batchId===check.batchId,"Queue ordering failure: expected batch "+batchId+", got batch "+check.batchId);this.lastStreamToken=streamToken;return PersistencePromise.resolve()};MemoryMutationQueue.prototype.getLastStreamToken=function(transaction){return PersistencePromise.resolve(this.lastStreamToken)};MemoryMutationQueue.prototype.setLastStreamToken=function(transaction,streamToken){this.lastStreamToken=streamToken;return PersistencePromise.resolve()};MemoryMutationQueue.prototype.addMutationBatch=function(transaction,localWriteTime,baseMutations,mutations){assert$1(0!==mutations.length,"Mutation batches should not be empty");var batchId=this.nextBatchId;this.nextBatchId++;if(0<this.mutationQueue.length){var prior=this.mutationQueue[this.mutationQueue.length-1];assert$1(prior.batchId<batchId,"Mutation batchIDs must be monotonically increasing order")}var batch=new MutationBatch(batchId,localWriteTime,baseMutations,mutations);this.mutationQueue.push(batch);// Track references by document key and index collection parents.
for(var _i=0,mutations_1=mutations,mutation;_i<mutations_1.length;_i++){mutation=mutations_1[_i];this.batchesByDocumentKey=this.batchesByDocumentKey.add(new DocReference(mutation.key,batchId));this.indexManager.addToCollectionParentIndex(transaction,mutation.key.path.popLast())}return PersistencePromise.resolve(batch)};MemoryMutationQueue.prototype.lookupMutationBatch=function(transaction,batchId){return PersistencePromise.resolve(this.findMutationBatch(batchId))};MemoryMutationQueue.prototype.lookupMutationKeys=function(transaction,batchId){var mutationBatch=this.findMutationBatch(batchId);assert$1(null!=mutationBatch,"Failed to find local mutation batch.");return PersistencePromise.resolve(mutationBatch.keys())};MemoryMutationQueue.prototype.getNextMutationBatchAfterBatchId=function(transaction,batchId){var nextBatchId=batchId+1,rawIndex=this.indexOfBatchId(nextBatchId),index=0>rawIndex?0:rawIndex;// The requested batchId may still be out of range so normalize it to the
// start of the queue.
return PersistencePromise.resolve(this.mutationQueue.length>index?this.mutationQueue[index]:null)};MemoryMutationQueue.prototype.getAllMutationBatches=function(transaction){return PersistencePromise.resolve(this.mutationQueue.slice())};MemoryMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKey=function(transaction,documentKey){var _this=this,start=new DocReference(documentKey,0),end=new DocReference(documentKey,Number.POSITIVE_INFINITY),result=[];this.batchesByDocumentKey.forEachInRange([start,end],function(ref){assert$1(documentKey.isEqual(ref.key),"Should only iterate over a single key's batches");var batch=_this.findMutationBatch(ref.targetOrBatchId);assert$1(null!==batch,"Batches in the index must exist in the main table");result.push(batch)});return PersistencePromise.resolve(result)};MemoryMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKeys=function(transaction,documentKeys){var _this=this,uniqueBatchIDs=new SortedSet(primitiveComparator);documentKeys.forEach(function(documentKey){var start=new DocReference(documentKey,0),end=new DocReference(documentKey,Number.POSITIVE_INFINITY);_this.batchesByDocumentKey.forEachInRange([start,end],function(ref){assert$1(documentKey.isEqual(ref.key),"For each key, should only iterate over a single key's batches");uniqueBatchIDs=uniqueBatchIDs.add(ref.targetOrBatchId)})});return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs))};MemoryMutationQueue.prototype.getAllMutationBatchesAffectingQuery=function(transaction,query){assert$1(!query.isCollectionGroupQuery(),"CollectionGroup queries should be handled in LocalDocumentsView");// Use the query path as a prefix for testing if a document matches the
// query.
var prefix=query.path,immediateChildrenPathLength=prefix.length+1,startPath=prefix;if(!DocumentKey.isDocumentKey(startPath)){startPath=startPath.child("")}var start=new DocReference(new DocumentKey(startPath),0),uniqueBatchIDs=new SortedSet(primitiveComparator);// Find unique batchIDs referenced by all documents potentially matching the
// query.
this.batchesByDocumentKey.forEachWhile(function(ref){var rowKeyPath=ref.key.path;if(!prefix.isPrefixOf(rowKeyPath)){return!1}else{// Rows with document keys more than one segment longer than the query
// path can't be matches. For example, a query on 'rooms' can't match
// the document /rooms/abc/messages/xyx.
// TODO(mcg): we'll need a different scanner when we implement
// ancestor queries.
if(rowKeyPath.length===immediateChildrenPathLength){uniqueBatchIDs=uniqueBatchIDs.add(ref.targetOrBatchId)}return!0}},start);return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs))};MemoryMutationQueue.prototype.findMutationBatches=function(batchIDs){var _this=this,result=[];// Construct an array of matching batches, sorted by batchID to ensure that
// multiple mutations affecting the same document key are applied in order.
batchIDs.forEach(function(batchId){var batch=_this.findMutationBatch(batchId);if(null!==batch){result.push(batch)}});return result};MemoryMutationQueue.prototype.removeMutationBatch=function(transaction,batch){var _this=this,batchIndex=this.indexOfExistingBatchId(batch.batchId,"removed");// Find the position of the first batch for removal. This need not be the
// first entry in the queue.
assert$1(0===batchIndex,"Can only remove the first entry of the mutation queue");this.mutationQueue.shift();var references=this.batchesByDocumentKey;return PersistencePromise.forEach(batch.mutations,function(mutation){var ref=new DocReference(mutation.key,batch.batchId);references=references.delete(ref);return _this.referenceDelegate.removeMutationReference(transaction,mutation.key)}).next(function(){_this.batchesByDocumentKey=references})};MemoryMutationQueue.prototype.removeCachedMutationKeys=function(batchId){// No-op since the memory mutation queue does not maintain a separate cache.
};MemoryMutationQueue.prototype.containsKey=function(txn,key){var ref=new DocReference(key,0),firstRef=this.batchesByDocumentKey.firstAfterOrEqual(ref);return PersistencePromise.resolve(key.isEqual(firstRef&&firstRef.key))};MemoryMutationQueue.prototype.performConsistencyCheck=function(txn){if(0===this.mutationQueue.length){assert$1(this.batchesByDocumentKey.isEmpty(),"Document leak -- detected dangling mutation references when queue is empty.")}return PersistencePromise.resolve()};/**
      * Finds the index of the given batchId in the mutation queue and asserts that
      * the resulting index is within the bounds of the queue.
      *
      * @param batchId The batchId to search for
      * @param action A description of what the caller is doing, phrased in passive
      * form (e.g. "acknowledged" in a routine that acknowledges batches).
      */MemoryMutationQueue.prototype.indexOfExistingBatchId=function(batchId,action){var index=this.indexOfBatchId(batchId);assert$1(0<=index&&index<this.mutationQueue.length,"Batches must exist to be "+action);return index};/**
      * Finds the index of the given batchId in the mutation queue. This operation
      * is O(1).
      *
      * @return The computed index of the batch with the given batchId, based on
      * the state of the queue. Note this index can be negative if the requested
      * batchId has already been remvoed from the queue or past the end of the
      * queue if the batchId is larger than the last added batch.
      */MemoryMutationQueue.prototype.indexOfBatchId=function(batchId){if(0===this.mutationQueue.length){// As an index this is past the end of the queue
return 0}// Examine the front of the queue to figure out the difference between the
// batchId and indexes in the array. Note that since the queue is ordered
// by batchId, if the first batch has a larger batchId then the requested
// batchId doesn't exist in the queue.
var firstBatchId=this.mutationQueue[0].batchId;return batchId-firstBatchId};/**
      * A version of lookupMutationBatch that doesn't return a promise, this makes
      * other functions that uses this code easier to read and more efficent.
      */MemoryMutationQueue.prototype.findMutationBatch=function(batchId){var index=this.indexOfBatchId(batchId);if(0>index||index>=this.mutationQueue.length){return null}var batch=this.mutationQueue[index];assert$1(batch.batchId===batchId,"If found batch must match");return batch};return MemoryMutationQueue}(),MemoryQueryCache=/** @class */function(){function MemoryQueryCache(persistence){this.persistence=persistence;/**
                                     * Maps a query to the data about that query
                                     */this.queries=new ObjectMap(function(q){return q.canonicalId()});/** The last received snapshot version. */this.lastRemoteSnapshotVersion=SnapshotVersion.MIN;/** The highest numbered target ID encountered. */this.highestTargetId=0;/** The highest sequence number encountered. */this.highestSequenceNumber=0;/**
                                     * A ordered bidirectional mapping between documents and the remote target
                                     * IDs.
                                     */this.references=new ReferenceSet;this.targetCount=0;this.targetIdGenerator=TargetIdGenerator.forQueryCache()}MemoryQueryCache.prototype.getTargetCount=function(txn){return PersistencePromise.resolve(this.targetCount)};MemoryQueryCache.prototype.forEachTarget=function(txn,f){this.queries.forEach(function(_,queryData){return f(queryData)});return PersistencePromise.resolve()};MemoryQueryCache.prototype.getLastRemoteSnapshotVersion=function(transaction){return PersistencePromise.resolve(this.lastRemoteSnapshotVersion)};MemoryQueryCache.prototype.getHighestSequenceNumber=function(transaction){return PersistencePromise.resolve(this.highestSequenceNumber)};MemoryQueryCache.prototype.allocateTargetId=function(transaction){var nextTargetId=this.targetIdGenerator.after(this.highestTargetId);this.highestTargetId=nextTargetId;return PersistencePromise.resolve(nextTargetId)};MemoryQueryCache.prototype.setTargetsMetadata=function(transaction,highestListenSequenceNumber,lastRemoteSnapshotVersion){if(lastRemoteSnapshotVersion){this.lastRemoteSnapshotVersion=lastRemoteSnapshotVersion}if(highestListenSequenceNumber>this.highestSequenceNumber){this.highestSequenceNumber=highestListenSequenceNumber}return PersistencePromise.resolve()};MemoryQueryCache.prototype.saveQueryData=function(queryData){this.queries.set(queryData.query,queryData);var targetId=queryData.targetId;if(targetId>this.highestTargetId){this.highestTargetId=targetId}if(queryData.sequenceNumber>this.highestSequenceNumber){this.highestSequenceNumber=queryData.sequenceNumber}};MemoryQueryCache.prototype.addQueryData=function(transaction,queryData){assert$1(!this.queries.has(queryData.query),"Adding a query that already exists");this.saveQueryData(queryData);this.targetCount+=1;return PersistencePromise.resolve()};MemoryQueryCache.prototype.updateQueryData=function(transaction,queryData){assert$1(this.queries.has(queryData.query),"Updating a non-existent query");this.saveQueryData(queryData);return PersistencePromise.resolve()};MemoryQueryCache.prototype.removeQueryData=function(transaction,queryData){assert$1(0<this.targetCount,"Removing a target from an empty cache");assert$1(this.queries.has(queryData.query),"Removing a non-existent target from the cache");this.queries.delete(queryData.query);this.references.removeReferencesForId(queryData.targetId);this.targetCount-=1;return PersistencePromise.resolve()};MemoryQueryCache.prototype.removeTargets=function(transaction,upperBound,activeTargetIds){var _this=this,count=0,removals=[];this.queries.forEach(function(key,queryData){if(queryData.sequenceNumber<=upperBound&&!activeTargetIds[queryData.targetId]){_this.queries.delete(key);removals.push(_this.removeMatchingKeysForTargetId(transaction,queryData.targetId));count++}});return PersistencePromise.waitFor(removals).next(function(){return count})};MemoryQueryCache.prototype.getQueryCount=function(transaction){return PersistencePromise.resolve(this.targetCount)};MemoryQueryCache.prototype.getQueryData=function(transaction,query){var queryData=this.queries.get(query)||null;return PersistencePromise.resolve(queryData)};MemoryQueryCache.prototype.getQueryDataForTarget=function(transaction,targetId){// This method is only needed for multi-tab and we can't implement it
// efficiently without additional data structures.
return fail("Not yet implemented.")};MemoryQueryCache.prototype.addMatchingKeys=function(txn,keys,targetId){this.references.addReferences(keys,targetId);var referenceDelegate=this.persistence.referenceDelegate,promises=[];if(referenceDelegate){keys.forEach(function(key){promises.push(referenceDelegate.addReference(txn,key))})}return PersistencePromise.waitFor(promises)};MemoryQueryCache.prototype.removeMatchingKeys=function(txn,keys,targetId){this.references.removeReferences(keys,targetId);var referenceDelegate=this.persistence.referenceDelegate,promises=[];if(referenceDelegate){keys.forEach(function(key){promises.push(referenceDelegate.removeReference(txn,key))})}return PersistencePromise.waitFor(promises)};MemoryQueryCache.prototype.removeMatchingKeysForTargetId=function(txn,targetId){this.references.removeReferencesForId(targetId);return PersistencePromise.resolve()};MemoryQueryCache.prototype.getMatchingKeysForTargetId=function(txn,targetId){var matchingKeys=this.references.referencesForId(targetId);return PersistencePromise.resolve(matchingKeys)};MemoryQueryCache.prototype.containsKey=function(txn,key){return PersistencePromise.resolve(this.references.containsKey(key))};return MemoryQueryCache}();/**
      * @license
      * Copyright 2017 Google Inc.
      *
      * Licensed under the Apache License, Version 2.0 (the "License");
      * you may not use this file except in compliance with the License.
      * You may obtain a copy of the License at
      *
      *   http://www.apache.org/licenses/LICENSE-2.0
      *
      * Unless required by applicable law or agreed to in writing, software
      * distributed under the License is distributed on an "AS IS" BASIS,
      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      * See the License for the specific language governing permissions and
      * limitations under the License.
      */ /**
          * A collection of references to a document from some kind of numbered entity
          * (either a target ID or batch ID). As references are added to or removed from
          * the set corresponding events are emitted to a registered garbage collector.
          *
          * Each reference is represented by a DocumentReference object. Each of them
          * contains enough information to uniquely identify the reference. They are all
          * stored primarily in a set sorted by key. A document is considered garbage if
          * there's no references in that set (this can be efficiently checked thanks to
          * sorting by key).
          *
          * ReferenceSet also keeps a secondary set that contains references sorted by
          * IDs. This one is used to efficiently implement removal of all references by
          * some target ID.
          */ /**
      * @license
      * Copyright 2017 Google Inc.
      *
      * Licensed under the Apache License, Version 2.0 (the "License");
      * you may not use this file except in compliance with the License.
      * You may obtain a copy of the License at
      *
      *   http://www.apache.org/licenses/LICENSE-2.0
      *
      * Unless required by applicable law or agreed to in writing, software
      * distributed under the License is distributed on an "AS IS" BASIS,
      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      * See the License for the specific language governing permissions and
      * limitations under the License.
      */function documentSizeMap(){return new SortedMap(DocumentKey.comparator)}var MemoryRemoteDocumentCache=/** @class */function(){/**
   * @param sizer Used to assess the size of a document. For eager GC, this is expected to just
   * return 0 to avoid unnecessarily doing the work of calculating the size.
   */function MemoryRemoteDocumentCache(indexManager,sizer){this.indexManager=indexManager;this.sizer=sizer;this.docs=documentSizeMap();this.newDocumentChanges=documentKeySet();this.size=0}/**
     * Adds the supplied entries to the cache. Adds the given size delta to the cached size.
     */MemoryRemoteDocumentCache.prototype.addEntries=function(transaction,entries,sizeDelta){for(var promises=[],_i=0,entries_1=entries;_i<entries_1.length;_i++){var entry=entries_1[_i],key=entry.maybeDocument.key;this.docs=this.docs.insert(key,entry);this.newDocumentChanges=this.newDocumentChanges.add(key);promises.push(this.indexManager.addToCollectionParentIndex(transaction,key.path.popLast()))}this.size+=sizeDelta;return PersistencePromise.waitFor(promises)};/**
      * Removes the specified entry from the cache and updates the size as appropriate.
      */MemoryRemoteDocumentCache.prototype.removeEntry=function(transaction,documentKey){var entry=this.docs.get(documentKey);if(entry){this.docs=this.docs.remove(documentKey);this.size-=entry.size;return PersistencePromise.resolve(entry.size)}else{return PersistencePromise.resolve(0)}};MemoryRemoteDocumentCache.prototype.getEntry=function(transaction,documentKey){var entry=this.docs.get(documentKey);return PersistencePromise.resolve(entry?entry.maybeDocument:null)};/**
      * Looks up an entry in the cache.
      *
      * @param documentKey The key of the entry to look up.
      * @return The cached MaybeDocument entry and its size, or null if we have nothing cached.
      */MemoryRemoteDocumentCache.prototype.getSizedEntry=function(transaction,documentKey){return PersistencePromise.resolve(this.docs.get(documentKey))};MemoryRemoteDocumentCache.prototype.getEntries=function(transaction,documentKeys){var _this=this,results=nullableMaybeDocumentMap();documentKeys.forEach(function(documentKey){var entry=_this.docs.get(documentKey);results=results.insert(documentKey,entry?entry.maybeDocument:null)});return PersistencePromise.resolve(results)};/**
      * Looks up several entries in the cache.
      *
      * @param documentKeys The set of keys entries to look up.
      * @return A map of MaybeDocuments indexed by key (if a document cannot be
      *     found, the key will be mapped to null) and a map of sizes indexed by
      *     key (zero if the key cannot be found).
      */MemoryRemoteDocumentCache.prototype.getSizedEntries=function(transaction,documentKeys){var _this=this,results=nullableMaybeDocumentMap(),sizeMap=new SortedMap(DocumentKey.comparator);documentKeys.forEach(function(documentKey){var entry=_this.docs.get(documentKey);results=results.insert(documentKey,entry?entry.maybeDocument:null);sizeMap=sizeMap.insert(documentKey,entry?entry.size:0)});return PersistencePromise.resolve({maybeDocuments:results,sizeMap:sizeMap})};MemoryRemoteDocumentCache.prototype.getDocumentsMatchingQuery=function(transaction,query){assert$1(!query.isCollectionGroupQuery(),"CollectionGroup queries should be handled in LocalDocumentsView");var results=documentMap(),prefix=new DocumentKey(query.path.child("")),iterator=this.docs.getIteratorFrom(prefix);// Documents are ordered by key, so we can use a prefix scan to narrow down
// the documents we need to match the query against.
while(iterator.hasNext()){var _a=iterator.getNext(),key=_a.key,maybeDocument=_a.value.maybeDocument;if(!query.path.isPrefixOf(key.path)){break}if(maybeDocument instanceof Document$1&&query.matches(maybeDocument)){results=results.insert(maybeDocument.key,maybeDocument)}}return PersistencePromise.resolve(results)};MemoryRemoteDocumentCache.prototype.forEachDocumentKey=function(transaction,f){return PersistencePromise.forEach(this.docs,function(key){return f(key)})};MemoryRemoteDocumentCache.prototype.getNewDocumentChanges=function(transaction){var _this=this,changedDocs=maybeDocumentMap();this.newDocumentChanges.forEach(function(key){var entry=_this.docs.get(key),changedDoc=entry?entry.maybeDocument:new NoDocument(key,SnapshotVersion.forDeletedDoc());changedDocs=changedDocs.insert(key,changedDoc)});this.newDocumentChanges=documentKeySet();return PersistencePromise.resolve(changedDocs)};MemoryRemoteDocumentCache.prototype.newChangeBuffer=function(){return new MemoryRemoteDocumentChangeBuffer(this.sizer,this)};MemoryRemoteDocumentCache.prototype.getSize=function(txn){return PersistencePromise.resolve(this.size)};return MemoryRemoteDocumentCache}(),MemoryRemoteDocumentChangeBuffer=/** @class */function(_super){__extends(MemoryRemoteDocumentChangeBuffer,_super);function MemoryRemoteDocumentChangeBuffer(sizer,documentCache){var _this=_super.call(this)||this;_this.sizer=sizer;_this.documentCache=documentCache;return _this}MemoryRemoteDocumentChangeBuffer.prototype.applyChanges=function(transaction){var _this=this,changes=this.assertChanges(),delta=0,docs=[];changes.forEach(function(key,maybeDocument){var previousSize=_this.documentSizes.get(key);assert$1(previousSize!==void 0,"Attempting to change document "+key.toString()+" without having read it first");var size=_this.sizer(maybeDocument);delta+=size-previousSize;docs.push({maybeDocument:maybeDocument,size:size})});return this.documentCache.addEntries(transaction,docs,delta)};MemoryRemoteDocumentChangeBuffer.prototype.getFromCache=function(transaction,documentKey){return this.documentCache.getSizedEntry(transaction,documentKey)};MemoryRemoteDocumentChangeBuffer.prototype.getAllFromCache=function(transaction,documentKeys){return this.documentCache.getSizedEntries(transaction,documentKeys)};return MemoryRemoteDocumentChangeBuffer}(RemoteDocumentChangeBuffer),LOG_TAG$5="MemoryPersistence",MemoryPersistence=/** @class */function(){/**
   * The constructor accepts a factory for creating a reference delegate. This
   * allows both the delegate and this instance to have strong references to
   * each other without having nullable fields that would then need to be
   * checked or asserted on every access.
   */function MemoryPersistence(clientId,referenceDelegateFactory){var _this=this;this.clientId=clientId;this.mutationQueues={};this.listenSequence=new ListenSequence(0);this._started=!1;this._started=!0;this.referenceDelegate=referenceDelegateFactory(this);this.queryCache=new MemoryQueryCache(this);var sizer=function(doc){return _this.referenceDelegate.documentSize(doc)};this.indexManager=new MemoryIndexManager;this.remoteDocumentCache=new MemoryRemoteDocumentCache(this.indexManager,sizer)}MemoryPersistence.createLruPersistence=function(clientId,serializer,params){var factory=function(p){return new MemoryLruDelegate(p,new LocalSerializer(serializer),params)};return new MemoryPersistence(clientId,factory)};MemoryPersistence.createEagerPersistence=function(clientId){var factory=function(p){return new MemoryEagerDelegate(p)};return new MemoryPersistence(clientId,factory)};MemoryPersistence.prototype.shutdown=function(){// No durable state to ensure is closed on shutdown.
this._started=!1;return Promise.resolve()};Object.defineProperty(MemoryPersistence.prototype,"started",{get:function(){return this._started},enumerable:!0,configurable:!0});MemoryPersistence.prototype.getActiveClients=function(){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(_a){return[2/*return*/,[this.clientId]]})})};MemoryPersistence.prototype.setPrimaryStateListener=function(primaryStateListener){// All clients using memory persistence act as primary.
return primaryStateListener(!0)};MemoryPersistence.prototype.setDatabaseDeletedListener=function(){// No op.
};MemoryPersistence.prototype.setNetworkEnabled=function(networkEnabled){// No op.
};MemoryPersistence.prototype.getIndexManager=function(){return this.indexManager};MemoryPersistence.prototype.getMutationQueue=function(user){var queue=this.mutationQueues[user.toKey()];if(!queue){queue=new MemoryMutationQueue(this.indexManager,this.referenceDelegate);this.mutationQueues[user.toKey()]=queue}return queue};MemoryPersistence.prototype.getQueryCache=function(){return this.queryCache};MemoryPersistence.prototype.getRemoteDocumentCache=function(){return this.remoteDocumentCache};MemoryPersistence.prototype.runTransaction=function(action,mode,transactionOperation){var _this=this;debug(LOG_TAG$5,"Starting transaction:",action);var txn=new MemoryTransaction(this.listenSequence.next());this.referenceDelegate.onTransactionStarted();return transactionOperation(txn).next(function(result){return _this.referenceDelegate.onTransactionCommitted(txn).next(function(){return result})}).toPromise()};MemoryPersistence.prototype.mutationQueuesContainKey=function(transaction,key){return PersistencePromise.or(values(this.mutationQueues).map(function(queue){return function(){return queue.containsKey(transaction,key)}}))};return MemoryPersistence}(),MemoryTransaction=/** @class */function(){function MemoryTransaction(currentSequenceNumber){this.currentSequenceNumber=currentSequenceNumber}return MemoryTransaction}(),MemoryEagerDelegate=/** @class */function(){function MemoryEagerDelegate(persistence){this.persistence=persistence}MemoryEagerDelegate.prototype.setInMemoryPins=function(inMemoryPins){this.inMemoryPins=inMemoryPins};MemoryEagerDelegate.prototype.addReference=function(txn,key){this.orphanedDocuments.delete(key);return PersistencePromise.resolve()};MemoryEagerDelegate.prototype.removeReference=function(txn,key){this.orphanedDocuments.add(key);return PersistencePromise.resolve()};MemoryEagerDelegate.prototype.removeMutationReference=function(txn,key){this.orphanedDocuments.add(key);return PersistencePromise.resolve()};MemoryEagerDelegate.prototype.removeTarget=function(txn,queryData){var _this=this,cache=this.persistence.getQueryCache();return cache.getMatchingKeysForTargetId(txn,queryData.targetId).next(function(keys){keys.forEach(function(key){return _this.orphanedDocuments.add(key)})}).next(function(){return cache.removeQueryData(txn,queryData)})};MemoryEagerDelegate.prototype.onTransactionStarted=function(){this.orphanedDocuments=new Set};MemoryEagerDelegate.prototype.onTransactionCommitted=function(txn){var _this=this,cache=this.persistence.getRemoteDocumentCache();return PersistencePromise.forEach(this.orphanedDocuments,function(key){return _this.isReferenced(txn,key).next(function(isReferenced){if(!isReferenced){// Since this is the eager delegate and memory persistence,
// we don't care about the size of documents. We don't track
// the size of the cache for eager GC.
return cache.removeEntry(txn,key).next(function(){})}return PersistencePromise.resolve()})})};MemoryEagerDelegate.prototype.updateLimboDocument=function(txn,key){var _this=this;return this.isReferenced(txn,key).next(function(isReferenced){if(isReferenced){_this.orphanedDocuments.delete(key)}else{_this.orphanedDocuments.add(key)}})};MemoryEagerDelegate.prototype.documentSize=function(doc){// For eager GC, we don't care about the document size, there are no size thresholds.
return 0};MemoryEagerDelegate.prototype.isReferenced=function(txn,key){var _this=this;return PersistencePromise.or([function(){return _this.persistence.getQueryCache().containsKey(txn,key)},function(){return _this.persistence.mutationQueuesContainKey(txn,key)},function(){return PersistencePromise.resolve(_this.inMemoryPins.containsKey(key))}])};return MemoryEagerDelegate}(),MemoryLruDelegate=/** @class */function(){function MemoryLruDelegate(persistence,serializer,lruParams){this.persistence=persistence;this.serializer=serializer;this.orphanedSequenceNumbers=new ObjectMap(function(k){return encode(k.path)});this.garbageCollector=new LruGarbageCollector(this,lruParams)}// No-ops, present so memory persistence doesn't have to care which delegate
// it has.
MemoryLruDelegate.prototype.onTransactionStarted=function(){};MemoryLruDelegate.prototype.onTransactionCommitted=function(txn){return PersistencePromise.resolve()};MemoryLruDelegate.prototype.forEachTarget=function(txn,f){return this.persistence.getQueryCache().forEachTarget(txn,f)};MemoryLruDelegate.prototype.getSequenceNumberCount=function(txn){var docCountPromise=this.orphanedDocumentCount(txn),targetCountPromise=this.persistence.getQueryCache().getTargetCount(txn);return targetCountPromise.next(function(targetCount){return docCountPromise.next(function(docCount){return targetCount+docCount})})};MemoryLruDelegate.prototype.orphanedDocumentCount=function(txn){var orphanedCount=0;return this.forEachOrphanedDocumentSequenceNumber(txn,function(_){orphanedCount++}).next(function(){return orphanedCount})};MemoryLruDelegate.prototype.forEachOrphanedDocumentSequenceNumber=function(txn,f){var _this=this;return PersistencePromise.forEach(this.orphanedSequenceNumbers,function(key,sequenceNumber){// Pass in the exact sequence number as the upper bound so we know it won't be pinned by
// being too recent.
return _this.isPinned(txn,key,sequenceNumber).next(function(isPinned){if(!isPinned){return f(sequenceNumber)}else{return PersistencePromise.resolve()}})})};MemoryLruDelegate.prototype.setInMemoryPins=function(inMemoryPins){this.inMemoryPins=inMemoryPins};MemoryLruDelegate.prototype.removeTargets=function(txn,upperBound,activeTargetIds){return this.persistence.getQueryCache().removeTargets(txn,upperBound,activeTargetIds)};MemoryLruDelegate.prototype.removeOrphanedDocuments=function(txn,upperBound){var _this=this,count=0,cache=this.persistence.getRemoteDocumentCache(),p=cache.forEachDocumentKey(txn,function(key){return _this.isPinned(txn,key,upperBound).next(function(isPinned){if(isPinned){return PersistencePromise.resolve()}else{count++;// The memory remote document cache does its own byte
// accounting on removal. This is ok because updating the size
// for memory persistence does not incur IO.
return cache.removeEntry(txn,key).next()}})});return p.next(function(){return count})};MemoryLruDelegate.prototype.removeMutationReference=function(txn,key){this.orphanedSequenceNumbers.set(key,txn.currentSequenceNumber);return PersistencePromise.resolve()};MemoryLruDelegate.prototype.removeTarget=function(txn,queryData){var updated=queryData.copy({sequenceNumber:txn.currentSequenceNumber});return this.persistence.getQueryCache().updateQueryData(txn,updated)};MemoryLruDelegate.prototype.addReference=function(txn,key){this.orphanedSequenceNumbers.set(key,txn.currentSequenceNumber);return PersistencePromise.resolve()};MemoryLruDelegate.prototype.removeReference=function(txn,key){this.orphanedSequenceNumbers.set(key,txn.currentSequenceNumber);return PersistencePromise.resolve()};MemoryLruDelegate.prototype.updateLimboDocument=function(txn,key){this.orphanedSequenceNumbers.set(key,txn.currentSequenceNumber);return PersistencePromise.resolve()};MemoryLruDelegate.prototype.documentSize=function(maybeDoc){var remoteDocument=this.serializer.toDbRemoteDocument(maybeDoc),value;if(remoteDocument.document){value=remoteDocument.document}else if(remoteDocument.unknownDocument){value=remoteDocument.unknownDocument}else if(remoteDocument.noDocument){value=remoteDocument.noDocument}else{throw fail("Unknown remote document type")}return JSON.stringify(value).length};MemoryLruDelegate.prototype.isPinned=function(txn,key,upperBound){var _this=this;return PersistencePromise.or([function(){return _this.persistence.mutationQueuesContainKey(txn,key)},function(){return PersistencePromise.resolve(_this.inMemoryPins.containsKey(key))},function(){return _this.persistence.getQueryCache().containsKey(txn,key)},function(){var orphanedAt=_this.orphanedSequenceNumbers.get(key);return PersistencePromise.resolve(orphanedAt!==void 0&&orphanedAt>upperBound)}])};MemoryLruDelegate.prototype.getCacheSize=function(txn){return this.persistence.getRemoteDocumentCache().getSize(txn)};return MemoryLruDelegate}(),LOG_TAG$6="ExponentialBackoff",ExponentialBackoff=/** @class */function(){function ExponentialBackoff(/**
                                * The AsyncQueue to run backoff operations on.
                                */queue,/**
                                          * The ID to use when scheduling backoff operations on the AsyncQueue.
                                          */timerId,/**
                                                      * The initial delay (used as the base delay on the first retry attempt).
                                                      * Note that jitter will still be applied, so the actual delay could be as
                                                      * little as 0.5*initialDelayMs.
                                                      */initialDelayMs,/**
                                                                         * The multiplier to use to determine the extended base delay after each
                                                                         * attempt.
                                                                         */backoffFactor,/**
                                                                                           * The maximum base delay after which no further backoff is performed.
                                                                                           * Note that jitter will still be applied, so the actual delay could be as
                                                                                           * much as 1.5*maxDelayMs.
                                                                                           */maxDelayMs){this.queue=queue;this.timerId=timerId;this.initialDelayMs=initialDelayMs;this.backoffFactor=backoffFactor;this.maxDelayMs=maxDelayMs;this.timerPromise=null;/** The last backoff attempt, as epoch milliseconds. */this.lastAttemptTime=Date.now();this.reset()}/**
     * Resets the backoff delay.
     *
     * The very next backoffAndWait() will have no delay. If it is called again
     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
     * subsequent ones will increase according to the backoffFactor.
     */ExponentialBackoff.prototype.reset=function(){this.currentBaseMs=0};/**
      * Resets the backoff delay to the maximum delay (e.g. for use after a
      * RESOURCE_EXHAUSTED error).
      */ExponentialBackoff.prototype.resetToMax=function(){this.currentBaseMs=this.maxDelayMs};/**
      * Returns a promise that resolves after currentDelayMs, and increases the
      * delay for any subsequent attempts. If there was a pending backoff operation
      * already, it will be canceled.
      */ExponentialBackoff.prototype.backoffAndRun=function(op){var _this=this;// Cancel any pending backoff operation.
this.cancel();// First schedule using the current base (which may be 0 and should be
// honored as such).
var desiredDelayWithJitterMs=Math.floor(this.currentBaseMs+this.jitterDelayMs()),delaySoFarMs=Math.max(0,Date.now()-this.lastAttemptTime),remainingDelayMs=Math.max(0,desiredDelayWithJitterMs-delaySoFarMs);// Guard against lastAttemptTime being in the future due to a clock change.
if(0<this.currentBaseMs){debug(LOG_TAG$6,"Backing off for "+remainingDelayMs+" ms "+("(base delay: "+this.currentBaseMs+" ms, ")+("delay with jitter: "+desiredDelayWithJitterMs+" ms, ")+("last attempt: "+delaySoFarMs+" ms ago)"))}this.timerPromise=this.queue.enqueueAfterDelay(this.timerId,remainingDelayMs,function(){_this.lastAttemptTime=Date.now();return op()});// Apply backoff factor to determine next delay and ensure it is within
// bounds.
this.currentBaseMs*=this.backoffFactor;if(this.currentBaseMs<this.initialDelayMs){this.currentBaseMs=this.initialDelayMs}if(this.currentBaseMs>this.maxDelayMs){this.currentBaseMs=this.maxDelayMs}};ExponentialBackoff.prototype.cancel=function(){if(null!==this.timerPromise){this.timerPromise.cancel();this.timerPromise=null}};/** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */ExponentialBackoff.prototype.jitterDelayMs=function(){return(Math.random()-.5)*this.currentBaseMs};return ExponentialBackoff}(),LOG_TAG$7="PersistentStream",PersistentStreamState;/**
      * Handles the details of adding and updating documents in the MemoryRemoteDocumentCache.
      */(function(PersistentStreamState){/**
   * The streaming RPC is not yet running and there's no error condition.
   * Calling start() will start the stream immediately without backoff.
   * While in this state isStarted() will return false.
   */PersistentStreamState[PersistentStreamState.Initial=0]="Initial";/**
                                                                               * The stream is starting, either waiting for an auth token or for the stream
                                                                               * to successfully open. While in this state, isStarted() will return true but
                                                                               * isOpen() will return false.
                                                                               */PersistentStreamState[PersistentStreamState.Starting=1]="Starting";/**
                                                                              * The streaming RPC is up and running. Requests and responses can flow
                                                                              * freely. Both isStarted() and isOpen() will return true.
                                                                              */PersistentStreamState[PersistentStreamState.Open=2]="Open";/**
                                                                      * The stream encountered an error. The next start attempt will back off.
                                                                      * While in this state isStarted() will return false.
                                                                      */PersistentStreamState[PersistentStreamState.Error=3]="Error";/**
                                                                        * An in-between state after an error where the stream is waiting before
                                                                        * re-starting. After waiting is complete, the stream will try to open.
                                                                        * While in this state isStarted() will return true but isOpen() will return
                                                                        * false.
                                                                        */PersistentStreamState[PersistentStreamState.Backoff=4]="Backoff"})(PersistentStreamState||(PersistentStreamState={}));/**
                                                            * Initial backoff time in milliseconds after an error.
                                                            * Set to 1s according to https://cloud.google.com/apis/design/errors.
                                                            */var BACKOFF_INITIAL_DELAY_MS=1e3,BACKOFF_MAX_DELAY_MS=1e3*60,BACKOFF_FACTOR=1.5,IDLE_TIMEOUT_MS=1e3*60,PersistentStream=/** @class */function(){function PersistentStream(queue,connectionTimerId,idleTimerId,connection,credentialsProvider,listener){this.queue=queue;this.idleTimerId=idleTimerId;this.connection=connection;this.credentialsProvider=credentialsProvider;this.listener=listener;this.state=PersistentStreamState.Initial;/**
                                                 * A close count that's incremented every time the stream is closed; used by
                                                 * getCloseGuardedDispatcher() to invalidate callbacks that happen after
                                                 * close.
                                                 */this.closeCount=0;this.idleTimer=null;this.stream=null;this.backoff=new ExponentialBackoff(queue,connectionTimerId,BACKOFF_INITIAL_DELAY_MS,BACKOFF_FACTOR,BACKOFF_MAX_DELAY_MS)}/**
     * Returns true if start() has been called and no error has occurred. True
     * indicates the stream is open or in the process of opening (which
     * encompasses respecting backoff, getting auth tokens, and starting the
     * actual RPC). Use isOpen() to determine if the stream is open and ready for
     * outbound requests.
     */PersistentStream.prototype.isStarted=function(){return this.state===PersistentStreamState.Starting||this.state===PersistentStreamState.Open||this.state===PersistentStreamState.Backoff};/**
      * Returns true if the underlying RPC is open (the onOpen() listener has been
      * called) and the stream is ready for outbound requests.
      */PersistentStream.prototype.isOpen=function(){return this.state===PersistentStreamState.Open};/**
      * Starts the RPC. Only allowed if isStarted() returns false. The stream is
      * not immediately ready for use: onOpen() will be invoked when the RPC is
      * ready for outbound requests, at which point isOpen() will return true.
      *
      * When start returns, isStarted() will return true.
      */PersistentStream.prototype.start=function(){if(this.state===PersistentStreamState.Error){this.performBackoff();return}assert$1(this.state===PersistentStreamState.Initial,"Already started");this.auth()};/**
      * Stops the RPC. This call is idempotent and allowed regardless of the
      * current isStarted() state.
      *
      * When stop returns, isStarted() and isOpen() will both return false.
      */PersistentStream.prototype.stop=function(){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(_a){switch(_a.label){case 0:if(!this.isStarted())return[3/*break*/,2];return[4/*yield*/,this.close(PersistentStreamState.Initial)];case 1:_a.sent();_a.label=2;case 2:return[2/*return*/];}})})};/**
      * After an error the stream will usually back off on the next attempt to
      * start it. If the error warrants an immediate restart of the stream, the
      * sender can use this to indicate that the receiver should not back off.
      *
      * Each error will call the onClose() listener. That function can decide to
      * inhibit backoff if required.
      */PersistentStream.prototype.inhibitBackoff=function(){assert$1(!this.isStarted(),"Can only inhibit backoff in a stopped state");this.state=PersistentStreamState.Initial;this.backoff.reset()};/**
      * Marks this stream as idle. If no further actions are performed on the
      * stream for one minute, the stream will automatically close itself and
      * notify the stream's onClose() handler with Status.OK. The stream will then
      * be in a !isStarted() state, requiring the caller to start the stream again
      * before further use.
      *
      * Only streams that are in state 'Open' can be marked idle, as all other
      * states imply pending network operations.
      */PersistentStream.prototype.markIdle=function(){var _this=this;// Starts the idle time if we are in state 'Open' and are not yet already
// running a timer (in which case the previous idle timeout still applies).
if(this.isOpen()&&null===this.idleTimer){this.idleTimer=this.queue.enqueueAfterDelay(this.idleTimerId,IDLE_TIMEOUT_MS,function(){return _this.handleIdleCloseTimer()})}};/** Sends a message to the underlying stream. */PersistentStream.prototype.sendRequest=function(msg){this.cancelIdleCheck();this.stream.send(msg)};/** Called by the idle timer when the stream should close due to inactivity. */PersistentStream.prototype.handleIdleCloseTimer=function(){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(_a){if(this.isOpen()){// When timing out an idle stream there's no reason to force the stream into backoff when
// it restarts so set the stream state to Initial instead of Error.
return[2/*return*/,this.close(PersistentStreamState.Initial)]}return[2/*return*/]})})};/** Marks the stream as active again. */PersistentStream.prototype.cancelIdleCheck=function(){if(this.idleTimer){this.idleTimer.cancel();this.idleTimer=null}};/**
      * Closes the stream and cleans up as necessary:
      *
      * * closes the underlying GRPC stream;
      * * calls the onClose handler with the given 'error';
      * * sets internal stream state to 'finalState';
      * * adjusts the backoff timer based on the error
      *
      * A new stream can be opened by calling start().
      *
      * @param finalState the intended state of the stream after closing.
      * @param error the error the connection was closed with.
      */PersistentStream.prototype.close=function(finalState,error$1){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(_a){switch(_a.label){case 0:assert$1(this.isStarted(),"Only started streams should be closed.");assert$1(finalState===PersistentStreamState.Error||isNullOrUndefined(error$1),"Can't provide an error when not in an error state.");// Cancel any outstanding timers (they're guaranteed not to execute).
this.cancelIdleCheck();this.backoff.cancel();// Invalidates any stream-related callbacks (e.g. from auth or the
// underlying stream), guaranteeing they won't execute.
this.closeCount++;if(finalState!==PersistentStreamState.Error){// If this is an intentional close ensure we don't delay our next connection attempt.
this.backoff.reset()}else if(error$1&&error$1.code===Code.RESOURCE_EXHAUSTED){// Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)
error(error$1.toString());error("Using maximum backoff delay to prevent overloading the backend.");this.backoff.resetToMax()}else if(error$1&&error$1.code===Code.UNAUTHENTICATED){// "unauthenticated" error means the token was rejected. Try force refreshing it in case it
// just expired.
this.credentialsProvider.invalidateToken()}// Clean up the underlying stream because we are no longer interested in events.
if(null!==this.stream){this.tearDown();this.stream.close();this.stream=null}// This state must be assigned before calling onClose() to allow the callback to
// inhibit backoff or otherwise manipulate the state in its non-started state.
this.state=finalState;// Notify the listener that the stream closed.
return[4/*yield*/,this.listener.onClose(error$1)];case 1:// Notify the listener that the stream closed.
_a.sent();return[2/*return*/];}})})};/**
      * Can be overridden to perform additional cleanup before the stream is closed.
      * Calling super.tearDown() is not required.
      */PersistentStream.prototype.tearDown=function(){};PersistentStream.prototype.auth=function(){var _this=this;assert$1(this.state===PersistentStreamState.Initial,"Must be in initial state to auth");this.state=PersistentStreamState.Starting;var dispatchIfNotClosed=this.getCloseGuardedDispatcher(this.closeCount),closeCount=this.closeCount;// TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.
this.credentialsProvider.getToken().then(function(token){// Stream can be stopped while waiting for authentication.
// TODO(mikelehen): We really should just use dispatchIfNotClosed
// and let this dispatch onto the queue, but that opened a spec test can
// of worms that I don't want to deal with in this PR.
if(_this.closeCount===closeCount){// Normally we'd have to schedule the callback on the AsyncQueue.
// However, the following calls are safe to be called outside the
// AsyncQueue since they don't chain asynchronous calls
_this.startStream(token)}},function(error){dispatchIfNotClosed(function(){var rpcError=new FirestoreError(Code.UNKNOWN,"Fetching auth token failed: "+error.message);return _this.handleStreamClose(rpcError)})})};PersistentStream.prototype.startStream=function(token){var _this=this;assert$1(this.state===PersistentStreamState.Starting,"Trying to start stream in a non-starting state");var dispatchIfNotClosed=this.getCloseGuardedDispatcher(this.closeCount);this.stream=this.startRpc(token);this.stream.onOpen(function(){dispatchIfNotClosed(function(){assert$1(_this.state===PersistentStreamState.Starting,"Expected stream to be in state Starting, but was "+_this.state);_this.state=PersistentStreamState.Open;return _this.listener.onOpen()})});this.stream.onClose(function(error){dispatchIfNotClosed(function(){return _this.handleStreamClose(error)})});this.stream.onMessage(function(msg){dispatchIfNotClosed(function(){return _this.onMessage(msg)})})};PersistentStream.prototype.performBackoff=function(){var _this=this;assert$1(this.state===PersistentStreamState.Error,"Should only perform backoff when in Error state");this.state=PersistentStreamState.Backoff;this.backoff.backoffAndRun(function(){return __awaiter(_this,void 0,void 0,function(){return __generator(this,function(_a){assert$1(this.state===PersistentStreamState.Backoff,"Backoff elapsed but state is now: "+this.state);this.state=PersistentStreamState.Initial;this.start();assert$1(this.isStarted(),"PersistentStream should have started");return[2/*return*/]})})})};// Visible for tests
PersistentStream.prototype.handleStreamClose=function(error){assert$1(this.isStarted(),"Can't handle server close on non-started stream");debug(LOG_TAG$7,"close with error: "+error);this.stream=null;// In theory the stream could close cleanly, however, in our current model
// we never expect this to happen because if we stop a stream ourselves,
// this callback will never be called. To prevent cases where we retry
// without a backoff accidentally, we set the stream to error in all cases.
return this.close(PersistentStreamState.Error,error)};/**
      * Returns a "dispatcher" function that dispatches operations onto the
      * AsyncQueue but only runs them if closeCount remains unchanged. This allows
      * us to turn auth / stream callbacks into no-ops if the stream is closed /
      * re-opened, etc.
      */PersistentStream.prototype.getCloseGuardedDispatcher=function(startCloseCount){var _this=this;return function(fn){_this.queue.enqueueAndForget(function(){if(_this.closeCount===startCloseCount){return fn()}else{debug(LOG_TAG$7,"stream callback skipped by getCloseGuardedDispatcher.");return Promise.resolve()}})}};return PersistentStream}(),PersistentListenStream=/** @class */function(_super){__extends(PersistentListenStream,_super);function PersistentListenStream(queue,connection,credentials,serializer,listener){var _this=_super.call(this,queue,TimerId.ListenStreamConnectionBackoff,TimerId.ListenStreamIdle,connection,credentials,listener)||this;_this.serializer=serializer;return _this}PersistentListenStream.prototype.startRpc=function(token){return this.connection.openStream("Listen",token)};PersistentListenStream.prototype.onMessage=function(watchChangeProto){// A successful response means the stream is healthy
this.backoff.reset();var watchChange=this.serializer.fromWatchChange(watchChangeProto),snapshot=this.serializer.versionFromListenResponse(watchChangeProto);return this.listener.onWatchChange(watchChange,snapshot)};/**
      * Registers interest in the results of the given query. If the query
      * includes a resumeToken it will be included in the request. Results that
      * affect the query will be streamed back as WatchChange messages that
      * reference the targetId.
      */PersistentListenStream.prototype.watch=function(queryData){var request={database:this.serializer.encodedDatabaseId,addTarget:this.serializer.toTarget(queryData)},labels=this.serializer.toListenRequestLabels(queryData);if(labels){request.labels=labels}this.sendRequest(request)};/**
      * Unregisters interest in the results of the query associated with the
      * given targetId.
      */PersistentListenStream.prototype.unwatch=function(targetId){var request={database:this.serializer.encodedDatabaseId,removeTarget:targetId};this.sendRequest(request)};return PersistentListenStream}(PersistentStream),PersistentWriteStream=/** @class */function(_super){__extends(PersistentWriteStream,_super);function PersistentWriteStream(queue,connection,credentials,serializer,listener){var _this=_super.call(this,queue,TimerId.WriteStreamConnectionBackoff,TimerId.WriteStreamIdle,connection,credentials,listener)||this;_this.serializer=serializer;_this.handshakeComplete_=!1;return _this}Object.defineProperty(PersistentWriteStream.prototype,"handshakeComplete",{/**
     * Tracks whether or not a handshake has been successfully exchanged and
     * the stream is ready to accept mutations.
     */get:function(){return this.handshakeComplete_},enumerable:!0,configurable:!0});// Override of PersistentStream.start
PersistentWriteStream.prototype.start=function(){this.handshakeComplete_=!1;_super.prototype.start.call(this)};PersistentWriteStream.prototype.tearDown=function(){if(this.handshakeComplete_){this.writeMutations([])}};PersistentWriteStream.prototype.startRpc=function(token){return this.connection.openStream("Write",token)};PersistentWriteStream.prototype.onMessage=function(responseProto){// Always capture the last stream token.
assert$1(!!responseProto.streamToken,"Got a write response without a stream token");this.lastStreamToken=responseProto.streamToken;if(!this.handshakeComplete_){// The first response is always the handshake response
assert$1(!responseProto.writeResults||0===responseProto.writeResults.length,"Got mutation results for handshake");this.handshakeComplete_=!0;return this.listener.onHandshakeComplete()}else{// A successful first write response means the stream is healthy,
// Note, that we could consider a successful handshake healthy, however,
// the write itself might be causing an error we want to back off from.
this.backoff.reset();var results=this.serializer.fromWriteResults(responseProto.writeResults,responseProto.commitTime),commitVersion=this.serializer.fromVersion(responseProto.commitTime);return this.listener.onMutationResult(commitVersion,results)}};/**
      * Sends an initial streamToken to the server, performing the handshake
      * required to make the StreamingWrite RPC work. Subsequent
      * calls should wait until onHandshakeComplete was called.
      */PersistentWriteStream.prototype.writeHandshake=function(){assert$1(this.isOpen(),"Writing handshake requires an opened stream");assert$1(!this.handshakeComplete_,"Handshake already completed");// TODO(dimond): Support stream resumption. We intentionally do not set the
// stream token on the handshake, ignoring any stream token we might have.
var request={database:this.serializer.encodedDatabaseId};this.sendRequest(request)};/** Sends a group of mutations to the Firestore backend to apply. */PersistentWriteStream.prototype.writeMutations=function(mutations){var _this=this;assert$1(this.isOpen(),"Writing mutations requires an opened stream");assert$1(this.handshakeComplete_,"Handshake must be complete before writing mutations");assert$1(0<this.lastStreamToken.length,"Trying to write mutation without a token");var request={// Protos are typed with string, but we support UInt8Array on Node
// tslint:disable-next-line:no-any
streamToken:this.lastStreamToken,writes:mutations.map(function(mutation){return _this.serializer.toMutation(mutation)})};this.sendRequest(request)};return PersistentWriteStream}(PersistentStream),Datastore=/** @class */function(){function Datastore(queue,connection,credentials,serializer){this.queue=queue;this.connection=connection;this.credentials=credentials;this.serializer=serializer}Datastore.prototype.newPersistentWriteStream=function(listener){return new PersistentWriteStream(this.queue,this.connection,this.credentials,this.serializer,listener)};Datastore.prototype.newPersistentWatchStream=function(listener){return new PersistentListenStream(this.queue,this.connection,this.credentials,this.serializer,listener)};Datastore.prototype.commit=function(mutations){var _this=this,params={database:this.serializer.encodedDatabaseId,writes:mutations.map(function(m){return _this.serializer.toMutation(m)})};return this.invokeRPC("Commit",params).then(function(response){return _this.serializer.fromWriteResults(response.writeResults,response.commitTime)})};Datastore.prototype.lookup=function(keys){var _this=this,params={database:this.serializer.encodedDatabaseId,documents:keys.map(function(k){return _this.serializer.toName(k)})};return this.invokeStreamingRPC("BatchGetDocuments",params).then(function(response){var docs=maybeDocumentMap();response.forEach(function(proto){var doc=_this.serializer.fromMaybeDocument(proto);docs=docs.insert(doc.key,doc)});var result=[];keys.forEach(function(key){var doc=docs.get(key);assert$1(!!doc,"Missing entity in write response for "+key);result.push(doc)});return result})};/** Gets an auth token and invokes the provided RPC. */Datastore.prototype.invokeRPC=function(rpcName,request){var _this=this;return this.credentials.getToken().then(function(token){return _this.connection.invokeRPC(rpcName,request,token)}).catch(function(error){if(error.code===Code.UNAUTHENTICATED){_this.credentials.invalidateToken()}throw error})};/** Gets an auth token and invokes the provided RPC with streamed results. */Datastore.prototype.invokeStreamingRPC=function(rpcName,request){var _this=this;return this.credentials.getToken().then(function(token){return _this.connection.invokeStreamingRPC(rpcName,request,token)}).catch(function(error){if(error.code===Code.UNAUTHENTICATED){_this.credentials.invalidateToken()}throw error})};return Datastore}(),Transaction=/** @class */function(){function Transaction(datastore){this.datastore=datastore;// The version of each document that was read during this transaction.
this.readVersions=documentVersionMap();this.mutations=[];this.committed=!1}Transaction.prototype.recordVersion=function(doc){var docVersion;if(doc instanceof Document$1){docVersion=doc.version}else if(doc instanceof NoDocument){// For deleted docs, we must use baseVersion 0 when we overwrite them.
docVersion=SnapshotVersion.forDeletedDoc()}else{throw fail("Document in a transaction was a "+doc.constructor.name)}var existingVersion=this.readVersions.get(doc.key);if(null!==existingVersion){if(!docVersion.isEqual(existingVersion)){// This transaction will fail no matter what.
throw new FirestoreError(Code.ABORTED,"Document version changed between two reads.")}}else{this.readVersions=this.readVersions.insert(doc.key,docVersion)}};Transaction.prototype.lookup=function(keys){var _this=this;if(this.committed){return Promise.reject("Transaction has already completed.")}if(0<this.mutations.length){return Promise.reject("Transactions lookups are invalid after writes.")}return this.datastore.lookup(keys).then(function(docs){docs.forEach(function(doc){if(doc instanceof NoDocument||doc instanceof Document$1){_this.recordVersion(doc)}else{fail("Document in a transaction was a "+doc.constructor.name)}});return docs})};Transaction.prototype.write=function(mutations){if(this.committed){throw new FirestoreError(Code.FAILED_PRECONDITION,"Transaction has already completed.")}this.mutations=this.mutations.concat(mutations)};/**
      * Returns the version of this document when it was read in this transaction,
      * as a precondition, or no precondition if it was not read.
      */Transaction.prototype.precondition=function(key){var version=this.readVersions.get(key);if(version){return Precondition.updateTime(version)}else{return Precondition.NONE}};/**
      * Returns the precondition for a document if the operation is an update.
      */Transaction.prototype.preconditionForUpdate=function(key){var version=this.readVersions.get(key);if(version&&version.isEqual(SnapshotVersion.forDeletedDoc())){// The document doesn't exist, so fail the transaction.
throw new FirestoreError(Code.FAILED_PRECONDITION,"Can't update a document that doesn't exist.")}else if(version){// Document exists, base precondition on document update time.
return Precondition.updateTime(version)}else{// Document was not read, so we just use the preconditions for a blind
// update.
return Precondition.exists(!0)}};Transaction.prototype.set=function(key,data){this.write(data.toMutations(key,this.precondition(key)))};Transaction.prototype.update=function(key,data){this.write(data.toMutations(key,this.preconditionForUpdate(key)))};Transaction.prototype.delete=function(key){this.write([new DeleteMutation(key,this.precondition(key))]);// Since the delete will be applied before all following writes, we need to
// ensure that the precondition for the next write will be exists: false.
this.readVersions=this.readVersions.insert(key,SnapshotVersion.forDeletedDoc())};Transaction.prototype.commit=function(){var _this=this,unwritten=this.readVersions;// For each mutation, note that the doc was written.
this.mutations.forEach(function(mutation){unwritten=unwritten.remove(mutation.key)});if(!unwritten.isEmpty()){return Promise.reject(Error("Every document read in a transaction must also be written."))}return this.datastore.commit(this.mutations).then(function(){_this.committed=!0})};return Transaction}(),OnlineState;/** Maximum backoff time in milliseconds */(function(OnlineState){/**
   * The Firestore client is in an unknown online state. This means the client
   * is either not actively trying to establish a connection or it is currently
   * trying to establish a connection, but it has not succeeded or failed yet.
   * Higher-level components should not operate in offline mode.
   */OnlineState[OnlineState.Unknown=0]="Unknown";/**
                                                           * The client is connected and the connections are healthy. This state is
                                                           * reached after a successful connection and there has been at least one
                                                           * successful message received from the backends.
                                                           */OnlineState[OnlineState.Online=1]="Online";/**
                                                      * The client is either trying to establish a connection but failing, or it
                                                      * has been explicitly marked offline via a call to disableNetwork().
                                                      * Higher-level components should operate in offline mode.
                                                      */OnlineState[OnlineState.Offline=2]="Offline"})(OnlineState||(OnlineState={}));/** The source of an online state event. */var OnlineStateSource;(function(OnlineStateSource){OnlineStateSource[OnlineStateSource.RemoteStore=0]="RemoteStore";OnlineStateSource[OnlineStateSource.SharedClientState=1]="SharedClientState"})(OnlineStateSource||(OnlineStateSource={}));/**
                                                    * @license
                                                    * Copyright 2018 Google Inc.
                                                    *
                                                    * Licensed under the Apache License, Version 2.0 (the "License");
                                                    * you may not use this file except in compliance with the License.
                                                    * You may obtain a copy of the License at
                                                    *
                                                    *   http://www.apache.org/licenses/LICENSE-2.0
                                                    *
                                                    * Unless required by applicable law or agreed to in writing, software
                                                    * distributed under the License is distributed on an "AS IS" BASIS,
                                                    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                    * See the License for the specific language governing permissions and
                                                    * limitations under the License.
                                                    */var LOG_TAG$8="OnlineStateTracker",MAX_WATCH_STREAM_FAILURES=1,ONLINE_STATE_TIMEOUT_MS=1e3*10,OnlineStateTracker=/** @class */function(){function OnlineStateTracker(asyncQueue,onlineStateHandler){this.asyncQueue=asyncQueue;this.onlineStateHandler=onlineStateHandler;/** The current OnlineState. */this.state=OnlineState.Unknown;/**
                                       * A count of consecutive failures to open the stream. If it reaches the
                                       * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to
                                       * Offline.
                                       */this.watchStreamFailures=0;/**
                                   * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we
                                   * transition from OnlineState.Unknown to OnlineState.Offline without waiting
                                   * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).
                                   */this.onlineStateTimer=null;/**
                                   * Whether the client should log a warning message if it fails to connect to
                                   * the backend (initially true, cleared after a successful stream, or if we've
                                   * logged the message already).
                                   */this.shouldWarnClientIsOffline=!0}/**
     * Called by RemoteStore when a watch stream is started (including on each
     * backoff attempt).
     *
     * If this is the first attempt, it sets the OnlineState to Unknown and starts
     * the onlineStateTimer.
     */OnlineStateTracker.prototype.handleWatchStreamStart=function(){var _this=this;if(0===this.watchStreamFailures){this.setAndBroadcast(OnlineState.Unknown);assert$1(null===this.onlineStateTimer,"onlineStateTimer shouldn't be started yet");this.onlineStateTimer=this.asyncQueue.enqueueAfterDelay(TimerId.OnlineStateTimeout,ONLINE_STATE_TIMEOUT_MS,function(){_this.onlineStateTimer=null;assert$1(_this.state===OnlineState.Unknown,"Timer should be canceled if we transitioned to a different state.");_this.logClientOfflineWarningIfNecessary("Backend didn't respond within "+ONLINE_STATE_TIMEOUT_MS/1e3+" "+"seconds.");_this.setAndBroadcast(OnlineState.Offline);// NOTE: handleWatchStreamFailure() will continue to increment
// watchStreamFailures even though we are already marked Offline,
// but this is non-harmful.
return Promise.resolve()})}};/**
      * Updates our OnlineState as appropriate after the watch stream reports a
      * failure. The first failure moves us to the 'Unknown' state. We then may
      * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we
      * actually transition to the 'Offline' state.
      */OnlineStateTracker.prototype.handleWatchStreamFailure=function(error){if(this.state===OnlineState.Online){this.setAndBroadcast(OnlineState.Unknown);// To get to OnlineState.Online, set() must have been called which would
// have reset our heuristics.
assert$1(0===this.watchStreamFailures,"watchStreamFailures must be 0");assert$1(null===this.onlineStateTimer,"onlineStateTimer must be null")}else{this.watchStreamFailures++;if(this.watchStreamFailures>=MAX_WATCH_STREAM_FAILURES){this.clearOnlineStateTimer();this.logClientOfflineWarningIfNecessary("Connection failed "+MAX_WATCH_STREAM_FAILURES+" "+("times. Most recent error: "+error.toString()));this.setAndBroadcast(OnlineState.Offline)}}};/**
      * Explicitly sets the OnlineState to the specified state.
      *
      * Note that this resets our timers / failure counters, etc. used by our
      * Offline heuristics, so must not be used in place of
      * handleWatchStreamStart() and handleWatchStreamFailure().
      */OnlineStateTracker.prototype.set=function(newState){this.clearOnlineStateTimer();this.watchStreamFailures=0;if(newState===OnlineState.Online){// We've connected to watch at least once. Don't warn the developer
// about being offline going forward.
this.shouldWarnClientIsOffline=!1}this.setAndBroadcast(newState)};OnlineStateTracker.prototype.setAndBroadcast=function(newState){if(newState!==this.state){this.state=newState;this.onlineStateHandler(newState)}};OnlineStateTracker.prototype.logClientOfflineWarningIfNecessary=function(details){var message="Could not reach Cloud Firestore backend. "+details+"\n"+"This typically indicates that your device does not have a healthy "+"Internet connection at the moment. The client will operate in offline "+"mode until it is able to successfully connect to the backend.";if(this.shouldWarnClientIsOffline){error(message);this.shouldWarnClientIsOffline=!1}else{debug(LOG_TAG$8,message)}};OnlineStateTracker.prototype.clearOnlineStateTimer=function(){if(null!==this.onlineStateTimer){this.onlineStateTimer.cancel();this.onlineStateTimer=null}};return OnlineStateTracker}(),LOG_TAG$9="RemoteStore",MAX_PENDING_WRITES=10,RemoteStore=/** @class */function(){function RemoteStore(/**
                         * The local store, used to fill the write pipeline with outbound mutations.
                         */localStore,/** The client-side proxy for interacting with the backend. */datastore,asyncQueue,onlineStateHandler,connectivityMonitor){var _this=this;this.localStore=localStore;this.datastore=datastore;/**
                                 * A list of up to MAX_PENDING_WRITES writes that we have fetched from the
                                 * LocalStore via fillWritePipeline() and have or will send to the write
                                 * stream.
                                 *
                                 * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or
                                 * restart the write stream. When the stream is established the writes in the
                                 * pipeline will be sent in order.
                                 *
                                 * Writes remain in writePipeline until they are acknowledged by the backend
                                 * and thus will automatically be re-sent if the stream is interrupted /
                                 * restarted before they're acknowledged.
                                 *
                                 * Write responses from the backend are linked to their originating request
                                 * purely based on order, and so we can just shift() writes from the front of
                                 * the writePipeline as we receive responses.
                                 */this.writePipeline=[];/**
                              * A mapping of watched targets that the client cares about tracking and the
                              * user has explicitly called a 'listen' for this target.
                              *
                              * These targets may or may not have been sent to or acknowledged by the
                              * server. On re-establishing the listen stream, these targets should be sent
                              * to the server. The targets removed with unlistens are removed eagerly
                              * without waiting for confirmation from the listen stream.
                              */this.listenTargets={};this.watchChangeAggregator=null;/**
                                        * Set to true by enableNetwork() and false by disableNetwork() and indicates
                                        * the user-preferred network state.
                                        */this.networkEnabled=!1;this.isPrimary=!1;this.connectivityMonitor=connectivityMonitor;this.connectivityMonitor.addCallback(function(status){asyncQueue.enqueueAndForget(function(){return __awaiter(_this,void 0,void 0,function(){return __generator(this,function(_a){switch(_a.label){case 0:if(!this.canUseNetwork())return[3/*break*/,2];debug(LOG_TAG$9,"Restarting streams for network reachability change.");return[4/*yield*/,this.restartNetwork()];case 1:_a.sent();_a.label=2;case 2:return[2/*return*/];}})})})});this.onlineStateTracker=new OnlineStateTracker(asyncQueue,onlineStateHandler);// Create streams (but note they're not started yet).
this.watchStream=this.datastore.newPersistentWatchStream({onOpen:this.onWatchStreamOpen.bind(this),onClose:this.onWatchStreamClose.bind(this),onWatchChange:this.onWatchStreamChange.bind(this)});this.writeStream=this.datastore.newPersistentWriteStream({onOpen:this.onWriteStreamOpen.bind(this),onClose:this.onWriteStreamClose.bind(this),onHandshakeComplete:this.onWriteHandshakeComplete.bind(this),onMutationResult:this.onMutationResult.bind(this)})}/**
     * Starts up the remote store, creating streams, restoring state from
     * LocalStore, etc.
     */RemoteStore.prototype.start=function(){return this.enableNetwork()};/** Re-enables the network. Idempotent. */RemoteStore.prototype.enableNetwork=function(){return __awaiter(this,void 0,void 0,function(){var _a;return __generator(this,function(_b){switch(_b.label){case 0:this.networkEnabled=!0;if(!this.canUseNetwork())return[3/*break*/,3];_a=this.writeStream;return[4/*yield*/,this.localStore.getLastStreamToken()];case 1:_a.lastStreamToken=_b.sent();if(this.shouldStartWatchStream()){this.startWatchStream()}else{this.onlineStateTracker.set(OnlineState.Unknown)}// This will start the write stream if necessary.
return[4/*yield*/,this.fillWritePipeline()];case 2:// This will start the write stream if necessary.
_b.sent();_b.label=3;case 3:return[2/*return*/];}})})};/**
      * Temporarily disables the network. The network can be re-enabled using
      * enableNetwork().
      */RemoteStore.prototype.disableNetwork=function(){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(_a){switch(_a.label){case 0:this.networkEnabled=!1;return[4/*yield*/,this.disableNetworkInternal()];case 1:_a.sent();// Set the OnlineState to Offline so get()s return from cache, etc.
this.onlineStateTracker.set(OnlineState.Offline);return[2/*return*/];}})})};RemoteStore.prototype.disableNetworkInternal=function(){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(_a){switch(_a.label){case 0:return[4/*yield*/,this.writeStream.stop()];case 1:_a.sent();return[4/*yield*/,this.watchStream.stop()];case 2:_a.sent();if(0<this.writePipeline.length){debug(LOG_TAG$9,"Stopping write stream with "+this.writePipeline.length+" pending writes");this.writePipeline=[]}this.cleanUpWatchStreamState();return[2/*return*/];}})})};RemoteStore.prototype.shutdown=function(){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(_a){switch(_a.label){case 0:debug(LOG_TAG$9,"RemoteStore shutting down.");this.networkEnabled=!1;return[4/*yield*/,this.disableNetworkInternal()];case 1:_a.sent();this.connectivityMonitor.shutdown();// Set the OnlineState to Unknown (rather than Offline) to avoid potentially
// triggering spurious listener events with cached data, etc.
this.onlineStateTracker.set(OnlineState.Unknown);return[2/*return*/];}})})};/** Starts new listen for the given query. Uses resume token if provided */RemoteStore.prototype.listen=function(queryData){assert$1(!contains$2(this.listenTargets,queryData.targetId),"listen called with duplicate targetId!");// Mark this as something the client is currently listening for.
this.listenTargets[queryData.targetId]=queryData;if(this.shouldStartWatchStream()){// The listen will be sent in onWatchStreamOpen
this.startWatchStream()}else if(this.watchStream.isOpen()){this.sendWatchRequest(queryData)}};/** Removes the listen from server */RemoteStore.prototype.unlisten=function(targetId){assert$1(contains$2(this.listenTargets,targetId),"unlisten called without assigned target ID!");delete this.listenTargets[targetId];if(this.watchStream.isOpen()){this.sendUnwatchRequest(targetId)}if(isEmpty$1(this.listenTargets)){if(this.watchStream.isOpen()){this.watchStream.markIdle()}else if(this.canUseNetwork()){// Revert to OnlineState.Unknown if the watch stream is not open and we
// have no listeners, since without any listens to send we cannot
// confirm if the stream is healthy and upgrade to OnlineState.Online.
this.onlineStateTracker.set(OnlineState.Unknown)}}};/** {@link TargetMetadataProvider.getQueryDataForTarget} */RemoteStore.prototype.getQueryDataForTarget=function(targetId){return this.listenTargets[targetId]||null};/** {@link TargetMetadataProvider.getRemoteKeysForTarget} */RemoteStore.prototype.getRemoteKeysForTarget=function(targetId){return this.syncEngine.getRemoteKeysForTarget(targetId)};/**
      * We need to increment the the expected number of pending responses we're due
      * from watch so we wait for the ack to process any messages from this target.
      */RemoteStore.prototype.sendWatchRequest=function(queryData){this.watchChangeAggregator.recordPendingTargetRequest(queryData.targetId);this.watchStream.watch(queryData)};/**
      * We need to increment the expected number of pending responses we're due
      * from watch so we wait for the removal on the server before we process any
      * messages from this target.
      */RemoteStore.prototype.sendUnwatchRequest=function(targetId){this.watchChangeAggregator.recordPendingTargetRequest(targetId);this.watchStream.unwatch(targetId)};RemoteStore.prototype.startWatchStream=function(){assert$1(this.shouldStartWatchStream(),"startWatchStream() called when shouldStartWatchStream() is false.");this.watchChangeAggregator=new WatchChangeAggregator(this);this.watchStream.start();this.onlineStateTracker.handleWatchStreamStart()};/**
      * Returns whether the watch stream should be started because it's necessary
      * and has not yet been started.
      */RemoteStore.prototype.shouldStartWatchStream=function(){return this.canUseNetwork()&&!this.watchStream.isStarted()&&!isEmpty$1(this.listenTargets)};RemoteStore.prototype.canUseNetwork=function(){return this.isPrimary&&this.networkEnabled};RemoteStore.prototype.cleanUpWatchStreamState=function(){this.watchChangeAggregator=null};RemoteStore.prototype.onWatchStreamOpen=function(){return __awaiter(this,void 0,void 0,function(){var _this=this;return __generator(this,function(_a){forEachNumber(this.listenTargets,function(targetId,queryData){_this.sendWatchRequest(queryData)});return[2/*return*/]})})};RemoteStore.prototype.onWatchStreamClose=function(error){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(_a){if(error===void 0){// Graceful stop (due to stop() or idle timeout). Make sure that's
// desirable.
assert$1(!this.shouldStartWatchStream(),"Watch stream was stopped gracefully while still needed.")}this.cleanUpWatchStreamState();// If we still need the watch stream, retry the connection.
if(this.shouldStartWatchStream()){this.onlineStateTracker.handleWatchStreamFailure(error);this.startWatchStream()}else{// No need to restart watch stream because there are no active targets.
// The online state is set to unknown because there is no active attempt
// at establishing a connection
this.onlineStateTracker.set(OnlineState.Unknown)}return[2/*return*/]})})};RemoteStore.prototype.onWatchStreamChange=function(watchChange,snapshotVersion){return __awaiter(this,void 0,void 0,function(){var lastRemoteSnapshotVersion;return __generator(this,function(_a){switch(_a.label){case 0:// Mark the client as online since we got a message from the server
this.onlineStateTracker.set(OnlineState.Online);if(watchChange instanceof WatchTargetChange&&watchChange.state===WatchTargetChangeState.Removed&&watchChange.cause){// There was an error on a target, don't wait for a consistent snapshot
// to raise events
return[2/*return*/,this.handleTargetError(watchChange)]}if(watchChange instanceof DocumentWatchChange){this.watchChangeAggregator.handleDocumentChange(watchChange)}else if(watchChange instanceof ExistenceFilterChange){this.watchChangeAggregator.handleExistenceFilter(watchChange)}else{assert$1(watchChange instanceof WatchTargetChange,"Expected watchChange to be an instance of WatchTargetChange");this.watchChangeAggregator.handleTargetChange(watchChange)}if(!!snapshotVersion.isEqual(SnapshotVersion.MIN))return[3/*break*/,3];return[4/*yield*/,this.localStore.getLastRemoteSnapshotVersion()];case 1:lastRemoteSnapshotVersion=_a.sent();if(!(0<=snapshotVersion.compareTo(lastRemoteSnapshotVersion)))return[3/*break*/,3];// We have received a target change with a global snapshot if the snapshot
// version is not equal to SnapshotVersion.MIN.
return[4/*yield*/,this.raiseWatchSnapshot(snapshotVersion)];case 2:// We have received a target change with a global snapshot if the snapshot
// version is not equal to SnapshotVersion.MIN.
_a.sent();_a.label=3;case 3:return[2/*return*/];}})})};/**
      * Takes a batch of changes from the Datastore, repackages them as a
      * RemoteEvent, and passes that on to the listener, which is typically the
      * SyncEngine.
      */RemoteStore.prototype.raiseWatchSnapshot=function(snapshotVersion){var _this=this;assert$1(!snapshotVersion.isEqual(SnapshotVersion.MIN),"Can't raise event for unknown SnapshotVersion");var remoteEvent=this.watchChangeAggregator.createRemoteEvent(snapshotVersion);// Update in-memory resume tokens. LocalStore will update the
// persistent view of these when applying the completed RemoteEvent.
forEachNumber(remoteEvent.targetChanges,function(targetId,change){if(0<change.resumeToken.length){var queryData=_this.listenTargets[targetId];// A watched target might have been removed already.
if(queryData){_this.listenTargets[targetId]=queryData.copy({resumeToken:change.resumeToken,snapshotVersion:snapshotVersion})}}});// Re-establish listens for the targets that have been invalidated by
// existence filter mismatches.
remoteEvent.targetMismatches.forEach(function(targetId){var queryData=_this.listenTargets[targetId];if(!queryData){// A watched target might have been removed already.
return}// Clear the resume token for the query, since we're in a known mismatch
// state.
_this.listenTargets[targetId]=queryData.copy({resumeToken:emptyByteString()});// Cause a hard reset by unwatching and rewatching immediately, but
// deliberately don't send a resume token so that we get a full update.
_this.sendUnwatchRequest(targetId);// Mark the query we send as being on behalf of an existence filter
// mismatch, but don't actually retain that in listenTargets. This ensures
// that we flag the first re-listen this way without impacting future
// listens of this target (that might happen e.g. on reconnect).
var requestQueryData=new QueryData(queryData.query,targetId,QueryPurpose.ExistenceFilterMismatch,queryData.sequenceNumber);_this.sendWatchRequest(requestQueryData)});// Finally raise remote event
return this.syncEngine.applyRemoteEvent(remoteEvent)};/** Handles an error on a target */RemoteStore.prototype.handleTargetError=function(watchChange){var _this=this;assert$1(!!watchChange.cause,"Handling target error without a cause");var error=watchChange.cause,promiseChain=Promise.resolve();watchChange.targetIds.forEach(function(targetId){promiseChain=promiseChain.then(function(){return __awaiter(_this,void 0,void 0,function(){return __generator(this,function(_a){// A watched target might have been removed already.
if(contains$2(this.listenTargets,targetId)){delete this.listenTargets[targetId];this.watchChangeAggregator.removeTarget(targetId);return[2/*return*/,this.syncEngine.rejectListen(targetId,error)]}return[2/*return*/]})})})});return promiseChain};/**
      * Attempts to fill our write pipeline with writes from the LocalStore.
      *
      * Called internally to bootstrap or refill the write pipeline and by
      * SyncEngine whenever there are new mutations to process.
      *
      * Starts the write stream if necessary.
      */RemoteStore.prototype.fillWritePipeline=function(){return __awaiter(this,void 0,void 0,function(){var lastBatchIdRetrieved,batch;return __generator(this,function(_a){switch(_a.label){case 0:if(!this.canAddToWritePipeline())return[3/*break*/,4];lastBatchIdRetrieved=0<this.writePipeline.length?this.writePipeline[this.writePipeline.length-1].batchId:BATCHID_UNKNOWN;return[4/*yield*/,this.localStore.nextMutationBatch(lastBatchIdRetrieved)];case 1:batch=_a.sent();if(!(null===batch))return[3/*break*/,2];if(0===this.writePipeline.length){this.writeStream.markIdle()}return[3/*break*/,4];case 2:this.addToWritePipeline(batch);return[4/*yield*/,this.fillWritePipeline()];case 3:_a.sent();_a.label=4;case 4:if(this.shouldStartWriteStream()){this.startWriteStream()}return[2/*return*/];}})})};/**
      * Returns true if we can add to the write pipeline (i.e. the network is
      * enabled and the write pipeline is not full).
      */RemoteStore.prototype.canAddToWritePipeline=function(){return this.canUseNetwork()&&this.writePipeline.length<MAX_PENDING_WRITES};// For testing
RemoteStore.prototype.outstandingWrites=function(){return this.writePipeline.length};/**
      * Queues additional writes to be sent to the write stream, sending them
      * immediately if the write stream is established.
      */RemoteStore.prototype.addToWritePipeline=function(batch){assert$1(this.canAddToWritePipeline(),"addToWritePipeline called when pipeline is full");this.writePipeline.push(batch);if(this.writeStream.isOpen()&&this.writeStream.handshakeComplete){this.writeStream.writeMutations(batch.mutations)}};RemoteStore.prototype.shouldStartWriteStream=function(){return this.canUseNetwork()&&!this.writeStream.isStarted()&&0<this.writePipeline.length};RemoteStore.prototype.startWriteStream=function(){assert$1(this.shouldStartWriteStream(),"startWriteStream() called when shouldStartWriteStream() is false.");this.writeStream.start()};RemoteStore.prototype.onWriteStreamOpen=function(){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(_a){this.writeStream.writeHandshake();return[2/*return*/]})})};RemoteStore.prototype.onWriteHandshakeComplete=function(){var _this=this;// Record the stream token.
return this.localStore.setLastStreamToken(this.writeStream.lastStreamToken).then(function(){// Send the write pipeline now that the stream is established.
for(var _i=0,_a=_this.writePipeline,batch;_i<_a.length;_i++){batch=_a[_i];_this.writeStream.writeMutations(batch.mutations)}}).catch(ignoreIfPrimaryLeaseLoss)};RemoteStore.prototype.onMutationResult=function(commitVersion,results){var _this=this;// This is a response to a write containing mutations and should be
// correlated to the first write in our write pipeline.
assert$1(0<this.writePipeline.length,"Got result for empty write pipeline");var batch=this.writePipeline.shift(),success=MutationBatchResult.from(batch,commitVersion,results,this.writeStream.lastStreamToken);return this.syncEngine.applySuccessfulWrite(success).then(function(){// It's possible that with the completion of this mutation another
// slot has freed up.
return _this.fillWritePipeline()})};RemoteStore.prototype.onWriteStreamClose=function(error){return __awaiter(this,void 0,void 0,function(){var errorHandling,_this=this;return __generator(this,function(_a){if(error===void 0){// Graceful stop (due to stop() or idle timeout). Make sure that's
// desirable.
assert$1(!this.shouldStartWriteStream(),"Write stream was stopped gracefully while still needed.")}// If the write stream closed due to an error, invoke the error callbacks if
// there are pending writes.
if(error&&0<this.writePipeline.length){errorHandling=void 0;if(this.writeStream.handshakeComplete){// This error affects the actual write.
errorHandling=this.handleWriteError(error)}else{// If there was an error before the handshake has finished, it's
// possible that the server is unable to process the stream token
// we're sending. (Perhaps it's too old?)
errorHandling=this.handleHandshakeError(error)}return[2/*return*/,errorHandling.then(function(){// The write stream might have been started by refilling the write
// pipeline for failed writes
if(_this.shouldStartWriteStream()){_this.startWriteStream()}})]}return[2/*return*/]})})};RemoteStore.prototype.handleHandshakeError=function(error){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(_a){// Reset the token if it's a permanent error, signaling the write stream is
// no longer valid. Note that the handshake does not count as a write: see
// comments on isPermanentWriteError for details.
if(isPermanentError(error.code)){debug(LOG_TAG$9,"RemoteStore error before completed handshake; resetting stream token: ",this.writeStream.lastStreamToken);this.writeStream.lastStreamToken=emptyByteString();return[2/*return*/,this.localStore.setLastStreamToken(emptyByteString()).catch(ignoreIfPrimaryLeaseLoss)]}return[2/*return*/]})})};RemoteStore.prototype.handleWriteError=function(error){return __awaiter(this,void 0,void 0,function(){var batch,_this=this;return __generator(this,function(_a){// Only handle permanent errors here. If it's transient, just let the retry
// logic kick in.
if(isPermanentWriteError(error.code)){batch=this.writePipeline.shift();// In this case it's also unlikely that the server itself is melting
// down -- this was just a bad request so inhibit backoff on the next
// restart.
this.writeStream.inhibitBackoff();return[2/*return*/,this.syncEngine.rejectFailedWrite(batch.batchId,error).then(function(){// It's possible that with the completion of this mutation
// another slot has freed up.
return _this.fillWritePipeline()})]}return[2/*return*/]})})};RemoteStore.prototype.createTransaction=function(){return new Transaction(this.datastore)};RemoteStore.prototype.restartNetwork=function(){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(_a){switch(_a.label){case 0:this.networkEnabled=!1;return[4/*yield*/,this.disableNetworkInternal()];case 1:_a.sent();this.onlineStateTracker.set(OnlineState.Unknown);return[4/*yield*/,this.enableNetwork()];case 2:_a.sent();return[2/*return*/];}})})};RemoteStore.prototype.handleCredentialChange=function(){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(_a){switch(_a.label){case 0:if(!this.canUseNetwork())return[3/*break*/,2];// Tear down and re-create our network streams. This will ensure we get a fresh auth token
// for the new user and re-fill the write pipeline with new mutations from the LocalStore
// (since mutations are per-user).
debug(LOG_TAG$9,"RemoteStore restarting streams for new credential");return[4/*yield*/,this.restartNetwork()];case 1:_a.sent();_a.label=2;case 2:return[2/*return*/];}})})};/**
      * Toggles the network state when the client gains or loses its primary lease.
      */RemoteStore.prototype.applyPrimaryState=function(isPrimary){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(_a){switch(_a.label){case 0:this.isPrimary=isPrimary;if(!(isPrimary&&this.networkEnabled))return[3/*break*/,2];return[4/*yield*/,this.enableNetwork()];case 1:_a.sent();return[3/*break*/,4];case 2:if(!!isPrimary)return[3/*break*/,4];return[4/*yield*/,this.disableNetworkInternal()];case 3:_a.sent();this.onlineStateTracker.set(OnlineState.Unknown);_a.label=4;case 4:return[2/*return*/];}})})};return RemoteStore}(),QueryListenersInfo=/** @class */function(){function QueryListenersInfo(){this.listeners=[]}return QueryListenersInfo}(),EventManager=/** @class */function(){function EventManager(syncEngine){this.syncEngine=syncEngine;this.queries=new ObjectMap(function(q){return q.canonicalId()});this.onlineState=OnlineState.Unknown;this.syncEngine.subscribe(this)}EventManager.prototype.listen=function(listener){var query=listener.query,firstListen=!1,queryInfo=this.queries.get(query);if(!queryInfo){firstListen=!0;queryInfo=new QueryListenersInfo;this.queries.set(query,queryInfo)}queryInfo.listeners.push(listener);listener.applyOnlineStateChange(this.onlineState);if(queryInfo.viewSnap)listener.onViewSnapshot(queryInfo.viewSnap);if(firstListen){return this.syncEngine.listen(query).then(function(targetId){queryInfo.targetId=targetId;return targetId})}else{return Promise.resolve(queryInfo.targetId)}};EventManager.prototype.unlisten=function(listener){return __awaiter(this,void 0,void 0,function(){var query,lastListen,queryInfo,i;return __generator(this,function(_a){query=listener.query;lastListen=!1;queryInfo=this.queries.get(query);if(queryInfo){i=queryInfo.listeners.indexOf(listener);if(0<=i){queryInfo.listeners.splice(i,1);lastListen=0===queryInfo.listeners.length}}if(lastListen){this.queries.delete(query);return[2/*return*/,this.syncEngine.unlisten(query)]}return[2/*return*/]})})};EventManager.prototype.onWatchChange=function(viewSnaps){for(var _i=0,viewSnaps_1=viewSnaps;_i<viewSnaps_1.length;_i++){var viewSnap=viewSnaps_1[_i],query=viewSnap.query,queryInfo=this.queries.get(query);if(queryInfo){for(var _a=0,_b=queryInfo.listeners,listener;_a<_b.length;_a++){listener=_b[_a];listener.onViewSnapshot(viewSnap)}queryInfo.viewSnap=viewSnap}}};EventManager.prototype.onWatchError=function(query,error){var queryInfo=this.queries.get(query);if(queryInfo){for(var _i=0,_a=queryInfo.listeners,listener;_i<_a.length;_i++){listener=_a[_i];listener.onError(error)}}// Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()
// after an error.
this.queries.delete(query)};EventManager.prototype.onOnlineStateChange=function(onlineState){this.onlineState=onlineState;this.queries.forEach(function(_,queryInfo){for(var _i=0,_a=queryInfo.listeners,listener;_i<_a.length;_i++){listener=_a[_i];listener.applyOnlineStateChange(onlineState)}})};return EventManager}(),QueryListener=/** @class */function(){function QueryListener(query,queryObserver,options){this.query=query;this.queryObserver=queryObserver;/**
                                         * Initial snapshots (e.g. from cache) may not be propagated to the wrapped
                                         * observer. This flag is set to true once we've actually raised an event.
                                         */this.raisedInitialEvent=!1;this.onlineState=OnlineState.Unknown;this.options=options||{}}QueryListener.prototype.onViewSnapshot=function(snap){assert$1(0<snap.docChanges.length||snap.syncStateChanged,"We got a new snapshot with no changes?");if(!this.options.includeMetadataChanges){// Remove the metadata only changes.
for(var docChanges=[],_i=0,_a=snap.docChanges,docChange;_i<_a.length;_i++){docChange=_a[_i];if(docChange.type!==ChangeType.Metadata){docChanges.push(docChange)}}snap=new ViewSnapshot(snap.query,snap.docs,snap.oldDocs,docChanges,snap.mutatedKeys,snap.fromCache,snap.syncStateChanged,!0)}if(!this.raisedInitialEvent){if(this.shouldRaiseInitialEvent(snap,this.onlineState)){this.raiseInitialEvent(snap)}}else if(this.shouldRaiseEvent(snap)){this.queryObserver.next(snap)}this.snap=snap};QueryListener.prototype.onError=function(error){this.queryObserver.error(error)};QueryListener.prototype.applyOnlineStateChange=function(onlineState){this.onlineState=onlineState;if(this.snap&&!this.raisedInitialEvent&&this.shouldRaiseInitialEvent(this.snap,onlineState)){this.raiseInitialEvent(this.snap)}};QueryListener.prototype.shouldRaiseInitialEvent=function(snap,onlineState){assert$1(!this.raisedInitialEvent,"Determining whether to raise first event but already had first event");// Always raise the first event when we're synced
if(!snap.fromCache){return!0}// NOTE: We consider OnlineState.Unknown as online (it should become Offline
// or Online if we wait long enough).
var maybeOnline=onlineState!==OnlineState.Offline;// Don't raise the event if we're online, aren't synced yet (checked
// above) and are waiting for a sync.
if(this.options.waitForSyncWhenOnline&&maybeOnline){assert$1(snap.fromCache,"Waiting for sync, but snapshot is not from cache");return!1}// Raise data from cache if we have any documents or we are offline
return!snap.docs.isEmpty()||onlineState===OnlineState.Offline};QueryListener.prototype.shouldRaiseEvent=function(snap){// We don't need to handle includeDocumentMetadataChanges here because
// the Metadata only changes have already been stripped out if needed.
// At this point the only changes we will see are the ones we should
// propagate.
if(0<snap.docChanges.length){return!0}var hasPendingWritesChanged=this.snap&&this.snap.hasPendingWrites!==snap.hasPendingWrites;if(snap.syncStateChanged||hasPendingWritesChanged){return!0===this.options.includeMetadataChanges}// Generally we should have hit one of the cases above, but it's possible
// to get here if there were only metadata docChanges and they got
// stripped out.
return!1};QueryListener.prototype.raiseInitialEvent=function(snap){assert$1(!this.raisedInitialEvent,"Trying to raise initial events for second time");snap=ViewSnapshot.fromInitialDocuments(snap.query,snap.docs,snap.mutatedKeys,snap.fromCache);this.raisedInitialEvent=!0;this.queryObserver.next(snap)};return QueryListener}(),LocalViewChanges=/** @class */function(){function LocalViewChanges(targetId,addedKeys,removedKeys){this.targetId=targetId;this.addedKeys=addedKeys;this.removedKeys=removedKeys}LocalViewChanges.fromSnapshot=function(targetId,viewSnapshot){for(var addedKeys=documentKeySet(),removedKeys=documentKeySet(),_i=0,_a=viewSnapshot.docChanges,docChange;_i<_a.length;_i++){docChange=_a[_i];switch(docChange.type){case ChangeType.Added:addedKeys=addedKeys.add(docChange.doc.key);break;case ChangeType.Removed:removedKeys=removedKeys.add(docChange.doc.key);break;default:// do nothing
}}return new LocalViewChanges(targetId,addedKeys,removedKeys)};return LocalViewChanges}(),AddedLimboDocument=/** @class */function(){function AddedLimboDocument(key){this.key=key}return AddedLimboDocument}(),RemovedLimboDocument=/** @class */function(){function RemovedLimboDocument(key){this.key=key}return RemovedLimboDocument}(),View=/** @class */function(){function View(query,/** Documents included in the remote target */_syncedDocuments){this.query=query;this._syncedDocuments=_syncedDocuments;this.syncState=null;/**
                            * A flag whether the view is current with the backend. A view is considered
                            * current after it has seen the current flag from the backend and did not
                            * lose consistency within the watch stream (e.g. because of an existence
                            * filter mismatch).
                            */this.current=!1;/** Documents in the view but not in the remote target */this.limboDocuments=documentKeySet();/** Document Keys that have local changes */this.mutatedKeys=documentKeySet();this.documentSet=new DocumentSet(query.docComparator.bind(query))}Object.defineProperty(View.prototype,"syncedDocuments",{/**
     * The set of remote documents that the server has told us belongs to the target associated with
     * this view.
     */get:function(){return this._syncedDocuments},enumerable:!0,configurable:!0});/**
       * Iterates over a set of doc changes, applies the query limit, and computes
       * what the new results should be, what the changes were, and whether we may
       * need to go back to the local cache for more results. Does not make any
       * changes to the view.
       * @param docChanges The doc changes to apply to this view.
       * @param previousChanges If this is being called with a refill, then start
       *        with this set of docs and changes instead of the current view.
       * @return a new set of docs, changes, and refill flag.
       */View.prototype.computeDocChanges=function(docChanges,previousChanges){var _this=this,changeSet=previousChanges?previousChanges.changeSet:new DocumentChangeSet,oldDocumentSet=previousChanges?previousChanges.documentSet:this.documentSet,newMutatedKeys=previousChanges?previousChanges.mutatedKeys:this.mutatedKeys,newDocumentSet=oldDocumentSet,needsRefill=!1,lastDocInLimit=this.query.hasLimit()&&oldDocumentSet.size===this.query.limit?oldDocumentSet.last():null;docChanges.inorderTraversal(function(key,newMaybeDoc){var oldDoc=oldDocumentSet.get(key),newDoc=newMaybeDoc instanceof Document$1?newMaybeDoc:null;if(newDoc){assert$1(key.isEqual(newDoc.key),"Mismatching keys found in document changes: "+key+" != "+newDoc.key);newDoc=_this.query.matches(newDoc)?newDoc:null}var oldDocHadPendingMutations=oldDoc?_this.mutatedKeys.has(oldDoc.key):!1,newDocHasPendingMutations=newDoc?newDoc.hasLocalMutations||// We only consider committed mutations for documents that were
// mutated during the lifetime of the view.
_this.mutatedKeys.has(newDoc.key)&&newDoc.hasCommittedMutations:!1,changeApplied=!1;// Calculate change
if(oldDoc&&newDoc){var docsEqual=oldDoc.data.isEqual(newDoc.data);if(!docsEqual){if(!_this.shouldWaitForSyncedDocument(oldDoc,newDoc)){changeSet.track({type:ChangeType.Modified,doc:newDoc});changeApplied=!0;if(lastDocInLimit&&0<_this.query.docComparator(newDoc,lastDocInLimit)){// This doc moved from inside the limit to after the limit.
// That means there may be some doc in the local cache that's
// actually less than this one.
needsRefill=!0}}}else if(oldDocHadPendingMutations!==newDocHasPendingMutations){changeSet.track({type:ChangeType.Metadata,doc:newDoc});changeApplied=!0}}else if(!oldDoc&&newDoc){changeSet.track({type:ChangeType.Added,doc:newDoc});changeApplied=!0}else if(oldDoc&&!newDoc){changeSet.track({type:ChangeType.Removed,doc:oldDoc});changeApplied=!0;if(lastDocInLimit){// A doc was removed from a full limit query. We'll need to
// requery from the local cache to see if we know about some other
// doc that should be in the results.
needsRefill=!0}}if(changeApplied){if(newDoc){newDocumentSet=newDocumentSet.add(newDoc);if(newDocHasPendingMutations){newMutatedKeys=newMutatedKeys.add(key)}else{newMutatedKeys=newMutatedKeys.delete(key)}}else{newDocumentSet=newDocumentSet.delete(key);newMutatedKeys=newMutatedKeys.delete(key)}}});if(this.query.hasLimit()){while(newDocumentSet.size>this.query.limit){var oldDoc=newDocumentSet.last();newDocumentSet=newDocumentSet.delete(oldDoc.key);newMutatedKeys=newMutatedKeys.delete(oldDoc.key);changeSet.track({type:ChangeType.Removed,doc:oldDoc})}}assert$1(!needsRefill||!previousChanges,"View was refilled using docs that themselves needed refilling.");return{documentSet:newDocumentSet,changeSet:changeSet,needsRefill:needsRefill,mutatedKeys:newMutatedKeys}};View.prototype.shouldWaitForSyncedDocument=function(oldDoc,newDoc){// We suppress the initial change event for documents that were modified as
// part of a write acknowledgment (e.g. when the value of a server transform
// is applied) as Watch will send us the same document again.
// By suppressing the event, we only raise two user visible events (one with
// `hasPendingWrites` and the final state of the document) instead of three
// (one with `hasPendingWrites`, the modified document with
// `hasPendingWrites` and the final state of the document).
return oldDoc.hasLocalMutations&&newDoc.hasCommittedMutations&&!newDoc.hasLocalMutations};/**
      * Updates the view with the given ViewDocumentChanges and optionally updates
      * limbo docs and sync state from the provided target change.
      * @param docChanges The set of changes to make to the view's docs.
      * @param updateLimboDocuments Whether to update limbo documents based on this
      *        change.
      * @param targetChange A target change to apply for computing limbo docs and
      *        sync state.
      * @return A new ViewChange with the given docs, changes, and sync state.
      */ // PORTING NOTE: The iOS/Android clients always compute limbo document changes.
View.prototype.applyChanges=function(docChanges,updateLimboDocuments,targetChange){var _this=this;assert$1(!docChanges.needsRefill,"Cannot apply changes that need a refill");var oldDocs=this.documentSet;this.documentSet=docChanges.documentSet;this.mutatedKeys=docChanges.mutatedKeys;// Sort changes based on type and query comparator
var changes=docChanges.changeSet.getChanges();changes.sort(function(c1,c2){return compareChangeType(c1.type,c2.type)||_this.query.docComparator(c1.doc,c2.doc)});this.applyTargetChange(targetChange);var limboChanges=updateLimboDocuments?this.updateLimboDocuments():[],synced=0===this.limboDocuments.size&&this.current,newSyncState=synced?SyncState.Synced:SyncState.Local,syncStateChanged=newSyncState!==this.syncState;this.syncState=newSyncState;if(0===changes.length&&!syncStateChanged){// no changes
return{limboChanges:limboChanges}}else{var snap=new ViewSnapshot(this.query,docChanges.documentSet,oldDocs,changes,docChanges.mutatedKeys,newSyncState===SyncState.Local,syncStateChanged,!1);return{snapshot:snap,limboChanges:limboChanges}}};/**
      * Applies an OnlineState change to the view, potentially generating a
      * ViewChange if the view's syncState changes as a result.
      */View.prototype.applyOnlineStateChange=function(onlineState){if(this.current&&onlineState===OnlineState.Offline){// If we're offline, set `current` to false and then call applyChanges()
// to refresh our syncState and generate a ViewChange as appropriate. We
// are guaranteed to get a new TargetChange that sets `current` back to
// true once the client is back online.
this.current=!1;return this.applyChanges({documentSet:this.documentSet,changeSet:new DocumentChangeSet,mutatedKeys:this.mutatedKeys,needsRefill:!1},!1)}else{// No effect, just return a no-op ViewChange.
return{limboChanges:[]}}};/**
      * Returns whether the doc for the given key should be in limbo.
      */View.prototype.shouldBeInLimbo=function(key){// If the remote end says it's part of this query, it's not in limbo.
if(this._syncedDocuments.has(key)){return!1}// The local store doesn't think it's a result, so it shouldn't be in limbo.
if(!this.documentSet.has(key)){return!1}// If there are local changes to the doc, they might explain why the server
// doesn't know that it's part of the query. So don't put it in limbo.
// TODO(klimt): Ideally, we would only consider changes that might actually
// affect this specific query.
if(this.documentSet.get(key).hasLocalMutations){return!1}// Everything else is in limbo.
return!0};/**
      * Updates syncedDocuments, current, and limbo docs based on the given change.
      * Returns the list of changes to which docs are in limbo.
      */View.prototype.applyTargetChange=function(targetChange){var _this=this;if(targetChange){targetChange.addedDocuments.forEach(function(key){return _this._syncedDocuments=_this._syncedDocuments.add(key)});targetChange.modifiedDocuments.forEach(function(key){return assert$1(_this._syncedDocuments.has(key),"Modified document "+key+" not found in view.")});targetChange.removedDocuments.forEach(function(key){return _this._syncedDocuments=_this._syncedDocuments.delete(key)});this.current=targetChange.current}};View.prototype.updateLimboDocuments=function(){var _this=this;// We can only determine limbo documents when we're in-sync with the server.
if(!this.current){return[]}// TODO(klimt): Do this incrementally so that it's not quadratic when
// updating many documents.
var oldLimboDocuments=this.limboDocuments;this.limboDocuments=documentKeySet();this.documentSet.forEach(function(doc){if(_this.shouldBeInLimbo(doc.key)){_this.limboDocuments=_this.limboDocuments.add(doc.key)}});// Diff the new limbo docs with the old limbo docs.
var changes=[];oldLimboDocuments.forEach(function(key){if(!_this.limboDocuments.has(key)){changes.push(new RemovedLimboDocument(key))}});this.limboDocuments.forEach(function(key){if(!oldLimboDocuments.has(key)){changes.push(new AddedLimboDocument(key))}});return changes};/**
      * Update the in-memory state of the current view with the state read from
      * persistence.
      *
      * We update the query view whenever a client's primary status changes:
      * - When a client transitions from primary to secondary, it can miss
      *   LocalStorage updates and its query views may temporarily not be
      *   synchronized with the state on disk.
      * - For secondary to primary transitions, the client needs to update the list
      *   of `syncedDocuments` since secondary clients update their query views
      *   based purely on synthesized RemoteEvents.
      *
      * @param localDocs - The documents that match the query according to the
      * LocalStore.
      * @param remoteKeys - The keys of the documents that match the query
      * according to the backend.
      *
      * @return The ViewChange that resulted from this synchronization.
      */ // PORTING NOTE: Multi-tab only.
View.prototype.synchronizeWithPersistedState=function(localDocs,remoteKeys){this._syncedDocuments=remoteKeys;this.limboDocuments=documentKeySet();var docChanges=this.computeDocChanges(localDocs);return this.applyChanges(docChanges,!0)};/**
      * Returns a view snapshot as if this query was just listened to. Contains
      * a document add for every existing document and the `fromCache` and
      * `hasPendingWrites` status of the already established view.
      */ // PORTING NOTE: Multi-tab only.
View.prototype.computeInitialSnapshot=function(){return ViewSnapshot.fromInitialDocuments(this.query,this.documentSet,this.mutatedKeys,this.syncState===SyncState.Local)};return View}();// To deal with transient failures, we allow multiple stream attempts before
// giving up and transitioning from OnlineState.Unknown to Offline.
// TODO(mikelehen): This used to be set to 2 as a mitigation for b/66228394.
// @jdimond thinks that bug is sufficiently fixed so that we can set this back
// to 1. If that works okay, we could potentially remove this logic entirely.
function compareChangeType(c1,c2){var order=function(change){switch(change){case ChangeType.Added:return 1;case ChangeType.Modified:return 2;case ChangeType.Metadata:// A metadata change is converted to a modified change at the public
// api layer.  Since we sort by document key and then change type,
// metadata and modified changes must be sorted equivalently.
return 2;case ChangeType.Removed:return 0;default:return fail("Unknown ChangeType: "+change);}};return order(c1)-order(c2)}/**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */var LOG_TAG$a="SyncEngine",QueryView=/** @class */function(){function QueryView(/**
                       * The query itself.
                       */query,/**
                                 * The target number created by the client that is used in the watch
                                 * stream to identify this query.
                                 */targetId,/**
                                              * The view is responsible for computing the final merged truth of what
                                              * docs are in the query. It gets notified of local and remote changes,
                                              * and applies the query filters and limits to determine the most correct
                                              * possible results.
                                              */view){this.query=query;this.targetId=targetId;this.view=view}return QueryView}(),LimboResolution=/** @class */function(){function LimboResolution(key){this.key=key}return LimboResolution}(),SyncEngine=/** @class */function(){function SyncEngine(localStore,remoteStore,// PORTING NOTE: Manages state synchronization in multi-tab environments.
sharedClientState,currentUser){this.localStore=localStore;this.remoteStore=remoteStore;this.sharedClientState=sharedClientState;this.currentUser=currentUser;this.syncEngineListener=null;this.queryViewsByQuery=new ObjectMap(function(q){return q.canonicalId()});this.queryViewsByTarget={};this.limboTargetsByKey=new SortedMap(DocumentKey.comparator);this.limboResolutionsByTarget={};this.limboDocumentRefs=new ReferenceSet;/** Stores user completion handlers, indexed by User and BatchId. */this.mutationUserCallbacks={};this.limboTargetIdGenerator=TargetIdGenerator.forSyncEngine();// The primary state is set to `true` or `false` immediately after Firestore
// startup. In the interim, a client should only be considered primary if
// `isPrimary` is true.
this.isPrimary=void 0;this.onlineState=OnlineState.Unknown}Object.defineProperty(SyncEngine.prototype,"isPrimaryClient",{// Only used for testing.
get:function(){return!0===this.isPrimary},enumerable:!0,configurable:!0});/** Subscribes to SyncEngine notifications. Has to be called exactly once. */SyncEngine.prototype.subscribe=function(syncEngineListener){assert$1(null!==syncEngineListener,"SyncEngine listener cannot be null");assert$1(null===this.syncEngineListener,"SyncEngine already has a subscriber.");this.syncEngineListener=syncEngineListener};/**
      * Initiates the new listen, resolves promise when listen enqueued to the
      * server. All the subsequent view snapshots or errors are sent to the
      * subscribed handlers. Returns the targetId of the query.
      */SyncEngine.prototype.listen=function(query){return __awaiter(this,void 0,void 0,function(){var targetId,viewSnapshot,queryView,queryData,status_1;return __generator(this,function(_a){switch(_a.label){case 0:this.assertSubscribed("listen()");queryView=this.queryViewsByQuery.get(query);if(!queryView)return[3/*break*/,1];// PORTING NOTE: With Multi-Tab Web, it is possible that a query view
// already exists when EventManager calls us for the first time. This
// happens when the primary tab is already listening to this query on
// behalf of another tab and the user of the primary also starts listening
// to the query. EventManager will not have an assigned target ID in this
// case and calls `listen` to obtain this ID.
targetId=queryView.targetId;this.sharedClientState.addLocalQueryTarget(targetId);viewSnapshot=queryView.view.computeInitialSnapshot();return[3/*break*/,4];case 1:return[4/*yield*/,this.localStore.allocateQuery(query)];case 2:queryData=_a.sent();status_1=this.sharedClientState.addLocalQueryTarget(queryData.targetId);targetId=queryData.targetId;return[4/*yield*/,this.initializeViewAndComputeSnapshot(queryData,"current"===status_1)];case 3:viewSnapshot=_a.sent();if(this.isPrimary){this.remoteStore.listen(queryData)}_a.label=4;case 4:this.syncEngineListener.onWatchChange([viewSnapshot]);return[2/*return*/,targetId];}})})};/**
      * Registers a view for a previously unknown query and computes its initial
      * snapshot.
      */SyncEngine.prototype.initializeViewAndComputeSnapshot=function(queryData,current){var _this=this,query=queryData.query;return this.localStore.executeQuery(query).then(function(docs){return _this.localStore.remoteDocumentKeys(queryData.targetId).then(function(remoteKeys){var view=new View(query,remoteKeys),viewDocChanges=view.computeDocChanges(docs),synthesizedTargetChange=TargetChange.createSynthesizedTargetChangeForCurrentChange(queryData.targetId,current&&_this.onlineState!==OnlineState.Offline),viewChange=view.applyChanges(viewDocChanges,/* updateLimboDocuments= */!0===_this.isPrimary,synthesizedTargetChange);assert$1(0===viewChange.limboChanges.length,"View returned limbo docs before target ack from the server.");assert$1(!!viewChange.snapshot,"applyChanges for new view should always return a snapshot");var data=new QueryView(query,queryData.targetId,view);_this.queryViewsByQuery.set(query,data);_this.queryViewsByTarget[queryData.targetId]=data;return viewChange.snapshot})})};/**
      * Reconcile the list of synced documents in an existing view with those
      * from persistence.
      */ // PORTING NOTE: Multi-tab only.
SyncEngine.prototype.synchronizeViewAndComputeSnapshot=function(queryView){var _this=this;return this.localStore.executeQuery(queryView.query).then(function(docs){return _this.localStore.remoteDocumentKeys(queryView.targetId).then(function(remoteKeys){return __awaiter(_this,void 0,void 0,function(){var viewSnapshot;return __generator(this,function(_a){viewSnapshot=queryView.view.synchronizeWithPersistedState(docs,remoteKeys);if(this.isPrimary){this.updateTrackedLimbos(queryView.targetId,viewSnapshot.limboChanges)}return[2/*return*/,viewSnapshot]})})})})};/** Stops listening to the query. */SyncEngine.prototype.unlisten=function(query){return __awaiter(this,void 0,void 0,function(){var queryView,targetRemainsActive,_this=this;return __generator(this,function(_a){switch(_a.label){case 0:this.assertSubscribed("unlisten()");queryView=this.queryViewsByQuery.get(query);assert$1(!!queryView,"Trying to unlisten on query not found:"+query);if(!this.isPrimary)return[3/*break*/,3];// We need to remove the local query target first to allow us to verify
// whether any other client is still interested in this target.
this.sharedClientState.removeLocalQueryTarget(queryView.targetId);targetRemainsActive=this.sharedClientState.isActiveQueryTarget(queryView.targetId);if(!!targetRemainsActive)return[3/*break*/,2];return[4/*yield*/,this.localStore.releaseQuery(query,!1).then(function(){_this.sharedClientState.clearQueryState(queryView.targetId);_this.remoteStore.unlisten(queryView.targetId);_this.removeAndCleanupQuery(queryView)}).catch(ignoreIfPrimaryLeaseLoss)];case 1:_a.sent();_a.label=2;case 2:return[3/*break*/,5];case 3:this.removeAndCleanupQuery(queryView);return[4/*yield*/,this.localStore.releaseQuery(query,!0)];case 4:_a.sent();_a.label=5;case 5:return[2/*return*/];}})})};/**
      * Initiates the write of local mutation batch which involves adding the
      * writes to the mutation queue, notifying the remote store about new
      * mutations and raising events for any changes this write caused.
      *
      * The promise returned by this call is resolved when the above steps
      * have completed, *not* when the write was acked by the backend. The
      * userCallback is resolved once the write was acked/rejected by the
      * backend (or failed locally for any other reason).
      */SyncEngine.prototype.write=function(batch,userCallback){var _this=this;this.assertSubscribed("write()");return this.localStore.localWrite(batch).then(function(result){_this.sharedClientState.addPendingMutation(result.batchId);_this.addMutationCallback(result.batchId,userCallback);return _this.emitNewSnapsAndNotifyLocalStore(result.changes)}).then(function(){return _this.remoteStore.fillWritePipeline()})};// TODO(klimt): Wrap the given error in a standard Firestore error object.
SyncEngine.prototype.wrapUpdateFunctionError=function(error){return error};/**
      * Takes an updateFunction in which a set of reads and writes can be performed
      * atomically. In the updateFunction, the client can read and write values
      * using the supplied transaction object. After the updateFunction, all
      * changes will be committed. If some other client has changed any of the data
      * referenced, then the updateFunction will be called again. If the
      * updateFunction still fails after the given number of retries, then the
      * transaction will be rejection.
      *
      * The transaction object passed to the updateFunction contains methods for
      * accessing documents and collections. Unlike other datastore access, data
      * accessed with the transaction will not reflect local changes that have not
      * been committed. For this reason, it is required that all reads are
      * performed before any writes. Transactions must be performed while online.
      *
      * The promise returned is resolved when the transaction is fully committed.
      */SyncEngine.prototype.runTransaction=function(updateFunction,retries){var _this=this;if(void 0===retries){retries=5}assert$1(0<=retries,"Got negative number of retries for transaction.");var transaction=this.remoteStore.createTransaction(),wrappedUpdateFunction=function(){try{var userPromise=updateFunction(transaction);if(isNullOrUndefined(userPromise)||!userPromise.catch||!userPromise.then){return Promise.reject(Error("Transaction callback must return a Promise"))}return userPromise.catch(function(e){return Promise.reject(_this.wrapUpdateFunctionError(e))})}catch(e){return Promise.reject(_this.wrapUpdateFunctionError(e))}};return wrappedUpdateFunction().then(function(result){return transaction.commit().then(function(){return result}).catch(function(error){if(0===retries){return Promise.reject(error)}// TODO(klimt): Put in a retry delay?
return _this.runTransaction(updateFunction,retries-1)})})};SyncEngine.prototype.applyRemoteEvent=function(remoteEvent){var _this=this;this.assertSubscribed("applyRemoteEvent()");return this.localStore.applyRemoteEvent(remoteEvent).then(function(changes){// Update `receivedDocument` as appropriate for any limbo targets.
forEach$1(remoteEvent.targetChanges,function(targetId,targetChange){var limboResolution=_this.limboResolutionsByTarget[targetId];if(limboResolution){// Since this is a limbo resolution lookup, it's for a single document
// and it could be added, modified, or removed, but not a combination.
assert$1(1>=targetChange.addedDocuments.size+targetChange.modifiedDocuments.size+targetChange.removedDocuments.size,"Limbo resolution for single document contains multiple changes.");if(0<targetChange.addedDocuments.size){limboResolution.receivedDocument=!0}else if(0<targetChange.modifiedDocuments.size){assert$1(limboResolution.receivedDocument,"Received change for limbo target document without add.")}else if(0<targetChange.removedDocuments.size){assert$1(limboResolution.receivedDocument,"Received remove for limbo target document without add.");limboResolution.receivedDocument=!1}}});return _this.emitNewSnapsAndNotifyLocalStore(changes,remoteEvent)}).catch(ignoreIfPrimaryLeaseLoss)};/**
      * Applies an OnlineState change to the sync engine and notifies any views of
      * the change.
      */SyncEngine.prototype.applyOnlineStateChange=function(onlineState,source){// If we are the secondary client, we explicitly ignore the remote store's
// online state (the local client may go offline, even though the primary
// tab remains online) and only apply the primary tab's online state from
// SharedClientState.
if(this.isPrimary&&source===OnlineStateSource.RemoteStore||!this.isPrimary&&source===OnlineStateSource.SharedClientState){var newViewSnapshots_1=[];this.queryViewsByQuery.forEach(function(query,queryView){var viewChange=queryView.view.applyOnlineStateChange(onlineState);assert$1(0===viewChange.limboChanges.length,"OnlineState should not affect limbo documents.");if(viewChange.snapshot){newViewSnapshots_1.push(viewChange.snapshot)}});this.syncEngineListener.onOnlineStateChange(onlineState);this.syncEngineListener.onWatchChange(newViewSnapshots_1);this.onlineState=onlineState;if(this.isPrimary){this.sharedClientState.setOnlineState(onlineState)}}};SyncEngine.prototype.rejectListen=function(targetId,err){return __awaiter(this,void 0,void 0,function(){var limboResolution,limboKey,documentUpdates,resolvedLimboDocuments,event_1,queryView_1,_this=this;return __generator(this,function(_a){switch(_a.label){case 0:this.assertSubscribed("rejectListens()");// PORTING NOTE: Multi-tab only.
this.sharedClientState.updateQueryState(targetId,"rejected",err);limboResolution=this.limboResolutionsByTarget[targetId];limboKey=limboResolution&&limboResolution.key;if(!limboKey)return[3/*break*/,1];// Since this query failed, we won't want to manually unlisten to it.
// So go ahead and remove it from bookkeeping.
this.limboTargetsByKey=this.limboTargetsByKey.remove(limboKey);delete this.limboResolutionsByTarget[targetId];documentUpdates=new SortedMap(DocumentKey.comparator);documentUpdates=documentUpdates.insert(limboKey,new NoDocument(limboKey,SnapshotVersion.forDeletedDoc()));resolvedLimboDocuments=documentKeySet().add(limboKey);event_1=new RemoteEvent(SnapshotVersion.MIN,/* targetChanges= */{},/* targetMismatches= */new SortedSet(primitiveComparator),documentUpdates,resolvedLimboDocuments);return[2/*return*/,this.applyRemoteEvent(event_1)];case 1:queryView_1=this.queryViewsByTarget[targetId];assert$1(!!queryView_1,"Unknown targetId: "+targetId);return[4/*yield*/,this.localStore.releaseQuery(queryView_1.query,!1).then(function(){return _this.removeAndCleanupQuery(queryView_1)}).catch(ignoreIfPrimaryLeaseLoss)];case 2:_a.sent();this.syncEngineListener.onWatchError(queryView_1.query,err);_a.label=3;case 3:return[2/*return*/];}})})};// PORTING NOTE: Multi-tab only
SyncEngine.prototype.applyBatchState=function(batchId,batchState,error){return __awaiter(this,void 0,void 0,function(){var documents;return __generator(this,function(_a){switch(_a.label){case 0:this.assertSubscribed("applyBatchState()");return[4/*yield*/,this.localStore.lookupMutationDocuments(batchId)];case 1:documents=_a.sent();if(null===documents){// A throttled tab may not have seen the mutation before it was completed
// and removed from the mutation queue, in which case we won't have cached
// the affected documents. In this case we can safely ignore the update
// since that means we didn't apply the mutation locally at all (if we
// had, we would have cached the affected documents), and so we will just
// see any resulting document changes via normal remote document updates
// as applicable.
debug(LOG_TAG$a,"Cannot apply mutation batch with id: "+batchId);return[2/*return*/]}if(!("pending"===batchState))return[3/*break*/,3];// If we are the primary client, we need to send this write to the
// backend. Secondary clients will ignore these writes since their remote
// connection is disabled.
return[4/*yield*/,this.remoteStore.fillWritePipeline()];case 2:// If we are the primary client, we need to send this write to the
// backend. Secondary clients will ignore these writes since their remote
// connection is disabled.
_a.sent();return[3/*break*/,4];case 3:if("acknowledged"===batchState||"rejected"===batchState){// NOTE: Both these methods are no-ops for batches that originated from
// other clients.
this.processUserCallback(batchId,error?error:null);this.localStore.removeCachedMutationBatchMetadata(batchId)}else{fail("Unknown batchState: "+batchState)}_a.label=4;case 4:return[4/*yield*/,this.emitNewSnapsAndNotifyLocalStore(documents)];case 5:_a.sent();return[2/*return*/];}})})};SyncEngine.prototype.applySuccessfulWrite=function(mutationBatchResult){var _this=this;this.assertSubscribed("applySuccessfulWrite()");var batchId=mutationBatchResult.batch.batchId;// The local store may or may not be able to apply the write result and
// raise events immediately (depending on whether the watcher is caught
// up), so we raise user callbacks first so that they consistently happen
// before listen events.
this.processUserCallback(batchId,/*error=*/null);return this.localStore.acknowledgeBatch(mutationBatchResult).then(function(changes){_this.sharedClientState.updateMutationState(batchId,"acknowledged");return _this.emitNewSnapsAndNotifyLocalStore(changes)}).catch(ignoreIfPrimaryLeaseLoss)};SyncEngine.prototype.rejectFailedWrite=function(batchId,error){var _this=this;this.assertSubscribed("rejectFailedWrite()");// The local store may or may not be able to apply the write result and
// raise events immediately (depending on whether the watcher is caught up),
// so we raise user callbacks first so that they consistently happen before
// listen events.
this.processUserCallback(batchId,error);return this.localStore.rejectBatch(batchId).then(function(changes){_this.sharedClientState.updateMutationState(batchId,"rejected",error);return _this.emitNewSnapsAndNotifyLocalStore(changes)}).catch(ignoreIfPrimaryLeaseLoss)};SyncEngine.prototype.addMutationCallback=function(batchId,callback){var newCallbacks=this.mutationUserCallbacks[this.currentUser.toKey()];if(!newCallbacks){newCallbacks=new SortedMap(primitiveComparator)}newCallbacks=newCallbacks.insert(batchId,callback);this.mutationUserCallbacks[this.currentUser.toKey()]=newCallbacks};/**
      * Resolves or rejects the user callback for the given batch and then discards
      * it.
      */SyncEngine.prototype.processUserCallback=function(batchId,error){var newCallbacks=this.mutationUserCallbacks[this.currentUser.toKey()];// NOTE: Mutations restored from persistence won't have callbacks, so it's
// okay for there to be no callback for this ID.
if(newCallbacks){var callback=newCallbacks.get(batchId);if(callback){assert$1(batchId===newCallbacks.minKey(),"Mutation callbacks processed out-of-order?");if(error){callback.reject(error)}else{callback.resolve()}newCallbacks=newCallbacks.remove(batchId)}this.mutationUserCallbacks[this.currentUser.toKey()]=newCallbacks}};SyncEngine.prototype.removeAndCleanupQuery=function(queryView){var _this=this;this.sharedClientState.removeLocalQueryTarget(queryView.targetId);this.queryViewsByQuery.delete(queryView.query);delete this.queryViewsByTarget[queryView.targetId];if(this.isPrimary){var limboKeys=this.limboDocumentRefs.referencesForId(queryView.targetId);this.limboDocumentRefs.removeReferencesForId(queryView.targetId);limboKeys.forEach(function(limboKey){var isReferenced=_this.limboDocumentRefs.containsKey(limboKey);if(!isReferenced){// We removed the last reference for this key
_this.removeLimboTarget(limboKey)}})}};SyncEngine.prototype.removeLimboTarget=function(key){// It's possible that the target already got removed because the query failed. In that case,
// the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.
var limboTargetId=this.limboTargetsByKey.get(key);if(null===limboTargetId){// This target already got removed, because the query failed.
return}this.remoteStore.unlisten(limboTargetId);this.limboTargetsByKey=this.limboTargetsByKey.remove(key);delete this.limboResolutionsByTarget[limboTargetId]};SyncEngine.prototype.updateTrackedLimbos=function(targetId,limboChanges){for(var _i=0,limboChanges_1=limboChanges,limboChange;_i<limboChanges_1.length;_i++){limboChange=limboChanges_1[_i];if(limboChange instanceof AddedLimboDocument){this.limboDocumentRefs.addReference(limboChange.key,targetId);this.trackLimboChange(limboChange)}else if(limboChange instanceof RemovedLimboDocument){debug(LOG_TAG$a,"Document no longer in limbo: "+limboChange.key);this.limboDocumentRefs.removeReference(limboChange.key,targetId);var isReferenced=this.limboDocumentRefs.containsKey(limboChange.key);if(!isReferenced){// We removed the last reference for this key
this.removeLimboTarget(limboChange.key)}}else{fail("Unknown limbo change: "+JSON.stringify(limboChange))}}};SyncEngine.prototype.trackLimboChange=function(limboChange){var key=limboChange.key;if(!this.limboTargetsByKey.get(key)){debug(LOG_TAG$a,"New document in limbo: "+key);var limboTargetId=this.limboTargetIdGenerator.next(),query=Query.atPath(key.path);this.limboResolutionsByTarget[limboTargetId]=new LimboResolution(key);this.remoteStore.listen(new QueryData(query,limboTargetId,QueryPurpose.LimboResolution,ListenSequence.INVALID));this.limboTargetsByKey=this.limboTargetsByKey.insert(key,limboTargetId)}};// Visible for testing
SyncEngine.prototype.currentLimboDocs=function(){return this.limboTargetsByKey};SyncEngine.prototype.emitNewSnapsAndNotifyLocalStore=function(changes,remoteEvent){return __awaiter(this,void 0,void 0,function(){var newSnaps,docChangesInAllViews,queriesProcessed,_this=this;return __generator(this,function(_a){switch(_a.label){case 0:newSnaps=[];docChangesInAllViews=[];queriesProcessed=[];this.queryViewsByQuery.forEach(function(_,queryView){queriesProcessed.push(Promise.resolve().then(function(){var viewDocChanges=queryView.view.computeDocChanges(changes);if(!viewDocChanges.needsRefill){return viewDocChanges}// The query has a limit and some docs were removed, so we need
// to re-run the query against the local store to make sure we
// didn't lose any good docs that had been past the limit.
return _this.localStore.executeQuery(queryView.query).then(function(docs){return queryView.view.computeDocChanges(docs,viewDocChanges)})}).then(function(viewDocChanges){var targetChange=remoteEvent&&remoteEvent.targetChanges[queryView.targetId],viewChange=queryView.view.applyChanges(viewDocChanges,/* updateLimboDocuments= */!0===_this.isPrimary,targetChange);_this.updateTrackedLimbos(queryView.targetId,viewChange.limboChanges);if(viewChange.snapshot){if(_this.isPrimary){_this.sharedClientState.updateQueryState(queryView.targetId,viewChange.snapshot.fromCache?"not-current":"current")}newSnaps.push(viewChange.snapshot);var docChanges=LocalViewChanges.fromSnapshot(queryView.targetId,viewChange.snapshot);docChangesInAllViews.push(docChanges)}}))});return[4/*yield*/,Promise.all(queriesProcessed)];case 1:_a.sent();this.syncEngineListener.onWatchChange(newSnaps);return[4/*yield*/,this.localStore.notifyLocalViewChanges(docChangesInAllViews)];case 2:_a.sent();return[2/*return*/];}})})};SyncEngine.prototype.assertSubscribed=function(fnName){assert$1(null!==this.syncEngineListener,"Trying to call "+fnName+" before calling subscribe().")};SyncEngine.prototype.handleCredentialChange=function(user){return __awaiter(this,void 0,void 0,function(){var userChanged,result;return __generator(this,function(_a){switch(_a.label){case 0:userChanged=!this.currentUser.isEqual(user);this.currentUser=user;if(!userChanged)return[3/*break*/,3];return[4/*yield*/,this.localStore.handleUserChange(user)];case 1:result=_a.sent();// TODO(b/114226417): Consider calling this only in the primary tab.
this.sharedClientState.handleUserChange(user,result.removedBatchIds,result.addedBatchIds);return[4/*yield*/,this.emitNewSnapsAndNotifyLocalStore(result.affectedDocuments)];case 2:_a.sent();_a.label=3;case 3:return[4/*yield*/,this.remoteStore.handleCredentialChange()];case 4:_a.sent();return[2/*return*/];}})})};// PORTING NOTE: Multi-tab only
SyncEngine.prototype.applyPrimaryState=function(isPrimary){return __awaiter(this,void 0,void 0,function(){var activeTargets,activeQueries,_i,activeQueries_1,queryData,activeTargets_1,p_1,_this=this;return __generator(this,function(_a){switch(_a.label){case 0:if(!(!0===isPrimary&&!0!==this.isPrimary))return[3/*break*/,3];this.isPrimary=!0;return[4/*yield*/,this.remoteStore.applyPrimaryState(!0)];case 1:_a.sent();activeTargets=this.sharedClientState.getAllActiveQueryTargets();return[4/*yield*/,this.synchronizeQueryViewsAndRaiseSnapshots(activeTargets.toArray())];case 2:activeQueries=_a.sent();for(_i=0,activeQueries_1=activeQueries;_i<activeQueries_1.length;_i++){queryData=activeQueries_1[_i];this.remoteStore.listen(queryData)}return[3/*break*/,7];case 3:if(!(!1===isPrimary&&!1!==this.isPrimary))return[3/*break*/,7];this.isPrimary=!1;activeTargets_1=[];p_1=Promise.resolve();forEachNumber(this.queryViewsByTarget,function(targetId,queryView){if(_this.sharedClientState.isLocalQueryTarget(targetId)){activeTargets_1.push(targetId)}else{p_1=p_1.then(function(){return _this.unlisten(queryView.query)})}_this.remoteStore.unlisten(queryView.targetId)});return[4/*yield*/,p_1];case 4:_a.sent();return[4/*yield*/,this.synchronizeQueryViewsAndRaiseSnapshots(activeTargets_1)];case 5:_a.sent();this.resetLimboDocuments();return[4/*yield*/,this.remoteStore.applyPrimaryState(!1)];case 6:_a.sent();_a.label=7;case 7:return[2/*return*/];}})})};// PORTING NOTE: Multi-tab only.
SyncEngine.prototype.resetLimboDocuments=function(){var _this=this;forEachNumber(this.limboResolutionsByTarget,function(targetId){_this.remoteStore.unlisten(targetId)});this.limboDocumentRefs.removeAllReferences();this.limboResolutionsByTarget=[];this.limboTargetsByKey=new SortedMap(DocumentKey.comparator)};/**
      * Reconcile the query views of the provided query targets with the state from
      * persistence. Raises snapshots for any changes that affect the local
      * client and returns the updated state of all target's query data.
      */ // PORTING NOTE: Multi-tab only.
SyncEngine.prototype.synchronizeQueryViewsAndRaiseSnapshots=function(targets){for(var _this=this,p=Promise.resolve(),activeQueries=[],newViewSnapshots=[],_loop_1=function(targetId){p=p.then(function(){return __awaiter(_this,void 0,void 0,function(){var queryData,queryView,viewChange,query;return __generator(this,function(_a){switch(_a.label){case 0:queryView=this.queryViewsByTarget[targetId];if(!queryView)return[3/*break*/,4];// For queries that have a local View, we need to update their state
// in LocalStore (as the resume token and the snapshot version
// might have changed) and reconcile their views with the persisted
// state (the list of syncedDocuments may have gotten out of sync).
return[4/*yield*/,this.localStore.releaseQuery(queryView.query,!0)];case 1:// For queries that have a local View, we need to update their state
// in LocalStore (as the resume token and the snapshot version
// might have changed) and reconcile their views with the persisted
// state (the list of syncedDocuments may have gotten out of sync).
_a.sent();return[4/*yield*/,this.localStore.allocateQuery(queryView.query)];case 2:queryData=_a.sent();return[4/*yield*/,this.synchronizeViewAndComputeSnapshot(queryView)];case 3:viewChange=_a.sent();if(viewChange.snapshot){newViewSnapshots.push(viewChange.snapshot)}return[3/*break*/,8];case 4:assert$1(!0===this.isPrimary,"A secondary tab should never have an active query without an active view.");return[4/*yield*/,this.localStore.getQueryForTarget(targetId)];case 5:query=_a.sent();assert$1(!!query,"Query data for target "+targetId+" not found");return[4/*yield*/,this.localStore.allocateQuery(query)];case 6:queryData=_a.sent();return[4/*yield*/,this.initializeViewAndComputeSnapshot(queryData,!1)];case 7:_a.sent();_a.label=8;case 8:activeQueries.push(queryData);return[2/*return*/];}})})})},_i=0,targets_1=targets,targetId;_i<targets_1.length;_i++){targetId=targets_1[_i];_loop_1(targetId)}return p.then(function(){_this.syncEngineListener.onWatchChange(newViewSnapshots);return activeQueries})};// PORTING NOTE: Multi-tab only
SyncEngine.prototype.getActiveClients=function(){return this.localStore.getActiveClients()};// PORTING NOTE: Multi-tab only
SyncEngine.prototype.applyTargetState=function(targetId,state,error){return __awaiter(this,void 0,void 0,function(){var _a,queryView,_this=this;return __generator(this,function(_b){switch(_b.label){case 0:if(this.isPrimary){// If we receive a target state notification via WebStorage, we are
// either already secondary or another tab has taken the primary lease.
debug(LOG_TAG$a,"Ignoring unexpected query state notification.");return[2/*return*/]}if(!this.queryViewsByTarget[targetId])return[3/*break*/,5];_a=state;switch(_a){case"current":return[3/*break*/,1];case"not-current":return[3/*break*/,1];case"rejected":return[3/*break*/,2];}return[3/*break*/,4];case 1:{return[2/*return*/,this.localStore.getNewDocumentChanges().then(function(changes){return __awaiter(_this,void 0,void 0,function(){var synthesizedRemoteEvent;return __generator(this,function(_a){switch(_a.label){case 0:synthesizedRemoteEvent=RemoteEvent.createSynthesizedRemoteEventForCurrentChange(targetId,"current"===state);return[4/*yield*/,this.emitNewSnapsAndNotifyLocalStore(changes,synthesizedRemoteEvent)];case 1:_a.sent();return[2/*return*/];}})})},function(err){return __awaiter(_this,void 0,void 0,function(){var activeTargets_2;return __generator(this,function(_a){switch(_a.label){case 0:if(!isDocumentChangeMissingError(err))return[3/*break*/,2];activeTargets_2=[];forEachNumber(this.queryViewsByTarget,function(target){return activeTargets_2.push(target)});return[4/*yield*/,this.synchronizeQueryViewsAndRaiseSnapshots(activeTargets_2)];case 1:_a.sent();return[3/*break*/,3];case 2:throw err;case 3:return[2/*return*/];}})})})]}_b.label=2;case 2:queryView=this.queryViewsByTarget[targetId];this.removeAndCleanupQuery(queryView);return[4/*yield*/,this.localStore.releaseQuery(queryView.query,!0)];case 3:_b.sent();this.syncEngineListener.onWatchError(queryView.query,error);return[3/*break*/,5];case 4:fail("Unexpected target state: "+state);_b.label=5;case 5:return[2/*return*/];}})})};// PORTING NOTE: Multi-tab only
SyncEngine.prototype.applyActiveTargetsChange=function(added,removed){return __awaiter(this,void 0,void 0,function(){var _i,added_1,targetId,query,queryData,_loop_2,this_1,_a,removed_1,targetId,_this=this;return __generator(this,function(_b){switch(_b.label){case 0:if(!this.isPrimary){return[2/*return*/]}_i=0,added_1=added;_b.label=1;case 1:if(!(_i<added_1.length))return[3/*break*/,6];targetId=added_1[_i];assert$1(!this.queryViewsByTarget[targetId],"Trying to add an already active target");return[4/*yield*/,this.localStore.getQueryForTarget(targetId)];case 2:query=_b.sent();assert$1(!!query,"Query data for active target "+targetId+" not found");return[4/*yield*/,this.localStore.allocateQuery(query)];case 3:queryData=_b.sent();return[4/*yield*/,this.initializeViewAndComputeSnapshot(queryData,!1)];case 4:_b.sent();this.remoteStore.listen(queryData);_b.label=5;case 5:_i++;return[3/*break*/,1];case 6:_loop_2=function(targetId){var queryView;return __generator(this,function(_a){switch(_a.label){case 0:queryView=this_1.queryViewsByTarget[targetId];if(!queryView)return[3/*break*/,2];return[4/*yield*/,this_1.localStore.releaseQuery(queryView.query,!1).then(function(){_this.remoteStore.unlisten(targetId);_this.removeAndCleanupQuery(queryView)}).catch(ignoreIfPrimaryLeaseLoss)];case 1:_a.sent();_a.label=2;case 2:return[2/*return*/];}})};this_1=this;_a=0,removed_1=removed;_b.label=7;case 7:if(!(_a<removed_1.length))return[3/*break*/,10];targetId=removed_1[_a];return[5/*yield**/,_loop_2(targetId)];case 8:_b.sent();_b.label=9;case 9:_a++;return[3/*break*/,7];case 10:return[2/*return*/];}})})};// PORTING NOTE: Multi-tab only. In other clients, LocalStore is unaware of
// the online state.
SyncEngine.prototype.enableNetwork=function(){this.localStore.setNetworkEnabled(!0);return this.remoteStore.enableNetwork()};// PORTING NOTE: Multi-tab only. In other clients, LocalStore is unaware of
// the online state.
SyncEngine.prototype.disableNetwork=function(){this.localStore.setNetworkEnabled(!1);return this.remoteStore.disableNetwork()};SyncEngine.prototype.getRemoteKeysForTarget=function(targetId){var limboResolution=this.limboResolutionsByTarget[targetId];if(limboResolution&&limboResolution.receivedDocument){return documentKeySet().add(limboResolution.key)}else{return this.queryViewsByTarget[targetId]?this.queryViewsByTarget[targetId].view.syncedDocuments:documentKeySet()}};return SyncEngine}(),User=/** @class */function(){function User(uid){this.uid=uid}User.prototype.isAuthenticated=function(){return null!=this.uid};/**
      * Returns a key representing this user, suitable for inclusion in a
      * dictionary.
      */User.prototype.toKey=function(){if(this.isAuthenticated()){return"uid:"+this.uid}else{return"anonymous-user"}};User.prototype.isEqual=function(otherUser){return otherUser.uid===this.uid};/** A user with a null UID. */User.UNAUTHENTICATED=new User(null);// TODO(mikelehen): Look into getting a proper uid-equivalent for
// non-FirebaseAuth providers.
User.GOOGLE_CREDENTIALS=new User("google-credentials-uid");User.FIRST_PARTY=new User("first-party-uid");return User}(),LOG_TAG$b="SharedClientState",CLIENT_STATE_KEY_PREFIX="firestore_clients",MUTATION_BATCH_KEY_PREFIX="firestore_mutations",QUERY_TARGET_KEY_PREFIX="firestore_targets",ONLINE_STATE_KEY_PREFIX="firestore_online_state",SEQUENCE_NUMBER_KEY_PREFIX="firestore_sequence_number",MutationMetadata=/** @class */function(){function MutationMetadata(user,batchId,state,error){this.user=user;this.batchId=batchId;this.state=state;this.error=error;assert$1(error!==void 0===("rejected"===state),"MutationMetadata must contain an error iff state is 'rejected'")}/**
     * Parses a MutationMetadata from its JSON representation in WebStorage.
     * Logs a warning and returns null if the format of the data is not valid.
     */MutationMetadata.fromWebStorageEntry=function(user,batchId,value){var mutationBatch=JSON.parse(value),validData="object"===typeof mutationBatch&&-1!==["pending","acknowledged","rejected"].indexOf(mutationBatch.state)&&(mutationBatch.error===void 0||"object"===typeof mutationBatch.error),firestoreError=void 0;if(validData&&mutationBatch.error){validData="string"===typeof mutationBatch.error.message&&"string"===typeof mutationBatch.error.code;if(validData){firestoreError=new FirestoreError(mutationBatch.error.code,mutationBatch.error.message)}}if(validData){return new MutationMetadata(user,batchId,mutationBatch.state,firestoreError)}else{error(LOG_TAG$b,"Failed to parse mutation state for ID '"+batchId+"': "+value);return null}};MutationMetadata.prototype.toWebStorageJSON=function(){var batchMetadata={state:this.state,updateTimeMs:Date.now()// Modify the existing value to trigger update.
};if(this.error){batchMetadata.error={code:this.error.code,message:this.error.message}}return JSON.stringify(batchMetadata)};return MutationMetadata}(),QueryTargetMetadata=/** @class */function(){function QueryTargetMetadata(targetId,state,error){this.targetId=targetId;this.state=state;this.error=error;assert$1(error!==void 0===("rejected"===state),"QueryTargetMetadata must contain an error iff state is 'rejected'")}/**
     * Parses a QueryTargetMetadata from its JSON representation in WebStorage.
     * Logs a warning and returns null if the format of the data is not valid.
     */QueryTargetMetadata.fromWebStorageEntry=function(targetId,value){var targetState=JSON.parse(value),validData="object"===typeof targetState&&-1!==["not-current","current","rejected"].indexOf(targetState.state)&&(targetState.error===void 0||"object"===typeof targetState.error),firestoreError=void 0;if(validData&&targetState.error){validData="string"===typeof targetState.error.message&&"string"===typeof targetState.error.code;if(validData){firestoreError=new FirestoreError(targetState.error.code,targetState.error.message)}}if(validData){return new QueryTargetMetadata(targetId,targetState.state,firestoreError)}else{error(LOG_TAG$b,"Failed to parse target state for ID '"+targetId+"': "+value);return null}};QueryTargetMetadata.prototype.toWebStorageJSON=function(){var targetState={state:this.state,updateTimeMs:Date.now()// Modify the existing value to trigger update.
};if(this.error){targetState.error={code:this.error.code,message:this.error.message}}return JSON.stringify(targetState)};return QueryTargetMetadata}(),RemoteClientState=/** @class */function(){function RemoteClientState(clientId,activeTargetIds){this.clientId=clientId;this.activeTargetIds=activeTargetIds}/**
     * Parses a RemoteClientState from the JSON representation in WebStorage.
     * Logs a warning and returns null if the format of the data is not valid.
     */RemoteClientState.fromWebStorageEntry=function(clientId,value){for(var clientState=JSON.parse(value),validData="object"===typeof clientState&&clientState.activeTargetIds instanceof Array,activeTargetIdsSet=targetIdSet(),i=0;validData&&i<clientState.activeTargetIds.length;++i){validData=isSafeInteger(clientState.activeTargetIds[i]);activeTargetIdsSet=activeTargetIdsSet.add(clientState.activeTargetIds[i])}if(validData){return new RemoteClientState(clientId,activeTargetIdsSet)}else{error(LOG_TAG$b,"Failed to parse client data for instance '"+clientId+"': "+value);return null}};return RemoteClientState}(),SharedOnlineState=/** @class */function(){function SharedOnlineState(clientId,onlineState){this.clientId=clientId;this.onlineState=onlineState}/**
     * Parses a SharedOnlineState from its JSON representation in WebStorage.
     * Logs a warning and returns null if the format of the data is not valid.
     */SharedOnlineState.fromWebStorageEntry=function(value){var onlineState=JSON.parse(value),validData="object"===typeof onlineState&&OnlineState[onlineState.onlineState]!==void 0&&"string"===typeof onlineState.clientId;if(validData){return new SharedOnlineState(onlineState.clientId,OnlineState[onlineState.onlineState])}else{error(LOG_TAG$b,"Failed to parse online state: "+value);return null}};return SharedOnlineState}(),LocalClientState=/** @class */function(){function LocalClientState(){this.activeTargetIds=targetIdSet()}LocalClientState.prototype.addQueryTarget=function(targetId){assert$1(!this.activeTargetIds.has(targetId),"Target with ID '"+targetId+"' already active.");this.activeTargetIds=this.activeTargetIds.add(targetId)};LocalClientState.prototype.removeQueryTarget=function(targetId){this.activeTargetIds=this.activeTargetIds.delete(targetId)};/**
      * Converts this entry into a JSON-encoded format we can use for WebStorage.
      * Does not encode `clientId` as it is part of the key in WebStorage.
      */LocalClientState.prototype.toWebStorageJSON=function(){var data={activeTargetIds:this.activeTargetIds.toArray(),updateTimeMs:Date.now()// Modify the existing value to trigger update.
};return JSON.stringify(data)};return LocalClientState}(),WebStorageSharedClientState=/** @class */function(){function WebStorageSharedClientState(queue,platform,persistenceKey,localClientId,initialUser){this.queue=queue;this.platform=platform;this.persistenceKey=persistenceKey;this.localClientId=localClientId;this.syncEngine=null;this.onlineStateHandler=null;this.sequenceNumberHandler=null;this.activeClients={};this.storageListener=this.handleWebStorageEvent.bind(this);this.started=!1;/**
                           * Captures WebStorage events that occur before `start()` is called. These
                           * events are replayed once `WebStorageSharedClientState` is started.
                           */this.earlyEvents=[];if(!WebStorageSharedClientState.isAvailable(this.platform)){throw new FirestoreError(Code.UNIMPLEMENTED,"LocalStorage is not available on this platform.")}// Escape the special characters mentioned here:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
var escapedPersistenceKey=persistenceKey.replace(/[.*+?^${}()|[\]\\]/g,"\\$&");this.storage=this.platform.window.localStorage;this.currentUser=initialUser;this.localClientStorageKey=this.toWebStorageClientStateKey(this.localClientId);this.sequenceNumberKey=SEQUENCE_NUMBER_KEY_PREFIX+"_"+persistenceKey;this.activeClients[this.localClientId]=new LocalClientState;this.clientStateKeyRe=new RegExp("^"+CLIENT_STATE_KEY_PREFIX+"_"+escapedPersistenceKey+"_([^_]*)$");this.mutationBatchKeyRe=new RegExp("^"+MUTATION_BATCH_KEY_PREFIX+"_"+escapedPersistenceKey+"_(\\d+)(?:_(.*))?$");this.queryTargetKeyRe=new RegExp("^"+QUERY_TARGET_KEY_PREFIX+"_"+escapedPersistenceKey+"_(\\d+)$");this.onlineStateKey=ONLINE_STATE_KEY_PREFIX+"_"+persistenceKey;// Rather than adding the storage observer during start(), we add the
// storage observer during initialization. This ensures that we collect
// events before other components populate their initial state (during their
// respective start() calls). Otherwise, we might for example miss a
// mutation that is added after LocalStore's start() processed the existing
// mutations but before we observe WebStorage events.
this.platform.window.addEventListener("storage",this.storageListener)}/** Returns 'true' if WebStorage is available in the current environment. */WebStorageSharedClientState.isAvailable=function(platform){return!!(platform.window&&null!=platform.window.localStorage)};WebStorageSharedClientState.prototype.start=function(){return __awaiter(this,void 0,void 0,function(){var existingClients,_i,existingClients_1,clientId,storageItem,clientState,onlineStateJSON,onlineState,_a,_b,event_1,_this=this;return __generator(this,function(_c){switch(_c.label){case 0:assert$1(!this.started,"WebStorageSharedClientState already started");assert$1(null!==this.syncEngine,"syncEngine property must be set before calling start()");assert$1(null!==this.onlineStateHandler,"onlineStateHandler property must be set before calling start()");return[4/*yield*/,this.syncEngine.getActiveClients()];case 1:existingClients=_c.sent();for(_i=0,existingClients_1=existingClients;_i<existingClients_1.length;_i++){clientId=existingClients_1[_i];if(clientId===this.localClientId){continue}storageItem=this.getItem(this.toWebStorageClientStateKey(clientId));if(storageItem){clientState=RemoteClientState.fromWebStorageEntry(clientId,storageItem);if(clientState){this.activeClients[clientState.clientId]=clientState}}}this.persistClientState();onlineStateJSON=this.storage.getItem(this.onlineStateKey);if(onlineStateJSON){onlineState=this.fromWebStorageOnlineState(onlineStateJSON);if(onlineState){this.handleOnlineStateEvent(onlineState)}}for(_a=0,_b=this.earlyEvents;_a<_b.length;_a++){event_1=_b[_a];this.handleWebStorageEvent(event_1)}this.earlyEvents=[];// Register a window unload hook to remove the client metadata entry from
// WebStorage even if `shutdown()` was not called.
this.platform.window.addEventListener("unload",function(){return _this.shutdown()});this.started=!0;return[2/*return*/];}})})};WebStorageSharedClientState.prototype.writeSequenceNumber=function(sequenceNumber){this.setItem(this.sequenceNumberKey,JSON.stringify(sequenceNumber))};WebStorageSharedClientState.prototype.getAllActiveQueryTargets=function(){var activeTargets=targetIdSet();forEach$1(this.activeClients,function(key,value){activeTargets=activeTargets.unionWith(value.activeTargetIds)});return activeTargets};WebStorageSharedClientState.prototype.isActiveQueryTarget=function(targetId){// This is not using `obj.forEach` since `forEach` doesn't support early
// return.
for(var clientId in this.activeClients){if(this.activeClients.hasOwnProperty(clientId)){if(this.activeClients[clientId].activeTargetIds.has(targetId)){return!0}}}return!1};WebStorageSharedClientState.prototype.addPendingMutation=function(batchId){this.persistMutationState(batchId,"pending")};WebStorageSharedClientState.prototype.updateMutationState=function(batchId,state,error){this.persistMutationState(batchId,state,error);// Once a final mutation result is observed by other clients, they no longer
// access the mutation's metadata entry. Since WebStorage replays events
// in order, it is safe to delete the entry right after updating it.
this.removeMutationState(batchId)};WebStorageSharedClientState.prototype.addLocalQueryTarget=function(targetId){var queryState="not-current";// Lookup an existing query state if the target ID was already registered
// by another tab
if(this.isActiveQueryTarget(targetId)){var storageItem=this.storage.getItem(this.toWebStorageQueryTargetMetadataKey(targetId));if(storageItem){var metadata=QueryTargetMetadata.fromWebStorageEntry(targetId,storageItem);if(metadata){queryState=metadata.state}}}this.localClientState.addQueryTarget(targetId);this.persistClientState();return queryState};WebStorageSharedClientState.prototype.removeLocalQueryTarget=function(targetId){this.localClientState.removeQueryTarget(targetId);this.persistClientState()};WebStorageSharedClientState.prototype.isLocalQueryTarget=function(targetId){return this.localClientState.activeTargetIds.has(targetId)};WebStorageSharedClientState.prototype.clearQueryState=function(targetId){this.removeItem(this.toWebStorageQueryTargetMetadataKey(targetId))};WebStorageSharedClientState.prototype.updateQueryState=function(targetId,state,error){this.persistQueryTargetState(targetId,state,error)};WebStorageSharedClientState.prototype.handleUserChange=function(user,removedBatchIds,addedBatchIds){var _this=this;removedBatchIds.forEach(function(batchId){_this.removeMutationState(batchId)});this.currentUser=user;addedBatchIds.forEach(function(batchId){_this.addPendingMutation(batchId)})};WebStorageSharedClientState.prototype.setOnlineState=function(onlineState){this.persistOnlineState(onlineState)};WebStorageSharedClientState.prototype.shutdown=function(){if(this.started){this.platform.window.removeEventListener("storage",this.storageListener);this.removeItem(this.localClientStorageKey);this.started=!1}};WebStorageSharedClientState.prototype.getItem=function(key){var value=this.storage.getItem(key);debug(LOG_TAG$b,"READ",key,value);return value};WebStorageSharedClientState.prototype.setItem=function(key,value){debug(LOG_TAG$b,"SET",key,value);this.storage.setItem(key,value)};WebStorageSharedClientState.prototype.removeItem=function(key){debug(LOG_TAG$b,"REMOVE",key);this.storage.removeItem(key)};WebStorageSharedClientState.prototype.handleWebStorageEvent=function(event){var _this=this;if(event.storageArea===this.storage){debug(LOG_TAG$b,"EVENT",event.key,event.newValue);if(event.key===this.localClientStorageKey){error("Received WebStorage notification for local change. Another client might have "+"garbage-collected our state");return}this.queue.enqueueAndForget(function(){return __awaiter(_this,void 0,void 0,function(){var clientState,clientId,mutationMetadata,queryTargetMetadata,onlineState,sequenceNumber;return __generator(this,function(_a){if(!this.started){this.earlyEvents.push(event);return[2/*return*/]}if(null===event.key){return[2/*return*/]}if(this.clientStateKeyRe.test(event.key)){if(null!=event.newValue){clientState=this.fromWebStorageClientState(event.key,event.newValue);if(clientState){return[2/*return*/,this.handleClientStateEvent(clientState.clientId,clientState)]}}else{clientId=this.fromWebStorageClientStateKey(event.key);return[2/*return*/,this.handleClientStateEvent(clientId,null)]}}else if(this.mutationBatchKeyRe.test(event.key)){if(null!==event.newValue){mutationMetadata=this.fromWebStorageMutationMetadata(event.key,event.newValue);if(mutationMetadata){return[2/*return*/,this.handleMutationBatchEvent(mutationMetadata)]}}}else if(this.queryTargetKeyRe.test(event.key)){if(null!==event.newValue){queryTargetMetadata=this.fromWebStorageQueryTargetMetadata(event.key,event.newValue);if(queryTargetMetadata){return[2/*return*/,this.handleQueryTargetEvent(queryTargetMetadata)]}}}else if(event.key===this.onlineStateKey){if(null!==event.newValue){onlineState=this.fromWebStorageOnlineState(event.newValue);if(onlineState){return[2/*return*/,this.handleOnlineStateEvent(onlineState)]}}}else if(event.key===this.sequenceNumberKey){assert$1(!!this.sequenceNumberHandler,"Missing sequenceNumberHandler");sequenceNumber=fromWebStorageSequenceNumber(event.newValue);if(sequenceNumber!==ListenSequence.INVALID){this.sequenceNumberHandler(sequenceNumber)}}return[2/*return*/]})})})}};Object.defineProperty(WebStorageSharedClientState.prototype,"localClientState",{get:function(){return this.activeClients[this.localClientId]},enumerable:!0,configurable:!0});WebStorageSharedClientState.prototype.persistClientState=function(){this.setItem(this.localClientStorageKey,this.localClientState.toWebStorageJSON())};WebStorageSharedClientState.prototype.persistMutationState=function(batchId,state,error){var mutationState=new MutationMetadata(this.currentUser,batchId,state,error),mutationKey=this.toWebStorageMutationBatchKey(batchId);this.setItem(mutationKey,mutationState.toWebStorageJSON())};WebStorageSharedClientState.prototype.removeMutationState=function(batchId){var mutationKey=this.toWebStorageMutationBatchKey(batchId);this.removeItem(mutationKey)};WebStorageSharedClientState.prototype.persistOnlineState=function(onlineState){var entry={clientId:this.localClientId,onlineState:OnlineState[onlineState]};this.storage.setItem(this.onlineStateKey,JSON.stringify(entry))};WebStorageSharedClientState.prototype.persistQueryTargetState=function(targetId,state,error){var targetKey=this.toWebStorageQueryTargetMetadataKey(targetId),targetMetadata=new QueryTargetMetadata(targetId,state,error);this.setItem(targetKey,targetMetadata.toWebStorageJSON())};/** Assembles the key for a client state in WebStorage */WebStorageSharedClientState.prototype.toWebStorageClientStateKey=function(clientId){assert$1(-1===clientId.indexOf("_"),"Client key cannot contain '_', but was '"+clientId+"'");return CLIENT_STATE_KEY_PREFIX+"_"+this.persistenceKey+"_"+clientId};/** Assembles the key for a query state in WebStorage */WebStorageSharedClientState.prototype.toWebStorageQueryTargetMetadataKey=function(targetId){return QUERY_TARGET_KEY_PREFIX+"_"+this.persistenceKey+"_"+targetId};/** Assembles the key for a mutation batch in WebStorage */WebStorageSharedClientState.prototype.toWebStorageMutationBatchKey=function(batchId){var mutationKey=MUTATION_BATCH_KEY_PREFIX+"_"+this.persistenceKey+"_"+batchId;if(this.currentUser.isAuthenticated()){mutationKey+="_"+this.currentUser.uid}return mutationKey};/**
      * Parses a client state key in WebStorage. Returns null if the key does not
      * match the expected key format.
      */WebStorageSharedClientState.prototype.fromWebStorageClientStateKey=function(key){var match=this.clientStateKeyRe.exec(key);return match?match[1]:null};/**
      * Parses a client state in WebStorage. Returns 'null' if the value could not
      * be parsed.
      */WebStorageSharedClientState.prototype.fromWebStorageClientState=function(key,value){var clientId=this.fromWebStorageClientStateKey(key);assert$1(null!==clientId,"Cannot parse client state key '"+key+"'");return RemoteClientState.fromWebStorageEntry(clientId,value)};/**
      * Parses a mutation batch state in WebStorage. Returns 'null' if the value
      * could not be parsed.
      */WebStorageSharedClientState.prototype.fromWebStorageMutationMetadata=function(key,value){var match=this.mutationBatchKeyRe.exec(key);assert$1(null!==match,"Cannot parse mutation batch key '"+key+"'");var batchId=+match[1],userId=match[2]!==void 0?match[2]:null;return MutationMetadata.fromWebStorageEntry(new User(userId),batchId,value)};/**
      * Parses a query target state from WebStorage. Returns 'null' if the value
      * could not be parsed.
      */WebStorageSharedClientState.prototype.fromWebStorageQueryTargetMetadata=function(key,value){var match=this.queryTargetKeyRe.exec(key);assert$1(null!==match,"Cannot parse query target key '"+key+"'");var targetId=+match[1];return QueryTargetMetadata.fromWebStorageEntry(targetId,value)};/**
      * Parses an online state from WebStorage. Returns 'null' if the value
      * could not be parsed.
      */WebStorageSharedClientState.prototype.fromWebStorageOnlineState=function(value){return SharedOnlineState.fromWebStorageEntry(value)};WebStorageSharedClientState.prototype.handleMutationBatchEvent=function(mutationBatch){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(_a){if(mutationBatch.user.uid!==this.currentUser.uid){debug(LOG_TAG$b,"Ignoring mutation for non-active user "+mutationBatch.user.uid);return[2/*return*/]}return[2/*return*/,this.syncEngine.applyBatchState(mutationBatch.batchId,mutationBatch.state,mutationBatch.error)]})})};WebStorageSharedClientState.prototype.handleQueryTargetEvent=function(targetMetadata){return this.syncEngine.applyTargetState(targetMetadata.targetId,targetMetadata.state,targetMetadata.error)};WebStorageSharedClientState.prototype.handleClientStateEvent=function(clientId,clientState){var _this=this,existingTargets=this.getAllActiveQueryTargets();if(clientState){this.activeClients[clientId]=clientState}else{delete this.activeClients[clientId]}var newTargets=this.getAllActiveQueryTargets(),addedTargets=[],removedTargets=[];newTargets.forEach(function(targetId){return __awaiter(_this,void 0,void 0,function(){return __generator(this,function(_a){if(!existingTargets.has(targetId)){addedTargets.push(targetId)}return[2/*return*/]})})});existingTargets.forEach(function(targetId){return __awaiter(_this,void 0,void 0,function(){return __generator(this,function(_a){if(!newTargets.has(targetId)){removedTargets.push(targetId)}return[2/*return*/]})})});return this.syncEngine.applyActiveTargetsChange(addedTargets,removedTargets)};WebStorageSharedClientState.prototype.handleOnlineStateEvent=function(onlineState){// We check whether the client that wrote this online state is still active
// by comparing its client ID to the list of clients kept active in
// IndexedDb. If a client does not update their IndexedDb client state
// within 5 seconds, it is considered inactive and we don't emit an online
// state event.
if(this.activeClients[onlineState.clientId]){this.onlineStateHandler(onlineState.onlineState)}};return WebStorageSharedClientState}();/**
                               * QueryView contains all of the data that SyncEngine needs to keep track of for
                               * a particular query.
                               */function fromWebStorageSequenceNumber(seqString){var sequenceNumber=ListenSequence.INVALID;if(null!=seqString){try{var parsed=JSON.parse(seqString);assert$1("number"===typeof parsed,"Found non-numeric sequence number");sequenceNumber=parsed}catch(e){error(LOG_TAG$b,"Failed to read sequence number from WebStorage",e)}}return sequenceNumber}/**
   * `MemorySharedClientState` is a simple implementation of SharedClientState for
   * clients using memory persistence. The state in this class remains fully
   * isolated and no synchronization is performed.
   */var MemorySharedClientState=/** @class */function(){function MemorySharedClientState(){this.localState=new LocalClientState;this.queryState={};this.syncEngine=null;this.onlineStateHandler=null;this.sequenceNumberHandler=null}MemorySharedClientState.prototype.addPendingMutation=function(batchId){// No op.
};MemorySharedClientState.prototype.updateMutationState=function(batchId,state,error){// No op.
};MemorySharedClientState.prototype.addLocalQueryTarget=function(targetId){this.localState.addQueryTarget(targetId);return this.queryState[targetId]||"not-current"};MemorySharedClientState.prototype.updateQueryState=function(targetId,state,error){this.queryState[targetId]=state};MemorySharedClientState.prototype.removeLocalQueryTarget=function(targetId){this.localState.removeQueryTarget(targetId)};MemorySharedClientState.prototype.isLocalQueryTarget=function(targetId){return this.localState.activeTargetIds.has(targetId)};MemorySharedClientState.prototype.clearQueryState=function(targetId){delete this.queryState[targetId]};MemorySharedClientState.prototype.getAllActiveQueryTargets=function(){return this.localState.activeTargetIds};MemorySharedClientState.prototype.isActiveQueryTarget=function(targetId){return this.localState.activeTargetIds.has(targetId)};MemorySharedClientState.prototype.start=function(){this.localState=new LocalClientState;return Promise.resolve()};MemorySharedClientState.prototype.handleUserChange=function(user,removedBatchIds,addedBatchIds){// No op.
};MemorySharedClientState.prototype.setOnlineState=function(onlineState){// No op.
};MemorySharedClientState.prototype.shutdown=function(){};MemorySharedClientState.prototype.writeSequenceNumber=function(sequenceNumber){};return MemorySharedClientState}(),LOG_TAG$c="FirestoreClient",DOM_EXCEPTION_INVALID_STATE=11,DOM_EXCEPTION_ABORTED=20,DOM_EXCEPTION_QUOTA_EXCEEDED=22,IndexedDbPersistenceSettings=/** @class */function(){function IndexedDbPersistenceSettings(cacheSizeBytes,synchronizeTabs){this.cacheSizeBytes=cacheSizeBytes;this.synchronizeTabs=synchronizeTabs}IndexedDbPersistenceSettings.prototype.lruParams=function(){return LruParams.withCacheSize(this.cacheSizeBytes)};return IndexedDbPersistenceSettings}(),MemoryPersistenceSettings=/** @class */function(){function MemoryPersistenceSettings(){}return MemoryPersistenceSettings}(),FirestoreClient=/** @class */function(){function FirestoreClient(platform,databaseInfo,credentials,/**
                                                                 * Asynchronous queue responsible for all of our internal processing. When
                                                                 * we get incoming work from the user (via public API) or the network
                                                                 * (incoming GRPC messages), we should always schedule onto this queue.
                                                                 * This ensures all of our work is properly serialized (e.g. we don't
                                                                 * start processing a new operation while the previous one is waiting for
                                                                 * an async I/O to complete).
                                                                 */asyncQueue){this.platform=platform;this.databaseInfo=databaseInfo;this.credentials=credentials;this.asyncQueue=asyncQueue;this.clientId=AutoId.newId();this._clientShutdown=!1}/**
     * Starts up the FirestoreClient, returning only whether or not enabling
     * persistence succeeded.
     *
     * The intent here is to "do the right thing" as far as users are concerned.
     * Namely, in cases where offline persistence is requested and possible,
     * enable it, but otherwise fall back to persistence disabled. For the most
     * part we expect this to succeed one way or the other so we don't expect our
     * users to actually wait on the firestore.enablePersistence Promise since
     * they generally won't care.
     *
     * Of course some users actually do care about whether or not persistence
     * was successfully enabled, so the Promise returned from this method
     * indicates this outcome.
     *
     * This presents a problem though: even before enablePersistence resolves or
     * rejects, users may have made calls to e.g. firestore.collection() which
     * means that the FirestoreClient in there will be available and will be
     * enqueuing actions on the async queue.
     *
     * Meanwhile any failure of an operation on the async queue causes it to
     * panic and reject any further work, on the premise that unhandled errors
     * are fatal.
     *
     * Consequently the fallback is handled internally here in start, and if the
     * fallback succeeds we signal success to the async queue even though the
     * start() itself signals failure.
     *
     * @param persistenceSettings Settings object to configure offline
     *     persistence.
     * @returns A deferred result indicating the user-visible result of enabling
     *     offline persistence. This method will reject this if IndexedDB fails to
     *     start for any reason. If usePersistence is false this is
     *     unconditionally resolved.
     */FirestoreClient.prototype.start=function(persistenceSettings){var _this=this;this.verifyNotShutdown();// We defer our initialization until we get the current user from
// setChangeListener(). We block the async queue until we got the initial
// user and the initialization is completed. This will prevent any scheduled
// work from happening before initialization is completed.
//
// If initializationDone resolved then the FirestoreClient is in a usable
// state.
var initializationDone=new Deferred$1,persistenceResult=new Deferred$1,initialized=!1;// If usePersistence is true, certain classes of errors while starting are
// recoverable but only by falling back to persistence disabled.
//
// If there's an error in the first case but not in recovery we cannot
// reject the promise blocking the async queue because this will cause the
// async queue to panic.
this.credentials.setChangeListener(function(user){if(!initialized){initialized=!0;_this.initializePersistence(persistenceSettings,persistenceResult,user).then(function(maybeLruGc){return _this.initializeRest(user,maybeLruGc)}).then(initializationDone.resolve,initializationDone.reject)}else{_this.asyncQueue.enqueueAndForget(function(){return _this.handleCredentialChange(user)})}});// Block the async queue until initialization is done
this.asyncQueue.enqueueAndForget(function(){return initializationDone.promise});// Return only the result of enabling persistence. Note that this does not
// need to await the completion of initializationDone because the result of
// this method should not reflect any other kind of failure to start.
return persistenceResult.promise};/** Enables the network connection and requeues all pending operations. */FirestoreClient.prototype.enableNetwork=function(){var _this=this;this.verifyNotShutdown();return this.asyncQueue.enqueue(function(){return _this.syncEngine.enableNetwork()})};/**
      * Initializes persistent storage, attempting to use IndexedDB if
      * usePersistence is true or memory-only if false.
      *
      * If IndexedDB fails because it's already open in another tab or because the
      * platform can't possibly support our implementation then this method rejects
      * the persistenceResult and falls back on memory-only persistence.
      *
      * @param persistenceSettings Settings object to configure offline persistence
      * @param persistenceResult A deferred result indicating the user-visible
      *     result of enabling offline persistence. This method will reject this if
      *     IndexedDB fails to start for any reason. If usePersistence is false
      *     this is unconditionally resolved.
      * @returns a Promise indicating whether or not initialization should
      *     continue, i.e. that one of the persistence implementations actually
      *     succeeded.
      */FirestoreClient.prototype.initializePersistence=function(persistenceSettings,persistenceResult,user){var _this=this;if(persistenceSettings instanceof IndexedDbPersistenceSettings){return this.startIndexedDbPersistence(user,persistenceSettings).then(function(maybeLruGc){persistenceResult.resolve();return maybeLruGc}).catch(function(error){// Regardless of whether or not the retry succeeds, from an user
// perspective, offline persistence has failed.
persistenceResult.reject(error);// An unknown failure on the first stage shuts everything down.
if(!_this.canFallback(error)){throw error}console.warn("Error enabling offline persistence. Falling back to"+" persistence disabled: "+error);return _this.startMemoryPersistence()})}else{// When usePersistence == false, enabling offline persistence is defined
// to unconditionally succeed. This allows start() to have the same
// signature for both cases, despite the fact that the returned promise
// is only used in the enablePersistence call.
persistenceResult.resolve();return this.startMemoryPersistence()}};/**
      * Decides whether the provided error allows us to gracefully disable
      * persistence (as opposed to crashing the client).
      */FirestoreClient.prototype.canFallback=function(error){if(error instanceof FirestoreError){return error.code===Code.FAILED_PRECONDITION||error.code===Code.UNIMPLEMENTED}else if("undefined"!==typeof DOMException&&error instanceof DOMException){// There are a few known circumstances where we can open IndexedDb but
// trying to read/write will fail (e.g. quota exceeded). For
// well-understood cases, we attempt to detect these and then gracefully
// fall back to memory persistence.
// NOTE: Rather than continue to add to this list, we could decide to
// always fall back, with the risk that we might accidentally hide errors
// representing actual SDK bugs.
return(// When the browser is out of quota we could get either quota exceeded
// or an aborted error depending on whether the error happened during
// schema migration.
error.code===DOM_EXCEPTION_QUOTA_EXCEEDED||error.code===DOM_EXCEPTION_ABORTED||// Firefox Private Browsing mode disables IndexedDb and returns
// INVALID_STATE for any usage.
error.code===DOM_EXCEPTION_INVALID_STATE)}return!0};/**
      * Checks that the client has not been shutdown. Ensures that other methods on
      * this class cannot be called after the client is shutdown.
      */FirestoreClient.prototype.verifyNotShutdown=function(){if(this._clientShutdown){throw new FirestoreError(Code.FAILED_PRECONDITION,"The client has already been shutdown.")}};/**
      * Starts IndexedDB-based persistence.
      *
      * @returns A promise indicating success or failure.
      */FirestoreClient.prototype.startIndexedDbPersistence=function(user,settings){var _this=this,storagePrefix=IndexedDbPersistence.buildStoragePrefix(this.databaseInfo),serializer=new JsonProtoSerializer(this.databaseInfo.databaseId,{useProto3Json:!0});// TODO(http://b/33384523): For now we just disable garbage collection
// when persistence is enabled.
return Promise.resolve().then(function(){return __awaiter(_this,void 0,void 0,function(){var persistence,lruParams;return __generator(this,function(_a){switch(_a.label){case 0:if(settings.synchronizeTabs&&!WebStorageSharedClientState.isAvailable(this.platform)){throw new FirestoreError(Code.UNIMPLEMENTED,"IndexedDB persistence is only available on platforms that support LocalStorage.")}lruParams=settings.lruParams();if(!settings.synchronizeTabs)return[3/*break*/,2];this.sharedClientState=new WebStorageSharedClientState(this.asyncQueue,this.platform,storagePrefix,this.clientId,user);return[4/*yield*/,IndexedDbPersistence.createMultiClientIndexedDbPersistence(storagePrefix,this.clientId,this.platform,this.asyncQueue,serializer,lruParams,{sequenceNumberSyncer:this.sharedClientState})];case 1:persistence=_a.sent();return[3/*break*/,4];case 2:this.sharedClientState=new MemorySharedClientState;return[4/*yield*/,IndexedDbPersistence.createIndexedDbPersistence(storagePrefix,this.clientId,this.platform,this.asyncQueue,serializer,lruParams)];case 3:persistence=_a.sent();_a.label=4;case 4:this.persistence=persistence;return[2/*return*/,persistence.referenceDelegate.garbageCollector];}})})})};/**
      * Starts Memory-backed persistence. In practice this cannot fail.
      *
      * @returns A promise that will successfully resolve.
      */FirestoreClient.prototype.startMemoryPersistence=function(){this.persistence=MemoryPersistence.createEagerPersistence(this.clientId);this.sharedClientState=new MemorySharedClientState;return Promise.resolve(null)};/**
      * Initializes the rest of the FirestoreClient, assuming the initial user
      * has been obtained from the credential provider and some persistence
      * implementation is available in this.persistence.
      */FirestoreClient.prototype.initializeRest=function(user,maybeLruGc){var _this=this;debug(LOG_TAG$c,"Initializing. user=",user.uid);return this.platform.loadConnection(this.databaseInfo).then(function(connection){return __awaiter(_this,void 0,void 0,function(){var connectivityMonitor,serializer,datastore,remoteStoreOnlineStateChangedHandler,sharedClientStateOnlineStateChangedHandler,_this=this;return __generator(this,function(_a){switch(_a.label){case 0:this.localStore=new LocalStore(this.persistence,user);if(maybeLruGc){// We're running LRU Garbage collection. Set up the scheduler.
this.lruScheduler=new LruScheduler(maybeLruGc,this.asyncQueue,this.localStore)}connectivityMonitor=this.platform.newConnectivityMonitor();serializer=this.platform.newSerializer(this.databaseInfo.databaseId);datastore=new Datastore(this.asyncQueue,connection,this.credentials,serializer);remoteStoreOnlineStateChangedHandler=function(onlineState){return _this.syncEngine.applyOnlineStateChange(onlineState,OnlineStateSource.RemoteStore)};sharedClientStateOnlineStateChangedHandler=function(onlineState){return _this.syncEngine.applyOnlineStateChange(onlineState,OnlineStateSource.SharedClientState)};this.remoteStore=new RemoteStore(this.localStore,datastore,this.asyncQueue,remoteStoreOnlineStateChangedHandler,connectivityMonitor);this.syncEngine=new SyncEngine(this.localStore,this.remoteStore,this.sharedClientState,user);this.sharedClientState.onlineStateHandler=sharedClientStateOnlineStateChangedHandler;// Set up wiring between sync engine and other components
this.remoteStore.syncEngine=this.syncEngine;this.sharedClientState.syncEngine=this.syncEngine;this.eventMgr=new EventManager(this.syncEngine);// PORTING NOTE: LocalStore doesn't need an explicit start() on the Web.
return[4/*yield*/,this.sharedClientState.start()];case 1:// PORTING NOTE: LocalStore doesn't need an explicit start() on the Web.
_a.sent();return[4/*yield*/,this.remoteStore.start()];case 2:_a.sent();// NOTE: This will immediately call the listener, so we make sure to
// set it after localStore / remoteStore are started.
return[4/*yield*/,this.persistence.setPrimaryStateListener(function(isPrimary){return __awaiter(_this,void 0,void 0,function(){return __generator(this,function(_a){switch(_a.label){case 0:return[4/*yield*/,this.syncEngine.applyPrimaryState(isPrimary)];case 1:_a.sent();if(this.lruScheduler){if(isPrimary&&!this.lruScheduler.started){this.lruScheduler.start()}else if(!isPrimary){this.lruScheduler.stop()}}return[2/*return*/];}})})})];case 3:// NOTE: This will immediately call the listener, so we make sure to
// set it after localStore / remoteStore are started.
_a.sent();// When a user calls clearPersistence() in one client, all other clientfs
// need to shut down to allow the delete to succeed.
return[4/*yield*/,this.persistence.setDatabaseDeletedListener(function(){return __awaiter(_this,void 0,void 0,function(){return __generator(this,function(_a){switch(_a.label){case 0:return[4/*yield*/,this.shutdown()];case 1:_a.sent();return[2/*return*/];}})})})];case 4:// When a user calls clearPersistence() in one client, all other clientfs
// need to shut down to allow the delete to succeed.
_a.sent();return[2/*return*/];}})})})};FirestoreClient.prototype.handleCredentialChange=function(user){this.asyncQueue.verifyOperationInProgress();debug(LOG_TAG$c,"Credential Changed. Current user: "+user.uid);return this.syncEngine.handleCredentialChange(user)};/** Disables the network connection. Pending operations will not complete. */FirestoreClient.prototype.disableNetwork=function(){var _this=this;this.verifyNotShutdown();return this.asyncQueue.enqueue(function(){return _this.syncEngine.disableNetwork()})};FirestoreClient.prototype.shutdown=function(){var _this=this;return this.asyncQueue.enqueue(function(){return __awaiter(_this,void 0,void 0,function(){return __generator(this,function(_a){switch(_a.label){case 0:if(!!this._clientShutdown)return[3/*break*/,4];// PORTING NOTE: LocalStore does not need an explicit shutdown on web.
if(this.lruScheduler){this.lruScheduler.stop()}return[4/*yield*/,this.remoteStore.shutdown()];case 1:_a.sent();return[4/*yield*/,this.sharedClientState.shutdown()];case 2:_a.sent();return[4/*yield*/,this.persistence.shutdown()];case 3:_a.sent();// `removeChangeListener` must be called after shutting down the
// RemoteStore as it will prevent the RemoteStore from retrieving
// auth tokens.
this.credentials.removeChangeListener();this._clientShutdown=!0;_a.label=4;case 4:return[2/*return*/];}})})})};FirestoreClient.prototype.listen=function(query,observer,options){var _this=this;this.verifyNotShutdown();var listener=new QueryListener(query,observer,options);this.asyncQueue.enqueueAndForget(function(){return _this.eventMgr.listen(listener)});return listener};FirestoreClient.prototype.unlisten=function(listener){var _this=this;this.verifyNotShutdown();this.asyncQueue.enqueueAndForget(function(){return _this.eventMgr.unlisten(listener)})};FirestoreClient.prototype.getDocumentFromLocalCache=function(docKey){var _this=this;this.verifyNotShutdown();return this.asyncQueue.enqueue(function(){return _this.localStore.readDocument(docKey)}).then(function(maybeDoc){if(maybeDoc instanceof Document$1){return maybeDoc}else if(maybeDoc instanceof NoDocument){return null}else{throw new FirestoreError(Code.UNAVAILABLE,"Failed to get document from cache. (However, this document may "+"exist on the server. Run again without setting 'source' in "+"the GetOptions to attempt to retrieve the document from the "+"server.)")}})};FirestoreClient.prototype.getDocumentsFromLocalCache=function(query){var _this=this;this.verifyNotShutdown();return this.asyncQueue.enqueue(function(){return _this.localStore.executeQuery(query)}).then(function(docs){var remoteKeys=documentKeySet(),view=new View(query,remoteKeys),viewDocChanges=view.computeDocChanges(docs);return view.applyChanges(viewDocChanges,!1).snapshot})};FirestoreClient.prototype.write=function(mutations){var _this=this;this.verifyNotShutdown();var deferred=new Deferred$1;this.asyncQueue.enqueueAndForget(function(){return _this.syncEngine.write(mutations,deferred)});return deferred.promise};FirestoreClient.prototype.databaseId=function(){return this.databaseInfo.databaseId};Object.defineProperty(FirestoreClient.prototype,"clientShutdown",{get:function(){return this._clientShutdown},enumerable:!0,configurable:!0});FirestoreClient.prototype.transaction=function(updateFunction){var _this=this;this.verifyNotShutdown();// We have to wait for the async queue to be sure syncEngine is initialized.
return this.asyncQueue.enqueue(function(){return __awaiter(_this,void 0,void 0,function(){return __generator(this,function(_a){return[2/*return*/]})})}).then(function(){return _this.syncEngine.runTransaction(updateFunction)})};return FirestoreClient}(),AsyncObserver=/** @class */function(){function AsyncObserver(observer){this.observer=observer;/**
                               * When set to true, will not raise future events. Necessary to deal with
                               * async detachment of listener.
                               */this.muted=!1}AsyncObserver.prototype.next=function(value){this.scheduleEvent(this.observer.next,value)};AsyncObserver.prototype.error=function(error){this.scheduleEvent(this.observer.error,error)};AsyncObserver.prototype.mute=function(){this.muted=!0};AsyncObserver.prototype.scheduleEvent=function(eventHandler,event){var _this=this;if(!this.muted){setTimeout(function(){if(!_this.muted){eventHandler(event)}},0)}};return AsyncObserver}(),FieldPath$1=/** @class */function(){/**
   * Creates a FieldPath from the provided field names. If more than one field
   * name is provided, the path will point to a nested field in a document.
   *
   * @param fieldNames A list of field names.
   */function FieldPath$1(){for(var fieldNames=[],_i=0;_i<arguments.length;_i++){fieldNames[_i]=arguments[_i]}validateNamedArrayAtLeastNumberOfElements("FieldPath",fieldNames,"fieldNames",1);for(var i=0;i<fieldNames.length;++i){validateArgType("FieldPath","string",i,fieldNames[i]);if(0===fieldNames[i].length){throw new FirestoreError(Code.INVALID_ARGUMENT,"Invalid field name at argument $(i + 1). "+"Field names must not be empty.")}}this._internalPath=new FieldPath(fieldNames)}FieldPath$1.documentId=function(){return FieldPath$1._DOCUMENT_ID};FieldPath$1.prototype.isEqual=function(other){if(!(other instanceof FieldPath$1)){throw invalidClassError("isEqual","FieldPath",1,other)}return this._internalPath.isEqual(other._internalPath)};/**
      * Internal Note: The backend doesn't technically support querying by
      * document ID. Instead it queries by the entire document name (full path
      * included), but in the cases we currently support documentId(), the net
      * effect is the same.
      */FieldPath$1._DOCUMENT_ID=new FieldPath$1(FieldPath.keyField().canonicalString());return FieldPath$1}(),RESERVED=/[~\*\/\[\]]/;/**
      * @license
      * Copyright 2017 Google Inc.
      *
      * Licensed under the Apache License, Version 2.0 (the "License");
      * you may not use this file except in compliance with the License.
      * You may obtain a copy of the License at
      *
      *   http://www.apache.org/licenses/LICENSE-2.0
      *
      * Unless required by applicable law or agreed to in writing, software
      * distributed under the License is distributed on an "AS IS" BASIS,
      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      * See the License for the specific language governing permissions and
      * limitations under the License.
      */ /**
                                             * Parses a field path string into a FieldPath, treating dots as separators.
                                             */function fromDotSeparatedString(path){var found=path.search(RESERVED);if(0<=found){throw new FirestoreError(Code.INVALID_ARGUMENT,"Invalid field path ("+path+"). Paths must not contain "+"'~', '*', '/', '[', or ']'")}try{return new(FieldPath$1.bind.apply(FieldPath$1,[void 0].concat(path.split("."))))}catch(e){throw new FirestoreError(Code.INVALID_ARGUMENT,"Invalid field path ("+path+"). Paths must not be empty, "+"begin with '.', end with '.', or contain '..'")}}/**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */var OAuthToken=/** @class */function(){function OAuthToken(value,user){this.user=user;this.type="OAuth";this.authHeaders={Authorization:"Bearer "+value}}return OAuthToken}(),EmptyCredentialsProvider=/** @class */function(){function EmptyCredentialsProvider(){/**
     * Stores the listener registered with setChangeListener()
     * This isn't actually necessary since the UID never changes, but we use this
     * to verify the listen contract is adhered to in tests.
     */this.changeListener=null}EmptyCredentialsProvider.prototype.getToken=function(){return Promise.resolve(null)};EmptyCredentialsProvider.prototype.invalidateToken=function(){};EmptyCredentialsProvider.prototype.setChangeListener=function(changeListener){assert$1(!this.changeListener,"Can only call setChangeListener() once.");this.changeListener=changeListener;// Fire with initial user.
changeListener(User.UNAUTHENTICATED)};EmptyCredentialsProvider.prototype.removeChangeListener=function(){assert$1(null!==this.changeListener,"removeChangeListener() when no listener registered");this.changeListener=null};return EmptyCredentialsProvider}(),FirebaseCredentialsProvider=/** @class */function(){function FirebaseCredentialsProvider(app){var _this=this;this.app=app;/**
                     * The auth token listener registered with FirebaseApp, retained here so we
                     * can unregister it.
                     */this.tokenListener=null;/**
                                * Counter used to detect if the token changed while a getToken request was
                                * outstanding.
                                */this.tokenCounter=0;/** The listener registered with setChangeListener(). */this.changeListener=null;this.forceRefresh=!1;this.tokenListener=function(){_this.tokenCounter++;_this.currentUser=_this.getUser();if(_this.changeListener){_this.changeListener(_this.currentUser)}};this.tokenCounter=0;// Will fire at least once where we set this.currentUser
this.app.INTERNAL.addAuthTokenListener(this.tokenListener)}FirebaseCredentialsProvider.prototype.getToken=function(){var _this=this;assert$1(null!=this.tokenListener,"getToken cannot be called after listener removed.");// Take note of the current value of the tokenCounter so that this method
// can fail (with an ABORTED error) if there is a token change while the
// request is outstanding.
var initialTokenCounter=this.tokenCounter,forceRefresh=this.forceRefresh;this.forceRefresh=!1;return this.app.INTERNAL.getToken(forceRefresh).then(function(tokenData){// Cancel the request since the token changed while the request was
// outstanding so the response is potentially for a previous user (which
// user, we can't be sure).
if(_this.tokenCounter!==initialTokenCounter){throw new FirestoreError(Code.ABORTED,"getToken aborted due to token change.")}else{if(tokenData){assert$1("string"===typeof tokenData.accessToken,"Invalid tokenData returned from getToken():"+tokenData);return new OAuthToken(tokenData.accessToken,_this.currentUser)}else{return null}}})};FirebaseCredentialsProvider.prototype.invalidateToken=function(){this.forceRefresh=!0};FirebaseCredentialsProvider.prototype.setChangeListener=function(changeListener){assert$1(!this.changeListener,"Can only call setChangeListener() once.");this.changeListener=changeListener;// Fire the initial event, but only if we received the initial user
if(this.currentUser){changeListener(this.currentUser)}};FirebaseCredentialsProvider.prototype.removeChangeListener=function(){assert$1(null!=this.tokenListener,"removeChangeListener() called twice");assert$1(null!==this.changeListener,"removeChangeListener() called when no listener registered");this.app.INTERNAL.removeAuthTokenListener(this.tokenListener);this.tokenListener=null;this.changeListener=null};FirebaseCredentialsProvider.prototype.getUser=function(){var currentUid=this.app.INTERNAL.getUid();assert$1(null===currentUid||"string"===typeof currentUid,"Received invalid UID: "+currentUid);return new User(currentUid)};return FirebaseCredentialsProvider}(),FirstPartyToken=/** @class */function(){function FirstPartyToken(gapi,sessionIndex){this.gapi=gapi;this.sessionIndex=sessionIndex;this.type="FirstParty";this.user=User.FIRST_PARTY}Object.defineProperty(FirstPartyToken.prototype,"authHeaders",{get:function(){var headers={"X-Goog-AuthUser":this.sessionIndex},authHeader=this.gapi.auth.getAuthHeaderValueForFirstParty([]);if(authHeader){headers.Authorization=authHeader}return headers},enumerable:!0,configurable:!0});return FirstPartyToken}(),FirstPartyCredentialsProvider=/** @class */function(){function FirstPartyCredentialsProvider(gapi,sessionIndex){this.gapi=gapi;this.sessionIndex=sessionIndex}FirstPartyCredentialsProvider.prototype.getToken=function(){return Promise.resolve(new FirstPartyToken(this.gapi,this.sessionIndex))};FirstPartyCredentialsProvider.prototype.setChangeListener=function(changeListener){// Fire with initial uid.
changeListener(User.FIRST_PARTY)};FirstPartyCredentialsProvider.prototype.removeChangeListener=function(){};FirstPartyCredentialsProvider.prototype.invalidateToken=function(){};return FirstPartyCredentialsProvider}();/** A CredentialsProvider that always yields an empty token. */ /**
      * Builds a CredentialsProvider depending on the type of
      * the credentials passed in.
      */function makeCredentialsProvider(credentials){if(!credentials){return new EmptyCredentialsProvider}switch(credentials.type){case"gapi":var client=credentials.client;// Make sure this is a Gapi client.
assert$1(!!("object"===typeof client&&null!==client&&client.auth&&client.auth.getAuthHeaderValueForFirstParty),"unexpected gapi interface");return new FirstPartyCredentialsProvider(client,credentials.sessionIndex||"0");case"provider":return credentials.client;default:throw new FirestoreError(Code.INVALID_ARGUMENT,"makeCredentialsProvider failed due to invalid credential type");}}/**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */function isPartialObserver(obj){return implementsAnyMethods$1(obj,["next","error","complete"])}/**
   * Returns true if obj is an object and contains at least one of the specified
   * methods.
   */function implementsAnyMethods$1(obj,methods){if("object"!==typeof obj||null===obj){return!1}for(var object=obj,_i=0,methods_1=methods,method;_i<methods_1.length;_i++){method=methods_1[_i];if(method in object&&"function"===typeof object[method]){return!0}}return!1}/**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */ /**
       * An opaque base class for FieldValue sentinel objects in our public API,
       * with public static methods for creating said sentinel objects.
       */ // tslint:disable-next-line:class-as-namespace  We use this as a base class.
var FieldValueImpl=/** @class */function(){function FieldValueImpl(_methodName){this._methodName=_methodName}FieldValueImpl.delete=function(){validateNoArgs("FieldValue.delete",arguments);return DeleteFieldValueImpl.instance};FieldValueImpl.serverTimestamp=function(){validateNoArgs("FieldValue.serverTimestamp",arguments);return ServerTimestampFieldValueImpl.instance};FieldValueImpl.arrayUnion=function(){for(var elements=[],_i=0;_i<arguments.length;_i++){elements[_i]=arguments[_i]}validateAtLeastNumberOfArgs("FieldValue.arrayUnion",arguments,1);// NOTE: We don't actually parse the data until it's used in set() or
// update() since we need access to the Firestore instance.
return new ArrayUnionFieldValueImpl(elements)};FieldValueImpl.arrayRemove=function(){for(var elements=[],_i=0;_i<arguments.length;_i++){elements[_i]=arguments[_i]}validateAtLeastNumberOfArgs("FieldValue.arrayRemove",arguments,1);// NOTE: We don't actually parse the data until it's used in set() or
// update() since we need access to the Firestore instance.
return new ArrayRemoveFieldValueImpl(elements)};FieldValueImpl.increment=function(n){validateArgType("FieldValue.increment","number",1,n);validateExactNumberOfArgs("FieldValue.increment",arguments,1);return new NumericIncrementFieldValueImpl(n)};FieldValueImpl.prototype.isEqual=function(other){return this===other};return FieldValueImpl}(),DeleteFieldValueImpl=/** @class */function(_super){__extends(DeleteFieldValueImpl,_super);function DeleteFieldValueImpl(){return _super.call(this,"FieldValue.delete")||this}/** Singleton instance. */DeleteFieldValueImpl.instance=new DeleteFieldValueImpl;return DeleteFieldValueImpl}(FieldValueImpl),ServerTimestampFieldValueImpl=/** @class */function(_super){__extends(ServerTimestampFieldValueImpl,_super);function ServerTimestampFieldValueImpl(){return _super.call(this,"FieldValue.serverTimestamp")||this}/** Singleton instance. */ServerTimestampFieldValueImpl.instance=new ServerTimestampFieldValueImpl;return ServerTimestampFieldValueImpl}(FieldValueImpl),ArrayUnionFieldValueImpl=/** @class */function(_super){__extends(ArrayUnionFieldValueImpl,_super);function ArrayUnionFieldValueImpl(_elements){var _this=_super.call(this,"FieldValue.arrayUnion")||this;_this._elements=_elements;return _this}return ArrayUnionFieldValueImpl}(FieldValueImpl),ArrayRemoveFieldValueImpl=/** @class */function(_super){__extends(ArrayRemoveFieldValueImpl,_super);function ArrayRemoveFieldValueImpl(_elements){var _this=_super.call(this,"FieldValue.arrayRemove")||this;_this._elements=_elements;return _this}return ArrayRemoveFieldValueImpl}(FieldValueImpl),NumericIncrementFieldValueImpl=/** @class */function(_super){__extends(NumericIncrementFieldValueImpl,_super);function NumericIncrementFieldValueImpl(_operand){var _this=_super.call(this,"FieldValue.increment")||this;_this._operand=_operand;return _this}return NumericIncrementFieldValueImpl}(FieldValueImpl),PublicFieldValue=makeConstructorPrivate(FieldValueImpl,"Use FieldValue.<field>() instead."),RESERVED_FIELD_REGEX=/^__.*__$/,ParsedSetData=/** @class */function(){function ParsedSetData(data,fieldMask,fieldTransforms){this.data=data;this.fieldMask=fieldMask;this.fieldTransforms=fieldTransforms}ParsedSetData.prototype.toMutations=function(key,precondition){var mutations=[];if(null!==this.fieldMask){mutations.push(new PatchMutation(key,this.data,this.fieldMask,precondition))}else{mutations.push(new SetMutation(key,this.data,precondition))}if(0<this.fieldTransforms.length){mutations.push(new TransformMutation(key,this.fieldTransforms))}return mutations};return ParsedSetData}(),ParsedUpdateData=/** @class */function(){function ParsedUpdateData(data,fieldMask,fieldTransforms){this.data=data;this.fieldMask=fieldMask;this.fieldTransforms=fieldTransforms}ParsedUpdateData.prototype.toMutations=function(key,precondition){var mutations=[new PatchMutation(key,this.data,this.fieldMask,precondition)];if(0<this.fieldTransforms.length){mutations.push(new TransformMutation(key,this.fieldTransforms))}return mutations};return ParsedUpdateData}(),UserDataSource;(function(UserDataSource){UserDataSource[UserDataSource.Set=0]="Set";UserDataSource[UserDataSource.Update=1]="Update";UserDataSource[UserDataSource.MergeSet=2]="MergeSet";/**
                                                                * Indicates the source is a where clause, cursor bound, arrayUnion()
                                                                * element, etc. Of note, isWrite(source) will return false.
                                                                */UserDataSource[UserDataSource.Argument=3]="Argument"})(UserDataSource||(UserDataSource={}));function isWrite(dataSource){switch(dataSource){case UserDataSource.Set:// fall through
case UserDataSource.MergeSet:// fall through
case UserDataSource.Update:return!0;case UserDataSource.Argument:return!1;default:throw fail("Unexpected case for UserDataSource: "+dataSource);}}/** A "context" object passed around while parsing user data. */var ParseContext=/** @class */function(){/**
   * Initializes a ParseContext with the given source and path.
   *
   * @param dataSource Indicates what kind of API method this data came from.
   * @param methodName The name of the method the user called to create this
   *     ParseContext.
   * @param path A path within the object being parsed. This could be an empty
   *     path (in which case the context represents the root of the data being
   *     parsed), or a nonempty path (indicating the context represents a nested
   *     location within the data).
   * @param arrayElement Whether or not this context corresponds to an element
   *     of an array.
   * @param fieldTransforms A mutable list of field transforms encountered while
   *     parsing the data.
   * @param fieldMask A mutable list of field paths encountered while parsing
   *     the data.
   *
   * TODO(b/34871131): We don't support array paths right now, so path can be
   * null to indicate the context represents any location within an array (in
   * which case certain features will not work and errors will be somewhat
   * compromised).
   */function ParseContext(dataSource,methodName,path,arrayElement,fieldTransforms,fieldMask){this.dataSource=dataSource;this.methodName=methodName;this.path=path;this.arrayElement=arrayElement;// Minor hack: If fieldTransforms is undefined, we assume this is an
// external call and we need to validate the entire path.
if(fieldTransforms===void 0){this.validatePath()}this.arrayElement=arrayElement!==void 0?arrayElement:!1;this.fieldTransforms=fieldTransforms||[];this.fieldMask=fieldMask||[]}ParseContext.prototype.childContextForField=function(field){var childPath=null==this.path?null:this.path.child(field),context=new ParseContext(this.dataSource,this.methodName,childPath,!1,this.fieldTransforms,this.fieldMask);context.validatePathSegment(field);return context};ParseContext.prototype.childContextForFieldPath=function(field){var childPath=null==this.path?null:this.path.child(field),context=new ParseContext(this.dataSource,this.methodName,childPath,!1,this.fieldTransforms,this.fieldMask);context.validatePath();return context};ParseContext.prototype.childContextForArray=function(index){// TODO(b/34871131): We don't support array paths right now; so make path
// null.
return new ParseContext(this.dataSource,this.methodName,/*path=*/null,!0,this.fieldTransforms,this.fieldMask)};ParseContext.prototype.createError=function(reason){var fieldDescription=null===this.path||this.path.isEmpty()?"":" (found in field "+this.path.toString()+")";return new FirestoreError(Code.INVALID_ARGUMENT,"Function "+this.methodName+"() called with invalid data. "+reason+fieldDescription)};/** Returns 'true' if 'fieldPath' was traversed when creating this context. */ParseContext.prototype.contains=function(fieldPath){return this.fieldMask.find(function(field){return fieldPath.isPrefixOf(field)})!==void 0||this.fieldTransforms.find(function(transform){return fieldPath.isPrefixOf(transform.field)})!==void 0};ParseContext.prototype.validatePath=function(){// TODO(b/34871131): Remove null check once we have proper paths for fields
// within arrays.
if(null===this.path){return}for(var i=0;i<this.path.length;i++){this.validatePathSegment(this.path.get(i))}};ParseContext.prototype.validatePathSegment=function(segment){if(isWrite(this.dataSource)&&RESERVED_FIELD_REGEX.test(segment)){throw this.createError("Document fields cannot begin and end with __")}};return ParseContext}(),DocumentKeyReference=/** @class */function(){function DocumentKeyReference(databaseId,key){this.databaseId=databaseId;this.key=key}return DocumentKeyReference}(),UserDataConverter=/** @class */function(){function UserDataConverter(preConverter){this.preConverter=preConverter}/** Parse document data from a non-merge set() call. */UserDataConverter.prototype.parseSetData=function(methodName,input){var context=new ParseContext(UserDataSource.Set,methodName,FieldPath.EMPTY_PATH);validatePlainObject("Data must be an object, but it was:",context,input);var updateData=this.parseData(input,context);return new ParsedSetData(updateData,/* fieldMask= */null,context.fieldTransforms)};/** Parse document data from a set() call with '{merge:true}'. */UserDataConverter.prototype.parseMergeData=function(methodName,input,fieldPaths){var context=new ParseContext(UserDataSource.MergeSet,methodName,FieldPath.EMPTY_PATH);validatePlainObject("Data must be an object, but it was:",context,input);var updateData=this.parseData(input,context),fieldMask,fieldTransforms;if(!fieldPaths){fieldMask=FieldMask.fromArray(context.fieldMask);fieldTransforms=context.fieldTransforms}else{for(var validatedFieldPaths=new SortedSet(FieldPath.comparator),_i=0,fieldPaths_1=fieldPaths;_i<fieldPaths_1.length;_i++){var stringOrFieldPath=fieldPaths_1[_i],fieldPath=void 0;if(stringOrFieldPath instanceof FieldPath$1){fieldPath=stringOrFieldPath._internalPath}else if("string"===typeof stringOrFieldPath){fieldPath=fieldPathFromDotSeparatedString(methodName,stringOrFieldPath)}else{throw fail("Expected stringOrFieldPath to be a string or a FieldPath")}if(!context.contains(fieldPath)){throw new FirestoreError(Code.INVALID_ARGUMENT,"Field '"+fieldPath+"' is specified in your field mask but missing from your input data.")}validatedFieldPaths=validatedFieldPaths.add(fieldPath)}fieldMask=FieldMask.fromSet(validatedFieldPaths);fieldTransforms=context.fieldTransforms.filter(function(transform){return fieldMask.covers(transform.field)})}return new ParsedSetData(updateData,fieldMask,fieldTransforms)};/** Parse update data from an update() call. */UserDataConverter.prototype.parseUpdateData=function(methodName,input){var _this=this,context=new ParseContext(UserDataSource.Update,methodName,FieldPath.EMPTY_PATH);validatePlainObject("Data must be an object, but it was:",context,input);var fieldMaskPaths=new SortedSet(FieldPath.comparator),updateData=ObjectValue.EMPTY;forEach$1(input,function(key,value){var path=fieldPathFromDotSeparatedString(methodName,key),childContext=context.childContextForFieldPath(path);value=_this.runPreConverter(value,childContext);if(value instanceof DeleteFieldValueImpl){// Add it to the field mask, but don't add anything to updateData.
fieldMaskPaths=fieldMaskPaths.add(path)}else{var parsedValue=_this.parseData(value,childContext);if(null!=parsedValue){fieldMaskPaths=fieldMaskPaths.add(path);updateData=updateData.set(path,parsedValue)}}});var mask=FieldMask.fromSet(fieldMaskPaths);return new ParsedUpdateData(updateData,mask,context.fieldTransforms)};/** Parse update data from a list of field/value arguments. */UserDataConverter.prototype.parseUpdateVarargs=function(methodName,field,value,moreFieldsAndValues){var context=new ParseContext(UserDataSource.Update,methodName,FieldPath.EMPTY_PATH),keys=[fieldPathFromArgument(methodName,field)],values=[value];if(0!==moreFieldsAndValues.length%2){throw new FirestoreError(Code.INVALID_ARGUMENT,"Function "+methodName+"() needs to be called with an even number "+"of arguments that alternate between field names and values.")}for(var i=0;i<moreFieldsAndValues.length;i+=2){keys.push(fieldPathFromArgument(methodName,moreFieldsAndValues[i]));values.push(moreFieldsAndValues[i+1])}for(var fieldMaskPaths=new SortedSet(FieldPath.comparator),updateData=ObjectValue.EMPTY,i=0;i<keys.length;++i){var path=keys[i],childContext=context.childContextForFieldPath(path),value_1=this.runPreConverter(values[i],childContext);if(value_1 instanceof DeleteFieldValueImpl){// Add it to the field mask, but don't add anything to updateData.
fieldMaskPaths=fieldMaskPaths.add(path)}else{var parsedValue=this.parseData(value_1,childContext);if(null!=parsedValue){fieldMaskPaths=fieldMaskPaths.add(path);updateData=updateData.set(path,parsedValue)}}}var mask=FieldMask.fromSet(fieldMaskPaths);return new ParsedUpdateData(updateData,mask,context.fieldTransforms)};/**
      * Parse a "query value" (e.g. value in a where filter or a value in a cursor
      * bound).
      */UserDataConverter.prototype.parseQueryValue=function(methodName,input){var context=new ParseContext(UserDataSource.Argument,methodName,FieldPath.EMPTY_PATH),parsed=this.parseData(input,context);assert$1(null!=parsed,"Parsed data should not be null.");assert$1(0===context.fieldTransforms.length,"Field transforms should have been disallowed.");return parsed};/** Sends data through this.preConverter, handling any thrown errors. */UserDataConverter.prototype.runPreConverter=function(input,context){try{return this.preConverter(input)}catch(e){var message=errorMessage(e);throw context.createError(message)}};/**
      * Internal helper for parsing user data.
      *
      * @param input Data to be parsed.
      * @param context A context object representing the current path being parsed,
      * the source of the data being parsed, etc.
      * @return The parsed value, or null if the value was a FieldValue sentinel
      * that should not be included in the resulting parsed data.
      */UserDataConverter.prototype.parseData=function(input,context){input=this.runPreConverter(input,context);if(looksLikeJsonObject(input)){validatePlainObject("Unsupported field value:",context,input);return this.parseObject(input,context)}else if(input instanceof FieldValueImpl){// FieldValues usually parse into transforms (except FieldValue.delete())
// in which case we do not want to include this field in our parsed data
// (as doing so will overwrite the field directly prior to the transform
// trying to transform it). So we don't add this location to
// context.fieldMask and we return null as our parsing result.
this.parseSentinelFieldValue(input,context);return null}else{// If context.path is null we are inside an array and we don't support
// field mask paths more granular than the top-level array.
if(context.path){context.fieldMask.push(context.path)}if(input instanceof Array){// TODO(b/34871131): Include the path containing the array in the error
// message.
if(context.arrayElement){throw context.createError("Nested arrays are not supported")}return this.parseArray(input,context)}else{return this.parseScalarValue(input,context)}}};UserDataConverter.prototype.parseObject=function(obj,context){var _this=this,result=new SortedMap(primitiveComparator);if(isEmpty$1(obj)){// If we encounter an empty object, we explicitly add it to the update
// mask to ensure that the server creates a map entry.
if(context.path&&0<context.path.length){context.fieldMask.push(context.path)}}else{forEach$1(obj,function(key,val){var parsedValue=_this.parseData(val,context.childContextForField(key));if(null!=parsedValue){result=result.insert(key,parsedValue)}})}return new ObjectValue(result)};UserDataConverter.prototype.parseArray=function(array,context){for(var result=[],entryIndex=0,_i=0,array_1=array;_i<array_1.length;_i++){var entry=array_1[_i],parsedEntry=this.parseData(entry,context.childContextForArray(entryIndex));if(null==parsedEntry){// Just include nulls in the array for fields being replaced with a
// sentinel.
parsedEntry=NullValue.INSTANCE}result.push(parsedEntry);entryIndex++}return new ArrayValue(result)};/**
      * "Parses" the provided FieldValueImpl, adding any necessary transforms to
      * context.fieldTransforms.
      */UserDataConverter.prototype.parseSentinelFieldValue=function(value,context){// Sentinels are only supported with writes, and not within arrays.
if(!isWrite(context.dataSource)){throw context.createError(value._methodName+"() can only be used with update() and set()")}if(null===context.path){throw context.createError(value._methodName+"() is not currently supported inside arrays")}if(value instanceof DeleteFieldValueImpl){if(context.dataSource===UserDataSource.MergeSet){// No transform to add for a delete, but we need to add it to our
// fieldMask so it gets deleted.
context.fieldMask.push(context.path)}else if(context.dataSource===UserDataSource.Update){assert$1(0<context.path.length,"FieldValue.delete() at the top level should have already"+" been handled.");throw context.createError("FieldValue.delete() can only appear at the top level "+"of your update data")}else{// We shouldn't encounter delete sentinels for queries or non-merge set() calls.
throw context.createError("FieldValue.delete() cannot be used with set() unless you pass "+"{merge:true}")}}else if(value instanceof ServerTimestampFieldValueImpl){context.fieldTransforms.push(new FieldTransform(context.path,ServerTimestampTransform.instance))}else if(value instanceof ArrayUnionFieldValueImpl){var parsedElements=this.parseArrayTransformElements(value._methodName,value._elements),arrayUnion=new ArrayUnionTransformOperation(parsedElements);context.fieldTransforms.push(new FieldTransform(context.path,arrayUnion))}else if(value instanceof ArrayRemoveFieldValueImpl){var parsedElements=this.parseArrayTransformElements(value._methodName,value._elements),arrayRemove=new ArrayRemoveTransformOperation(parsedElements);context.fieldTransforms.push(new FieldTransform(context.path,arrayRemove))}else if(value instanceof NumericIncrementFieldValueImpl){var operand=this.parseQueryValue("FieldValue.increment",value._operand),numericIncrement=new NumericIncrementTransformOperation(operand);context.fieldTransforms.push(new FieldTransform(context.path,numericIncrement))}else{fail("Unknown FieldValue type: "+value)}};/**
      * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)
      *
      * @return The parsed value
      */UserDataConverter.prototype.parseScalarValue=function(value,context){if(null===value){return NullValue.INSTANCE}else if("number"===typeof value){if(isSafeInteger(value)){return new IntegerValue(value)}else{return new DoubleValue(value)}}else if("boolean"===typeof value){return BooleanValue.of(value)}else if("string"===typeof value){return new StringValue(value)}else if(value instanceof Date){return new TimestampValue(Timestamp.fromDate(value))}else if(value instanceof Timestamp){// Firestore backend truncates precision down to microseconds. To ensure
// offline mode works the same with regards to truncation, perform the
// truncation immediately without waiting for the backend to do that.
return new TimestampValue(new Timestamp(value.seconds,1e3*Math.floor(value.nanoseconds/1e3)))}else if(value instanceof GeoPoint){return new GeoPointValue(value)}else if(value instanceof Blob){return new BlobValue(value)}else if(value instanceof DocumentKeyReference){return new RefValue(value.databaseId,value.key)}else{throw context.createError("Unsupported field value: "+valueDescription(value))}};UserDataConverter.prototype.parseArrayTransformElements=function(methodName,elements){var _this=this;return elements.map(function(element,i){// Although array transforms are used with writes, the actual elements
// being unioned or removed are not considered writes since they cannot
// contain any FieldValue sentinels, etc.
var context=new ParseContext(UserDataSource.Argument,methodName,FieldPath.EMPTY_PATH);return _this.parseData(element,context.childContextForArray(i))})};return UserDataConverter}();/**
      * A placeholder object for DocumentReferences in this file, in order to
      * avoid a circular dependency. See the comments for `DataPreConverter` for
      * the full context.
      */ /**
      * Checks whether an object looks like a JSON object that should be converted
      * into a struct. Normal class/prototype instances are considered to look like
      * JSON objects since they should be converted to a struct value. Arrays, Dates,
      * GeoPoints, etc. are not considered to look like JSON objects since they map
      * to specific FieldValue types other than ObjectValue.
      */function looksLikeJsonObject(input){return"object"===typeof input&&null!==input&&!(input instanceof Array)&&!(input instanceof Date)&&!(input instanceof Timestamp)&&!(input instanceof GeoPoint)&&!(input instanceof Blob)&&!(input instanceof DocumentKeyReference)&&!(input instanceof FieldValueImpl)}function validatePlainObject(message,context,input){if(!looksLikeJsonObject(input)||!isPlainObject(input)){var description=valueDescription(input);if("an object"===description){// Massage the error if it was an object.
throw context.createError(message+" a custom object")}else{throw context.createError(message+" "+description)}}}/**
   * Helper that calls fromDotSeparatedString() but wraps any error thrown.
   */function fieldPathFromArgument(methodName,path){if(path instanceof FieldPath$1){return path._internalPath}else if("string"===typeof path){return fieldPathFromDotSeparatedString(methodName,path)}else{var message="Field path arguments must be of type string or FieldPath.";throw new FirestoreError(Code.INVALID_ARGUMENT,"Function "+methodName+"() called with invalid data. "+message)}}/**
   * Wraps fromDotSeparatedString with an error message about the method that
   * was thrown.
   * @param methodName The publicly visible method name
   * @param path The dot-separated string form of a field path which will be split
   * on dots.
   */function fieldPathFromDotSeparatedString(methodName,path){try{return fromDotSeparatedString(path)._internalPath}catch(e){var message=errorMessage(e);throw new FirestoreError(Code.INVALID_ARGUMENT,"Function "+methodName+"() called with invalid data. "+message)}}/**
   * Extracts the message from a caught exception, which should be an Error object
   * though JS doesn't guarantee that.
   */function errorMessage(error){return error instanceof Error?error.message:error.toString()}/**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */ // The objects that are a part of this API are exposed to third-parties as
// compiled javascript so we want to flag our private members with a leading
// underscore to discourage their use.
// tslint:disable:strip-private-property-underscore
// settings() defaults:
var DEFAULT_HOST="firestore.googleapis.com",DEFAULT_SSL=!0,DEFAULT_TIMESTAMPS_IN_SNAPSHOTS=!0,DEFAULT_FORCE_LONG_POLLING=!1,CACHE_SIZE_UNLIMITED=LruParams.COLLECTION_DISABLED,DEFAULT_SYNCHRONIZE_TABS=!1,FirestoreSettings=/** @class */function(){function FirestoreSettings(settings){if(settings.host===void 0){if(settings.ssl!==void 0){throw new FirestoreError(Code.INVALID_ARGUMENT,"Can't provide ssl option if host option is not set")}this.host=DEFAULT_HOST;this.ssl=DEFAULT_SSL}else{validateNamedType("settings","non-empty string","host",settings.host);this.host=settings.host;validateNamedOptionalType("settings","boolean","ssl",settings.ssl);this.ssl=defaulted(settings.ssl,DEFAULT_SSL)}validateOptionNames("settings",settings,["host","ssl","credentials","timestampsInSnapshots","cacheSizeBytes","experimentalForceLongPolling"]);validateNamedOptionalType("settings","object","credentials",settings.credentials);this.credentials=settings.credentials;validateNamedOptionalType("settings","boolean","timestampsInSnapshots",settings.timestampsInSnapshots);// Nobody should set timestampsInSnapshots anymore, but the error depends on
// whether they set it to true or false...
if(!0===settings.timestampsInSnapshots){error("\n  The timestampsInSnapshots setting now defaults to true and you no\n  longer need to explicitly set it. In a future release, the setting\n  will be removed entirely and so it is recommended that you remove it\n  from your firestore.settings() call now.")}else if(!1===settings.timestampsInSnapshots){error("\n  The timestampsInSnapshots setting will soon be removed. YOU MUST UPDATE\n  YOUR CODE.\n\n  To hide this warning, stop using the timestampsInSnapshots setting in your\n  firestore.settings({ ... }) call.\n\n  Once you remove the setting, Timestamps stored in Cloud Firestore will be\n  read back as Firebase Timestamp objects instead of as system Date objects.\n  So you will also need to update code expecting a Date to instead expect a\n  Timestamp. For example:\n\n  // Old:\n  const date = snapshot.get('created_at');\n  // New:\n  const timestamp = snapshot.get('created_at'); const date =\n  timestamp.toDate();\n\n  Please audit all existing usages of Date when you enable the new\n  behavior.")}this.timestampsInSnapshots=defaulted(settings.timestampsInSnapshots,DEFAULT_TIMESTAMPS_IN_SNAPSHOTS);validateNamedOptionalType("settings","number","cacheSizeBytes",settings.cacheSizeBytes);if(settings.cacheSizeBytes===void 0){this.cacheSizeBytes=LruParams.DEFAULT_CACHE_SIZE_BYTES}else{if(settings.cacheSizeBytes!==CACHE_SIZE_UNLIMITED&&settings.cacheSizeBytes<LruParams.MINIMUM_CACHE_SIZE_BYTES){throw new FirestoreError(Code.INVALID_ARGUMENT,"cacheSizeBytes must be at least "+LruParams.MINIMUM_CACHE_SIZE_BYTES)}else{this.cacheSizeBytes=settings.cacheSizeBytes}}validateNamedOptionalType("settings","boolean","experimentalForceLongPolling",settings.experimentalForceLongPolling);this.forceLongPolling=settings.experimentalForceLongPolling===void 0?DEFAULT_FORCE_LONG_POLLING:settings.experimentalForceLongPolling}FirestoreSettings.prototype.isEqual=function(other){return this.host===other.host&&this.ssl===other.ssl&&this.timestampsInSnapshots===other.timestampsInSnapshots&&this.credentials===other.credentials&&this.cacheSizeBytes===other.cacheSizeBytes&&this.forceLongPolling===other.forceLongPolling};return FirestoreSettings}(),FirestoreConfig=/** @class */function(){function FirestoreConfig(){}return FirestoreConfig}(),Firestore=/** @class */function(){function Firestore(databaseIdOrApp){var _this=this;// Public for use in tests.
// TODO(mikelehen): Use modularized initialization instead.
this._queue=new AsyncQueue;this.INTERNAL={delete:function(){return __awaiter(_this,void 0,void 0,function(){return __generator(this,function(_a){switch(_a.label){case 0:// The client must be initalized to ensure that all subsequent API usage
// throws an exception.
this.ensureClientConfigured();return[4/*yield*/,this._firestoreClient.shutdown()];case 1:_a.sent();return[2/*return*/];}})})}};var config=new FirestoreConfig;if("object"===typeof databaseIdOrApp.options){// This is very likely a Firebase app object
// TODO(b/34177605): Can we somehow use instanceof?
var app=databaseIdOrApp;config.firebaseApp=app;config.databaseId=Firestore.databaseIdFromApp(app);config.persistenceKey=config.firebaseApp.name;config.credentials=new FirebaseCredentialsProvider(app)}else{var external_1=databaseIdOrApp;if(!external_1.projectId){throw new FirestoreError(Code.INVALID_ARGUMENT,"Must provide projectId")}config.databaseId=new DatabaseId(external_1.projectId,external_1.database);// Use a default persistenceKey that lines up with FirebaseApp.
config.persistenceKey="[DEFAULT]";config.credentials=new EmptyCredentialsProvider}config.settings=new FirestoreSettings({});this._config=config;this._databaseId=config.databaseId}Firestore.prototype.settings=function(settingsLiteral){validateExactNumberOfArgs("Firestore.settings",arguments,1);validateArgType("Firestore.settings","object",1,settingsLiteral);if(contains$2(settingsLiteral,"persistence")){throw new FirestoreError(Code.INVALID_ARGUMENT,"\"persistence\" is now specified with a separate call to "+"firestore.enablePersistence().")}var newSettings=new FirestoreSettings(settingsLiteral);if(this._firestoreClient&&!this._config.settings.isEqual(newSettings)){throw new FirestoreError(Code.FAILED_PRECONDITION,"Firestore has already been started and its settings can no longer "+"be changed. You can only call settings() before calling any other "+"methods on a Firestore object.")}this._config.settings=newSettings;if(newSettings.credentials!==void 0){this._config.credentials=makeCredentialsProvider(newSettings.credentials)}};Firestore.prototype.enableNetwork=function(){this.ensureClientConfigured();return this._firestoreClient.enableNetwork()};Firestore.prototype.disableNetwork=function(){this.ensureClientConfigured();return this._firestoreClient.disableNetwork()};Firestore.prototype.enablePersistence=function(settings){if(this._firestoreClient){throw new FirestoreError(Code.FAILED_PRECONDITION,"Firestore has already been started and persistence can no longer "+"be enabled. You can only call enablePersistence() before calling "+"any other methods on a Firestore object.")}var synchronizeTabs=!1;if(settings){if(settings.experimentalTabSynchronization!==void 0){error("The 'experimentalTabSynchronization' setting has been renamed to "+"'synchronizeTabs'. In a future release, the setting will be removed "+"and it is recommended that you update your "+"firestore.enablePersistence() call to use 'synchronizeTabs'.")}synchronizeTabs=defaulted(settings.synchronizeTabs!==void 0?settings.synchronizeTabs:settings.experimentalTabSynchronization,DEFAULT_SYNCHRONIZE_TABS)}return this.configureClient(new IndexedDbPersistenceSettings(this._config.settings.cacheSizeBytes,synchronizeTabs))};Firestore.prototype._clearPersistence=function(){var _this=this,persistenceKey=IndexedDbPersistence.buildStoragePrefix(this.makeDatabaseInfo()),deferred=new Deferred$1;this._queue.enqueueAndForget(function(){return __awaiter(_this,void 0,void 0,function(){var e_1;return __generator(this,function(_a){switch(_a.label){case 0:_a.trys.push([0,2,,3]);if(this._firestoreClient!==void 0&&!this._firestoreClient.clientShutdown){throw new FirestoreError(Code.FAILED_PRECONDITION,"Persistence cannot be cleared while this firestore instance is running.")}return[4/*yield*/,IndexedDbPersistence.clearPersistence(persistenceKey)];case 1:_a.sent();deferred.resolve();return[3/*break*/,3];case 2:e_1=_a.sent();deferred.reject(e_1);return[3/*break*/,3];case 3:return[2/*return*/];}})})});return deferred.promise};Firestore.prototype.ensureClientConfigured=function(){if(!this._firestoreClient){// Kick off starting the client but don't actually wait for it.
// tslint:disable-next-line:no-floating-promises
this.configureClient(new MemoryPersistenceSettings)}return this._firestoreClient};Firestore.prototype.makeDatabaseInfo=function(){return new DatabaseInfo(this._config.databaseId,this._config.persistenceKey,this._config.settings.host,this._config.settings.ssl,this._config.settings.forceLongPolling)};Firestore.prototype.configureClient=function(persistenceSettings){var _this=this;assert$1(!!this._config.settings.host,"FirestoreSettings.host cannot be falsey");assert$1(!this._firestoreClient,"configureClient() called multiple times");var databaseInfo=this.makeDatabaseInfo(),preConverter=function(value){if(value instanceof DocumentReference){var thisDb=_this._config.databaseId,otherDb=value.firestore._config.databaseId;if(!otherDb.isEqual(thisDb)){throw new FirestoreError(Code.INVALID_ARGUMENT,"Document reference is for database "+(otherDb.projectId+"/"+otherDb.database+" but should be ")+("for database "+thisDb.projectId+"/"+thisDb.database))}return new DocumentKeyReference(_this._config.databaseId,value._key)}else{return value}};this._dataConverter=new UserDataConverter(preConverter);this._firestoreClient=new FirestoreClient(PlatformSupport.getPlatform(),databaseInfo,this._config.credentials,this._queue);return this._firestoreClient.start(persistenceSettings)};Firestore.databaseIdFromApp=function(app){var options=app.options;if(!contains$2(options,"projectId")){throw new FirestoreError(Code.INVALID_ARGUMENT,"\"projectId\" not provided in firebase.initializeApp.")}var projectId=options.projectId;if(!projectId||"string"!==typeof projectId){throw new FirestoreError(Code.INVALID_ARGUMENT,"projectId must be a string in FirebaseApp.options")}return new DatabaseId(projectId)};Object.defineProperty(Firestore.prototype,"app",{get:function(){if(!this._config.firebaseApp){throw new FirestoreError(Code.FAILED_PRECONDITION,"Firestore was not initialized using the Firebase SDK. 'app' is "+"not available")}return this._config.firebaseApp},enumerable:!0,configurable:!0});Firestore.prototype.collection=function(pathString){validateExactNumberOfArgs("Firestore.collection",arguments,1);validateArgType("Firestore.collection","non-empty string",1,pathString);this.ensureClientConfigured();return new CollectionReference(ResourcePath.fromString(pathString),this)};Firestore.prototype.doc=function(pathString){validateExactNumberOfArgs("Firestore.doc",arguments,1);validateArgType("Firestore.doc","non-empty string",1,pathString);this.ensureClientConfigured();return DocumentReference.forPath(ResourcePath.fromString(pathString),this)};Firestore.prototype.collectionGroup=function(collectionId){validateExactNumberOfArgs("Firestore.collectionGroup",arguments,1);validateArgType("Firestore.collectionGroup","non-empty string",1,collectionId);if(0<=collectionId.indexOf("/")){throw new FirestoreError(Code.INVALID_ARGUMENT,"Invalid collection ID '"+collectionId+"' passed to function "+"Firestore.collectionGroup(). Collection IDs must not contain '/'.")}this.ensureClientConfigured();return new Query$1(new Query(ResourcePath.EMPTY_PATH,collectionId),this)};Firestore.prototype.runTransaction=function(updateFunction){var _this=this;validateExactNumberOfArgs("Firestore.runTransaction",arguments,1);validateArgType("Firestore.runTransaction","function",1,updateFunction);return this.ensureClientConfigured().transaction(function(transaction){return updateFunction(new Transaction$1(_this,transaction))})};Firestore.prototype.batch=function(){this.ensureClientConfigured();return new WriteBatch(this)};Object.defineProperty(Firestore,"logLevel",{get:function(){switch(getLogLevel()){case LogLevel$1.DEBUG:return"debug";case LogLevel$1.ERROR:return"error";case LogLevel$1.SILENT:return"silent";default:return fail("Unknown log level: "+getLogLevel());}},enumerable:!0,configurable:!0});Firestore.setLogLevel=function(level){validateExactNumberOfArgs("Firestore.setLogLevel",arguments,1);validateArgType("Firestore.setLogLevel","non-empty string",1,level);switch(level){case"debug":setLogLevel$1(LogLevel$1.DEBUG);break;case"error":setLogLevel$1(LogLevel$1.ERROR);break;case"silent":setLogLevel$1(LogLevel$1.SILENT);break;default:throw new FirestoreError(Code.INVALID_ARGUMENT,"Invalid log level: "+level);}};// Note: this is not a property because the minifier can't work correctly with
// the way TypeScript compiler outputs properties.
Firestore.prototype._areTimestampsInSnapshotsEnabled=function(){return this._config.settings.timestampsInSnapshots};return Firestore}(),Transaction$1=/** @class */function(){function Transaction(_firestore,_transaction){this._firestore=_firestore;this._transaction=_transaction}Transaction.prototype.get=function(documentRef){var _this=this;validateExactNumberOfArgs("Transaction.get",arguments,1);var ref=validateReference("Transaction.get",documentRef,this._firestore);return this._transaction.lookup([ref._key]).then(function(docs){if(!docs||1!==docs.length){return fail("Mismatch in docs returned from document lookup.")}var doc=docs[0];if(doc instanceof NoDocument){return new DocumentSnapshot(_this._firestore,ref._key,null,!1,!1)}else if(doc instanceof Document$1){return new DocumentSnapshot(_this._firestore,ref._key,doc,!1,!1)}else{throw fail("BatchGetDocumentsRequest returned unexpected document type: "+doc.constructor.name)}})};Transaction.prototype.set=function(documentRef,value,options){validateBetweenNumberOfArgs("Transaction.set",arguments,2,3);var ref=validateReference("Transaction.set",documentRef,this._firestore);options=validateSetOptions("Transaction.set",options);var parsed=options.merge||options.mergeFields?this._firestore._dataConverter.parseMergeData("Transaction.set",value,options.mergeFields):this._firestore._dataConverter.parseSetData("Transaction.set",value);this._transaction.set(ref._key,parsed);return this};Transaction.prototype.update=function(documentRef,fieldOrUpdateData,value){for(var moreFieldsAndValues=[],_i=3;_i<arguments.length;_i++){moreFieldsAndValues[_i-3]=arguments[_i]}var ref,parsed;if("string"===typeof fieldOrUpdateData||fieldOrUpdateData instanceof FieldPath$1){validateAtLeastNumberOfArgs("Transaction.update",arguments,3);ref=validateReference("Transaction.update",documentRef,this._firestore);parsed=this._firestore._dataConverter.parseUpdateVarargs("Transaction.update",fieldOrUpdateData,value,moreFieldsAndValues)}else{validateExactNumberOfArgs("Transaction.update",arguments,2);ref=validateReference("Transaction.update",documentRef,this._firestore);parsed=this._firestore._dataConverter.parseUpdateData("Transaction.update",fieldOrUpdateData)}this._transaction.update(ref._key,parsed);return this};Transaction.prototype.delete=function(documentRef){validateExactNumberOfArgs("Transaction.delete",arguments,1);var ref=validateReference("Transaction.delete",documentRef,this._firestore);this._transaction.delete(ref._key);return this};return Transaction}(),WriteBatch=/** @class */function(){function WriteBatch(_firestore){this._firestore=_firestore;this._mutations=[];this._committed=!1}WriteBatch.prototype.set=function(documentRef,value,options){validateBetweenNumberOfArgs("WriteBatch.set",arguments,2,3);this.verifyNotCommitted();var ref=validateReference("WriteBatch.set",documentRef,this._firestore);options=validateSetOptions("WriteBatch.set",options);var parsed=options.merge||options.mergeFields?this._firestore._dataConverter.parseMergeData("WriteBatch.set",value,options.mergeFields):this._firestore._dataConverter.parseSetData("WriteBatch.set",value);this._mutations=this._mutations.concat(parsed.toMutations(ref._key,Precondition.NONE));return this};WriteBatch.prototype.update=function(documentRef,fieldOrUpdateData,value){for(var moreFieldsAndValues=[],_i=3;_i<arguments.length;_i++){moreFieldsAndValues[_i-3]=arguments[_i]}this.verifyNotCommitted();var ref,parsed;if("string"===typeof fieldOrUpdateData||fieldOrUpdateData instanceof FieldPath$1){validateAtLeastNumberOfArgs("WriteBatch.update",arguments,3);ref=validateReference("WriteBatch.update",documentRef,this._firestore);parsed=this._firestore._dataConverter.parseUpdateVarargs("WriteBatch.update",fieldOrUpdateData,value,moreFieldsAndValues)}else{validateExactNumberOfArgs("WriteBatch.update",arguments,2);ref=validateReference("WriteBatch.update",documentRef,this._firestore);parsed=this._firestore._dataConverter.parseUpdateData("WriteBatch.update",fieldOrUpdateData)}this._mutations=this._mutations.concat(parsed.toMutations(ref._key,Precondition.exists(!0)));return this};WriteBatch.prototype.delete=function(documentRef){validateExactNumberOfArgs("WriteBatch.delete",arguments,1);this.verifyNotCommitted();var ref=validateReference("WriteBatch.delete",documentRef,this._firestore);this._mutations=this._mutations.concat(new DeleteMutation(ref._key,Precondition.NONE));return this};WriteBatch.prototype.commit=function(){return __awaiter(this,void 0,void 0,function(){return __generator(this,function(_a){this.verifyNotCommitted();this._committed=!0;if(0<this._mutations.length){return[2/*return*/,this._firestore.ensureClientConfigured().write(this._mutations)]}return[2/*return*/]})})};WriteBatch.prototype.verifyNotCommitted=function(){if(this._committed){throw new FirestoreError(Code.FAILED_PRECONDITION,"A write batch can no longer be used after commit() "+"has been called.")}};return WriteBatch}(),DocumentReference=/** @class */function(){function DocumentReference(_key,firestore){this._key=_key;this.firestore=firestore;this._firestoreClient=this.firestore.ensureClientConfigured()}DocumentReference.forPath=function(path,firestore){if(0!==path.length%2){throw new FirestoreError(Code.INVALID_ARGUMENT,"Invalid document reference. Document "+"references must have an even number of segments, but "+(path.canonicalString()+" has "+path.length))}return new DocumentReference(new DocumentKey(path),firestore)};Object.defineProperty(DocumentReference.prototype,"id",{get:function(){return this._key.path.lastSegment()},enumerable:!0,configurable:!0});Object.defineProperty(DocumentReference.prototype,"parent",{get:function(){return new CollectionReference(this._key.path.popLast(),this.firestore)},enumerable:!0,configurable:!0});Object.defineProperty(DocumentReference.prototype,"path",{get:function(){return this._key.path.canonicalString()},enumerable:!0,configurable:!0});DocumentReference.prototype.collection=function(pathString){validateExactNumberOfArgs("DocumentReference.collection",arguments,1);validateArgType("DocumentReference.collection","non-empty string",1,pathString);if(!pathString){throw new FirestoreError(Code.INVALID_ARGUMENT,"Must provide a non-empty collection name to collection()")}var path=ResourcePath.fromString(pathString);return new CollectionReference(this._key.path.child(path),this.firestore)};DocumentReference.prototype.isEqual=function(other){if(!(other instanceof DocumentReference)){throw invalidClassError("isEqual","DocumentReference",1,other)}return this.firestore===other.firestore&&this._key.isEqual(other._key)};DocumentReference.prototype.set=function(value,options){validateBetweenNumberOfArgs("DocumentReference.set",arguments,1,2);options=validateSetOptions("DocumentReference.set",options);var parsed=options.merge||options.mergeFields?this.firestore._dataConverter.parseMergeData("DocumentReference.set",value,options.mergeFields):this.firestore._dataConverter.parseSetData("DocumentReference.set",value);return this._firestoreClient.write(parsed.toMutations(this._key,Precondition.NONE))};DocumentReference.prototype.update=function(fieldOrUpdateData,value){for(var moreFieldsAndValues=[],_i=2;_i<arguments.length;_i++){moreFieldsAndValues[_i-2]=arguments[_i]}var parsed;if("string"===typeof fieldOrUpdateData||fieldOrUpdateData instanceof FieldPath$1){validateAtLeastNumberOfArgs("DocumentReference.update",arguments,2);parsed=this.firestore._dataConverter.parseUpdateVarargs("DocumentReference.update",fieldOrUpdateData,value,moreFieldsAndValues)}else{validateExactNumberOfArgs("DocumentReference.update",arguments,1);parsed=this.firestore._dataConverter.parseUpdateData("DocumentReference.update",fieldOrUpdateData)}return this._firestoreClient.write(parsed.toMutations(this._key,Precondition.exists(!0)))};DocumentReference.prototype.delete=function(){validateExactNumberOfArgs("DocumentReference.delete",arguments,0);return this._firestoreClient.write([new DeleteMutation(this._key,Precondition.NONE)])};DocumentReference.prototype.onSnapshot=function(){for(var args=[],_i=0;_i<arguments.length;_i++){args[_i]=arguments[_i]}validateBetweenNumberOfArgs("DocumentReference.onSnapshot",arguments,1,4);var options={includeMetadataChanges:!1},observer,currArg=0;if("object"===typeof args[currArg]&&!isPartialObserver(args[currArg])){options=args[currArg];validateOptionNames("DocumentReference.onSnapshot",options,["includeMetadataChanges"]);validateNamedOptionalType("DocumentReference.onSnapshot","boolean","includeMetadataChanges",options.includeMetadataChanges);currArg++}var internalOptions={includeMetadataChanges:options.includeMetadataChanges};if(isPartialObserver(args[currArg])){observer=args[currArg]}else{validateArgType("DocumentReference.onSnapshot","function",currArg,args[currArg]);validateOptionalArgType("DocumentReference.onSnapshot","function",currArg+1,args[currArg+1]);validateOptionalArgType("DocumentReference.onSnapshot","function",currArg+2,args[currArg+2]);observer={next:args[currArg],error:args[currArg+1],complete:args[currArg+2]}}return this.onSnapshotInternal(internalOptions,observer)};DocumentReference.prototype.onSnapshotInternal=function(options,observer){var _this=this,errHandler=function(err){console.error("Uncaught Error in onSnapshot:",err)};if(observer.error){errHandler=observer.error.bind(observer)}var asyncObserver=new AsyncObserver({next:function(snapshot){if(observer.next){assert$1(1>=snapshot.docs.size,"Too many documents returned on a document query");var doc=snapshot.docs.get(_this._key);observer.next(new DocumentSnapshot(_this.firestore,_this._key,doc,snapshot.fromCache,snapshot.hasPendingWrites))}},error:errHandler}),internalListener=this._firestoreClient.listen(Query.atPath(this._key.path),asyncObserver,options);return function(){asyncObserver.mute();_this._firestoreClient.unlisten(internalListener)}};DocumentReference.prototype.get=function(options){var _this=this;validateBetweenNumberOfArgs("DocumentReference.get",arguments,0,1);validateGetOptions("DocumentReference.get",options);return new Promise(function(resolve,reject){if(options&&"cache"===options.source){_this.firestore.ensureClientConfigured().getDocumentFromLocalCache(_this._key).then(function(doc){resolve(new DocumentSnapshot(_this.firestore,_this._key,doc,!0,doc instanceof Document$1?doc.hasLocalMutations:!1))},reject)}else{_this.getViaSnapshotListener(resolve,reject,options)}})};DocumentReference.prototype.getViaSnapshotListener=function(resolve,reject,options){var unlisten=this.onSnapshotInternal({includeMetadataChanges:!0,waitForSyncWhenOnline:!0},{next:function(snap){// Remove query first before passing event to user to avoid
// user actions affecting the now stale query.
unlisten();if(!snap.exists&&snap.metadata.fromCache){// TODO(dimond): If we're online and the document doesn't
// exist then we resolve with a doc.exists set to false. If
// we're offline however, we reject the Promise in this
// case. Two options: 1) Cache the negative response from
// the server so we can deliver that even when you're
// offline 2) Actually reject the Promise in the online case
// if the document doesn't exist.
reject(new FirestoreError(Code.UNAVAILABLE,"Failed to get document because the client is "+"offline."))}else if(snap.exists&&snap.metadata.fromCache&&options&&"server"===options.source){reject(new FirestoreError(Code.UNAVAILABLE,"Failed to get document from server. (However, this "+"document does exist in the local cache. Run again "+"without setting source to \"server\" to "+"retrieve the cached document.)"))}else{resolve(snap)}},error:reject})};return DocumentReference}(),SnapshotMetadata=/** @class */function(){function SnapshotMetadata(hasPendingWrites,fromCache){this.hasPendingWrites=hasPendingWrites;this.fromCache=fromCache}SnapshotMetadata.prototype.isEqual=function(other){return this.hasPendingWrites===other.hasPendingWrites&&this.fromCache===other.fromCache};return SnapshotMetadata}(),DocumentSnapshot=/** @class */function(){function DocumentSnapshot(_firestore,_key,_document,_fromCache,_hasPendingWrites){this._firestore=_firestore;this._key=_key;this._document=_document;this._fromCache=_fromCache;this._hasPendingWrites=_hasPendingWrites}DocumentSnapshot.prototype.data=function(options){validateBetweenNumberOfArgs("DocumentSnapshot.data",arguments,0,1);options=validateSnapshotOptions("DocumentSnapshot.data",options);return!this._document?void 0:this.convertObject(this._document.data,FieldValueOptions.fromSnapshotOptions(options,this._firestore._areTimestampsInSnapshotsEnabled()))};DocumentSnapshot.prototype.get=function(fieldPath,options){validateBetweenNumberOfArgs("DocumentSnapshot.get",arguments,1,2);options=validateSnapshotOptions("DocumentSnapshot.get",options);if(this._document){var value=this._document.data.field(fieldPathFromArgument("DocumentSnapshot.get",fieldPath));if(value!==void 0){return this.convertValue(value,FieldValueOptions.fromSnapshotOptions(options,this._firestore._areTimestampsInSnapshotsEnabled()))}}return void 0};Object.defineProperty(DocumentSnapshot.prototype,"id",{get:function(){return this._key.path.lastSegment()},enumerable:!0,configurable:!0});Object.defineProperty(DocumentSnapshot.prototype,"ref",{get:function(){return new DocumentReference(this._key,this._firestore)},enumerable:!0,configurable:!0});Object.defineProperty(DocumentSnapshot.prototype,"exists",{get:function(){return null!==this._document},enumerable:!0,configurable:!0});Object.defineProperty(DocumentSnapshot.prototype,"metadata",{get:function(){return new SnapshotMetadata(this._hasPendingWrites,this._fromCache)},enumerable:!0,configurable:!0});DocumentSnapshot.prototype.isEqual=function(other){if(!(other instanceof DocumentSnapshot)){throw invalidClassError("isEqual","DocumentSnapshot",1,other)}return this._firestore===other._firestore&&this._fromCache===other._fromCache&&this._key.isEqual(other._key)&&(null===this._document?null===other._document:this._document.isEqual(other._document))};DocumentSnapshot.prototype.convertObject=function(data,options){var _this=this,result={};data.forEach(function(key,value){result[key]=_this.convertValue(value,options)});return result};DocumentSnapshot.prototype.convertValue=function(value,options){if(value instanceof ObjectValue){return this.convertObject(value,options)}else if(value instanceof ArrayValue){return this.convertArray(value,options)}else if(value instanceof RefValue){var key=value.value(options),database=this._firestore.ensureClientConfigured().databaseId();if(!value.databaseId.isEqual(database)){// TODO(b/64130202): Somehow support foreign references.
error("Document "+this._key.path+" contains a document "+"reference within a different database ("+(value.databaseId.projectId+"/"+value.databaseId.database+") which is not ")+"supported. It will be treated as a reference in the current "+("database ("+database.projectId+"/"+database.database+") ")+"instead.")}return new DocumentReference(key,this._firestore)}else{return value.value(options)}};DocumentSnapshot.prototype.convertArray=function(data,options){var _this=this;return data.internalValue.map(function(value){return _this.convertValue(value,options)})};return DocumentSnapshot}(),QueryDocumentSnapshot=/** @class */function(_super){__extends(QueryDocumentSnapshot,_super);function QueryDocumentSnapshot(firestore,key,document,fromCache,hasPendingWrites){return _super.call(this,firestore,key,document,fromCache,hasPendingWrites)||this}QueryDocumentSnapshot.prototype.data=function(options){var data=_super.prototype.data.call(this,options);assert$1("object"===typeof data,"Document in a QueryDocumentSnapshot should exist");return data};return QueryDocumentSnapshot}(DocumentSnapshot),Query$1=/** @class */function(){function Query(_query,firestore){this._query=_query;this.firestore=firestore}Query.prototype.where=function(field,opStr,value){validateExactNumberOfArgs("Query.where",arguments,3);validateDefined("Query.where",3,value);// Enumerated from the WhereFilterOp type in index.d.ts.
var whereFilterOpEnums=["<","<=","==",">=",">","array-contains"];validateStringEnum("Query.where",whereFilterOpEnums,2,opStr);var fieldValue,fieldPath=fieldPathFromArgument("Query.where",field),relationOp=RelationOp.fromString(opStr);if(fieldPath.isKeyField()){if(relationOp===RelationOp.ARRAY_CONTAINS){throw new FirestoreError(Code.INVALID_ARGUMENT,"Invalid Query. You can't perform array-contains queries on "+"FieldPath.documentId() since document IDs are not arrays.")}if("string"===typeof value){if(""===value){throw new FirestoreError(Code.INVALID_ARGUMENT,"Function Query.where() requires its third parameter to be a "+"valid document ID if the first parameter is "+"FieldPath.documentId(), but it was an empty string.")}if(!this._query.isCollectionGroupQuery()&&-1!==value.indexOf("/")){throw new FirestoreError(Code.INVALID_ARGUMENT,"Invalid third parameter to Query.where(). When querying a collection by "+"FieldPath.documentId(), the value provided must be a plain document ID, but "+("'"+value+"' contains a slash."))}var path=this._query.path.child(ResourcePath.fromString(value));if(!DocumentKey.isDocumentKey(path)){throw new FirestoreError(Code.INVALID_ARGUMENT,"Invalid third parameter to Query.where(). When querying a collection group by "+"FieldPath.documentId(), the value provided must result in a valid document path, "+("but '"+path+"' is not because it has an odd number of segments ("+path.length+")."))}fieldValue=new RefValue(this.firestore._databaseId,new DocumentKey(path))}else if(value instanceof DocumentReference){var ref=value;fieldValue=new RefValue(this.firestore._databaseId,ref._key)}else{throw new FirestoreError(Code.INVALID_ARGUMENT,"Function Query.where() requires its third parameter to be a "+"string or a DocumentReference if the first parameter is "+"FieldPath.documentId(), but it was: "+(valueDescription(value)+"."))}}else{fieldValue=this.firestore._dataConverter.parseQueryValue("Query.where",value)}var filter=Filter.create(fieldPath,relationOp,fieldValue);this.validateNewFilter(filter);return new Query(this._query.addFilter(filter),this.firestore)};Query.prototype.orderBy=function(field,directionStr){validateBetweenNumberOfArgs("Query.orderBy",arguments,1,2);validateOptionalArgType("Query.orderBy","non-empty string",2,directionStr);var direction;if(directionStr===void 0||"asc"===directionStr){direction=Direction.ASCENDING}else if("desc"===directionStr){direction=Direction.DESCENDING}else{throw new FirestoreError(Code.INVALID_ARGUMENT,"Function Query.orderBy() has unknown direction '"+directionStr+"', "+"expected 'asc' or 'desc'.")}if(null!==this._query.startAt){throw new FirestoreError(Code.INVALID_ARGUMENT,"Invalid query. You must not call Query.startAt() or "+"Query.startAfter() before calling Query.orderBy().")}if(null!==this._query.endAt){throw new FirestoreError(Code.INVALID_ARGUMENT,"Invalid query. You must not call Query.endAt() or "+"Query.endBefore() before calling Query.orderBy().")}var fieldPath=fieldPathFromArgument("Query.orderBy",field),orderBy=new OrderBy(fieldPath,direction);this.validateNewOrderBy(orderBy);return new Query(this._query.addOrderBy(orderBy),this.firestore)};Query.prototype.limit=function(n){validateExactNumberOfArgs("Query.limit",arguments,1);validateArgType("Query.limit","number",1,n);if(0>=n){throw new FirestoreError(Code.INVALID_ARGUMENT,"Invalid Query. Query limit ("+n+") is invalid. Limit must be "+"positive.")}return new Query(this._query.withLimit(n),this.firestore)};Query.prototype.startAt=function(docOrField){for(var fields=[],_i=1;_i<arguments.length;_i++){fields[_i-1]=arguments[_i]}validateAtLeastNumberOfArgs("Query.startAt",arguments,1);var bound=this.boundFromDocOrFields("Query.startAt",docOrField,fields,!0);return new Query(this._query.withStartAt(bound),this.firestore)};Query.prototype.startAfter=function(docOrField){for(var fields=[],_i=1;_i<arguments.length;_i++){fields[_i-1]=arguments[_i]}validateAtLeastNumberOfArgs("Query.startAfter",arguments,1);var bound=this.boundFromDocOrFields("Query.startAfter",docOrField,fields,!1);return new Query(this._query.withStartAt(bound),this.firestore)};Query.prototype.endBefore=function(docOrField){for(var fields=[],_i=1;_i<arguments.length;_i++){fields[_i-1]=arguments[_i]}validateAtLeastNumberOfArgs("Query.endBefore",arguments,1);var bound=this.boundFromDocOrFields("Query.endBefore",docOrField,fields,!0);return new Query(this._query.withEndAt(bound),this.firestore)};Query.prototype.endAt=function(docOrField){for(var fields=[],_i=1;_i<arguments.length;_i++){fields[_i-1]=arguments[_i]}validateAtLeastNumberOfArgs("Query.endAt",arguments,1);var bound=this.boundFromDocOrFields("Query.endAt",docOrField,fields,!1);return new Query(this._query.withEndAt(bound),this.firestore)};Query.prototype.isEqual=function(other){if(!(other instanceof Query)){throw invalidClassError("isEqual","Query",1,other)}return this.firestore===other.firestore&&this._query.isEqual(other._query)};/** Helper function to create a bound from a document or fields */Query.prototype.boundFromDocOrFields=function(methodName,docOrField,fields,before){validateDefined(methodName,1,docOrField);if(docOrField instanceof DocumentSnapshot){if(0<fields.length){throw new FirestoreError(Code.INVALID_ARGUMENT,"Too many arguments provided to "+methodName+"().")}var snap=docOrField;if(!snap.exists){throw new FirestoreError(Code.NOT_FOUND,"Can't use a DocumentSnapshot that doesn't exist for "+(methodName+"()."))}return this.boundFromDocument(methodName,snap._document,before)}else{var allFields=[docOrField].concat(fields);return this.boundFromFields(methodName,allFields,before)}};/**
      * Create a Bound from a query and a document.
      *
      * Note that the Bound will always include the key of the document
      * and so only the provided document will compare equal to the returned
      * position.
      *
      * Will throw if the document does not contain all fields of the order by
      * of the query or if any of the fields in the order by are an uncommitted
      * server timestamp.
      */Query.prototype.boundFromDocument=function(methodName,doc,before){// Because people expect to continue/end a query at the exact document
// provided, we need to use the implicit sort order rather than the explicit
// sort order, because it's guaranteed to contain the document key. That way
// the position becomes unambiguous and the query continues/ends exactly at
// the provided document. Without the key (by using the explicit sort
// orders), multiple documents could match the position, yielding duplicate
// results.
for(var components=[],_i=0,_a=this._query.orderBy,orderBy;_i<_a.length;_i++){orderBy=_a[_i];if(orderBy.field.isKeyField()){components.push(new RefValue(this.firestore._databaseId,doc.key))}else{var value=doc.field(orderBy.field);if(value instanceof ServerTimestampValue){throw new FirestoreError(Code.INVALID_ARGUMENT,"Invalid query. You are trying to start or end a query using a "+"document for which the field \""+orderBy.field+"\" is an uncommitted server timestamp. (Since the value of "+"this field is unknown, you cannot start/end a query with it.)")}else if(value!==void 0){components.push(value)}else{var field=orderBy.field.canonicalString();throw new FirestoreError(Code.INVALID_ARGUMENT,"Invalid query. You are trying to start or end a query using a "+("document for which the field '"+field+"' (used as the ")+"orderBy) does not exist.")}}}return new Bound(components,before)};/**
      * Converts a list of field values to a Bound for the given query.
      */Query.prototype.boundFromFields=function(methodName,values,before){// Use explicit order by's because it has to match the query the user made
var orderBy=this._query.explicitOrderBy;if(values.length>orderBy.length){throw new FirestoreError(Code.INVALID_ARGUMENT,"Too many arguments provided to "+methodName+"(). "+"The number of arguments must be less than or equal to the "+"number of Query.orderBy() clauses")}for(var components=[],i=0;i<values.length;i++){var rawValue=values[i],orderByComponent=orderBy[i];if(orderByComponent.field.isKeyField()){if("string"!==typeof rawValue){throw new FirestoreError(Code.INVALID_ARGUMENT,"Invalid query. Expected a string for document ID in "+(methodName+"(), but got a "+typeof rawValue))}if(!this._query.isCollectionGroupQuery()&&-1!==rawValue.indexOf("/")){throw new FirestoreError(Code.INVALID_ARGUMENT,"Invalid query. When querying a collection and ordering by FieldPath.documentId(), "+("the value passed to "+methodName+"() must be a plain document ID, but ")+("'"+rawValue+"' contains a slash."))}var path=this._query.path.child(ResourcePath.fromString(rawValue));if(!DocumentKey.isDocumentKey(path)){throw new FirestoreError(Code.INVALID_ARGUMENT,"Invalid query. When querying a collection group and ordering by "+("FieldPath.documentId(), the value passed to "+methodName+"() must result in a ")+("valid document path, but '"+path+"' is not because it contains an odd number ")+"of segments.")}var key=new DocumentKey(path);components.push(new RefValue(this.firestore._databaseId,key))}else{var wrapped=this.firestore._dataConverter.parseQueryValue(methodName,rawValue);components.push(wrapped)}}return new Bound(components,before)};Query.prototype.onSnapshot=function(){for(var args=[],_i=0;_i<arguments.length;_i++){args[_i]=arguments[_i]}validateBetweenNumberOfArgs("Query.onSnapshot",arguments,1,4);var options={},observer,currArg=0;if("object"===typeof args[currArg]&&!isPartialObserver(args[currArg])){options=args[currArg];validateOptionNames("Query.onSnapshot",options,["includeMetadataChanges"]);validateNamedOptionalType("Query.onSnapshot","boolean","includeMetadataChanges",options.includeMetadataChanges);currArg++}if(isPartialObserver(args[currArg])){observer=args[currArg]}else{validateArgType("Query.onSnapshot","function",currArg,args[currArg]);validateOptionalArgType("Query.onSnapshot","function",currArg+1,args[currArg+1]);validateOptionalArgType("Query.onSnapshot","function",currArg+2,args[currArg+2]);observer={next:args[currArg],error:args[currArg+1],complete:args[currArg+2]}}return this.onSnapshotInternal(options,observer)};Query.prototype.onSnapshotInternal=function(options,observer){var _this=this,errHandler=function(err){console.error("Uncaught Error in onSnapshot:",err)};if(observer.error){errHandler=observer.error.bind(observer)}var asyncObserver=new AsyncObserver({next:function(result){if(observer.next){observer.next(new QuerySnapshot(_this.firestore,_this._query,result))}},error:errHandler}),firestoreClient=this.firestore.ensureClientConfigured(),internalListener=firestoreClient.listen(this._query,asyncObserver,options);return function(){asyncObserver.mute();firestoreClient.unlisten(internalListener)}};Query.prototype.get=function(options){var _this=this;validateBetweenNumberOfArgs("Query.get",arguments,0,1);validateGetOptions("Query.get",options);return new Promise(function(resolve,reject){if(options&&"cache"===options.source){_this.firestore.ensureClientConfigured().getDocumentsFromLocalCache(_this._query).then(function(viewSnap){resolve(new QuerySnapshot(_this.firestore,_this._query,viewSnap))},reject)}else{_this.getViaSnapshotListener(resolve,reject,options)}})};Query.prototype.getViaSnapshotListener=function(resolve,reject,options){var unlisten=this.onSnapshotInternal({includeMetadataChanges:!0,waitForSyncWhenOnline:!0},{next:function(result){// Remove query first before passing event to user to avoid
// user actions affecting the now stale query.
unlisten();if(result.metadata.fromCache&&options&&"server"===options.source){reject(new FirestoreError(Code.UNAVAILABLE,"Failed to get documents from server. (However, these "+"documents may exist in the local cache. Run again "+"without setting source to \"server\" to "+"retrieve the cached documents.)"))}else{resolve(result)}},error:reject})};Query.prototype.validateNewFilter=function(filter){if(filter instanceof RelationFilter){if(filter.isInequality()){var existingField=this._query.getInequalityFilterField();if(null!==existingField&&!existingField.isEqual(filter.field)){throw new FirestoreError(Code.INVALID_ARGUMENT,"Invalid query. All where filters with an inequality"+" (<, <=, >, or >=) must be on the same field. But you have"+(" inequality filters on '"+existingField.toString()+"'")+(" and '"+filter.field.toString()+"'"))}var firstOrderByField=this._query.getFirstOrderByField();if(null!==firstOrderByField){this.validateOrderByAndInequalityMatch(filter.field,firstOrderByField)}}else if(filter.op===RelationOp.ARRAY_CONTAINS){if(this._query.hasArrayContainsFilter()){throw new FirestoreError(Code.INVALID_ARGUMENT,"Invalid query. Queries only support a single array-contains "+"filter.")}}}};Query.prototype.validateNewOrderBy=function(orderBy){if(null===this._query.getFirstOrderByField()){// This is the first order by. It must match any inequality.
var inequalityField=this._query.getInequalityFilterField();if(null!==inequalityField){this.validateOrderByAndInequalityMatch(inequalityField,orderBy.field)}}};Query.prototype.validateOrderByAndInequalityMatch=function(inequality,orderBy){if(!orderBy.isEqual(inequality)){throw new FirestoreError(Code.INVALID_ARGUMENT,"Invalid query. You have a where filter with an inequality "+("(<, <=, >, or >=) on field '"+inequality.toString()+"' ")+("and so you must also use '"+inequality.toString()+"' ")+"as your first Query.orderBy(), but your first Query.orderBy() "+("is on field '"+orderBy.toString()+"' instead."))}};return Query}(),QuerySnapshot=/** @class */function(){function QuerySnapshot(_firestore,_originalQuery,_snapshot){this._firestore=_firestore;this._originalQuery=_originalQuery;this._snapshot=_snapshot;this._cachedChanges=null;this._cachedChangesIncludeMetadataChanges=null;this.metadata=new SnapshotMetadata(_snapshot.hasPendingWrites,_snapshot.fromCache)}Object.defineProperty(QuerySnapshot.prototype,"docs",{get:function(){var result=[];this.forEach(function(doc){return result.push(doc)});return result},enumerable:!0,configurable:!0});Object.defineProperty(QuerySnapshot.prototype,"empty",{get:function(){return this._snapshot.docs.isEmpty()},enumerable:!0,configurable:!0});Object.defineProperty(QuerySnapshot.prototype,"size",{get:function(){return this._snapshot.docs.size},enumerable:!0,configurable:!0});QuerySnapshot.prototype.forEach=function(callback,thisArg){var _this=this;validateBetweenNumberOfArgs("QuerySnapshot.forEach",arguments,1,2);validateArgType("QuerySnapshot.forEach","function",1,callback);this._snapshot.docs.forEach(function(doc){callback.call(thisArg,_this.convertToDocumentImpl(doc))})};Object.defineProperty(QuerySnapshot.prototype,"query",{get:function(){return new Query$1(this._originalQuery,this._firestore)},enumerable:!0,configurable:!0});QuerySnapshot.prototype.docChanges=function(options){if(options){validateOptionNames("QuerySnapshot.docChanges",options,["includeMetadataChanges"]);validateNamedOptionalType("QuerySnapshot.docChanges","boolean","includeMetadataChanges",options.includeMetadataChanges)}var includeMetadataChanges=!!(options&&options.includeMetadataChanges);if(includeMetadataChanges&&this._snapshot.excludesMetadataChanges){throw new FirestoreError(Code.INVALID_ARGUMENT,"To include metadata changes with your document changes, you must "+"also pass { includeMetadataChanges:true } to onSnapshot().")}if(!this._cachedChanges||this._cachedChangesIncludeMetadataChanges!==includeMetadataChanges){this._cachedChanges=changesFromSnapshot(this._firestore,includeMetadataChanges,this._snapshot);this._cachedChangesIncludeMetadataChanges=includeMetadataChanges}return this._cachedChanges};/** Check the equality. The call can be very expensive. */QuerySnapshot.prototype.isEqual=function(other){if(!(other instanceof QuerySnapshot)){throw invalidClassError("isEqual","QuerySnapshot",1,other)}return this._firestore===other._firestore&&this._originalQuery.isEqual(other._originalQuery)&&this._snapshot.isEqual(other._snapshot)};QuerySnapshot.prototype.convertToDocumentImpl=function(doc){return new QueryDocumentSnapshot(this._firestore,doc.key,doc,this.metadata.fromCache,this._snapshot.mutatedKeys.has(doc.key))};return QuerySnapshot}();// TODO(2018/11/01): As of 2018/04/17 we're changing docChanges from an array
// into a method. Because this is a runtime breaking change and somewhat subtle
// (both Array and Function have a .length, etc.), we'll replace commonly-used
// properties (including Symbol.iterator) to throw a custom error message. In
// ~6 months we can delete the custom error as most folks will have hopefully
// migrated.
function throwDocChangesMethodError(){throw new FirestoreError(Code.INVALID_ARGUMENT,"QuerySnapshot.docChanges has been changed from a property into a "+"method, so usages like \"querySnapshot.docChanges\" should become "+"\"querySnapshot.docChanges()\"")}var docChangesPropertiesToOverride=["length","forEach","map"].concat("undefined"!==typeof Symbol?[Symbol.iterator]:[]);docChangesPropertiesToOverride.forEach(function(property){/**
   * We are (re-)defining properties on QuerySnapshot.prototype.docChanges which
   * is a Function. This could fail, in particular in the case of 'length' which
   * already exists on Function.prototype and on IE11 is improperly defined with
   * `{ configurable: false }`. So we wrap this in a try/catch to ensure that we
   * still have a functional SDK.
   */try{Object.defineProperty(QuerySnapshot.prototype.docChanges,property,{get:function(){return throwDocChangesMethodError()}})}catch(err){}// Ignore this failure intentionally
});var CollectionReference=/** @class */function(_super){__extends(CollectionReference,_super);function CollectionReference(path,firestore){var _this=_super.call(this,Query.atPath(path),firestore)||this;if(1!==path.length%2){throw new FirestoreError(Code.INVALID_ARGUMENT,"Invalid collection reference. Collection "+"references must have an odd number of segments, but "+(path.canonicalString()+" has "+path.length))}return _this}Object.defineProperty(CollectionReference.prototype,"id",{get:function(){return this._query.path.lastSegment()},enumerable:!0,configurable:!0});Object.defineProperty(CollectionReference.prototype,"parent",{get:function(){var parentPath=this._query.path.popLast();if(parentPath.isEmpty()){return null}else{return new DocumentReference(new DocumentKey(parentPath),this.firestore)}},enumerable:!0,configurable:!0});Object.defineProperty(CollectionReference.prototype,"path",{get:function(){return this._query.path.canonicalString()},enumerable:!0,configurable:!0});CollectionReference.prototype.doc=function(pathString){validateBetweenNumberOfArgs("CollectionReference.doc",arguments,0,1);// We allow omission of 'pathString' but explicitly prohibit passing in both
// 'undefined' and 'null'.
if(0===arguments.length){pathString=AutoId.newId()}validateArgType("CollectionReference.doc","non-empty string",1,pathString);if(""===pathString){throw new FirestoreError(Code.INVALID_ARGUMENT,"Document path must be a non-empty string")}var path=ResourcePath.fromString(pathString);return DocumentReference.forPath(this._query.path.child(path),this.firestore)};CollectionReference.prototype.add=function(value){validateExactNumberOfArgs("CollectionReference.add",arguments,1);validateArgType("CollectionReference.add","object",1,value);var docRef=this.doc();return docRef.set(value).then(function(){return docRef})};return CollectionReference}(Query$1);function validateSetOptions(methodName,options){if(options===void 0){return{merge:!1}}validateOptionNames(methodName,options,["merge","mergeFields"]);validateNamedOptionalType(methodName,"boolean","merge",options.merge);validateOptionalArrayElements(methodName,"mergeFields","a string or a FieldPath",options.mergeFields,function(element){return"string"===typeof element||element instanceof FieldPath$1});if(options.mergeFields!==void 0&&options.merge!==void 0){throw new FirestoreError(Code.INVALID_ARGUMENT,"Invalid options passed to function "+methodName+"(): You cannot specify both \"merge\" "+"and \"mergeFields\".")}return options}function validateSnapshotOptions(methodName,options){if(options===void 0){return{}}validateOptionNames(methodName,options,["serverTimestamps"]);validateNamedOptionalPropertyEquals(methodName,"options","serverTimestamps",options.serverTimestamps,["estimate","previous","none"]);return options}function validateGetOptions(methodName,options){validateOptionalArgType(methodName,"object",1,options);if(options){validateOptionNames(methodName,options,["source"]);validateNamedOptionalPropertyEquals(methodName,"options","source",options.source,["default","server","cache"])}}function validateReference(methodName,documentRef,firestore){if(!(documentRef instanceof DocumentReference)){throw invalidClassError(methodName,"DocumentReference",1,documentRef)}else if(documentRef.firestore!==firestore){throw new FirestoreError(Code.INVALID_ARGUMENT,"Provided document reference is from a different Firestore instance.")}else{return documentRef}}/**
   * Calculates the array of firestore.DocumentChange's for a given ViewSnapshot.
   *
   * Exported for testing.
   */function changesFromSnapshot(firestore,includeMetadataChanges,snapshot){if(snapshot.oldDocs.isEmpty()){// Special case the first snapshot because index calculation is easy and
// fast
var lastDoc_1,index_1=0;return snapshot.docChanges.map(function(change){var doc=new QueryDocumentSnapshot(firestore,change.doc.key,change.doc,snapshot.fromCache,snapshot.mutatedKeys.has(change.doc.key));assert$1(change.type===ChangeType.Added,"Invalid event type for first snapshot");assert$1(!lastDoc_1||0>snapshot.query.docComparator(lastDoc_1,change.doc),"Got added events in wrong order");lastDoc_1=change.doc;return{type:"added",doc:doc,oldIndex:-1,newIndex:index_1++}})}else{// A DocumentSet that is updated incrementally as changes are applied to use
// to lookup the index of a document.
var indexTracker_1=snapshot.oldDocs;return snapshot.docChanges.filter(function(change){return includeMetadataChanges||change.type!==ChangeType.Metadata}).map(function(change){var doc=new QueryDocumentSnapshot(firestore,change.doc.key,change.doc,snapshot.fromCache,snapshot.mutatedKeys.has(change.doc.key)),oldIndex=-1,newIndex=-1;if(change.type!==ChangeType.Added){oldIndex=indexTracker_1.indexOf(change.doc.key);assert$1(0<=oldIndex,"Index for document not found");indexTracker_1=indexTracker_1.delete(change.doc.key)}if(change.type!==ChangeType.Removed){indexTracker_1=indexTracker_1.add(change.doc);newIndex=indexTracker_1.indexOf(change.doc.key)}return{type:resultChangeType(change.type),doc:doc,oldIndex:oldIndex,newIndex:newIndex}})}}function resultChangeType(type){switch(type){case ChangeType.Added:return"added";case ChangeType.Modified:case ChangeType.Metadata:return"modified";case ChangeType.Removed:return"removed";default:return fail("Unknown change type: "+type);}}// Export the classes with a private constructor (it will fail if invoked
// at runtime). Note that this still allows instanceof checks.
// We're treating the variables as class names, so disable checking for lower
// case variable names.
// tslint:disable:variable-name
var PublicFirestore=makeConstructorPrivate(Firestore,"Use firebase.firestore() instead."),PublicTransaction=makeConstructorPrivate(Transaction$1,"Use firebase.firestore().runTransaction() instead."),PublicWriteBatch=makeConstructorPrivate(WriteBatch,"Use firebase.firestore().batch() instead."),PublicDocumentReference=makeConstructorPrivate(DocumentReference,"Use firebase.firestore().doc() instead."),PublicDocumentSnapshot=makeConstructorPrivate(DocumentSnapshot),PublicQueryDocumentSnapshot=makeConstructorPrivate(QueryDocumentSnapshot),PublicQuery=makeConstructorPrivate(Query$1),PublicQuerySnapshot=makeConstructorPrivate(QuerySnapshot),PublicCollectionReference=makeConstructorPrivate(CollectionReference,"Use firebase.firestore().collection() instead."),firestoreNamespace={Firestore:PublicFirestore,GeoPoint:GeoPoint,Timestamp:Timestamp,Blob:PublicBlob,Transaction:PublicTransaction,WriteBatch:PublicWriteBatch,DocumentReference:PublicDocumentReference,DocumentSnapshot:PublicDocumentSnapshot,Query:PublicQuery,QueryDocumentSnapshot:PublicQueryDocumentSnapshot,QuerySnapshot:PublicQuerySnapshot,CollectionReference:PublicCollectionReference,FieldPath:FieldPath$1,FieldValue:PublicFieldValue,setLogLevel:Firestore.setLogLevel,CACHE_SIZE_UNLIMITED:CACHE_SIZE_UNLIMITED};/**
    * Configures Firestore as part of the Firebase SDK by calling registerService.
    */function configureForFirebase(firebase){firebase.INTERNAL.registerService("firestore",function(app){return new Firestore(app)},shallowCopy(firestoreNamespace))}/**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */function registerFirestore(instance){configureForFirebase(instance)}registerFirestore(firebase);var index_esm$3={registerFirestore:registerFirestore};/**
   @license
   Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */_exports.$indexEsm$1=index_esm$3;"use strict";const nativeShadow=!(window.ShadyDOM&&window.ShadyDOM.inUse);_exports.nativeShadow=nativeShadow;let nativeCssVariables_;/**
                          * @param {(ShadyCSSOptions | ShadyCSSInterface)=} settings
                          */function calcCssVariables(settings){if(settings&&settings.shimcssproperties){nativeCssVariables_=!1}else{// chrome 49 has semi-working css vars, check if box-shadow works
// safari 9.1 has a recalc bug: https://bugs.webkit.org/show_bug.cgi?id=155782
// However, shim css custom properties are only supported with ShadyDOM enabled,
// so fall back on native if we do not detect ShadyDOM
// Edge 15: custom properties used in ::before and ::after will also be used in the parent element
// https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12414257/
nativeCssVariables_=nativeShadow||!!(!navigator.userAgent.match(/AppleWebKit\/601|Edge\/15/)&&window.CSS&&CSS.supports&&CSS.supports("box-shadow","0 0 0 var(--foo)"))}}/** @type {string | undefined} */let cssBuild;_exports.cssBuild=cssBuild;if(window.ShadyCSS&&window.ShadyCSS.cssBuild!==void 0){_exports.cssBuild=cssBuild=window.ShadyCSS.cssBuild}/** @type {boolean} */const disableRuntime=!!(window.ShadyCSS&&window.ShadyCSS.disableRuntime);_exports.disableRuntime=disableRuntime;if(window.ShadyCSS&&window.ShadyCSS.nativeCss!==void 0){nativeCssVariables_=window.ShadyCSS.nativeCss}else if(window.ShadyCSS){calcCssVariables(window.ShadyCSS);// reset window variable to let ShadyCSS API take its place
window.ShadyCSS=void 0}else{calcCssVariables(window.WebComponents&&window.WebComponents.flags)}// Hack for type error under new type inference which doesn't like that
// nativeCssVariables is updated in a function and assigns the type
// `function(): ?` instead of `boolean`.
const nativeCssVariables=/** @type {boolean} */nativeCssVariables_;_exports.nativeCssVariables=nativeCssVariables;var styleSettings={nativeShadow:nativeShadow,get cssBuild(){return cssBuild},disableRuntime:disableRuntime,nativeCssVariables:nativeCssVariables};/**
   @license
   Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */ /*
      Extremely simple css parser. Intended to be not more than what we need
      and definitely not necessarily correct =).
      */_exports.$styleSettings=styleSettings;"use strict";/** @unrestricted */class StyleNode{constructor(){/** @type {number} */this.start=0;/** @type {number} */this.end=0;/** @type {StyleNode} */this.previous=null;/** @type {StyleNode} */this.parent=null;/** @type {Array<StyleNode>} */this.rules=null;/** @type {string} */this.parsedCssText="";/** @type {string} */this.cssText="";/** @type {boolean} */this.atRule=!1;/** @type {number} */this.type=0;/** @type {string} */this.keyframesName="";/** @type {string} */this.selector="";/** @type {string} */this.parsedSelector=""}}/**
   * @param {string} text
   * @return {StyleNode}
   */_exports.StyleNode=StyleNode;function parse(text){text=clean(text);return parseCss(lex(text),text)}// remove stuff we don't care about that may hinder parsing
/**
 * @param {string} cssText
 * @return {string}
 */function clean(cssText){return cssText.replace(RX.comments,"").replace(RX.port,"")}// super simple {...} lexer that returns a node tree
/**
 * @param {string} text
 * @return {StyleNode}
 */function lex(text){let root=new StyleNode;root.start=0;root.end=text.length;let n=root;for(let i=0,l=text.length;i<l;i++){if(text[i]===OPEN_BRACE){if(!n.rules){n.rules=[]}let p=n,previous=p.rules[p.rules.length-1]||null;n=new StyleNode;n.start=i+1;n.parent=p;n.previous=previous;p.rules.push(n)}else if(text[i]===CLOSE_BRACE){n.end=i+1;n=n.parent||root}}return root}// add selectors/cssText to node tree
/**
 * @param {StyleNode} node
 * @param {string} text
 * @return {StyleNode}
 */function parseCss(node,text){let t=text.substring(node.start,node.end-1);node.parsedCssText=node.cssText=t.trim();if(node.parent){let ss=node.previous?node.previous.end:node.parent.start;t=text.substring(ss,node.start-1);t=_expandUnicodeEscapes(t);t=t.replace(RX.multipleSpaces," ");// TODO(sorvell): ad hoc; make selector include only after last ;
// helps with mixin syntax
t=t.substring(t.lastIndexOf(";")+1);let s=node.parsedSelector=node.selector=t.trim();node.atRule=0===s.indexOf(AT_START);// note, support a subset of rule types...
if(node.atRule){if(0===s.indexOf(MEDIA_START)){node.type=types.MEDIA_RULE}else if(s.match(RX.keyframesRule)){node.type=types.KEYFRAMES_RULE;node.keyframesName=node.selector.split(RX.multipleSpaces).pop()}}else{if(0===s.indexOf(VAR_START)){node.type=types.MIXIN_RULE}else{node.type=types.STYLE_RULE}}}let r$=node.rules;if(r$){for(let i=0,l=r$.length,r;i<l&&(r=r$[i]);i++){parseCss(r,text)}}return node}/**
   * conversion of sort unicode escapes with spaces like `\33 ` (and longer) into
   * expanded form that doesn't require trailing space `\000033`
   * @param {string} s
   * @return {string}
   */function _expandUnicodeEscapes(s){return s.replace(/\\([0-9a-f]{1,6})\s/gi,function(){let code=arguments[1],repeat=6-code.length;while(repeat--){code="0"+code}return"\\"+code})}/**
   * stringify parsed css.
   * @param {StyleNode} node
   * @param {boolean=} preserveProperties
   * @param {string=} text
   * @return {string}
   */function stringify$1(node,preserveProperties,text=""){// calc rule cssText
let cssText="";if(node.cssText||node.rules){let r$=node.rules;if(r$&&!_hasMixinRules(r$)){for(let i=0,l=r$.length,r;i<l&&(r=r$[i]);i++){cssText=stringify$1(r,preserveProperties,cssText)}}else{cssText=preserveProperties?node.cssText:removeCustomProps(node.cssText);cssText=cssText.trim();if(cssText){cssText="  "+cssText+"\n"}}}// emit rule if there is cssText
if(cssText){if(node.selector){text+=node.selector+" "+OPEN_BRACE+"\n"}text+=cssText;if(node.selector){text+=CLOSE_BRACE+"\n\n"}}return text}/**
   * @param {Array<StyleNode>} rules
   * @return {boolean}
   */function _hasMixinRules(rules){let r=rules[0];return!!r&&!!r.selector&&0===r.selector.indexOf(VAR_START)}/**
   * @param {string} cssText
   * @return {string}
   */function removeCustomProps(cssText){cssText=removeCustomPropAssignment(cssText);return removeCustomPropApply(cssText)}/**
   * @param {string} cssText
   * @return {string}
   */function removeCustomPropAssignment(cssText){return cssText.replace(RX.customProp,"").replace(RX.mixinProp,"")}/**
   * @param {string} cssText
   * @return {string}
   */function removeCustomPropApply(cssText){return cssText.replace(RX.mixinApply,"").replace(RX.varApply,"")}/** @enum {number} */const types={STYLE_RULE:1,KEYFRAMES_RULE:7,MEDIA_RULE:4,MIXIN_RULE:1e3};_exports.types=types;const OPEN_BRACE="{",CLOSE_BRACE="}",RX={comments:/\/\*[^*]*\*+([^/*][^*]*\*+)*\//gim,port:/@import[^;]*;/gim,customProp:/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\n]|$)/gim,mixinProp:/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\n]|$)?/gim,mixinApply:/@apply\s*\(?[^);]*\)?\s*(?:[;\n]|$)?/gim,varApply:/[^;:]*?:[^;]*?var\([^;]*\)(?:[;\n]|$)?/gim,keyframesRule:/^@[^\s]*keyframes/,multipleSpaces:/\s+/g},VAR_START="--",MEDIA_START="@media",AT_START="@";var cssParse={StyleNode:StyleNode,parse:parse,stringify:stringify$1,removeCustomPropAssignment:removeCustomPropAssignment,types:types};/**
   @license
   Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */_exports.$cssParse=cssParse;const VAR_ASSIGN=/(?:^|[;\s{]\s*)(--[\w-]*?)\s*:\s*(?:((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};{])+)|\{([^}]*)\}(?:(?=[;\s}])|$))/gi;_exports.VAR_ASSIGN=VAR_ASSIGN;const MIXIN_MATCH=/(?:^|\W+)@apply\s*\(?([^);\n]*)\)?/gi;_exports.MIXIN_MATCH=MIXIN_MATCH;const VAR_CONSUMED=/(--[\w-]+)\s*([:,;)]|$)/gi;_exports.VAR_CONSUMED=VAR_CONSUMED;const ANIMATION_MATCH=/(animation\s*:)|(animation-name\s*:)/;_exports.ANIMATION_MATCH=ANIMATION_MATCH;const MEDIA_MATCH=/@media\s(.*)/;_exports.MEDIA_MATCH=MEDIA_MATCH;const IS_VAR=/^--/;_exports.IS_VAR=IS_VAR;const BRACKETED=/\{[^}]*\}/g;_exports.BRACKETED=BRACKETED;const HOST_PREFIX="(?:^|[^.#[:])";_exports.HOST_PREFIX=HOST_PREFIX;const HOST_SUFFIX="($|[.:[\\s>+~])";_exports.HOST_SUFFIX=HOST_SUFFIX;var commonRegex={VAR_ASSIGN:VAR_ASSIGN,MIXIN_MATCH:MIXIN_MATCH,VAR_CONSUMED:VAR_CONSUMED,ANIMATION_MATCH:ANIMATION_MATCH,MEDIA_MATCH:MEDIA_MATCH,IS_VAR:IS_VAR,BRACKETED:BRACKETED,HOST_PREFIX:HOST_PREFIX,HOST_SUFFIX:HOST_SUFFIX};/**
   @license
   Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */_exports.$commonRegex=commonRegex;"use strict";/** @type {!Set<string>} */const styleTextSet=new Set,scopingAttribute="shady-unscoped";_exports.scopingAttribute=scopingAttribute;/**
                                                   * Add a specifically-marked style to the document directly, and only one copy of that style.
                                                   *
                                                   * @param {!HTMLStyleElement} style
                                                   * @return {undefined}
                                                   */function processUnscopedStyle(style){const text=style.textContent;if(!styleTextSet.has(text)){styleTextSet.add(text);const newStyle=style.cloneNode(!0);document.head.appendChild(newStyle)}}/**
   * Check if a style is supposed to be unscoped
   * @param {!HTMLStyleElement} style
   * @return {boolean} true if the style has the unscoping attribute
   */function isUnscopedStyle(style){return style.hasAttribute(scopingAttribute)}var unscopedStyleHandler={scopingAttribute:scopingAttribute,processUnscopedStyle:processUnscopedStyle,isUnscopedStyle:isUnscopedStyle};/**
   @license
   Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */_exports.$unscopedStyleHandler=unscopedStyleHandler;"use strict";function toCssText(rules,callback){if(!rules){return""}if("string"===typeof rules){rules=parse(rules)}if(callback){forEachRule(rules,callback)}return stringify$1(rules,nativeCssVariables)}/**
   * @param {HTMLStyleElement} style
   * @return {StyleNode}
   */function rulesForStyle(style){if(!style.__cssRules&&style.textContent){style.__cssRules=parse(style.textContent)}return style.__cssRules||null}// Tests if a rule is a keyframes selector, which looks almost exactly
// like a normal selector but is not (it has nothing to do with scoping
// for example).
/**
 * @param {StyleNode} rule
 * @return {boolean}
 */function isKeyframesSelector(rule){return!!rule.parent&&rule.parent.type===types.KEYFRAMES_RULE}/**
   * @param {StyleNode} node
   * @param {Function=} styleRuleCallback
   * @param {Function=} keyframesRuleCallback
   * @param {boolean=} onlyActiveRules
   */function forEachRule(node,styleRuleCallback,keyframesRuleCallback,onlyActiveRules){if(!node){return}let skipRules=!1,type=node.type;if(onlyActiveRules){if(type===types.MEDIA_RULE){let matchMedia=node.selector.match(MEDIA_MATCH);if(matchMedia){// if rule is a non matching @media rule, skip subrules
if(!window.matchMedia(matchMedia[1]).matches){skipRules=!0}}}}if(type===types.STYLE_RULE){styleRuleCallback(node)}else if(keyframesRuleCallback&&type===types.KEYFRAMES_RULE){keyframesRuleCallback(node)}else if(type===types.MIXIN_RULE){skipRules=!0}let r$=node.rules;if(r$&&!skipRules){for(let i=0,l=r$.length,r;i<l&&(r=r$[i]);i++){forEachRule(r,styleRuleCallback,keyframesRuleCallback,onlyActiveRules)}}}// add a string of cssText to the document.
/**
 * @param {string} cssText
 * @param {string} moniker
 * @param {Node} target
 * @param {Node} contextNode
 * @return {HTMLStyleElement}
 */function applyCss(cssText,moniker,target,contextNode){let style=createScopeStyle(cssText,moniker);applyStyle(style,target,contextNode);return style}/**
   * @param {string} cssText
   * @param {string} moniker
   * @return {HTMLStyleElement}
   */function createScopeStyle(cssText,moniker){let style=/** @type {HTMLStyleElement} */document.createElement("style");if(moniker){style.setAttribute("scope",moniker)}style.textContent=cssText;return style}/**
   * Track the position of the last added style for placing placeholders
   * @type {Node}
   */let lastHeadApplyNode=null;// insert a comment node as a styling position placeholder.
/**
 * @param {string} moniker
 * @return {!Comment}
 */function applyStylePlaceHolder(moniker){let placeHolder=document.createComment(" Shady DOM styles for "+moniker+" "),after=lastHeadApplyNode?lastHeadApplyNode.nextSibling:null,scope=document.head;scope.insertBefore(placeHolder,after||scope.firstChild);lastHeadApplyNode=placeHolder;return placeHolder}/**
   * @param {HTMLStyleElement} style
   * @param {?Node} target
   * @param {?Node} contextNode
   */function applyStyle(style,target,contextNode){target=target||document.head;let after=contextNode&&contextNode.nextSibling||target.firstChild;target.insertBefore(style,after);if(!lastHeadApplyNode){lastHeadApplyNode=style}else{// only update lastHeadApplyNode if the new style is inserted after the old lastHeadApplyNode
let position=style.compareDocumentPosition(lastHeadApplyNode);if(position===Node.DOCUMENT_POSITION_PRECEDING){lastHeadApplyNode=style}}}/**
   * @param {string} buildType
   * @return {boolean}
   */function isTargetedBuild(buildType){return nativeShadow?"shadow"===buildType:"shady"===buildType}/**
   * Walk from text[start] matching parens and
   * returns position of the outer end paren
   * @param {string} text
   * @param {number} start
   * @return {number}
   */function findMatchingParen(text,start){let level=0;for(let i=start,l=text.length;i<l;i++){if("("===text[i]){level++}else if(")"===text[i]){if(0===--level){return i}}}return-1}/**
   * @param {string} str
   * @param {function(string, string, string, string)} callback
   */function processVariableAndFallback(str,callback){// find 'var('
let start=str.indexOf("var(");if(-1===start){// no var?, everything is prefix
return callback(str,"","","")}//${prefix}var(${inner})${suffix}
let end=findMatchingParen(str,start+3),inner=str.substring(start+4,end),prefix=str.substring(0,start),suffix=processVariableAndFallback(str.substring(end+1),callback),comma=inner.indexOf(",");// value and fallback args should be trimmed to match in property lookup
if(-1===comma){// variable, no fallback
return callback(prefix,inner.trim(),"",suffix)}// var(${value},${fallback})
let value=inner.substring(0,comma).trim(),fallback=inner.substring(comma+1).trim();return callback(prefix,value,fallback,suffix)}/**
   * @param {Element} element
   * @param {string} value
   */function setElementClassRaw(element,value){// use native setAttribute provided by ShadyDOM when setAttribute is patched
if(nativeShadow){element.setAttribute("class",value)}else{window.ShadyDOM.nativeMethods.setAttribute.call(element,"class",value)}}/**
   * @type {function(*):*}
   */const wrap=window.ShadyDOM&&window.ShadyDOM.wrap||(node=>node);/**
                                                                                         * @param {Element | {is: string, extends: string}} element
                                                                                         * @return {{is: string, typeExtension: string}}
                                                                                         */_exports.wrap$1=wrap;function getIsExtends(element){let localName=element.localName,is="",typeExtension="";/*
                          NOTE: technically, this can be wrong for certain svg elements
                          with `-` in the name like `<font-face>`
                          */if(localName){if(-1<localName.indexOf("-")){is=localName}else{typeExtension=localName;is=element.getAttribute&&element.getAttribute("is")||""}}else{is=/** @type {?} */element.is;typeExtension=/** @type {?} */element.extends}return{is,typeExtension}}/**
   * @param {Element|DocumentFragment} element
   * @return {string}
   */function gatherStyleText(element){/** @type {!Array<string>} */const styleTextParts=[],styles=/** @type {!NodeList<!HTMLStyleElement>} */element.querySelectorAll("style");for(let i=0;i<styles.length;i++){const style=styles[i];if(isUnscopedStyle(style)){if(!nativeShadow){processUnscopedStyle(style);style.parentNode.removeChild(style)}}else{styleTextParts.push(style.textContent);style.parentNode.removeChild(style)}}return styleTextParts.join("").trim()}/**
   * Split a selector separated by commas into an array in a smart way
   * @param {string} selector
   * @return {!Array<string>}
   */function splitSelectorList(selector){const parts=[];let part="";for(let i=0;0<=i&&i<selector.length;i++){// A selector with parentheses will be one complete part
if("("===selector[i]){// find the matching paren
const end=findMatchingParen(selector,i);// push the paren block into the part
part+=selector.slice(i,end+1);// move the index to after the paren block
i=end}else if(","===selector[i]){parts.push(part);part=""}else{part+=selector[i]}}// catch any pieces after the last comma
if(part){parts.push(part)}return parts}const CSS_BUILD_ATTR="css-build";/**
                                     * Return the polymer-css-build "build type" applied to this element
                                     *
                                     * @param {!HTMLElement} element
                                     * @return {string} Can be "", "shady", or "shadow"
                                     */function getCssBuild(element){if(cssBuild!==void 0){return(/** @type {string} */cssBuild)}if(element.__cssBuild===void 0){// try attribute first, as it is the common case
const attrValue=element.getAttribute(CSS_BUILD_ATTR);if(attrValue){element.__cssBuild=attrValue}else{const buildComment=getBuildComment(element);if(""!==buildComment){// remove build comment so it is not needlessly copied into every element instance
removeBuildComment(element)}element.__cssBuild=buildComment}}return element.__cssBuild||""}/**
   * Check if the given element, either a <template> or <style>, has been processed
   * by polymer-css-build.
   *
   * If so, then we can make a number of optimizations:
   * - polymer-css-build will decompose mixins into individual CSS Custom Properties,
   * so the ApplyShim can be skipped entirely.
   * - Under native ShadowDOM, the style text can just be copied into each instance
   * without modification
   * - If the build is "shady" and ShadyDOM is in use, the styling does not need
   * scoping beyond the shimming of CSS Custom Properties
   *
   * @param {!HTMLElement} element
   * @return {boolean}
   */function elementHasBuiltCss(element){return""!==getCssBuild(element)}/**
   * For templates made with tagged template literals, polymer-css-build will
   * insert a comment of the form `<!--css-build:shadow-->`
   *
   * @param {!HTMLElement} element
   * @return {string}
   */function getBuildComment(element){const buildComment="template"===element.localName?/** @type {!HTMLTemplateElement} */element.content.firstChild:element.firstChild;if(buildComment instanceof Comment){const commentParts=buildComment.textContent.trim().split(":");if(commentParts[0]===CSS_BUILD_ATTR){return commentParts[1]}}return""}/**
   * Check if the css build status is optimal, and do no unneeded work.
   *
   * @param {string=} cssBuild CSS build status
   * @return {boolean} css build is optimal or not
   */function isOptimalCssBuild(cssBuild=""){// CSS custom property shim always requires work
if(""===cssBuild||!nativeCssVariables){return!1}return nativeShadow?"shadow"===cssBuild:"shady"===cssBuild}/**
   * @param {!HTMLElement} element
   */function removeBuildComment(element){const buildComment="template"===element.localName?/** @type {!HTMLTemplateElement} */element.content.firstChild:element.firstChild;buildComment.parentNode.removeChild(buildComment)}var styleUtil={toCssText:toCssText,rulesForStyle:rulesForStyle,isKeyframesSelector:isKeyframesSelector,forEachRule:forEachRule,applyCss:applyCss,createScopeStyle:createScopeStyle,applyStylePlaceHolder:applyStylePlaceHolder,applyStyle:applyStyle,isTargetedBuild:isTargetedBuild,findMatchingParen:findMatchingParen,processVariableAndFallback:processVariableAndFallback,setElementClassRaw:setElementClassRaw,wrap:wrap,getIsExtends:getIsExtends,gatherStyleText:gatherStyleText,splitSelectorList:splitSelectorList,getCssBuild:getCssBuild,elementHasBuiltCss:elementHasBuiltCss,getBuildComment:getBuildComment,isOptimalCssBuild:isOptimalCssBuild};/**
   @license
   Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */_exports.$styleUtil=styleUtil;"use strict";function updateNativeProperties(element,properties){// remove previous properties
for(let p in properties){// NOTE: for bc with shim, don't apply null values.
if(null===p){element.style.removeProperty(p)}else{element.style.setProperty(p,properties[p])}}}/**
   * @param {Element} element
   * @param {string} property
   * @return {string}
   */function getComputedStyleValue(element,property){/**
   * @const {string}
   */const value=window.getComputedStyle(element).getPropertyValue(property);if(!value){return""}else{return value.trim()}}/**
   * return true if `cssText` contains a mixin definition or consumption
   * @param {string} cssText
   * @return {boolean}
   */function detectMixin(cssText){const has=MIXIN_MATCH.test(cssText)||VAR_ASSIGN.test(cssText);// reset state of the regexes
MIXIN_MATCH.lastIndex=0;VAR_ASSIGN.lastIndex=0;return has}var commonUtils={updateNativeProperties:updateNativeProperties,getComputedStyleValue:getComputedStyleValue,detectMixin:detectMixin};/**
   @license
   Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */ /*
       * The apply shim simulates the behavior of `@apply` proposed at
       * https://tabatkins.github.io/specs/css-apply-rule/.
       * The approach is to convert a property like this:
       *
       *    --foo: {color: red; background: blue;}
       *
       * to this:
       *
       *    --foo_-_color: red;
       *    --foo_-_background: blue;
       *
       * Then where `@apply --foo` is used, that is converted to:
       *
       *    color: var(--foo_-_color);
       *    background: var(--foo_-_background);
       *
       * This approach generally works but there are some issues and limitations.
       * Consider, for example, that somewhere *between* where `--foo` is set and used,
       * another element sets it to:
       *
       *    --foo: { border: 2px solid red; }
       *
       * We must now ensure that the color and background from the previous setting
       * do not apply. This is accomplished by changing the property set to this:
       *
       *    --foo_-_border: 2px solid red;
       *    --foo_-_color: initial;
       *    --foo_-_background: initial;
       *
       * This works but introduces one new issue.
       * Consider this setup at the point where the `@apply` is used:
       *
       *    background: orange;
       *    `@apply` --foo;
       *
       * In this case the background will be unset (initial) rather than the desired
       * `orange`. We address this by altering the property set to use a fallback
       * value like this:
       *
       *    color: var(--foo_-_color);
       *    background: var(--foo_-_background, orange);
       *    border: var(--foo_-_border);
       *
       * Note that the default is retained in the property set and the `background` is
       * the desired `orange`. This leads us to a limitation.
       *
       * Limitation 1:
      
       * Only properties in the rule where the `@apply`
       * is used are considered as default values.
       * If another rule matches the element and sets `background` with
       * less specificity than the rule in which `@apply` appears,
       * the `background` will not be set.
       *
       * Limitation 2:
       *
       * When using Polymer's `updateStyles` api, new properties may not be set for
       * `@apply` properties.
      
      */_exports.$commonUtils=commonUtils;"use strict";const APPLY_NAME_CLEAN=/;\s*/m,INITIAL_INHERIT=/^\s*(initial)|(inherit)\s*$/,IMPORTANT=/\s*!important/,MIXIN_VAR_SEP="_-_";/**
                              * @typedef {!Object<string, string>}
                              */let PropertyEntry,DependantsEntry,MixinMapEntry;// eslint-disable-line no-unused-vars
/**
 * @typedef {!Object<string, boolean>}
 */ // eslint-disable-line no-unused-vars
// map of mixin to property names
// --foo: {border: 2px} -> {properties: {(--foo, ['border'])}, dependants: {'element-name': proto}}
class MixinMap{constructor(){/** @type {!Object<string, !MixinMapEntry>} */this._map={}}/**
     * @param {string} name
     * @param {!PropertyEntry} props
     */set(name,props){name=name.trim();this._map[name]={properties:props,dependants:{}}}/**
     * @param {string} name
     * @return {MixinMapEntry}
     */get(name){name=name.trim();return this._map[name]||null}}/**
   * Callback for when an element is marked invalid
   * @type {?function(string)}
   */let invalidCallback=null;/** @unrestricted */class ApplyShim{constructor(){/** @type {?string} */this._currentElement=null;/** @type {HTMLMetaElement} */this._measureElement=null;this._map=new MixinMap}/**
     * return true if `cssText` contains a mixin definition or consumption
     * @param {string} cssText
     * @return {boolean}
     */detectMixin(cssText){return detectMixin(cssText)}/**
     * Gather styles into one style for easier processing
     * @param {!HTMLTemplateElement} template
     * @return {HTMLStyleElement}
     */gatherStyles(template){const styleText=gatherStyleText(template.content);if(styleText){const style=/** @type {!HTMLStyleElement} */document.createElement("style");style.textContent=styleText;template.content.insertBefore(style,template.content.firstChild);return style}return null}/**
     * @param {!HTMLTemplateElement} template
     * @param {string} elementName
     * @return {StyleNode}
     */transformTemplate(template,elementName){if(template._gatheredStyle===void 0){template._gatheredStyle=this.gatherStyles(template)}/** @type {HTMLStyleElement} */const style=template._gatheredStyle;return style?this.transformStyle(style,elementName):null}/**
     * @param {!HTMLStyleElement} style
     * @param {string} elementName
     * @return {StyleNode}
     */transformStyle(style,elementName=""){let ast=rulesForStyle(style);this.transformRules(ast,elementName);style.textContent=toCssText(ast);return ast}/**
     * @param {!HTMLStyleElement} style
     * @return {StyleNode}
     */transformCustomStyle(style){let ast=rulesForStyle(style);forEachRule(ast,rule=>{if(":root"===rule.selector){rule.selector="html"}this.transformRule(rule)});style.textContent=toCssText(ast);return ast}/**
     * @param {StyleNode} rules
     * @param {string} elementName
     */transformRules(rules,elementName){this._currentElement=elementName;forEachRule(rules,r=>{this.transformRule(r)});this._currentElement=null}/**
     * @param {!StyleNode} rule
     */transformRule(rule){rule.cssText=this.transformCssText(rule.parsedCssText,rule);// :root was only used for variable assignment in property shim,
// but generates invalid selectors with real properties.
// replace with `:host > *`, which serves the same effect
if(":root"===rule.selector){rule.selector=":host > *"}}/**
     * @param {string} cssText
     * @param {!StyleNode} rule
     * @return {string}
     */transformCssText(cssText,rule){// produce variables
cssText=cssText.replace(VAR_ASSIGN,(matchText,propertyName,valueProperty,valueMixin)=>this._produceCssProperties(matchText,propertyName,valueProperty,valueMixin,rule));// consume mixins
return this._consumeCssProperties(cssText,rule)}/**
     * @param {string} property
     * @return {string}
     */_getInitialValueForProperty(property){if(!this._measureElement){this._measureElement=/** @type {HTMLMetaElement} */document.createElement("meta");this._measureElement.setAttribute("apply-shim-measure","");this._measureElement.style.all="initial";document.head.appendChild(this._measureElement)}return window.getComputedStyle(this._measureElement).getPropertyValue(property)}/**
     * Walk over all rules before this rule to find fallbacks for mixins
     *
     * @param {!StyleNode} startRule
     * @return {!Object}
     */_fallbacksFromPreviousRules(startRule){// find the "top" rule
let topRule=startRule;while(topRule.parent){topRule=topRule.parent}const fallbacks={};let seenStartRule=!1;forEachRule(topRule,r=>{// stop when we hit the input rule
seenStartRule=seenStartRule||r===startRule;if(seenStartRule){return}// NOTE: Only matching selectors are "safe" for this fallback processing
// It would be prohibitive to run `matchesSelector()` on each selector,
// so we cheat and only check if the same selector string is used, which
// guarantees things like specificity matching
if(r.selector===startRule.selector){Object.assign(fallbacks,this._cssTextToMap(r.parsedCssText))}});return fallbacks}/**
     * replace mixin consumption with variable consumption
     * @param {string} text
     * @param {!StyleNode=} rule
     * @return {string}
     */_consumeCssProperties(text,rule){/** @type {Array} */let m=null;// loop over text until all mixins with defintions have been applied
while(m=MIXIN_MATCH.exec(text)){let matchText=m[0],mixinName=m[1],idx=m.index,applyPos=idx+matchText.indexOf("@apply"),afterApplyPos=idx+matchText.length,textBeforeApply=text.slice(0,applyPos),textAfterApply=text.slice(afterApplyPos),defaults=rule?this._fallbacksFromPreviousRules(rule):{};Object.assign(defaults,this._cssTextToMap(textBeforeApply));let replacement=this._atApplyToCssProperties(mixinName,defaults);// use regex match position to replace mixin, keep linear processing time
text=`${textBeforeApply}${replacement}${textAfterApply}`;// move regex search to _after_ replacement
MIXIN_MATCH.lastIndex=idx+replacement.length}return text}/**
     * produce variable consumption at the site of mixin consumption
     * `@apply` --foo; -> for all props (${propname}: var(--foo_-_${propname}, ${fallback[propname]}}))
     * Example:
     *  border: var(--foo_-_border); padding: var(--foo_-_padding, 2px)
     *
     * @param {string} mixinName
     * @param {Object} fallbacks
     * @return {string}
     */_atApplyToCssProperties(mixinName,fallbacks){mixinName=mixinName.replace(APPLY_NAME_CLEAN,"");let vars=[],mixinEntry=this._map.get(mixinName);// if we depend on a mixin before it is created
// make a sentinel entry in the map to add this element as a dependency for when it is defined.
if(!mixinEntry){this._map.set(mixinName,{});mixinEntry=this._map.get(mixinName)}if(mixinEntry){if(this._currentElement){mixinEntry.dependants[this._currentElement]=!0}let p,parts,f;const properties=mixinEntry.properties;for(p in properties){f=fallbacks&&fallbacks[p];parts=[p,": var(",mixinName,MIXIN_VAR_SEP,p];if(f){parts.push(",",f.replace(IMPORTANT,""))}parts.push(")");if(IMPORTANT.test(properties[p])){parts.push(" !important")}vars.push(parts.join(""))}}return vars.join("; ")}/**
     * @param {string} property
     * @param {string} value
     * @return {string}
     */_replaceInitialOrInherit(property,value){let match=INITIAL_INHERIT.exec(value);if(match){if(match[1]){// initial
// replace `initial` with the concrete initial value for this property
value=this._getInitialValueForProperty(property)}else{// inherit
// with this purposfully illegal value, the variable will be invalid at
// compute time (https://www.w3.org/TR/css-variables/#invalid-at-computed-value-time)
// and for inheriting values, will behave similarly
// we cannot support the same behavior for non inheriting values like 'border'
value="apply-shim-inherit"}}return value}/**
     * "parse" a mixin definition into a map of properties and values
     * cssTextToMap('border: 2px solid black') -> ('border', '2px solid black')
     * @param {string} text
     * @param {boolean=} replaceInitialOrInherit
     * @return {!Object<string, string>}
     */_cssTextToMap(text,replaceInitialOrInherit=!1){let props=text.split(";"),property,value,out={};for(let i=0,p,sp;i<props.length;i++){p=props[i];if(p){sp=p.split(":");// ignore lines that aren't definitions like @media
if(1<sp.length){property=sp[0].trim();// some properties may have ':' in the value, like data urls
value=sp.slice(1).join(":");if(replaceInitialOrInherit){value=this._replaceInitialOrInherit(property,value)}out[property]=value}}}return out}/**
     * @param {MixinMapEntry} mixinEntry
     */_invalidateMixinEntry(mixinEntry){if(!invalidCallback){return}for(let elementName in mixinEntry.dependants){if(elementName!==this._currentElement){invalidCallback(elementName)}}}/**
     * @param {string} matchText
     * @param {string} propertyName
     * @param {?string} valueProperty
     * @param {?string} valueMixin
     * @param {!StyleNode} rule
     * @return {string}
     */_produceCssProperties(matchText,propertyName,valueProperty,valueMixin,rule){// handle case where property value is a mixin
if(valueProperty){// form: --mixin2: var(--mixin1), where --mixin1 is in the map
processVariableAndFallback(valueProperty,(prefix,value)=>{if(value&&this._map.get(value)){valueMixin=`@apply ${value};`}})}if(!valueMixin){return matchText}let mixinAsProperties=this._consumeCssProperties(""+valueMixin,rule),prefix=matchText.slice(0,matchText.indexOf("--")),mixinValues=this._cssTextToMap(mixinAsProperties,!0),combinedProps=mixinValues,mixinEntry=this._map.get(propertyName),oldProps=mixinEntry&&mixinEntry.properties;if(oldProps){// NOTE: since we use mixin, the map of properties is updated here
// and this is what we want.
combinedProps=Object.assign(Object.create(oldProps),mixinValues)}else{this._map.set(propertyName,combinedProps)}let out=[],p,v,needToInvalidate=!1;for(p in combinedProps){v=mixinValues[p];// if property not defined by current mixin, set initial
if(v===void 0){v="initial"}if(oldProps&&!(p in oldProps)){needToInvalidate=!0}out.push(`${propertyName}${MIXIN_VAR_SEP}${p}: ${v}`)}if(needToInvalidate){this._invalidateMixinEntry(mixinEntry)}if(mixinEntry){mixinEntry.properties=combinedProps}// because the mixinMap is global, the mixin might conflict with
// a different scope's simple variable definition:
// Example:
// some style somewhere:
// --mixin1:{ ... }
// --mixin2: var(--mixin1);
// some other element:
// --mixin1: 10px solid red;
// --foo: var(--mixin1);
// In this case, we leave the original variable definition in place.
if(valueProperty){prefix=`${matchText};${prefix}`}return`${prefix}${out.join("; ")};`}}/* exports */ /* eslint-disable no-self-assign */_exports.$applyShimDefault=ApplyShim;ApplyShim.prototype.detectMixin=ApplyShim.prototype.detectMixin;ApplyShim.prototype.transformStyle=ApplyShim.prototype.transformStyle;ApplyShim.prototype.transformCustomStyle=ApplyShim.prototype.transformCustomStyle;ApplyShim.prototype.transformRules=ApplyShim.prototype.transformRules;ApplyShim.prototype.transformRule=ApplyShim.prototype.transformRule;ApplyShim.prototype.transformTemplate=ApplyShim.prototype.transformTemplate;ApplyShim.prototype._separator=MIXIN_VAR_SEP;/* eslint-enable no-self-assign */Object.defineProperty(ApplyShim.prototype,"invalidCallback",{/** @return {?function(string)} */get(){return invalidCallback},/** @param {?function(string)} cb */set(cb){invalidCallback=cb}});var applyShim={default:ApplyShim};/**
   @license
   Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */_exports.$applyShim$1=applyShim;"use strict";/**
               * @const {!Object<string, !HTMLTemplateElement>}
               */const templateMap={};_exports.$templateMapDefault=templateMap;var templateMap$1={default:templateMap};/**
   @license
   Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */_exports.$templateMap=templateMap$1;"use strict";/*
               * Utilities for handling invalidating apply-shim mixins for a given template.
               *
               * The invalidation strategy involves keeping track of the "current" version of a template's mixins, and updating that count when a mixin is invalidated.
               * The template
               */ /** @const {string} */const CURRENT_VERSION="_applyShimCurrentVersion",NEXT_VERSION="_applyShimNextVersion",VALIDATING_VERSION="_applyShimValidatingVersion",promise=Promise.resolve();/** @const {string} */ /**
                                    * @param {string} elementName
                                    */function invalidate(elementName){let template=templateMap[elementName];if(template){invalidateTemplate(template)}}/**
   * This function can be called multiple times to mark a template invalid
   * and signal that the style inside must be regenerated.
   *
   * Use `startValidatingTemplate` to begin an asynchronous validation cycle.
   * During that cycle, call `templateIsValidating` to see if the template must
   * be revalidated
   * @param {HTMLTemplateElement} template
   */function invalidateTemplate(template){// default the current version to 0
template[CURRENT_VERSION]=template[CURRENT_VERSION]||0;// ensure the "validating for" flag exists
template[VALIDATING_VERSION]=template[VALIDATING_VERSION]||0;// increment the next version
template[NEXT_VERSION]=(template[NEXT_VERSION]||0)+1}/**
   * @param {string} elementName
   * @return {boolean}
   */function isValid(elementName){let template=templateMap[elementName];if(template){return templateIsValid(template)}return!0}/**
   * @param {HTMLTemplateElement} template
   * @return {boolean}
   */function templateIsValid(template){return template[CURRENT_VERSION]===template[NEXT_VERSION]}/**
   * @param {string} elementName
   * @return {boolean}
   */function isValidating(elementName){let template=templateMap[elementName];if(template){return templateIsValidating(template)}return!1}/**
   * Returns true if the template is currently invalid and `startValidating` has been called since the last invalidation.
   * If false, the template must be validated.
   * @param {HTMLTemplateElement} template
   * @return {boolean}
   */function templateIsValidating(template){return!templateIsValid(template)&&template[VALIDATING_VERSION]===template[NEXT_VERSION]}/**
   * the template is marked as `validating` for one microtask so that all instances
   * found in the tree crawl of `applyStyle` will update themselves,
   * but the template will only be updated once.
   * @param {string} elementName
  */function startValidating(elementName){let template=templateMap[elementName];startValidatingTemplate(template)}/**
   * Begin an asynchronous invalidation cycle.
   * This should be called after every validation of a template
   *
   * After one microtask, the template will be marked as valid until the next call to `invalidateTemplate`
   * @param {HTMLTemplateElement} template
   */function startValidatingTemplate(template){// remember that the current "next version" is the reason for this validation cycle
template[VALIDATING_VERSION]=template[NEXT_VERSION];// however, there only needs to be one async task to clear the counters
if(!template._validating){template._validating=!0;promise.then(function(){// sync the current version to let future invalidations cause a refresh cycle
template[CURRENT_VERSION]=template[NEXT_VERSION];template._validating=!1})}}/**
   * @return {boolean}
   */function elementsAreInvalid(){for(let elementName in templateMap){let template=templateMap[elementName];if(!templateIsValid(template)){return!0}}return!1}var applyShimUtils={invalidate:invalidate,invalidateTemplate:invalidateTemplate,isValid:isValid,templateIsValid:templateIsValid,isValidating:isValidating,templateIsValidating:templateIsValidating,startValidating:startValidating,startValidatingTemplate:startValidatingTemplate,elementsAreInvalid:elementsAreInvalid};/**
   @license
   Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */_exports.$applyShimUtils=applyShimUtils;"use strict";/** @type {Promise<void>} */let readyPromise=null,whenReady=window.HTMLImports&&window.HTMLImports.whenReady||null,resolveFn;/** @type {?function(?function())} */ /**
                * @param {?function()} callback
                */function documentWait(callback){requestAnimationFrame(function(){if(whenReady){whenReady(callback)}else{if(!readyPromise){readyPromise=new Promise(resolve=>{resolveFn=resolve});if("complete"===document.readyState){resolveFn()}else{document.addEventListener("readystatechange",()=>{if("complete"===document.readyState){resolveFn()}})}}readyPromise.then(function(){callback&&callback()})}})}var documentWait$1={default:documentWait};/**
   @license
   Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */_exports.$documentWait=documentWait$1;"use strict";let CustomStyleProvider;_exports.CustomStyleProvider=CustomStyleProvider;const SEEN_MARKER="__seenByShadyCSS",CACHED_STYLE="__shadyCSSCachedStyle";/** @type {?function(!HTMLStyleElement)} */let transformFn=null,validateFn=null;/** @type {?function()} */ /**
                       This interface is provided to add document-level <style> elements to ShadyCSS for processing.
                       These styles must be processed by ShadyCSS to simulate ShadowRoot upper-bound encapsulation from outside styles
                       In addition, these styles may also need to be processed for @apply rules and CSS Custom Properties
                       
                       To add document-level styles to ShadyCSS, one can call `ShadyCSS.addDocumentStyle(styleElement)` or `ShadyCSS.addDocumentStyle({getStyle: () => styleElement})`
                       
                       In addition, if the process used to discover document-level styles can be synchronously flushed, one should set `ShadyCSS.documentStyleFlush`.
                       This function will be called when calculating styles.
                       
                       An example usage of the document-level styling api can be found in `examples/document-style-lib.js`
                       
                       @unrestricted
                       */class CustomStyleInterface{constructor(){/** @type {!Array<!CustomStyleProvider>} */this.customStyles=[];this.enqueued=!1;// NOTE(dfreedm): use quotes here to prevent closure inlining to `function(){}`;
documentWait(()=>{if(window.ShadyCSS.flushCustomStyles){window.ShadyCSS.flushCustomStyles()}})}/**
     * Queue a validation for new custom styles to batch style recalculations
     */enqueueDocumentValidation(){if(this.enqueued||!validateFn){return}this.enqueued=!0;documentWait(validateFn)}/**
     * @param {!HTMLStyleElement} style
     */addCustomStyle(style){if(!style[SEEN_MARKER]){style[SEEN_MARKER]=!0;this.customStyles.push(style);this.enqueueDocumentValidation()}}/**
     * @param {!CustomStyleProvider} customStyle
     * @return {HTMLStyleElement}
     */getStyleForCustomStyle(customStyle){if(customStyle[CACHED_STYLE]){return customStyle[CACHED_STYLE]}let style;if(customStyle.getStyle){style=customStyle.getStyle()}else{style=customStyle}return style}/**
     * @return {!Array<!CustomStyleProvider>}
     */processStyles(){const cs=this.customStyles;for(let i=0;i<cs.length;i++){const customStyle=cs[i];if(customStyle[CACHED_STYLE]){continue}const style=this.getStyleForCustomStyle(customStyle);if(style){// HTMLImports polyfill may have cloned the style into the main document,
// which is referenced with __appliedElement.
const styleToTransform=/** @type {!HTMLStyleElement} */style.__appliedElement||style;if(transformFn){transformFn(styleToTransform)}customStyle[CACHED_STYLE]=styleToTransform}}return cs}}/* eslint-disable no-self-assign */_exports.$customStyleInterfaceDefault=CustomStyleInterface;CustomStyleInterface.prototype.addCustomStyle=CustomStyleInterface.prototype.addCustomStyle;CustomStyleInterface.prototype.getStyleForCustomStyle=CustomStyleInterface.prototype.getStyleForCustomStyle;CustomStyleInterface.prototype.processStyles=CustomStyleInterface.prototype.processStyles;/* eslint-enable no-self-assign */Object.defineProperties(CustomStyleInterface.prototype,{transformCallback:{/** @return {?function(!HTMLStyleElement)} */get(){return transformFn},/** @param {?function(!HTMLStyleElement)} fn */set(fn){transformFn=fn}},validateCallback:{/** @return {?function()} */get(){return validateFn},/**
     * @param {?function()} fn
     * @this {CustomStyleInterface}
     */set(fn){let needsEnqueue=!1;if(!validateFn){needsEnqueue=!0}validateFn=fn;if(needsEnqueue){this.enqueueDocumentValidation()}}}});/** @typedef {{
     * customStyles: !Array<!CustomStyleProvider>,
     * addCustomStyle: function(!CustomStyleProvider),
     * getStyleForCustomStyle: function(!CustomStyleProvider): HTMLStyleElement,
     * findStyles: function(),
     * transformCallback: ?function(!HTMLStyleElement),
     * validateCallback: ?function()
     * }}
     */const CustomStyleInterfaceInterface={};_exports.CustomStyleInterfaceInterface=CustomStyleInterfaceInterface;var customStyleInterface={CustomStyleProvider:CustomStyleProvider,default:CustomStyleInterface,CustomStyleInterfaceInterface:CustomStyleInterfaceInterface};/**
   @license
   Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */_exports.$customStyleInterface$1=customStyleInterface;"use strict";const applyShim$1=new ApplyShim;class ApplyShimInterface{constructor(){/** @type {?CustomStyleInterfaceInterface} */this.customStyleInterface=null;applyShim$1.invalidCallback=invalidate}ensure(){if(this.customStyleInterface){return}if(window.ShadyCSS.CustomStyleInterface){this.customStyleInterface=/** @type {!CustomStyleInterfaceInterface} */window.ShadyCSS.CustomStyleInterface;this.customStyleInterface.transformCallback=style=>{applyShim$1.transformCustomStyle(style)};this.customStyleInterface.validateCallback=()=>{requestAnimationFrame(()=>{if(this.customStyleInterface.enqueued){this.flushCustomStyles()}})}}}/**
     * @param {!HTMLTemplateElement} template
     * @param {string} elementName
     */prepareTemplate(template,elementName){this.ensure();if(elementHasBuiltCss(template)){return}templateMap[elementName]=template;let ast=applyShim$1.transformTemplate(template,elementName);// save original style ast to use for revalidating instances
template._styleAst=ast}flushCustomStyles(){this.ensure();if(!this.customStyleInterface){return}let styles=this.customStyleInterface.processStyles();if(!this.customStyleInterface.enqueued){return}for(let i=0;i<styles.length;i++){let cs=styles[i],style=this.customStyleInterface.getStyleForCustomStyle(cs);if(style){applyShim$1.transformCustomStyle(style)}}this.customStyleInterface.enqueued=!1}/**
     * @param {HTMLElement} element
     * @param {Object=} properties
     */styleSubtree(element,properties){this.ensure();if(properties){updateNativeProperties(element,properties)}if(element.shadowRoot){this.styleElement(element);let shadowChildren=/** @type {!ParentNode} */element.shadowRoot.children||element.shadowRoot.childNodes;for(let i=0;i<shadowChildren.length;i++){this.styleSubtree(/** @type {HTMLElement} */shadowChildren[i])}}else{let children=element.children||element.childNodes;for(let i=0;i<children.length;i++){this.styleSubtree(/** @type {HTMLElement} */children[i])}}}/**
     * @param {HTMLElement} element
     */styleElement(element){this.ensure();let{is}=getIsExtends(element),template=templateMap[is];if(template&&elementHasBuiltCss(template)){return}if(template&&!templateIsValid(template)){// only revalidate template once
if(!templateIsValidating(template)){this.prepareTemplate(template,is);startValidatingTemplate(template)}// update this element instance
let root=element.shadowRoot;if(root){let style=/** @type {HTMLStyleElement} */root.querySelector("style");if(style){// reuse the template's style ast, it has all the original css text
style.__cssRules=template._styleAst;style.textContent=toCssText(template._styleAst)}}}}/**
     * @param {Object=} properties
     */styleDocument(properties){this.ensure();this.styleSubtree(document.body,properties)}}if(!window.ShadyCSS||!window.ShadyCSS.ScopingShim){const applyShimInterface=new ApplyShimInterface;let CustomStyleInterface=window.ShadyCSS&&window.ShadyCSS.CustomStyleInterface;/** @suppress {duplicate} */_exports.$customStyleInterfaceDefault=CustomStyleInterface;window.ShadyCSS={/**
     * @param {!HTMLTemplateElement} template
     * @param {string} elementName
     * @param {string=} elementExtends
     */prepareTemplate(template,elementName,elementExtends){// eslint-disable-line no-unused-vars
applyShimInterface.flushCustomStyles();applyShimInterface.prepareTemplate(template,elementName)},/**
     * @param {!HTMLTemplateElement} template
     * @param {string} elementName
     * @param {string=} elementExtends
     */prepareTemplateStyles(template,elementName,elementExtends){window.ShadyCSS.prepareTemplate(template,elementName,elementExtends)},/**
     * @param {!HTMLTemplateElement} template
     * @param {string} elementName
     */prepareTemplateDom(template,elementName){},// eslint-disable-line no-unused-vars
/**
     * @param {!HTMLElement} element
     * @param {Object=} properties
     */styleSubtree(element,properties){applyShimInterface.flushCustomStyles();applyShimInterface.styleSubtree(element,properties)},/**
     * @param {!HTMLElement} element
     */styleElement(element){applyShimInterface.flushCustomStyles();applyShimInterface.styleElement(element)},/**
     * @param {Object=} properties
     */styleDocument(properties){applyShimInterface.flushCustomStyles();applyShimInterface.styleDocument(properties)},/**
     * @param {Element} element
     * @param {string} property
     * @return {string}
     */getComputedStyleValue(element,property){return getComputedStyleValue(element,property)},flushCustomStyles(){applyShimInterface.flushCustomStyles()},nativeCss:nativeCssVariables,nativeShadow:nativeShadow,cssBuild:cssBuild,disableRuntime:disableRuntime};if(CustomStyleInterface){window.ShadyCSS.CustomStyleInterface=CustomStyleInterface}}window.ShadyCSS.ApplyShim=applyShim$1;/**
                                         @license
                                         Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
                                         This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
                                         The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
                                         The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
                                         Code distributed by Google as part of the polymer project is also
                                         subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
                                         */ /* eslint-disable no-unused-vars */ /**
                                                                                 * When using Closure Compiler, JSCompiler_renameProperty(property, object) is replaced by the munged name for object[property]
                                                                                 * We cannot alias this function, so we have to use a small shim that has the same behavior when not compiling.
                                                                                 *
                                                                                 * @param {string} prop Property name
                                                                                 * @param {?Object} obj Reference object
                                                                                 * @return {string} Potentially renamed property name
                                                                                 */window.JSCompiler_renameProperty=function(prop,obj){return prop};/* eslint-enable */let CSS_URL_RX=/(url\()([^)]*)(\))/g,ABS_URL=/(^\/)|(^#)|(^[\w-\d]*:)/,workingURL,resolveDoc;/**
                 * Resolves the given URL against the provided `baseUri'.
                 *
                 * Note that this function performs no resolution for URLs that start
                 * with `/` (absolute URLs) or `#` (hash identifiers).  For general purpose
                 * URL resolution, use `window.URL`.
                 *
                 * @param {string} url Input URL to resolve
                 * @param {?string=} baseURI Base URI to resolve the URL against
                 * @return {string} resolved URL
                 */function resolveUrl(url,baseURI){if(url&&ABS_URL.test(url)){return url}// Lazy feature detection.
if(workingURL===void 0){workingURL=!1;try{const u=new URL("b","http://a");u.pathname="c%20d";workingURL="http://a/c%20d"===u.href}catch(e){// silently fail
}}if(!baseURI){baseURI=document.baseURI||window.location.href}if(workingURL){return new URL(url,baseURI).href}// Fallback to creating an anchor into a disconnected document.
if(!resolveDoc){resolveDoc=document.implementation.createHTMLDocument("temp");resolveDoc.base=resolveDoc.createElement("base");resolveDoc.head.appendChild(resolveDoc.base);resolveDoc.anchor=resolveDoc.createElement("a");resolveDoc.body.appendChild(resolveDoc.anchor)}resolveDoc.base.href=baseURI;resolveDoc.anchor.href=url;return resolveDoc.anchor.href||url}/**
   * Resolves any relative URL's in the given CSS text against the provided
   * `ownerDocument`'s `baseURI`.
   *
   * @param {string} cssText CSS text to process
   * @param {string} baseURI Base URI to resolve the URL against
   * @return {string} Processed CSS text with resolved URL's
   */function resolveCss(cssText,baseURI){return cssText.replace(CSS_URL_RX,function(m,pre,url,post){return pre+"'"+resolveUrl(url.replace(/["']/g,""),baseURI)+"'"+post})}/**
   * Returns a path from a given `url`. The path includes the trailing
   * `/` from the url.
   *
   * @param {string} url Input URL to transform
   * @return {string} resolved path
   */function pathFromUrl(url){return url.substring(0,url.lastIndexOf("/")+1)}var resolveUrl$1={resolveUrl:resolveUrl,resolveCss:resolveCss,pathFromUrl:pathFromUrl};_exports.$resolveUrl=resolveUrl$1;const useShadow=!window.ShadyDOM;_exports.useShadow=useShadow;const useNativeCSSProperties=!!(!window.ShadyCSS||window.ShadyCSS.nativeCss);_exports.useNativeCSSProperties=useNativeCSSProperties;const useNativeCustomElements=!window.customElements.polyfillWrapFlushCallback;/**
                                                                                          * Globally settable property that is automatically assigned to
                                                                                          * `ElementMixin` instances, useful for binding in templates to
                                                                                          * make URL's relative to an application's root.  Defaults to the main
                                                                                          * document URL, but can be overridden by users.  It may be useful to set
                                                                                          * `rootPath` to provide a stable application mount path when
                                                                                          * using client side routing.
                                                                                          */_exports.useNativeCustomElements=useNativeCustomElements;let rootPath=pathFromUrl(document.baseURI||window.location.href);/**
                                                                              * Sets the global rootPath property used by `ElementMixin` and
                                                                              * available via `rootPath`.
                                                                              *
                                                                              * @param {string} path The new root path
                                                                              * @return {void}
                                                                              */_exports.rootPath=rootPath;const setRootPath=function(path){_exports.rootPath=rootPath=path};/**
    * A global callback used to sanitize any value before inserting it into the DOM.
    * The callback signature is:
    *
    *  function sanitizeDOMValue(value, name, type, node) { ... }
    *
    * Where:
    *
    * `value` is the value to sanitize.
    * `name` is the name of an attribute or property (for example, href).
    * `type` indicates where the value is being inserted: one of property, attribute, or text.
    * `node` is the node where the value is being inserted.
    *
    * @type {(function(*,string,string,Node):*)|undefined}
    */_exports.setRootPath=setRootPath;let sanitizeDOMValue=window.Polymer&&window.Polymer.sanitizeDOMValue||void 0;/**
                                                                                               * Sets the global sanitizeDOMValue available via this module's exported
                                                                                               * `sanitizeDOMValue` variable.
                                                                                               *
                                                                                               * @param {(function(*,string,string,Node):*)|undefined} newSanitizeDOMValue the global sanitizeDOMValue callback
                                                                                               * @return {void}
                                                                                               */_exports.sanitizeDOMValue=sanitizeDOMValue;const setSanitizeDOMValue=function(newSanitizeDOMValue){_exports.sanitizeDOMValue=sanitizeDOMValue=newSanitizeDOMValue};/**
    * Globally settable property to make Polymer Gestures use passive TouchEvent listeners when recognizing gestures.
    * When set to `true`, gestures made from touch will not be able to prevent scrolling, allowing for smoother
    * scrolling performance.
    * Defaults to `false` for backwards compatibility.
    */_exports.setSanitizeDOMValue=setSanitizeDOMValue;let passiveTouchGestures=!1;/**
                                          * Sets `passiveTouchGestures` globally for all elements using Polymer Gestures.
                                          *
                                          * @param {boolean} usePassive enable or disable passive touch gestures globally
                                          * @return {void}
                                          */_exports.passiveTouchGestures=passiveTouchGestures;const setPassiveTouchGestures=function(usePassive){_exports.passiveTouchGestures=passiveTouchGestures=usePassive};/**
    * Setting to ensure Polymer template evaluation only occurs based on tempates
    * defined in trusted script.  When true, `<dom-module>` re-registration is
    * disallowed, `<dom-bind>` is disabled, and `<dom-if>`/`<dom-repeat>`
    * templates will only evaluate in the context of a trusted element template.
    */_exports.setPassiveTouchGestures=setPassiveTouchGestures;let strictTemplatePolicy=!1;/**
                                          * Sets `strictTemplatePolicy` globally for all elements
                                          *
                                          * @param {boolean} useStrictPolicy enable or disable strict template policy
                                          *   globally
                                          * @return {void}
                                          */_exports.strictTemplatePolicy=strictTemplatePolicy;const setStrictTemplatePolicy=function(useStrictPolicy){_exports.strictTemplatePolicy=strictTemplatePolicy=useStrictPolicy};/**
    * Setting to enable dom-module lookup from Polymer.Element.  By default,
    * templates must be defined in script using the `static get template()`
    * getter and the `html` tag function.  To enable legacy loading of templates
    * via dom-module, set this flag to true.
    */_exports.setStrictTemplatePolicy=setStrictTemplatePolicy;let allowTemplateFromDomModule=!1;/**
                                                * Sets `lookupTemplateFromDomModule` globally for all elements
                                                *
                                                * @param {boolean} allowDomModule enable or disable template lookup
                                                *   globally
                                                * @return {void}
                                                */_exports.allowTemplateFromDomModule=allowTemplateFromDomModule;const setAllowTemplateFromDomModule=function(allowDomModule){_exports.allowTemplateFromDomModule=allowTemplateFromDomModule=allowDomModule};/**
    * Setting to skip processing style includes and re-writing urls in css styles.
    * Normally "included" styles are pulled into the element and all urls in styles
    * are re-written to be relative to the containing script url.
    * If no includes or relative urls are used in styles, these steps can be
    * skipped as an optimization.
    */_exports.setAllowTemplateFromDomModule=setAllowTemplateFromDomModule;let legacyOptimizations=!1;/**
                                         * Sets `legacyOptimizations` globally for all elements to enable optimizations
                                         * when only legacy based elements are used.
                                         *
                                         * @param {boolean} useLegacyOptimizations enable or disable legacy optimizations
                                         * includes and url rewriting
                                         * @return {void}
                                         */_exports.legacyOptimizations=legacyOptimizations;const setLegacyOptimizations=function(useLegacyOptimizations){_exports.legacyOptimizations=legacyOptimizations=useLegacyOptimizations};/**
    * Setting to perform initial rendering synchronously when running under ShadyDOM.
    * This matches the behavior of Polymer 1.
    */_exports.setLegacyOptimizations=setLegacyOptimizations;let syncInitialRender=!1;/**
                                       * Sets `syncInitialRender` globally for all elements to enable synchronous
                                       * initial rendering.
                                       *
                                       * @param {boolean} useSyncInitialRender enable or disable synchronous initial
                                       * rendering globally.
                                       * @return {void}
                                       */_exports.syncInitialRender=syncInitialRender;const setSyncInitialRender=function(useSyncInitialRender){_exports.syncInitialRender=syncInitialRender=useSyncInitialRender};_exports.setSyncInitialRender=setSyncInitialRender;var settings={useShadow:useShadow,useNativeCSSProperties:useNativeCSSProperties,useNativeCustomElements:useNativeCustomElements,get rootPath(){return rootPath},setRootPath:setRootPath,get sanitizeDOMValue(){return sanitizeDOMValue},setSanitizeDOMValue:setSanitizeDOMValue,get passiveTouchGestures(){return passiveTouchGestures},setPassiveTouchGestures:setPassiveTouchGestures,get strictTemplatePolicy(){return strictTemplatePolicy},setStrictTemplatePolicy:setStrictTemplatePolicy,get allowTemplateFromDomModule(){return allowTemplateFromDomModule},setAllowTemplateFromDomModule:setAllowTemplateFromDomModule,get legacyOptimizations(){return legacyOptimizations},setLegacyOptimizations:setLegacyOptimizations,get syncInitialRender(){return syncInitialRender},setSyncInitialRender:setSyncInitialRender};_exports.$settings=settings;let dedupeId=0;/**
                   * @constructor
                   * @extends {Function}
                   * @private
                   */function MixinFunction(){}/** @type {(WeakMap | undefined)} */MixinFunction.prototype.__mixinApplications;/** @type {(Object | undefined)} */MixinFunction.prototype.__mixinSet;/* eslint-disable valid-jsdoc */ /**
                                                                      * Wraps an ES6 class expression mixin such that the mixin is only applied
                                                                      * if it has not already been applied its base argument. Also memoizes mixin
                                                                      * applications.
                                                                      *
                                                                      * @template T
                                                                      * @param {T} mixin ES6 class expression mixin to wrap
                                                                      * @return {T}
                                                                      * @suppress {invalidCasts}
                                                                      */const dedupingMixin=function(mixin){let mixinApplications=/** @type {!MixinFunction} */mixin.__mixinApplications;if(!mixinApplications){mixinApplications=new WeakMap;/** @type {!MixinFunction} */mixin.__mixinApplications=mixinApplications}// maintain a unique id for each mixin
let mixinDedupeId=dedupeId++;function dedupingMixin(base){let baseSet=/** @type {!MixinFunction} */base.__mixinSet;if(baseSet&&baseSet[mixinDedupeId]){return base}let map=mixinApplications,extended=map.get(base);if(!extended){extended=/** @type {!Function} */mixin(base);map.set(base,extended)}// copy inherited mixin set from the extended class, or the base class
// NOTE: we avoid use of Set here because some browser (IE11)
// cannot extend a base Set via the constructor.
let mixinSet=Object.create(/** @type {!MixinFunction} */extended.__mixinSet||baseSet||null);mixinSet[mixinDedupeId]=!0;/** @type {!MixinFunction} */extended.__mixinSet=mixinSet;return extended}return dedupingMixin};/* eslint-enable valid-jsdoc */_exports.dedupingMixin=dedupingMixin;var mixin={dedupingMixin:dedupingMixin};_exports.$mixin=mixin;let modules={},lcModules={};/**
                     * Sets a dom-module into the global registry by id.
                     *
                     * @param {string} id dom-module id
                     * @param {DomModule} module dom-module instance
                     * @return {void}
                     */function setModule(id,module){// store id separate from lowercased id so that
// in all cases mixedCase id will stored distinctly
// and lowercase version is a fallback
modules[id]=lcModules[id.toLowerCase()]=module}/**
   * Retrieves a dom-module from the global registry by id.
   *
   * @param {string} id dom-module id
   * @return {DomModule!} dom-module instance
   */function findModule(id){return modules[id]||lcModules[id.toLowerCase()]}function styleOutsideTemplateCheck(inst){if(inst.querySelector("style")){console.warn("dom-module %s has style outside template",inst.id)}}/**
   * The `dom-module` element registers the dom it contains to the name given
   * by the module's id attribute. It provides a unified database of dom
   * accessible via its static `import` API.
   *
   * A key use case of `dom-module` is for providing custom element `<template>`s
   * via HTML imports that are parsed by the native HTML parser, that can be
   * relocated during a bundling pass and still looked up by `id`.
   *
   * Example:
   *
   *     <dom-module id="foo">
   *       <img src="stuff.png">
   *     </dom-module>
   *
   * Then in code in some other location that cannot access the dom-module above
   *
   *     let img = customElements.get('dom-module').import('foo', 'img');
   *
   * @customElement
   * @extends HTMLElement
   * @summary Custom element that provides a registry of relocatable DOM content
   *   by `id` that is agnostic to bundling.
   * @unrestricted
   */class DomModule extends HTMLElement{static get observedAttributes(){return["id"]}/**
     * Retrieves the element specified by the css `selector` in the module
     * registered by `id`. For example, this.import('foo', 'img');
     * @param {string} id The id of the dom-module in which to search.
     * @param {string=} selector The css selector by which to find the element.
     * @return {Element} Returns the element which matches `selector` in the
     * module registered at the specified `id`.
     *
     * @export
     * @nocollapse Referred to indirectly in style-gather.js
     */static import(id,selector){if(id){let m=findModule(id);if(m&&selector){return m.querySelector(selector)}return m}return null}/* eslint-disable no-unused-vars */ /**
                                         * @param {string} name Name of attribute.
                                         * @param {?string} old Old value of attribute.
                                         * @param {?string} value Current value of attribute.
                                         * @param {?string} namespace Attribute namespace.
                                         * @return {void}
                                         * @override
                                         */attributeChangedCallback(name,old,value,namespace){if(old!==value){this.register()}}/* eslint-enable no-unused-args */ /**
                                        * The absolute URL of the original location of this `dom-module`.
                                        *
                                        * This value will differ from this element's `ownerDocument` in the
                                        * following ways:
                                        * - Takes into account any `assetpath` attribute added during bundling
                                        *   to indicate the original location relative to the bundled location
                                        * - Uses the HTMLImports polyfill's `importForElement` API to ensure
                                        *   the path is relative to the import document's location since
                                        *   `ownerDocument` is not currently polyfilled
                                        */get assetpath(){// Don't override existing assetpath.
if(!this.__assetpath){// note: assetpath set via an attribute must be relative to this
// element's location; accomodate polyfilled HTMLImports
const owner=window.HTMLImports&&HTMLImports.importForElement?HTMLImports.importForElement(this)||document:this.ownerDocument,url=resolveUrl(this.getAttribute("assetpath")||"",owner.baseURI);this.__assetpath=pathFromUrl(url)}return this.__assetpath}/**
     * Registers the dom-module at a given id. This method should only be called
     * when a dom-module is imperatively created. For
     * example, `document.createElement('dom-module').register('foo')`.
     * @param {string=} id The id at which to register the dom-module.
     * @return {void}
     */register(id){id=id||this.id;if(id){// Under strictTemplatePolicy, reject and null out any re-registered
// dom-module since it is ambiguous whether first-in or last-in is trusted
if(strictTemplatePolicy&&findModule(id)!==void 0){setModule(id,null);throw new Error(`strictTemplatePolicy: dom-module ${id} re-registered`)}this.id=id;setModule(id,this);styleOutsideTemplateCheck(this)}}}_exports.DomModule=DomModule;DomModule.prototype.modules=modules;customElements.define("dom-module",DomModule);var domModule={DomModule:DomModule};_exports.$domModule=domModule;const MODULE_STYLE_LINK_SELECTOR="link[rel=import][type~=css]",INCLUDE_ATTR="include",SHADY_UNSCOPED_ATTR="shady-unscoped";/**
                                               * @param {string} moduleId .
                                               * @return {?DomModule} .
                                               */function importModule(moduleId){return(/** @type {?DomModule} */DomModule.import(moduleId))}function styleForImport(importDoc){// NOTE: polyfill affordance.
// under the HTMLImports polyfill, there will be no 'body',
// but the import pseudo-doc can be used directly.
let container=importDoc.body?importDoc.body:importDoc;const importCss=resolveCss(container.textContent,importDoc.baseURI),style=document.createElement("style");style.textContent=importCss;return style}/** @typedef {{assetpath: string}} */let templateWithAssetPath;// eslint-disable-line no-unused-vars
/**
 * Returns a list of <style> elements in a space-separated list of `dom-module`s.
 *
 * @function
 * @param {string} moduleIds List of dom-module id's within which to
 * search for css.
 * @return {!Array<!HTMLStyleElement>} Array of contained <style> elements
 */function stylesFromModules(moduleIds){const modules=moduleIds.trim().split(/\s+/),styles=[];for(let i=0;i<modules.length;i++){styles.push(...stylesFromModule(modules[i]))}return styles}/**
   * Returns a list of <style> elements in a given `dom-module`.
   * Styles in a `dom-module` can come either from `<style>`s within the
   * first `<template>`, or else from one or more
   * `<link rel="import" type="css">` links outside the template.
   *
   * @param {string} moduleId dom-module id to gather styles from
   * @return {!Array<!HTMLStyleElement>} Array of contained styles.
   */function stylesFromModule(moduleId){const m=importModule(moduleId);if(!m){console.warn("Could not find style data in module named",moduleId);return[]}if(m._styles===void 0){const styles=[..._stylesFromModuleImports(m)],template=/** @type {?HTMLTemplateElement} */m.querySelector("template");// module imports: <link rel="import" type="css">
if(template){styles.push(...stylesFromTemplate(template,/** @type {templateWithAssetPath} */m.assetpath))}m._styles=styles}return m._styles}/**
   * Returns the `<style>` elements within a given template.
   *
   * @param {!HTMLTemplateElement} template Template to gather styles from
   * @param {string=} baseURI baseURI for style content
   * @return {!Array<!HTMLStyleElement>} Array of styles
   */function stylesFromTemplate(template,baseURI){if(!template._styles){const styles=[],e$=template.content.querySelectorAll("style");// if element is a template, get content from its .content
for(let i=0;i<e$.length;i++){let e=e$[i],include=e.getAttribute(INCLUDE_ATTR);// support style sharing by allowing styles to "include"
// other dom-modules that contain styling
if(include){styles.push(...stylesFromModules(include).filter(function(item,index,self){return self.indexOf(item)===index}))}if(baseURI){e.textContent=resolveCss(e.textContent,/** @type {string} */baseURI)}styles.push(e)}template._styles=styles}return template._styles}/**
   * Returns a list of <style> elements  from stylesheets loaded via `<link rel="import" type="css">` links within the specified `dom-module`.
   *
   * @param {string} moduleId Id of `dom-module` to gather CSS from
   * @return {!Array<!HTMLStyleElement>} Array of contained styles.
   */function stylesFromModuleImports(moduleId){let m=importModule(moduleId);return m?_stylesFromModuleImports(m):[]}/**
   * @param {!HTMLElement} module dom-module element that could contain `<link rel="import" type="css">` styles
   * @return {!Array<!HTMLStyleElement>} Array of contained styles
   */function _stylesFromModuleImports(module){const styles=[],p$=module.querySelectorAll(MODULE_STYLE_LINK_SELECTOR);for(let i=0,p;i<p$.length;i++){p=p$[i];if(p.import){const importDoc=p.import,unscoped=p.hasAttribute(SHADY_UNSCOPED_ATTR);if(unscoped&&!importDoc._unscopedStyle){const style=styleForImport(importDoc);style.setAttribute(SHADY_UNSCOPED_ATTR,"");importDoc._unscopedStyle=style}else if(!importDoc._style){importDoc._style=styleForImport(importDoc)}styles.push(unscoped?importDoc._unscopedStyle:importDoc._style)}}return styles}/**
   *
   * Returns CSS text of styles in a space-separated list of `dom-module`s.
   * Note: This method is deprecated, use `stylesFromModules` instead.
   *
   * @deprecated
   * @param {string} moduleIds List of dom-module id's within which to
   * search for css.
   * @return {string} Concatenated CSS content from specified `dom-module`s
   */function cssFromModules(moduleIds){let modules=moduleIds.trim().split(/\s+/),cssText="";for(let i=0;i<modules.length;i++){cssText+=cssFromModule(modules[i])}return cssText}/**
   * Returns CSS text of styles in a given `dom-module`.  CSS in a `dom-module`
   * can come either from `<style>`s within the first `<template>`, or else
   * from one or more `<link rel="import" type="css">` links outside the
   * template.
   *
   * Any `<styles>` processed are removed from their original location.
   * Note: This method is deprecated, use `styleFromModule` instead.
   *
   * @deprecated
   * @param {string} moduleId dom-module id to gather styles from
   * @return {string} Concatenated CSS content from specified `dom-module`
   */function cssFromModule(moduleId){let m=importModule(moduleId);if(m&&m._cssText===void 0){// module imports: <link rel="import" type="css">
let cssText=_cssFromModuleImports(m),t=/** @type {?HTMLTemplateElement} */m.querySelector("template");// include css from the first template in the module
if(t){cssText+=cssFromTemplate(t,/** @type {templateWithAssetPath} */m.assetpath)}m._cssText=cssText||null}if(!m){console.warn("Could not find style data in module named",moduleId)}return m&&m._cssText||""}/**
   * Returns CSS text of `<styles>` within a given template.
   *
   * Any `<styles>` processed are removed from their original location.
   * Note: This method is deprecated, use `styleFromTemplate` instead.
   *
   * @deprecated
   * @param {!HTMLTemplateElement} template Template to gather styles from
   * @param {string} baseURI Base URI to resolve the URL against
   * @return {string} Concatenated CSS content from specified template
   */function cssFromTemplate(template,baseURI){let cssText="";const e$=stylesFromTemplate(template,baseURI);// if element is a template, get content from its .content
for(let i=0,e;i<e$.length;i++){e=e$[i];if(e.parentNode){e.parentNode.removeChild(e)}cssText+=e.textContent}return cssText}/**
   * Returns CSS text from stylesheets loaded via `<link rel="import" type="css">`
   * links within the specified `dom-module`.
   *
   * Note: This method is deprecated, use `stylesFromModuleImports` instead.
   *
   * @deprecated
   *
   * @param {string} moduleId Id of `dom-module` to gather CSS from
   * @return {string} Concatenated CSS content from links in specified `dom-module`
   */function cssFromModuleImports(moduleId){let m=importModule(moduleId);return m?_cssFromModuleImports(m):""}/**
   * @deprecated
   * @param {!HTMLElement} module dom-module element that could contain `<link rel="import" type="css">` styles
   * @return {string} Concatenated CSS content from links in the dom-module
   */function _cssFromModuleImports(module){let cssText="",styles=_stylesFromModuleImports(module);for(let i=0;i<styles.length;i++){cssText+=styles[i].textContent}return cssText}var styleGather={stylesFromModules:stylesFromModules,stylesFromModule:stylesFromModule,stylesFromTemplate:stylesFromTemplate,stylesFromModuleImports:stylesFromModuleImports,cssFromModules:cssFromModules,cssFromModule:cssFromModule,cssFromTemplate:cssFromTemplate,cssFromModuleImports:cssFromModuleImports};/**
   @license
   Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */ /* eslint-disable valid-jsdoc */ /**
                                        * Node wrapper to ensure ShadowDOM safe operation regardless of polyfill
                                        * presence or mode. Note that with the introduction of `ShadyDOM.noPatch`,
                                        * a node wrapper must be used to access ShadowDOM API.
                                        * This is similar to using `Polymer.dom` but relies exclusively
                                        * on the presence of the ShadyDOM polyfill rather than requiring the loading
                                        * of legacy (Polymer.dom) API.
                                        * @type {function(Node):Node}
                                        */_exports.$styleGather=styleGather;const wrap$1=window.ShadyDOM&&window.ShadyDOM.noPatch&&window.ShadyDOM.wrap?window.ShadyDOM.wrap:n=>n;_exports.wrap=wrap$1;var wrap$2={wrap:wrap$1};_exports.$wrap=wrap$2;function isPath(path){return 0<=path.indexOf(".")}/**
   * Returns the root property name for the given path.
   *
   * Example:
   *
   * ```
   * root('foo.bar.baz') // 'foo'
   * root('foo')         // 'foo'
   * ```
   *
   * @param {string} path Path string
   * @return {string} Root property name
   */function root(path){let dotIndex=path.indexOf(".");if(-1===dotIndex){return path}return path.slice(0,dotIndex)}/**
   * Given `base` is `foo.bar`, `foo` is an ancestor, `foo.bar` is not
   * Returns true if the given path is an ancestor of the base path.
   *
   * Example:
   *
   * ```
   * isAncestor('foo.bar', 'foo')         // true
   * isAncestor('foo.bar', 'foo.bar')     // false
   * isAncestor('foo.bar', 'foo.bar.baz') // false
   * ```
   *
   * @param {string} base Path string to test against.
   * @param {string} path Path string to test.
   * @return {boolean} True if `path` is an ancestor of `base`.
   */function isAncestor(base,path){//     base.startsWith(path + '.');
return 0===base.indexOf(path+".")}/**
   * Given `base` is `foo.bar`, `foo.bar.baz` is an descendant
   *
   * Example:
   *
   * ```
   * isDescendant('foo.bar', 'foo.bar.baz') // true
   * isDescendant('foo.bar', 'foo.bar')     // false
   * isDescendant('foo.bar', 'foo')         // false
   * ```
   *
   * @param {string} base Path string to test against.
   * @param {string} path Path string to test.
   * @return {boolean} True if `path` is a descendant of `base`.
   */function isDescendant(base,path){//     path.startsWith(base + '.');
return 0===path.indexOf(base+".")}/**
   * Replaces a previous base path with a new base path, preserving the
   * remainder of the path.
   *
   * User must ensure `path` has a prefix of `base`.
   *
   * Example:
   *
   * ```
   * translate('foo.bar', 'zot', 'foo.bar.baz') // 'zot.baz'
   * ```
   *
   * @param {string} base Current base string to remove
   * @param {string} newBase New base string to replace with
   * @param {string} path Path to translate
   * @return {string} Translated string
   */function translate(base,newBase,path){return newBase+path.slice(base.length)}/**
   * @param {string} base Path string to test against
   * @param {string} path Path string to test
   * @return {boolean} True if `path` is equal to `base`
   */function matches(base,path){return base===path||isAncestor(base,path)||isDescendant(base,path)}/**
   * Converts array-based paths to flattened path.  String-based paths
   * are returned as-is.
   *
   * Example:
   *
   * ```
   * normalize(['foo.bar', 0, 'baz'])  // 'foo.bar.0.baz'
   * normalize('foo.bar.0.baz')        // 'foo.bar.0.baz'
   * ```
   *
   * @param {string | !Array<string|number>} path Input path
   * @return {string} Flattened path
   */function normalize(path){if(Array.isArray(path)){let parts=[];for(let i=0,args;i<path.length;i++){args=path[i].toString().split(".");for(let j=0;j<args.length;j++){parts.push(args[j])}}return parts.join(".")}else{return path}}/**
   * Splits a path into an array of property names. Accepts either arrays
   * of path parts or strings.
   *
   * Example:
   *
   * ```
   * split(['foo.bar', 0, 'baz'])  // ['foo', 'bar', '0', 'baz']
   * split('foo.bar.0.baz')        // ['foo', 'bar', '0', 'baz']
   * ```
   *
   * @param {string | !Array<string|number>} path Input path
   * @return {!Array<string>} Array of path parts
   * @suppress {checkTypes}
   */function split(path){if(Array.isArray(path)){return normalize(path).split(".")}return path.toString().split(".")}/**
   * Reads a value from a path.  If any sub-property in the path is `undefined`,
   * this method returns `undefined` (will never throw.
   *
   * @param {Object} root Object from which to dereference path from
   * @param {string | !Array<string|number>} path Path to read
   * @param {Object=} info If an object is provided to `info`, the normalized
   *  (flattened) path will be set to `info.path`.
   * @return {*} Value at path, or `undefined` if the path could not be
   *  fully dereferenced.
   */function get(root,path,info){let prop=root,parts=split(path);// Loop over path parts[0..n-1] and dereference
for(let i=0;i<parts.length;i++){if(!prop){return}let part=parts[i];prop=prop[part]}if(info){info.path=parts.join(".")}return prop}/**
   * Sets a value to a path.  If any sub-property in the path is `undefined`,
   * this method will no-op.
   *
   * @param {Object} root Object from which to dereference path from
   * @param {string | !Array<string|number>} path Path to set
   * @param {*} value Value to set to path
   * @return {string | undefined} The normalized version of the input path
   */function set(root,path,value){let prop=root,parts=split(path),last=parts[parts.length-1];if(1<parts.length){// Loop over path parts[0..n-2] and dereference
for(let i=0,part;i<parts.length-1;i++){part=parts[i];prop=prop[part];if(!prop){return}}// Set value to object at end of path
prop[last]=value}else{// Simple property set
prop[path]=value}return parts.join(".")}/**
   * Returns true if the given string is a structured data path (has dots).
   *
   * This function is deprecated.  Use `isPath` instead.
   *
   * Example:
   *
   * ```
   * isDeep('foo.bar.baz') // true
   * isDeep('foo')         // false
   * ```
   *
   * @deprecated
   * @param {string} path Path string
   * @return {boolean} True if the string contained one or more dots
   */const isDeep=isPath;_exports.isDeep=isDeep;var path={isPath:isPath,root:root,isAncestor:isAncestor,isDescendant:isDescendant,translate:translate,matches:matches,normalize:normalize,split:split,get:get,set:set,isDeep:isDeep};_exports.$path=path;const caseMap={},DASH_TO_CAMEL=/-[a-z]/g,CAMEL_TO_DASH=/([A-Z])/g;/**
                                   * @fileoverview Module with utilities for converting between "dash-case" and
                                   * "camelCase" identifiers.
                                   */ /**
                                       * Converts "dash-case" identifier (e.g. `foo-bar-baz`) to "camelCase"
                                       * (e.g. `fooBarBaz`).
                                       *
                                       * @param {string} dash Dash-case identifier
                                       * @return {string} Camel-case representation of the identifier
                                       */function dashToCamelCase(dash){return caseMap[dash]||(caseMap[dash]=0>dash.indexOf("-")?dash:dash.replace(DASH_TO_CAMEL,m=>m[1].toUpperCase()))}/**
   * Converts "camelCase" identifier (e.g. `fooBarBaz`) to "dash-case"
   * (e.g. `foo-bar-baz`).
   *
   * @param {string} camel Camel-case identifier
   * @return {string} Dash-case representation of the identifier
   */function camelToDashCase(camel){return caseMap[camel]||(caseMap[camel]=camel.replace(CAMEL_TO_DASH,"-$1").toLowerCase())}var caseMap$1={dashToCamelCase:dashToCamelCase,camelToDashCase:camelToDashCase};_exports.$caseMap=caseMap$1;let microtaskCurrHandle=0,microtaskLastHandle=0,microtaskCallbacks=[],microtaskNodeContent=0,microtaskNode=document.createTextNode("");new window.MutationObserver(microtaskFlush).observe(microtaskNode,{characterData:!0});function microtaskFlush(){const len=microtaskCallbacks.length;for(let i=0,cb;i<len;i++){cb=microtaskCallbacks[i];if(cb){try{cb()}catch(e){setTimeout(()=>{throw e})}}}microtaskCallbacks.splice(0,len);microtaskLastHandle+=len}/**
   * Async interface wrapper around `setTimeout`.
   *
   * @namespace
   * @summary Async interface wrapper around `setTimeout`.
   */const timeOut={/**
   * Returns a sub-module with the async interface providing the provided
   * delay.
   *
   * @memberof timeOut
   * @param {number=} delay Time to wait before calling callbacks in ms
   * @return {!AsyncInterface} An async timeout interface
   */after(delay){return{run(fn){return window.setTimeout(fn,delay)},cancel(handle){window.clearTimeout(handle)}}},/**
   * Enqueues a function called in the next task.
   *
   * @memberof timeOut
   * @param {!Function} fn Callback to run
   * @param {number=} delay Delay in milliseconds
   * @return {number} Handle used for canceling task
   */run(fn,delay){return window.setTimeout(fn,delay)},/**
   * Cancels a previously enqueued `timeOut` callback.
   *
   * @memberof timeOut
   * @param {number} handle Handle returned from `run` of callback to cancel
   * @return {void}
   */cancel(handle){window.clearTimeout(handle)}};_exports.timeOut=timeOut;const animationFrame={/**
   * Enqueues a function called at `requestAnimationFrame` timing.
   *
   * @memberof animationFrame
   * @param {function(number):void} fn Callback to run
   * @return {number} Handle used for canceling task
   */run(fn){return window.requestAnimationFrame(fn)},/**
   * Cancels a previously enqueued `animationFrame` callback.
   *
   * @memberof animationFrame
   * @param {number} handle Handle returned from `run` of callback to cancel
   * @return {void}
   */cancel(handle){window.cancelAnimationFrame(handle)}};_exports.animationFrame=animationFrame;const idlePeriod={/**
   * Enqueues a function called at `requestIdleCallback` timing.
   *
   * @memberof idlePeriod
   * @param {function(!IdleDeadline):void} fn Callback to run
   * @return {number} Handle used for canceling task
   */run(fn){return window.requestIdleCallback?window.requestIdleCallback(fn):window.setTimeout(fn,16)},/**
   * Cancels a previously enqueued `idlePeriod` callback.
   *
   * @memberof idlePeriod
   * @param {number} handle Handle returned from `run` of callback to cancel
   * @return {void}
   */cancel(handle){window.cancelIdleCallback?window.cancelIdleCallback(handle):window.clearTimeout(handle)}};_exports.idlePeriod=idlePeriod;const microTask={/**
   * Enqueues a function called at microtask timing.
   *
   * @memberof microTask
   * @param {!Function=} callback Callback to run
   * @return {number} Handle used for canceling task
   */run(callback){microtaskNode.textContent=microtaskNodeContent++;microtaskCallbacks.push(callback);return microtaskCurrHandle++},/**
   * Cancels a previously enqueued `microTask` callback.
   *
   * @memberof microTask
   * @param {number} handle Handle returned from `run` of callback to cancel
   * @return {void}
   */cancel(handle){const idx=handle-microtaskLastHandle;if(0<=idx){if(!microtaskCallbacks[idx]){throw new Error("invalid async handle: "+handle)}microtaskCallbacks[idx]=null}}};_exports.microTask=microTask;var async$1={timeOut:timeOut,animationFrame:animationFrame,idlePeriod:idlePeriod,microTask:microTask};_exports.$async=async$1;const microtask=microTask,PropertiesChanged=dedupingMixin(/**
                                                 * @template T
                                                 * @param {function(new:T)} superClass Class to apply mixin to.
                                                 * @return {function(new:T)} superClass with mixin applied.
                                                 */superClass=>{/**
   * @polymer
   * @mixinClass
   * @implements {Polymer_PropertiesChanged}
   * @unrestricted
   */class PropertiesChanged extends superClass{/**
     * Creates property accessors for the given property names.
     * @param {!Object} props Object whose keys are names of accessors.
     * @return {void}
     * @protected
     */static createProperties(props){const proto=this.prototype;for(let prop in props){// don't stomp an existing accessor
if(!(prop in proto)){proto._createPropertyAccessor(prop)}}}/**
       * Returns an attribute name that corresponds to the given property.
       * The attribute name is the lowercased property name. Override to
       * customize this mapping.
       * @param {string} property Property to convert
       * @return {string} Attribute name corresponding to the given property.
       *
       * @protected
       */static attributeNameForProperty(property){return property.toLowerCase()}/**
       * Override point to provide a type to which to deserialize a value to
       * a given property.
       * @param {string} name Name of property
       *
       * @protected
       */static typeForProperty(name){}//eslint-disable-line no-unused-vars
/**
     * Creates a setter/getter pair for the named property with its own
     * local storage.  The getter returns the value in the local storage,
     * and the setter calls `_setProperty`, which updates the local storage
     * for the property and enqueues a `_propertiesChanged` callback.
     *
     * This method may be called on a prototype or an instance.  Calling
     * this method may overwrite a property value that already exists on
     * the prototype/instance by creating the accessor.
     *
     * @param {string} property Name of the property
     * @param {boolean=} readOnly When true, no setter is created; the
     *   protected `_setProperty` function must be used to set the property
     * @return {void}
     * @protected
     * @override
     */_createPropertyAccessor(property,readOnly){this._addPropertyToAttributeMap(property);if(!this.hasOwnProperty("__dataHasAccessor")){this.__dataHasAccessor=Object.assign({},this.__dataHasAccessor)}if(!this.__dataHasAccessor[property]){this.__dataHasAccessor[property]=!0;this._definePropertyAccessor(property,readOnly)}}/**
       * Adds the given `property` to a map matching attribute names
       * to property names, using `attributeNameForProperty`. This map is
       * used when deserializing attribute values to properties.
       *
       * @param {string} property Name of the property
       * @override
       */_addPropertyToAttributeMap(property){if(!this.hasOwnProperty("__dataAttributes")){this.__dataAttributes=Object.assign({},this.__dataAttributes)}if(!this.__dataAttributes[property]){const attr=this.constructor.attributeNameForProperty(property);this.__dataAttributes[attr]=property}}/**
       * Defines a property accessor for the given property.
       * @param {string} property Name of the property
       * @param {boolean=} readOnly When true, no setter is created
       * @return {void}
       * @override
       */_definePropertyAccessor(property,readOnly){Object.defineProperty(this,property,{/* eslint-disable valid-jsdoc */ /** @this {PropertiesChanged} */get(){return this._getProperty(property)},/** @this {PropertiesChanged} */set:readOnly?function(){}:function(value){this._setProperty(property,value)}/* eslint-enable */})}constructor(){super();/** @protected {boolean} */this.__dataEnabled=!1;this.__dataReady=!1;this.__dataInvalid=!1;this.__data={};this.__dataPending=null;this.__dataOld=null;this.__dataInstanceProps=null;this.__serializing=!1;this._initializeProperties()}/**
       * Lifecycle callback called when properties are enabled via
       * `_enableProperties`.
       *
       * Users may override this function to implement behavior that is
       * dependent on the element having its property data initialized, e.g.
       * from defaults (initialized from `constructor`, `_initializeProperties`),
       * `attributeChangedCallback`, or values propagated from host e.g. via
       * bindings.  `super.ready()` must be called to ensure the data system
       * becomes enabled.
       *
       * @return {void}
       * @public
       * @override
       */ready(){this.__dataReady=!0;this._flushProperties()}/**
       * Initializes the local storage for property accessors.
       *
       * Provided as an override point for performing any setup work prior
       * to initializing the property accessor system.
       *
       * @return {void}
       * @protected
       * @override
       */_initializeProperties(){// Capture instance properties; these will be set into accessors
// during first flush. Don't set them here, since we want
// these to overwrite defaults/constructor assignments
for(let p in this.__dataHasAccessor){if(this.hasOwnProperty(p)){this.__dataInstanceProps=this.__dataInstanceProps||{};this.__dataInstanceProps[p]=this[p];delete this[p]}}}/**
       * Called at ready time with bag of instance properties that overwrote
       * accessors when the element upgraded.
       *
       * The default implementation sets these properties back into the
       * setter at ready time.  This method is provided as an override
       * point for customizing or providing more efficient initialization.
       *
       * @param {Object} props Bag of property values that were overwritten
       *   when creating property accessors.
       * @return {void}
       * @protected
       * @override
       */_initializeInstanceProperties(props){Object.assign(this,props)}/**
       * Updates the local storage for a property (via `_setPendingProperty`)
       * and enqueues a `_proeprtiesChanged` callback.
       *
       * @param {string} property Name of the property
       * @param {*} value Value to set
       * @return {void}
       * @protected
       * @override
       */_setProperty(property,value){if(this._setPendingProperty(property,value)){this._invalidateProperties()}}/**
       * Returns the value for the given property.
       * @param {string} property Name of property
       * @return {*} Value for the given property
       * @protected
       * @override
       */_getProperty(property){return this.__data[property]}/* eslint-disable no-unused-vars */ /**
                                           * Updates the local storage for a property, records the previous value,
                                           * and adds it to the set of "pending changes" that will be passed to the
                                           * `_propertiesChanged` callback.  This method does not enqueue the
                                           * `_propertiesChanged` callback.
                                           *
                                           * @param {string} property Name of the property
                                           * @param {*} value Value to set
                                           * @param {boolean=} ext Not used here; affordance for closure
                                           * @return {boolean} Returns true if the property changed
                                           * @protected
                                           * @override
                                           */_setPendingProperty(property,value,ext){let old=this.__data[property],changed=this._shouldPropertyChange(property,value,old);if(changed){if(!this.__dataPending){this.__dataPending={};this.__dataOld={}}// Ensure old is captured from the last turn
if(this.__dataOld&&!(property in this.__dataOld)){this.__dataOld[property]=old}this.__data[property]=value;this.__dataPending[property]=value}return changed}/* eslint-enable */ /**
                           * Marks the properties as invalid, and enqueues an async
                           * `_propertiesChanged` callback.
                           *
                           * @return {void}
                           * @protected
                           * @override
                           */_invalidateProperties(){if(!this.__dataInvalid&&this.__dataReady){this.__dataInvalid=!0;microtask.run(()=>{if(this.__dataInvalid){this.__dataInvalid=!1;this._flushProperties()}})}}/**
       * Call to enable property accessor processing. Before this method is
       * called accessor values will be set but side effects are
       * queued. When called, any pending side effects occur immediately.
       * For elements, generally `connectedCallback` is a normal spot to do so.
       * It is safe to call this method multiple times as it only turns on
       * property accessors once.
       *
       * @return {void}
       * @protected
       * @override
       */_enableProperties(){if(!this.__dataEnabled){this.__dataEnabled=!0;if(this.__dataInstanceProps){this._initializeInstanceProperties(this.__dataInstanceProps);this.__dataInstanceProps=null}this.ready()}}/**
       * Calls the `_propertiesChanged` callback with the current set of
       * pending changes (and old values recorded when pending changes were
       * set), and resets the pending set of changes. Generally, this method
       * should not be called in user code.
       *
       * @return {void}
       * @protected
       * @override
       */_flushProperties(){const props=this.__data,changedProps=this.__dataPending,old=this.__dataOld;if(this._shouldPropertiesChange(props,changedProps,old)){this.__dataPending=null;this.__dataOld=null;this._propertiesChanged(props,changedProps,old)}}/**
       * Called in `_flushProperties` to determine if `_propertiesChanged`
       * should be called. The default implementation returns true if
       * properties are pending. Override to customize when
       * `_propertiesChanged` is called.
       * @param {!Object} currentProps Bag of all current accessor values
       * @param {?Object} changedProps Bag of properties changed since the last
       *   call to `_propertiesChanged`
       * @param {?Object} oldProps Bag of previous values for each property
       *   in `changedProps`
       * @return {boolean} true if changedProps is truthy
       * @override
       */_shouldPropertiesChange(currentProps,changedProps,oldProps){// eslint-disable-line no-unused-vars
return!!changedProps}/**
       * Callback called when any properties with accessors created via
       * `_createPropertyAccessor` have been set.
       *
       * @param {!Object} currentProps Bag of all current accessor values
       * @param {?Object} changedProps Bag of properties changed since the last
       *   call to `_propertiesChanged`
       * @param {?Object} oldProps Bag of previous values for each property
       *   in `changedProps`
       * @return {void}
       * @protected
       * @override
       */_propertiesChanged(currentProps,changedProps,oldProps){}// eslint-disable-line no-unused-vars
/**
     * Method called to determine whether a property value should be
     * considered as a change and cause the `_propertiesChanged` callback
     * to be enqueued.
     *
     * The default implementation returns `true` if a strict equality
     * check fails. The method always returns false for `NaN`.
     *
     * Override this method to e.g. provide stricter checking for
     * Objects/Arrays when using immutable patterns.
     *
     * @param {string} property Property name
     * @param {*} value New property value
     * @param {*} old Previous property value
     * @return {boolean} Whether the property should be considered a change
     *   and enqueue a `_proeprtiesChanged` callback
     * @protected
     * @override
     */_shouldPropertyChange(property,value,old){return(// Strict equality check
old!==value&&(// This ensures (old==NaN, value==NaN) always returns false
old===old||value===value))}/**
       * Implements native Custom Elements `attributeChangedCallback` to
       * set an attribute value to a property via `_attributeToProperty`.
       *
       * @param {string} name Name of attribute that changed
       * @param {?string} old Old attribute value
       * @param {?string} value New attribute value
       * @param {?string=} namespace Attribute namespace.
       * @return {void}
       * @suppress {missingProperties} Super may or may not implement the callback
       * @override
       */attributeChangedCallback(name,old,value,namespace){if(old!==value){this._attributeToProperty(name,value)}if(super.attributeChangedCallback){super.attributeChangedCallback(name,old,value,namespace)}}/**
       * Deserializes an attribute to its associated property.
       *
       * This method calls the `_deserializeValue` method to convert the string to
       * a typed value.
       *
       * @param {string} attribute Name of attribute to deserialize.
       * @param {?string} value of the attribute.
       * @param {*=} type type to deserialize to, defaults to the value
       * returned from `typeForProperty`
       * @return {void}
       * @override
       */_attributeToProperty(attribute,value,type){if(!this.__serializing){const map=this.__dataAttributes,property=map&&map[attribute]||attribute;this[property]=this._deserializeValue(value,type||this.constructor.typeForProperty(property))}}/**
       * Serializes a property to its associated attribute.
       *
       * @suppress {invalidCasts} Closure can't figure out `this` is an element.
       *
       * @param {string} property Property name to reflect.
       * @param {string=} attribute Attribute name to reflect to.
       * @param {*=} value Property value to refect.
       * @return {void}
       * @override
       */_propertyToAttribute(property,attribute,value){this.__serializing=!0;value=3>arguments.length?this[property]:value;this._valueToNodeAttribute(/** @type {!HTMLElement} */this,value,attribute||this.constructor.attributeNameForProperty(property));this.__serializing=!1}/**
       * Sets a typed value to an HTML attribute on a node.
       *
       * This method calls the `_serializeValue` method to convert the typed
       * value to a string.  If the `_serializeValue` method returns `undefined`,
       * the attribute will be removed (this is the default for boolean
       * type `false`).
       *
       * @param {Element} node Element to set attribute to.
       * @param {*} value Value to serialize.
       * @param {string} attribute Attribute name to serialize to.
       * @return {void}
       * @override
       */_valueToNodeAttribute(node,value,attribute){const str=this._serializeValue(value);if(str===void 0){node.removeAttribute(attribute)}else{if("class"===attribute||"name"===attribute||"slot"===attribute){node=/** @type {?Element} */wrap$1(node)}node.setAttribute(attribute,str)}}/**
       * Converts a typed JavaScript value to a string.
       *
       * This method is called when setting JS property values to
       * HTML attributes.  Users may override this method to provide
       * serialization for custom types.
       *
       * @param {*} value Property value to serialize.
       * @return {string | undefined} String serialized from the provided
       * property  value.
       * @override
       */_serializeValue(value){switch(typeof value){case"boolean":return value?"":void 0;default:return null!=value?value.toString():void 0;}}/**
       * Converts a string to a typed JavaScript value.
       *
       * This method is called when reading HTML attribute values to
       * JS properties.  Users may override this method to provide
       * deserialization for custom `type`s. Types for `Boolean`, `String`,
       * and `Number` convert attributes to the expected types.
       *
       * @param {?string} value Value to deserialize.
       * @param {*=} type Type to deserialize the string to.
       * @return {*} Typed value deserialized from the provided string.
       * @override
       */_deserializeValue(value,type){switch(type){case Boolean:return null!==value;case Number:return+value;default:return value;}}}return PropertiesChanged});/**
                              * Element class mixin that provides basic meta-programming for creating one
                              * or more property accessors (getter/setter pair) that enqueue an async
                              * (batched) `_propertiesChanged` callback.
                              *
                              * For basic usage of this mixin, call `MyClass.createProperties(props)`
                              * once at class definition time to create property accessors for properties
                              * named in props, implement `_propertiesChanged` to react as desired to
                              * property changes, and implement `static get observedAttributes()` and
                              * include lowercase versions of any property names that should be set from
                              * attributes. Last, call `this._enableProperties()` in the element's
                              * `connectedCallback` to enable the accessors.
                              *
                              * @mixinFunction
                              * @polymer
                              * @summary Element class mixin for reacting to property changes from
                              *   generated property accessors.
                              */_exports.PropertiesChanged=PropertiesChanged;var propertiesChanged={PropertiesChanged:PropertiesChanged};// that won't have their values "saved" by `saveAccessorValue`, since
// reading from an HTMLElement accessor from the context of a prototype throws
_exports.$propertiesChanged=propertiesChanged;const nativeProperties={};let proto=HTMLElement.prototype;while(proto){let props=Object.getOwnPropertyNames(proto);for(let i=0;i<props.length;i++){nativeProperties[props[i]]=!0}proto=Object.getPrototypeOf(proto)}/**
   * Used to save the value of a property that will be overridden with
   * an accessor. If the `model` is a prototype, the values will be saved
   * in `__dataProto`, and it's up to the user (or downstream mixin) to
   * decide how/when to set these values back into the accessors.
   * If `model` is already an instance (it has a `__data` property), then
   * the value will be set as a pending property, meaning the user should
   * call `_invalidateProperties` or `_flushProperties` to take effect
   *
   * @param {Object} model Prototype or instance
   * @param {string} property Name of property
   * @return {void}
   * @private
   */function saveAccessorValue(model,property){// Don't read/store value for any native properties since they could throw
if(!nativeProperties[property]){let value=model[property];if(value!==void 0){if(model.__data){// Adding accessor to instance; update the property
// It is the user's responsibility to call _flushProperties
model._setPendingProperty(property,value)}else{// Adding accessor to proto; save proto's value for instance-time use
if(!model.__dataProto){model.__dataProto={}}else if(!model.hasOwnProperty(JSCompiler_renameProperty("__dataProto",model))){model.__dataProto=Object.create(model.__dataProto)}model.__dataProto[property]=value}}}}/**
   * Element class mixin that provides basic meta-programming for creating one
   * or more property accessors (getter/setter pair) that enqueue an async
   * (batched) `_propertiesChanged` callback.
   *
   * For basic usage of this mixin:
   *
   * -   Declare attributes to observe via the standard `static get
   *     observedAttributes()`. Use `dash-case` attribute names to represent
   *     `camelCase` property names.
   * -   Implement the `_propertiesChanged` callback on the class.
   * -   Call `MyClass.createPropertiesForAttributes()` **once** on the class to
   *     generate property accessors for each observed attribute. This must be
   *     called before the first instance is created, for example, by calling it
   *     before calling `customElements.define`. It can also be called lazily from
   *     the element's `constructor`, as long as it's guarded so that the call is
   *     only made once, when the first instance is created.
   * -   Call `this._enableProperties()` in the element's `connectedCallback` to
   *     enable the accessors.
   *
   * Any `observedAttributes` will automatically be
   * deserialized via `attributeChangedCallback` and set to the associated
   * property using `dash-case`-to-`camelCase` convention.
   *
   * @mixinFunction
   * @polymer
   * @appliesMixin PropertiesChanged
   * @summary Element class mixin for reacting to property changes from
   *   generated property accessors.
   */const PropertyAccessors=dedupingMixin(superClass=>{/**
   * @constructor
   * @implements {Polymer_PropertiesChanged}
   * @unrestricted
   * @private
   */const base=PropertiesChanged(superClass);/**
                                                  * @polymer
                                                  * @mixinClass
                                                  * @implements {Polymer_PropertyAccessors}
                                                  * @extends {base}
                                                  * @unrestricted
                                                  */class PropertyAccessors extends base{/**
     * Generates property accessors for all attributes in the standard
     * static `observedAttributes` array.
     *
     * Attribute names are mapped to property names using the `dash-case` to
     * `camelCase` convention
     *
     * @return {void}
     */static createPropertiesForAttributes(){let a$=this.observedAttributes;for(let i=0;i<a$.length;i++){this.prototype._createPropertyAccessor(dashToCamelCase(a$[i]))}}/**
       * Returns an attribute name that corresponds to the given property.
       * By default, converts camel to dash case, e.g. `fooBar` to `foo-bar`.
       * @param {string} property Property to convert
       * @return {string} Attribute name corresponding to the given property.
       *
       * @protected
       */static attributeNameForProperty(property){return camelToDashCase(property)}/**
       * Overrides PropertiesChanged implementation to initialize values for
       * accessors created for values that already existed on the element
       * prototype.
       *
       * @return {void}
       * @protected
       * @override
       */_initializeProperties(){if(this.__dataProto){this._initializeProtoProperties(this.__dataProto);this.__dataProto=null}super._initializeProperties()}/**
       * Called at instance time with bag of properties that were overwritten
       * by accessors on the prototype when accessors were created.
       *
       * The default implementation sets these properties back into the
       * setter at instance time.  This method is provided as an override
       * point for customizing or providing more efficient initialization.
       *
       * @param {Object} props Bag of property values that were overwritten
       *   when creating property accessors.
       * @return {void}
       * @protected
       * @override
       */_initializeProtoProperties(props){for(let p in props){this._setProperty(p,props[p])}}/**
       * Ensures the element has the given attribute. If it does not,
       * assigns the given value to the attribute.
       *
       * @suppress {invalidCasts} Closure can't figure out `this` is infact an
       *     element
       *
       * @param {string} attribute Name of attribute to ensure is set.
       * @param {string} value of the attribute.
       * @return {void}
       * @override
       */_ensureAttribute(attribute,value){const el=/** @type {!HTMLElement} */this;if(!el.hasAttribute(attribute)){this._valueToNodeAttribute(el,value,attribute)}}/**
       * Overrides PropertiesChanged implemention to serialize objects as JSON.
       *
       * @param {*} value Property value to serialize.
       * @return {string | undefined} String serialized from the provided property
       *     value.
       * @override
       */_serializeValue(value){/* eslint-disable no-fallthrough */switch(typeof value){case"object":if(value instanceof Date){return value.toString()}else if(value){try{return JSON.stringify(value)}catch(x){return""}}default:return super._serializeValue(value);}}/**
       * Converts a string to a typed JavaScript value.
       *
       * This method is called by Polymer when reading HTML attribute values to
       * JS properties.  Users may override this method on Polymer element
       * prototypes to provide deserialization for custom `type`s.  Note,
       * the `type` argument is the value of the `type` field provided in the
       * `properties` configuration object for a given property, and is
       * by convention the constructor for the type to deserialize.
       *
       *
       * @param {?string} value Attribute value to deserialize.
       * @param {*=} type Type to deserialize the string to.
       * @return {*} Typed value deserialized from the provided string.
       * @override
       */_deserializeValue(value,type){/**
       * @type {*}
       */let outValue;switch(type){case Object:try{outValue=JSON.parse(/** @type {string} */value)}catch(x){// allow non-JSON literals like Strings and Numbers
outValue=value}break;case Array:try{outValue=JSON.parse(/** @type {string} */value)}catch(x){outValue=null;console.warn(`Polymer::Attributes: couldn't decode Array as JSON: ${value}`)}break;case Date:outValue=isNaN(value)?value+"":+value;outValue=new Date(outValue);break;default:outValue=super._deserializeValue(value,type);break;}return outValue}/* eslint-enable no-fallthrough */ /**
                                          * Overrides PropertiesChanged implementation to save existing prototype
                                          * property value so that it can be reset.
                                          * @param {string} property Name of the property
                                          * @param {boolean=} readOnly When true, no setter is created
                                          *
                                          * When calling on a prototype, any overwritten values are saved in
                                          * `__dataProto`, and it is up to the subclasser to decide how/when
                                          * to set those properties back into the accessor.  When calling on an
                                          * instance, the overwritten value is set via `_setPendingProperty`,
                                          * and the user should call `_invalidateProperties` or `_flushProperties`
                                          * for the values to take effect.
                                          * @protected
                                          * @return {void}
                                          * @override
                                          */_definePropertyAccessor(property,readOnly){saveAccessorValue(this,property);super._definePropertyAccessor(property,readOnly)}/**
       * Returns true if this library created an accessor for the given property.
       *
       * @param {string} property Property name
       * @return {boolean} True if an accessor was created
       * @override
       */_hasAccessor(property){return this.__dataHasAccessor&&this.__dataHasAccessor[property]}/**
       * Returns true if the specified property has a pending change.
       *
       * @param {string} prop Property name
       * @return {boolean} True if property has a pending change
       * @protected
       * @override
       */_isPropertyPending(prop){return!!(this.__dataPending&&prop in this.__dataPending)}}return PropertyAccessors});_exports.PropertyAccessors=PropertyAccessors;var propertyAccessors={PropertyAccessors:PropertyAccessors};_exports.$propertyAccessors=propertyAccessors;const walker=document.createTreeWalker(document,NodeFilter.SHOW_ALL,null,!1),templateExtensions={"dom-if":!0,"dom-repeat":!0};// 1.x backwards-compatible auto-wrapper for template type extensions
// This is a clear layering violation and gives favored-nation status to
// dom-if and dom-repeat templates.  This is a conceit we're choosing to keep
// a.) to ease 1.x backwards-compatibility due to loss of `is`, and
// b.) to maintain if/repeat capability in parser-constrained elements
//     (e.g. table, select) in lieu of native CE type extensions without
//     massive new invention in this space (e.g. directive system)
function wrapTemplateExtension(node){let is=node.getAttribute("is");if(is&&templateExtensions[is]){let t=node;t.removeAttribute("is");node=t.ownerDocument.createElement(is);t.parentNode.replaceChild(node,t);node.appendChild(t);while(t.attributes.length){node.setAttribute(t.attributes[0].name,t.attributes[0].value);t.removeAttribute(t.attributes[0].name)}}return node}function findTemplateNode(root,nodeInfo){// recursively ascend tree until we hit root
let parent=nodeInfo.parentInfo&&findTemplateNode(root,nodeInfo.parentInfo);// unwind the stack, returning the indexed node at each level
if(parent){// note: marginally faster than indexing via childNodes
// (http://jsperf.com/childnodes-lookup)
walker.currentNode=parent;for(let n=walker.firstChild(),i=0;n;n=walker.nextSibling()){if(nodeInfo.parentIndex===i++){return n}}}else{return root}}// construct `$` map (from id annotations)
function applyIdToMap(inst,map,node,nodeInfo){if(nodeInfo.id){map[nodeInfo.id]=node}}// install event listeners (from event annotations)
function applyEventListener(inst,node,nodeInfo){if(nodeInfo.events&&nodeInfo.events.length){for(let j=0,e$=nodeInfo.events,e;j<e$.length&&(e=e$[j]);j++){inst._addMethodEventListenerToNode(node,e.name,e.value,inst)}}}// push configuration references at configure time
function applyTemplateContent(inst,node,nodeInfo){if(nodeInfo.templateInfo){node._templateInfo=nodeInfo.templateInfo}}function createNodeEventHandler(context,eventName,methodName){// Instances can optionally have a _methodHost which allows redirecting where
// to find methods. Currently used by `templatize`.
context=context._methodHost||context;let handler=function(e){if(context[methodName]){context[methodName](e,e.detail)}else{console.warn("listener method `"+methodName+"` not defined")}};return handler}/**
   * Element mixin that provides basic template parsing and stamping, including
   * the following template-related features for stamped templates:
   *
   * - Declarative event listeners (`on-eventname="listener"`)
   * - Map of node id's to stamped node instances (`this.$.id`)
   * - Nested template content caching/removal and re-installation (performance
   *   optimization)
   *
   * @mixinFunction
   * @polymer
   * @summary Element class mixin that provides basic template parsing and stamping
   */const TemplateStamp=dedupingMixin(/**
                                             * @template T
                                             * @param {function(new:T)} superClass Class to apply mixin to.
                                             * @return {function(new:T)} superClass with mixin applied.
                                             */superClass=>{/**
   * @polymer
   * @mixinClass
   * @implements {Polymer_TemplateStamp}
   */class TemplateStamp extends superClass{/**
     * Scans a template to produce template metadata.
     *
     * Template-specific metadata are stored in the object returned, and node-
     * specific metadata are stored in objects in its flattened `nodeInfoList`
     * array.  Only nodes in the template that were parsed as nodes of
     * interest contain an object in `nodeInfoList`.  Each `nodeInfo` object
     * contains an `index` (`childNodes` index in parent) and optionally
     * `parent`, which points to node info of its parent (including its index).
     *
     * The template metadata object returned from this method has the following
     * structure (many fields optional):
     *
     * ```js
     *   {
     *     // Flattened list of node metadata (for nodes that generated metadata)
     *     nodeInfoList: [
     *       {
     *         // `id` attribute for any nodes with id's for generating `$` map
     *         id: {string},
     *         // `on-event="handler"` metadata
     *         events: [
     *           {
     *             name: {string},   // event name
     *             value: {string},  // handler method name
     *           }, ...
     *         ],
     *         // Notes when the template contained a `<slot>` for shady DOM
     *         // optimization purposes
     *         hasInsertionPoint: {boolean},
     *         // For nested `<template>`` nodes, nested template metadata
     *         templateInfo: {object}, // nested template metadata
     *         // Metadata to allow efficient retrieval of instanced node
     *         // corresponding to this metadata
     *         parentInfo: {number},   // reference to parent nodeInfo>
     *         parentIndex: {number},  // index in parent's `childNodes` collection
     *         infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`
     *       },
     *       ...
     *     ],
     *     // When true, the template had the `strip-whitespace` attribute
     *     // or was nested in a template with that setting
     *     stripWhitespace: {boolean},
     *     // For nested templates, nested template content is moved into
     *     // a document fragment stored here; this is an optimization to
     *     // avoid the cost of nested template cloning
     *     content: {DocumentFragment}
     *   }
     * ```
     *
     * This method kicks off a recursive treewalk as follows:
     *
     * ```
     *    _parseTemplate <---------------------+
     *      _parseTemplateContent              |
     *        _parseTemplateNode  <------------|--+
     *          _parseTemplateNestedTemplate --+  |
     *          _parseTemplateChildNodes ---------+
     *          _parseTemplateNodeAttributes
     *            _parseTemplateNodeAttribute
     *
     * ```
     *
     * These methods may be overridden to add custom metadata about templates
     * to either `templateInfo` or `nodeInfo`.
     *
     * Note that this method may be destructive to the template, in that
     * e.g. event annotations may be removed after being noted in the
     * template metadata.
     *
     * @param {!HTMLTemplateElement} template Template to parse
     * @param {TemplateInfo=} outerTemplateInfo Template metadata from the outer
     *   template, for parsing nested templates
     * @return {!TemplateInfo} Parsed template metadata
     */static _parseTemplate(template,outerTemplateInfo){// since a template may be re-used, memo-ize metadata
if(!template._templateInfo){let templateInfo=template._templateInfo={};templateInfo.nodeInfoList=[];templateInfo.stripWhiteSpace=outerTemplateInfo&&outerTemplateInfo.stripWhiteSpace||template.hasAttribute("strip-whitespace");this._parseTemplateContent(template,templateInfo,{parent:null})}return template._templateInfo}static _parseTemplateContent(template,templateInfo,nodeInfo){return this._parseTemplateNode(template.content,templateInfo,nodeInfo)}/**
       * Parses template node and adds template and node metadata based on
       * the current node, and its `childNodes` and `attributes`.
       *
       * This method may be overridden to add custom node or template specific
       * metadata based on this node.
       *
       * @param {Node} node Node to parse
       * @param {!TemplateInfo} templateInfo Template metadata for current template
       * @param {!NodeInfo} nodeInfo Node metadata for current template.
       * @return {boolean} `true` if the visited node added node-specific
       *   metadata to `nodeInfo`
       */static _parseTemplateNode(node,templateInfo,nodeInfo){let noted,element=/** @type {Element} */node;if("template"==element.localName&&!element.hasAttribute("preserve-content")){noted=this._parseTemplateNestedTemplate(element,templateInfo,nodeInfo)||noted}else if("slot"===element.localName){// For ShadyDom optimization, indicating there is an insertion point
templateInfo.hasInsertionPoint=!0}walker.currentNode=element;if(walker.firstChild()){noted=this._parseTemplateChildNodes(element,templateInfo,nodeInfo)||noted}if(element.hasAttributes&&element.hasAttributes()){noted=this._parseTemplateNodeAttributes(element,templateInfo,nodeInfo)||noted}return noted}/**
       * Parses template child nodes for the given root node.
       *
       * This method also wraps whitelisted legacy template extensions
       * (`is="dom-if"` and `is="dom-repeat"`) with their equivalent element
       * wrappers, collapses text nodes, and strips whitespace from the template
       * if the `templateInfo.stripWhitespace` setting was provided.
       *
       * @param {Node} root Root node whose `childNodes` will be parsed
       * @param {!TemplateInfo} templateInfo Template metadata for current template
       * @param {!NodeInfo} nodeInfo Node metadata for current template.
       * @return {void}
       */static _parseTemplateChildNodes(root,templateInfo,nodeInfo){if("script"===root.localName||"style"===root.localName){return}walker.currentNode=root;for(let node=walker.firstChild(),parentIndex=0,next;node;node=next){// Wrap templates
if("template"==node.localName){node=wrapTemplateExtension(node)}// collapse adjacent textNodes: fixes an IE issue that can cause
// text nodes to be inexplicably split =(
// note that root.normalize() should work but does not so we do this
// manually.
walker.currentNode=node;next=walker.nextSibling();if(node.nodeType===Node.TEXT_NODE){let/** Node */n=next;while(n&&n.nodeType===Node.TEXT_NODE){node.textContent+=n.textContent;next=walker.nextSibling();root.removeChild(n);n=next}// optionally strip whitespace
if(templateInfo.stripWhiteSpace&&!node.textContent.trim()){root.removeChild(node);continue}}let childInfo={parentIndex,parentInfo:nodeInfo};if(this._parseTemplateNode(node,templateInfo,childInfo)){childInfo.infoIndex=templateInfo.nodeInfoList.push(/** @type {!NodeInfo} */childInfo)-1}// Increment if not removed
walker.currentNode=node;if(walker.parentNode()){parentIndex++}}}/**
       * Parses template content for the given nested `<template>`.
       *
       * Nested template info is stored as `templateInfo` in the current node's
       * `nodeInfo`. `template.content` is removed and stored in `templateInfo`.
       * It will then be the responsibility of the host to set it back to the
       * template and for users stamping nested templates to use the
       * `_contentForTemplate` method to retrieve the content for this template
       * (an optimization to avoid the cost of cloning nested template content).
       *
       * @param {HTMLTemplateElement} node Node to parse (a <template>)
       * @param {TemplateInfo} outerTemplateInfo Template metadata for current template
       *   that includes the template `node`
       * @param {!NodeInfo} nodeInfo Node metadata for current template.
       * @return {boolean} `true` if the visited node added node-specific
       *   metadata to `nodeInfo`
       */static _parseTemplateNestedTemplate(node,outerTemplateInfo,nodeInfo){let templateInfo=this._parseTemplate(node,outerTemplateInfo),content=templateInfo.content=node.content.ownerDocument.createDocumentFragment();content.appendChild(node.content);nodeInfo.templateInfo=templateInfo;return!0}/**
       * Parses template node attributes and adds node metadata to `nodeInfo`
       * for nodes of interest.
       *
       * @param {Element} node Node to parse
       * @param {TemplateInfo} templateInfo Template metadata for current template
       * @param {NodeInfo} nodeInfo Node metadata for current template.
       * @return {boolean} `true` if the visited node added node-specific
       *   metadata to `nodeInfo`
       */static _parseTemplateNodeAttributes(node,templateInfo,nodeInfo){// Make copy of original attribute list, since the order may change
// as attributes are added and removed
let noted=!1,attrs=Array.from(node.attributes);for(let i=attrs.length-1,a;a=attrs[i];i--){noted=this._parseTemplateNodeAttribute(node,templateInfo,nodeInfo,a.name,a.value)||noted}return noted}/**
       * Parses a single template node attribute and adds node metadata to
       * `nodeInfo` for attributes of interest.
       *
       * This implementation adds metadata for `on-event="handler"` attributes
       * and `id` attributes.
       *
       * @param {Element} node Node to parse
       * @param {!TemplateInfo} templateInfo Template metadata for current template
       * @param {!NodeInfo} nodeInfo Node metadata for current template.
       * @param {string} name Attribute name
       * @param {string} value Attribute value
       * @return {boolean} `true` if the visited node added node-specific
       *   metadata to `nodeInfo`
       */static _parseTemplateNodeAttribute(node,templateInfo,nodeInfo,name,value){// events (on-*)
if("on-"===name.slice(0,3)){node.removeAttribute(name);nodeInfo.events=nodeInfo.events||[];nodeInfo.events.push({name:name.slice(3),value});return!0}// static id
else if("id"===name){nodeInfo.id=value;return!0}return!1}/**
       * Returns the `content` document fragment for a given template.
       *
       * For nested templates, Polymer performs an optimization to cache nested
       * template content to avoid the cost of cloning deeply nested templates.
       * This method retrieves the cached content for a given template.
       *
       * @param {HTMLTemplateElement} template Template to retrieve `content` for
       * @return {DocumentFragment} Content fragment
       */static _contentForTemplate(template){let templateInfo=/** @type {HTMLTemplateElementWithInfo} */template._templateInfo;return templateInfo&&templateInfo.content||template.content}/**
       * Clones the provided template content and returns a document fragment
       * containing the cloned dom.
       *
       * The template is parsed (once and memoized) using this library's
       * template parsing features, and provides the following value-added
       * features:
       * * Adds declarative event listeners for `on-event="handler"` attributes
       * * Generates an "id map" for all nodes with id's under `$` on returned
       *   document fragment
       * * Passes template info including `content` back to templates as
       *   `_templateInfo` (a performance optimization to avoid deep template
       *   cloning)
       *
       * Note that the memoized template parsing process is destructive to the
       * template: attributes for bindings and declarative event listeners are
       * removed after being noted in notes, and any nested `<template>.content`
       * is removed and stored in notes as well.
       *
       * @param {!HTMLTemplateElement} template Template to stamp
       * @return {!StampedTemplate} Cloned template content
       * @override
       */_stampTemplate(template){// Polyfill support: bootstrap the template if it has not already been
if(template&&!template.content&&window.HTMLTemplateElement&&HTMLTemplateElement.decorate){HTMLTemplateElement.decorate(template)}let templateInfo=this.constructor._parseTemplate(template),nodeInfo=templateInfo.nodeInfoList,content=templateInfo.content||template.content,dom=/** @type {DocumentFragment} */document.importNode(content,!0);// NOTE: ShadyDom optimization indicating there is an insertion point
dom.__noInsertionPoint=!templateInfo.hasInsertionPoint;let nodes=dom.nodeList=Array(nodeInfo.length);dom.$={};for(let i=0,l=nodeInfo.length,info,node;i<l&&(info=nodeInfo[i]);i++){node=nodes[i]=findTemplateNode(dom,info);applyIdToMap(this,dom.$,node,info);applyTemplateContent(this,node,info);applyEventListener(this,node,info)}dom=/** @type {!StampedTemplate} */dom;// eslint-disable-line no-self-assign
return dom}/**
       * Adds an event listener by method name for the event provided.
       *
       * This method generates a handler function that looks up the method
       * name at handling time.
       *
       * @param {!EventTarget} node Node to add listener on
       * @param {string} eventName Name of event
       * @param {string} methodName Name of method
       * @param {*=} context Context the method will be called on (defaults
       *   to `node`)
       * @return {Function} Generated handler function
       * @override
       */_addMethodEventListenerToNode(node,eventName,methodName,context){context=context||node;let handler=createNodeEventHandler(context,eventName,methodName);this._addEventListenerToNode(node,eventName,handler);return handler}/**
       * Override point for adding custom or simulated event handling.
       *
       * @param {!EventTarget} node Node to add event listener to
       * @param {string} eventName Name of event
       * @param {function(!Event):void} handler Listener function to add
       * @return {void}
       * @override
       */_addEventListenerToNode(node,eventName,handler){node.addEventListener(eventName,handler)}/**
       * Override point for adding custom or simulated event handling.
       *
       * @param {!EventTarget} node Node to remove event listener from
       * @param {string} eventName Name of event
       * @param {function(!Event):void} handler Listener function to remove
       * @return {void}
       * @override
       */_removeEventListenerFromNode(node,eventName,handler){node.removeEventListener(eventName,handler)}}return TemplateStamp});_exports.TemplateStamp=TemplateStamp;var templateStamp={TemplateStamp:TemplateStamp};// from multiple properties in the same turn
_exports.$templateStamp=templateStamp;let dedupeId$1=0;/**
                    * Property effect types; effects are stored on the prototype using these keys
                    * @enum {string}
                    */const TYPES={COMPUTE:"__computeEffects",REFLECT:"__reflectEffects",NOTIFY:"__notifyEffects",PROPAGATE:"__propagateEffects",OBSERVE:"__observeEffects",READ_ONLY:"__readOnly"},capitalAttributeRegex=/[A-Z]/;/** @const {!RegExp} */ /**
                                        * @typedef {{
                                        * name: (string | undefined),
                                        * structured: (boolean | undefined),
                                        * wildcard: (boolean | undefined)
                                        * }}
                                        */let DataTrigger,DataEffect;//eslint-disable-line no-unused-vars
/**
 * @typedef {{
 * info: ?,
 * trigger: (!DataTrigger | undefined),
 * fn: (!Function | undefined)
 * }}
 */ //eslint-disable-line no-unused-vars
/**
 * Ensures that the model has an own-property map of effects for the given type.
 * The model may be a prototype or an instance.
 *
 * Property effects are stored as arrays of effects by property in a map,
 * by named type on the model. e.g.
 *
 *   __computeEffects: {
 *     foo: [ ... ],
 *     bar: [ ... ]
 *   }
 *
 * If the model does not yet have an effect map for the type, one is created
 * and returned.  If it does, but it is not an own property (i.e. the
 * prototype had effects), the the map is deeply cloned and the copy is
 * set on the model and returned, ready for new effects to be added.
 *
 * @param {Object} model Prototype or instance
 * @param {string} type Property effect type
 * @return {Object} The own-property map of effects for the given type
 * @private
 */function ensureOwnEffectMap(model,type){let effects=model[type];if(!effects){effects=model[type]={}}else if(!model.hasOwnProperty(type)){effects=model[type]=Object.create(model[type]);for(let p in effects){let protoFx=effects[p],instFx=effects[p]=Array(protoFx.length);for(let i=0;i<protoFx.length;i++){instFx[i]=protoFx[i]}}}return effects}// -- effects ----------------------------------------------
/**
 * Runs all effects of a given type for the given set of property changes
 * on an instance.
 *
 * @param {!Polymer_PropertyEffects} inst The instance with effects to run
 * @param {?Object} effects Object map of property-to-Array of effects
 * @param {?Object} props Bag of current property changes
 * @param {?Object=} oldProps Bag of previous values for changed properties
 * @param {boolean=} hasPaths True with `props` contains one or more paths
 * @param {*=} extraArgs Additional metadata to pass to effect function
 * @return {boolean} True if an effect ran for this property
 * @private
 */function runEffects(inst,effects,props,oldProps,hasPaths,extraArgs){if(effects){let ran=!1,id=dedupeId$1++;for(let prop in props){if(runEffectsForProperty(inst,/** @type {!Object} */effects,id,prop,props,oldProps,hasPaths,extraArgs)){ran=!0}}return ran}return!1}/**
   * Runs a list of effects for a given property.
   *
   * @param {!Polymer_PropertyEffects} inst The instance with effects to run
   * @param {!Object} effects Object map of property-to-Array of effects
   * @param {number} dedupeId Counter used for de-duping effects
   * @param {string} prop Name of changed property
   * @param {*} props Changed properties
   * @param {*} oldProps Old properties
   * @param {boolean=} hasPaths True with `props` contains one or more paths
   * @param {*=} extraArgs Additional metadata to pass to effect function
   * @return {boolean} True if an effect ran for this property
   * @private
   */function runEffectsForProperty(inst,effects,dedupeId,prop,props,oldProps,hasPaths,extraArgs){let ran=!1,rootProperty=hasPaths?root(prop):prop,fxs=effects[rootProperty];if(fxs){for(let i=0,l=fxs.length,fx;i<l&&(fx=fxs[i]);i++){if((!fx.info||fx.info.lastRun!==dedupeId)&&(!hasPaths||pathMatchesTrigger(prop,fx.trigger))){if(fx.info){fx.info.lastRun=dedupeId}fx.fn(inst,prop,props,oldProps,fx.info,hasPaths,extraArgs);ran=!0}}}return ran}/**
   * Determines whether a property/path that has changed matches the trigger
   * criteria for an effect.  A trigger is a descriptor with the following
   * structure, which matches the descriptors returned from `parseArg`.
   * e.g. for `foo.bar.*`:
   * ```
   * trigger: {
   *   name: 'a.b',
   *   structured: true,
   *   wildcard: true
   * }
   * ```
   * If no trigger is given, the path is deemed to match.
   *
   * @param {string} path Path or property that changed
   * @param {?DataTrigger} trigger Descriptor
   * @return {boolean} Whether the path matched the trigger
   */function pathMatchesTrigger(path,trigger){if(trigger){let triggerPath=/** @type {string} */trigger.name;return triggerPath==path||!!(trigger.structured&&isAncestor(triggerPath,path))||!!(trigger.wildcard&&isDescendant(triggerPath,path))}else{return!0}}/**
   * Implements the "observer" effect.
   *
   * Calls the method with `info.methodName` on the instance, passing the
   * new and old values.
   *
   * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on
   * @param {string} property Name of property
   * @param {Object} props Bag of current property changes
   * @param {Object} oldProps Bag of previous values for changed properties
   * @param {?} info Effect metadata
   * @return {void}
   * @private
   */function runObserverEffect(inst,property,props,oldProps,info){let fn="string"===typeof info.method?inst[info.method]:info.method,changedProp=info.property;if(fn){fn.call(inst,inst.__data[changedProp],oldProps[changedProp])}else if(!info.dynamicFn){console.warn("observer method `"+info.method+"` not defined")}}/**
   * Runs "notify" effects for a set of changed properties.
   *
   * This method differs from the generic `runEffects` method in that it
   * will dispatch path notification events in the case that the property
   * changed was a path and the root property for that path didn't have a
   * "notify" effect.  This is to maintain 1.0 behavior that did not require
   * `notify: true` to ensure object sub-property notifications were
   * sent.
   *
   * @param {!Polymer_PropertyEffects} inst The instance with effects to run
   * @param {Object} notifyProps Bag of properties to notify
   * @param {Object} props Bag of current property changes
   * @param {Object} oldProps Bag of previous values for changed properties
   * @param {boolean} hasPaths True with `props` contains one or more paths
   * @return {void}
   * @private
   */function runNotifyEffects(inst,notifyProps,props,oldProps,hasPaths){// Notify
let fxs=inst[TYPES.NOTIFY],notified,id=dedupeId$1++;// Try normal notify effects; if none, fall back to try path notification
for(let prop in notifyProps){if(notifyProps[prop]){if(fxs&&runEffectsForProperty(inst,fxs,id,prop,props,oldProps,hasPaths)){notified=!0}else if(hasPaths&&notifyPath(inst,prop,props)){notified=!0}}}// Flush host if we actually notified and host was batching
// And the host has already initialized clients; this prevents
// an issue with a host observing data changes before clients are ready.
let host;if(notified&&(host=inst.__dataHost)&&host._invalidateProperties){host._invalidateProperties()}}/**
   * Dispatches {property}-changed events with path information in the detail
   * object to indicate a sub-path of the property was changed.
   *
   * @param {!Polymer_PropertyEffects} inst The element from which to fire the
   *     event
   * @param {string} path The path that was changed
   * @param {Object} props Bag of current property changes
   * @return {boolean} Returns true if the path was notified
   * @private
   */function notifyPath(inst,path,props){let rootProperty=root(path);if(rootProperty!==path){let eventName=camelToDashCase(rootProperty)+"-changed";dispatchNotifyEvent(inst,eventName,props[path],path);return!0}return!1}/**
   * Dispatches {property}-changed events to indicate a property (or path)
   * changed.
   *
   * @param {!Polymer_PropertyEffects} inst The element from which to fire the
   *     event
   * @param {string} eventName The name of the event to send
   *     ('{property}-changed')
   * @param {*} value The value of the changed property
   * @param {string | null | undefined} path If a sub-path of this property
   *     changed, the path that changed (optional).
   * @return {void}
   * @private
   * @suppress {invalidCasts}
   */function dispatchNotifyEvent(inst,eventName,value,path){let detail={value:value,queueProperty:!0};if(path){detail.path=path}wrap$1(/** @type {!HTMLElement} */inst).dispatchEvent(new CustomEvent(eventName,{detail}))}/**
   * Implements the "notify" effect.
   *
   * Dispatches a non-bubbling event named `info.eventName` on the instance
   * with a detail object containing the new `value`.
   *
   * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on
   * @param {string} property Name of property
   * @param {Object} props Bag of current property changes
   * @param {Object} oldProps Bag of previous values for changed properties
   * @param {?} info Effect metadata
   * @param {boolean} hasPaths True with `props` contains one or more paths
   * @return {void}
   * @private
   */function runNotifyEffect(inst,property,props,oldProps,info,hasPaths){let rootProperty=hasPaths?root(property):property,path=rootProperty!=property?property:null,value=path?get(inst,path):inst.__data[property];if(path&&value===void 0){value=props[property];// specifically for .splices
}dispatchNotifyEvent(inst,info.eventName,value,path)}/**
   * Handler function for 2-way notification events. Receives context
   * information captured in the `addNotifyListener` closure from the
   * `__notifyListeners` metadata.
   *
   * Sets the value of the notified property to the host property or path.  If
   * the event contained path information, translate that path to the host
   * scope's name for that path first.
   *
   * @param {CustomEvent} event Notification event (e.g. '<property>-changed')
   * @param {!Polymer_PropertyEffects} inst Host element instance handling the
   *     notification event
   * @param {string} fromProp Child element property that was bound
   * @param {string} toPath Host property/path that was bound
   * @param {boolean} negate Whether the binding was negated
   * @return {void}
   * @private
   */function handleNotification(event,inst,fromProp,toPath,negate){let value,detail=/** @type {Object} */event.detail,fromPath=detail&&detail.path;if(fromPath){toPath=translate(fromProp,toPath,fromPath);value=detail&&detail.value}else{value=event.currentTarget[fromProp]}value=negate?!value:value;if(!inst[TYPES.READ_ONLY]||!inst[TYPES.READ_ONLY][toPath]){if(inst._setPendingPropertyOrPath(toPath,value,!0,!!fromPath)&&(!detail||!detail.queueProperty)){inst._invalidateProperties()}}}/**
   * Implements the "reflect" effect.
   *
   * Sets the attribute named `info.attrName` to the given property value.
   *
   * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on
   * @param {string} property Name of property
   * @param {Object} props Bag of current property changes
   * @param {Object} oldProps Bag of previous values for changed properties
   * @param {?} info Effect metadata
   * @return {void}
   * @private
   */function runReflectEffect(inst,property,props,oldProps,info){let value=inst.__data[property];if(sanitizeDOMValue){value=sanitizeDOMValue(value,info.attrName,"attribute",/** @type {Node} */inst)}inst._propertyToAttribute(property,info.attrName,value)}/**
   * Runs "computed" effects for a set of changed properties.
   *
   * This method differs from the generic `runEffects` method in that it
   * continues to run computed effects based on the output of each pass until
   * there are no more newly computed properties.  This ensures that all
   * properties that will be computed by the initial set of changes are
   * computed before other effects (binding propagation, observers, and notify)
   * run.
   *
   * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on
   * @param {?Object} changedProps Bag of changed properties
   * @param {?Object} oldProps Bag of previous values for changed properties
   * @param {boolean} hasPaths True with `props` contains one or more paths
   * @return {void}
   * @private
   */function runComputedEffects(inst,changedProps,oldProps,hasPaths){let computeEffects=inst[TYPES.COMPUTE];if(computeEffects){let inputProps=changedProps;while(runEffects(inst,computeEffects,inputProps,oldProps,hasPaths)){Object.assign(/** @type {!Object} */oldProps,inst.__dataOld);Object.assign(/** @type {!Object} */changedProps,inst.__dataPending);inputProps=inst.__dataPending;inst.__dataPending=null}}}/**
   * Implements the "computed property" effect by running the method with the
   * values of the arguments specified in the `info` object and setting the
   * return value to the computed property specified.
   *
   * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on
   * @param {string} property Name of property
   * @param {?Object} props Bag of current property changes
   * @param {?Object} oldProps Bag of previous values for changed properties
   * @param {?} info Effect metadata
   * @return {void}
   * @private
   */function runComputedEffect(inst,property,props,oldProps,info){let result=runMethodEffect(inst,property,props,oldProps,info),computedProp=info.methodInfo;if(inst.__dataHasAccessor&&inst.__dataHasAccessor[computedProp]){inst._setPendingProperty(computedProp,result,!0)}else{inst[computedProp]=result}}/**
   * Computes path changes based on path links set up using the `linkPaths`
   * API.
   *
   * @param {!Polymer_PropertyEffects} inst The instance whose props are changing
   * @param {string} path Path that has changed
   * @param {*} value Value of changed path
   * @return {void}
   * @private
   */function computeLinkedPaths(inst,path,value){let links=inst.__dataLinkedPaths;if(links){let link;for(let a in links){let b=links[a];if(isDescendant(a,path)){link=translate(a,b,path);inst._setPendingPropertyOrPath(link,value,!0,!0)}else if(isDescendant(b,path)){link=translate(b,a,path);inst._setPendingPropertyOrPath(link,value,!0,!0)}}}}// -- bindings ----------------------------------------------
/**
 * Adds binding metadata to the current `nodeInfo`, and binding effects
 * for all part dependencies to `templateInfo`.
 *
 * @param {Function} constructor Class that `_parseTemplate` is currently
 *   running on
 * @param {TemplateInfo} templateInfo Template metadata for current template
 * @param {NodeInfo} nodeInfo Node metadata for current template node
 * @param {string} kind Binding kind, either 'property', 'attribute', or 'text'
 * @param {string} target Target property name
 * @param {!Array<!BindingPart>} parts Array of binding part metadata
 * @param {string=} literal Literal text surrounding binding parts (specified
 *   only for 'property' bindings, since these must be initialized as part
 *   of boot-up)
 * @return {void}
 * @private
 */function addBinding(constructor,templateInfo,nodeInfo,kind,target,parts,literal){// Create binding metadata and add to nodeInfo
nodeInfo.bindings=nodeInfo.bindings||[];let/** Binding */binding={kind,target,parts,literal,isCompound:1!==parts.length};nodeInfo.bindings.push(binding);// Add listener info to binding metadata
if(shouldAddListener(binding)){let{event,negate}=binding.parts[0];binding.listenerEvent=event||camelToDashCase(target)+"-changed";binding.listenerNegate=negate}// Add "propagate" property effects to templateInfo
let index=templateInfo.nodeInfoList.length;for(let i=0,part;i<binding.parts.length;i++){part=binding.parts[i];part.compoundIndex=i;addEffectForBindingPart(constructor,templateInfo,binding,part,index)}}/**
   * Adds property effects to the given `templateInfo` for the given binding
   * part.
   *
   * @param {Function} constructor Class that `_parseTemplate` is currently
   *   running on
   * @param {TemplateInfo} templateInfo Template metadata for current template
   * @param {!Binding} binding Binding metadata
   * @param {!BindingPart} part Binding part metadata
   * @param {number} index Index into `nodeInfoList` for this node
   * @return {void}
   */function addEffectForBindingPart(constructor,templateInfo,binding,part,index){if(!part.literal){if("attribute"===binding.kind&&"-"===binding.target[0]){console.warn("Cannot set attribute "+binding.target+" because \"-\" is not a valid attribute starting character")}else{let dependencies=part.dependencies,info={index,binding,part,evaluator:constructor};for(let j=0,trigger;j<dependencies.length;j++){trigger=dependencies[j];if("string"==typeof trigger){trigger=parseArg(trigger);trigger.wildcard=!0}constructor._addTemplatePropertyEffect(templateInfo,trigger.rootProperty,{fn:runBindingEffect,info,trigger})}}}}/**
   * Implements the "binding" (property/path binding) effect.
   *
   * Note that binding syntax is overridable via `_parseBindings` and
   * `_evaluateBinding`.  This method will call `_evaluateBinding` for any
   * non-literal parts returned from `_parseBindings`.  However,
   * there is no support for _path_ bindings via custom binding parts,
   * as this is specific to Polymer's path binding syntax.
   *
   * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on
   * @param {string} path Name of property
   * @param {Object} props Bag of current property changes
   * @param {Object} oldProps Bag of previous values for changed properties
   * @param {?} info Effect metadata
   * @param {boolean} hasPaths True with `props` contains one or more paths
   * @param {Array} nodeList List of nodes associated with `nodeInfoList` template
   *   metadata
   * @return {void}
   * @private
   */function runBindingEffect(inst,path,props,oldProps,info,hasPaths,nodeList){let node=nodeList[info.index],binding=info.binding,part=info.part;// Subpath notification: transform path and set to client
// e.g.: foo="{{obj.sub}}", path: 'obj.sub.prop', set 'foo.prop'=obj.sub.prop
if(hasPaths&&part.source&&path.length>part.source.length&&"property"==binding.kind&&!binding.isCompound&&node.__isPropertyEffectsClient&&node.__dataHasAccessor&&node.__dataHasAccessor[binding.target]){let value=props[path];path=translate(part.source,binding.target,path);if(node._setPendingPropertyOrPath(path,value,!1,!0)){inst._enqueueClient(node)}}else{let value=info.evaluator._evaluateBinding(inst,part,path,props,oldProps,hasPaths);// Propagate value to child
applyBindingValue(inst,node,binding,part,value)}}/**
   * Sets the value for an "binding" (binding) effect to a node,
   * either as a property or attribute.
   *
   * @param {!Polymer_PropertyEffects} inst The instance owning the binding effect
   * @param {Node} node Target node for binding
   * @param {!Binding} binding Binding metadata
   * @param {!BindingPart} part Binding part metadata
   * @param {*} value Value to set
   * @return {void}
   * @private
   */function applyBindingValue(inst,node,binding,part,value){value=computeBindingValue(node,value,binding,part);if(sanitizeDOMValue){value=sanitizeDOMValue(value,binding.target,binding.kind,node)}if("attribute"==binding.kind){// Attribute binding
inst._valueToNodeAttribute(/** @type {Element} */node,value,binding.target)}else{// Property binding
let prop=binding.target;if(node.__isPropertyEffectsClient&&node.__dataHasAccessor&&node.__dataHasAccessor[prop]){if(!node[TYPES.READ_ONLY]||!node[TYPES.READ_ONLY][prop]){if(node._setPendingProperty(prop,value)){inst._enqueueClient(node)}}}else{inst._setUnmanagedPropertyToNode(node,prop,value)}}}/**
   * Transforms an "binding" effect value based on compound & negation
   * effect metadata, as well as handling for special-case properties
   *
   * @param {Node} node Node the value will be set to
   * @param {*} value Value to set
   * @param {!Binding} binding Binding metadata
   * @param {!BindingPart} part Binding part metadata
   * @return {*} Transformed value to set
   * @private
   */function computeBindingValue(node,value,binding,part){if(binding.isCompound){let storage=node.__dataCompoundStorage[binding.target];storage[part.compoundIndex]=value;value=storage.join("")}if("attribute"!==binding.kind){// Some browsers serialize `undefined` to `"undefined"`
if("textContent"===binding.target||"value"===binding.target&&("input"===node.localName||"textarea"===node.localName)){value=value==void 0?"":value}}return value}/**
   * Returns true if a binding's metadata meets all the requirements to allow
   * 2-way binding, and therefore a `<property>-changed` event listener should be
   * added:
   * - used curly braces
   * - is a property (not attribute) binding
   * - is not a textContent binding
   * - is not compound
   *
   * @param {!Binding} binding Binding metadata
   * @return {boolean} True if 2-way listener should be added
   * @private
   */function shouldAddListener(binding){return!!binding.target&&"attribute"!=binding.kind&&"text"!=binding.kind&&!binding.isCompound&&"{"===binding.parts[0].mode}/**
   * Setup compound binding storage structures, notify listeners, and dataHost
   * references onto the bound nodeList.
   *
   * @param {!Polymer_PropertyEffects} inst Instance that bas been previously
   *     bound
   * @param {TemplateInfo} templateInfo Template metadata
   * @return {void}
   * @private
   */function setupBindings(inst,templateInfo){// Setup compound storage, dataHost, and notify listeners
let{nodeList,nodeInfoList}=templateInfo;if(nodeInfoList.length){for(let i=0;i<nodeInfoList.length;i++){let info=nodeInfoList[i],node=nodeList[i],bindings=info.bindings;if(bindings){for(let i=0,binding;i<bindings.length;i++){binding=bindings[i];setupCompoundStorage(node,binding);addNotifyListener(node,inst,binding)}}node.__dataHost=inst}}}/**
   * Initializes `__dataCompoundStorage` local storage on a bound node with
   * initial literal data for compound bindings, and sets the joined
   * literal parts to the bound property.
   *
   * When changes to compound parts occur, they are first set into the compound
   * storage array for that property, and then the array is joined to result in
   * the final value set to the property/attribute.
   *
   * @param {Node} node Bound node to initialize
   * @param {Binding} binding Binding metadata
   * @return {void}
   * @private
   */function setupCompoundStorage(node,binding){if(binding.isCompound){// Create compound storage map
let storage=node.__dataCompoundStorage||(node.__dataCompoundStorage={}),parts=binding.parts,literals=Array(parts.length);for(let j=0;j<parts.length;j++){literals[j]=parts[j].literal}let target=binding.target;storage[target]=literals;// Configure properties with their literal parts
if(binding.literal&&"property"==binding.kind){node[target]=binding.literal}}}/**
   * Adds a 2-way binding notification event listener to the node specified
   *
   * @param {Object} node Child element to add listener to
   * @param {!Polymer_PropertyEffects} inst Host element instance to handle
   *     notification event
   * @param {Binding} binding Binding metadata
   * @return {void}
   * @private
   */function addNotifyListener(node,inst,binding){if(binding.listenerEvent){let part=binding.parts[0];node.addEventListener(binding.listenerEvent,function(e){handleNotification(e,inst,binding.target,part.source,part.negate)})}}// -- for method-based effects (complexObserver & computed) --------------
/**
 * Adds property effects for each argument in the method signature (and
 * optionally, for the method name if `dynamic` is true) that calls the
 * provided effect function.
 *
 * @param {Element | Object} model Prototype or instance
 * @param {!MethodSignature} sig Method signature metadata
 * @param {string} type Type of property effect to add
 * @param {Function} effectFn Function to run when arguments change
 * @param {*=} methodInfo Effect-specific information to be included in
 *   method effect metadata
 * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether
 *   method names should be included as a dependency to the effect. Note,
 *   defaults to true if the signature is static (sig.static is true).
 * @return {void}
 * @private
 */function createMethodEffect(model,sig,type,effectFn,methodInfo,dynamicFn){dynamicFn=sig.static||dynamicFn&&("object"!==typeof dynamicFn||dynamicFn[sig.methodName]);let info={methodName:sig.methodName,args:sig.args,methodInfo,dynamicFn};for(let i=0,arg;i<sig.args.length&&(arg=sig.args[i]);i++){if(!arg.literal){model._addPropertyEffect(arg.rootProperty,type,{fn:effectFn,info:info,trigger:arg})}}if(dynamicFn){model._addPropertyEffect(sig.methodName,type,{fn:effectFn,info:info})}}/**
   * Calls a method with arguments marshaled from properties on the instance
   * based on the method signature contained in the effect metadata.
   *
   * Multi-property observers, computed properties, and inline computing
   * functions call this function to invoke the method, then use the return
   * value accordingly.
   *
   * @param {!Polymer_PropertyEffects} inst The instance the effect will be run on
   * @param {string} property Name of property
   * @param {Object} props Bag of current property changes
   * @param {Object} oldProps Bag of previous values for changed properties
   * @param {?} info Effect metadata
   * @return {*} Returns the return value from the method invocation
   * @private
   */function runMethodEffect(inst,property,props,oldProps,info){// Instances can optionally have a _methodHost which allows redirecting where
// to find methods. Currently used by `templatize`.
let context=inst._methodHost||inst,fn=context[info.methodName];if(fn){let args=inst._marshalArgs(info.args,property,props);return fn.apply(context,args)}else if(!info.dynamicFn){console.warn("method `"+info.methodName+"` not defined")}}const emptyArray=[],IDENT="(?:"+"[a-zA-Z_$][\\w.:$\\-*]*"+")",NUMBER="(?:"+"[-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?"+")",SQUOTE_STRING="(?:"+"'(?:[^'\\\\]|\\\\.)*'"+")",DQUOTE_STRING="(?:"+"\"(?:[^\"\\\\]|\\\\.)*\""+")",STRING="(?:"+SQUOTE_STRING+"|"+DQUOTE_STRING+")",ARGUMENT="(?:("+IDENT+"|"+NUMBER+"|"+STRING+")\\s*"+")",ARGUMENTS="(?:"+ARGUMENT+"(?:,\\s*"+ARGUMENT+")*"+")",ARGUMENT_LIST="(?:"+"\\(\\s*"+"(?:"+ARGUMENTS+"?"+")"+"\\)\\s*"+")",BINDING="("+IDENT+"\\s*"+ARGUMENT_LIST+"?"+")",OPEN_BRACKET="(\\[\\[|{{)"+"\\s*",CLOSE_BRACKET="(?:]]|}})",NEGATE="(?:(!)\\s*)?",EXPRESSION=OPEN_BRACKET+NEGATE+BINDING+CLOSE_BRACKET,bindingRegex=new RegExp(EXPRESSION,"g");// Regular expressions used for binding
/**
                                                   * Create a string from binding parts of all the literal parts
                                                   *
                                                   * @param {!Array<BindingPart>} parts All parts to stringify
                                                   * @return {string} String made from the literal parts
                                                   */function literalFromParts(parts){let s="";for(let i=0,literal;i<parts.length;i++){literal=parts[i].literal;s+=literal||""}return s}/**
   * Parses an expression string for a method signature, and returns a metadata
   * describing the method in terms of `methodName`, `static` (whether all the
   * arguments are literals), and an array of `args`
   *
   * @param {string} expression The expression to parse
   * @return {?MethodSignature} The method metadata object if a method expression was
   *   found, otherwise `undefined`
   * @private
   */function parseMethod(expression){// tries to match valid javascript property names
let m=expression.match(/([^\s]+?)\(([\s\S]*)\)/);if(m){let methodName=m[1],sig={methodName,static:!0,args:emptyArray};if(m[2].trim()){// replace escaped commas with comma entity, split on un-escaped commas
let args=m[2].replace(/\\,/g,"&comma;").split(",");return parseArgs(args,sig)}else{return sig}}return null}/**
   * Parses an array of arguments and sets the `args` property of the supplied
   * signature metadata object. Sets the `static` property to false if any
   * argument is a non-literal.
   *
   * @param {!Array<string>} argList Array of argument names
   * @param {!MethodSignature} sig Method signature metadata object
   * @return {!MethodSignature} The updated signature metadata object
   * @private
   */function parseArgs(argList,sig){sig.args=argList.map(function(rawArg){let arg=parseArg(rawArg);if(!arg.literal){sig.static=!1}return arg},this);return sig}/**
   * Parses an individual argument, and returns an argument metadata object
   * with the following fields:
   *
   *   {
   *     value: 'prop',        // property/path or literal value
   *     literal: false,       // whether argument is a literal
   *     structured: false,    // whether the property is a path
   *     rootProperty: 'prop', // the root property of the path
   *     wildcard: false       // whether the argument was a wildcard '.*' path
   *   }
   *
   * @param {string} rawArg The string value of the argument
   * @return {!MethodArg} Argument metadata object
   * @private
   */function parseArg(rawArg){// clean up whitespace
let arg=rawArg.trim()// replace comma entity with comma
.replace(/&comma;/g,",")// repair extra escape sequences; note only commas strictly need
// escaping, but we allow any other char to be escaped since its
// likely users will do this
.replace(/\\(.)/g,"$1"),a={name:arg,value:"",literal:!1},fc=arg[0];// basic argument descriptor
if("-"===fc){fc=arg[1]}if("0"<=fc&&"9">=fc){fc="#"}switch(fc){case"'":case"\"":a.value=arg.slice(1,-1);a.literal=!0;break;case"#":a.value=+arg;a.literal=!0;break;}// if not literal, look for structured path
if(!a.literal){a.rootProperty=root(arg);// detect structured path (has dots)
a.structured=isPath(arg);if(a.structured){a.wildcard=".*"==arg.slice(-2);if(a.wildcard){a.name=arg.slice(0,-2)}}}return a}function getArgValue(data,props,path){let value=get(data,path);// when data is not stored e.g. `splices`, get the value from changedProps
// TODO(kschaaf): Note, this can cause a rare issue where the wildcard
// info.value could pull a stale value out of changedProps during a reentrant
// change that sets the value back to undefined.
// https://github.com/Polymer/polymer/issues/5479
if(value===void 0){value=props[path]}return value}// data api
/**
 * Sends array splice notifications (`.splices` and `.length`)
 *
 * Note: this implementation only accepts normalized paths
 *
 * @param {!Polymer_PropertyEffects} inst Instance to send notifications to
 * @param {Array} array The array the mutations occurred on
 * @param {string} path The path to the array that was mutated
 * @param {Array} splices Array of splice records
 * @return {void}
 * @private
 */function notifySplices(inst,array,path,splices){inst.notifyPath(path+".splices",{indexSplices:splices});inst.notifyPath(path+".length",array.length)}/**
   * Creates a splice record and sends an array splice notification for
   * the described mutation
   *
   * Note: this implementation only accepts normalized paths
   *
   * @param {!Polymer_PropertyEffects} inst Instance to send notifications to
   * @param {Array} array The array the mutations occurred on
   * @param {string} path The path to the array that was mutated
   * @param {number} index Index at which the array mutation occurred
   * @param {number} addedCount Number of added items
   * @param {Array} removed Array of removed items
   * @return {void}
   * @private
   */function notifySplice(inst,array,path,index,addedCount,removed){notifySplices(inst,array,path,[{index:index,addedCount:addedCount,removed:removed,object:array,type:"splice"}])}/**
   * Returns an upper-cased version of the string.
   *
   * @param {string} name String to uppercase
   * @return {string} Uppercased string
   * @private
   */function upper(name){return name[0].toUpperCase()+name.substring(1)}/**
   * Element class mixin that provides meta-programming for Polymer's template
   * binding and data observation (collectively, "property effects") system.
   *
   * This mixin uses provides the following key static methods for adding
   * property effects to an element class:
   * - `addPropertyEffect`
   * - `createPropertyObserver`
   * - `createMethodObserver`
   * - `createNotifyingProperty`
   * - `createReadOnlyProperty`
   * - `createReflectedProperty`
   * - `createComputedProperty`
   * - `bindTemplate`
   *
   * Each method creates one or more property accessors, along with metadata
   * used by this mixin's implementation of `_propertiesChanged` to perform
   * the property effects.
   *
   * Underscored versions of the above methods also exist on the element
   * prototype for adding property effects on instances at runtime.
   *
   * Note that this mixin overrides several `PropertyAccessors` methods, in
   * many cases to maintain guarantees provided by the Polymer 1.x features;
   * notably it changes property accessors to be synchronous by default
   * whereas the default when using `PropertyAccessors` standalone is to be
   * async by default.
   *
   * @mixinFunction
   * @polymer
   * @appliesMixin TemplateStamp
   * @appliesMixin PropertyAccessors
   * @summary Element class mixin that provides meta-programming for Polymer's
   * template binding and data observation system.
   */const PropertyEffects=dedupingMixin(superClass=>{/**
   * @constructor
   * @implements {Polymer_PropertyAccessors}
   * @implements {Polymer_TemplateStamp}
   * @unrestricted
   * @private
   */const propertyEffectsBase=TemplateStamp(PropertyAccessors(superClass));/**
                                                                                * @polymer
                                                                                * @mixinClass
                                                                                * @implements {Polymer_PropertyEffects}
                                                                                * @extends {propertyEffectsBase}
                                                                                * @unrestricted
                                                                                */class PropertyEffects extends propertyEffectsBase{constructor(){super();/** @type {boolean} */ // Used to identify users of this mixin, ala instanceof
this.__isPropertyEffectsClient=!0;/** @type {number} */ // NOTE: used to track re-entrant calls to `_flushProperties`
// path changes dirty check against `__dataTemp` only during one "turn"
// and are cleared when `__dataCounter` returns to 0.
this.__dataCounter=0;/** @type {boolean} */this.__dataClientsReady;/** @type {Array} */this.__dataPendingClients;/** @type {Object} */this.__dataToNotify;/** @type {Object} */this.__dataLinkedPaths;/** @type {boolean} */this.__dataHasPaths;/** @type {Object} */this.__dataCompoundStorage;/** @type {Polymer_PropertyEffects} */this.__dataHost;/** @type {!Object} */this.__dataTemp;/** @type {boolean} */this.__dataClientsInitialized;/** @type {!Object} */this.__data;/** @type {!Object|null} */this.__dataPending;/** @type {!Object} */this.__dataOld;/** @type {Object} */this.__computeEffects;/** @type {Object} */this.__reflectEffects;/** @type {Object} */this.__notifyEffects;/** @type {Object} */this.__propagateEffects;/** @type {Object} */this.__observeEffects;/** @type {Object} */this.__readOnly;/** @type {!TemplateInfo} */this.__templateInfo}get PROPERTY_EFFECT_TYPES(){return TYPES}/**
       * @override
       * @return {void}
       */_initializeProperties(){super._initializeProperties();hostStack.registerHost(this);this.__dataClientsReady=!1;this.__dataPendingClients=null;this.__dataToNotify=null;this.__dataLinkedPaths=null;this.__dataHasPaths=!1;// May be set on instance prior to upgrade
this.__dataCompoundStorage=this.__dataCompoundStorage||null;this.__dataHost=this.__dataHost||null;this.__dataTemp={};this.__dataClientsInitialized=!1}/**
       * Overrides `PropertyAccessors` implementation to provide a
       * more efficient implementation of initializing properties from
       * the prototype on the instance.
       *
       * @override
       * @param {Object} props Properties to initialize on the prototype
       * @return {void}
       */_initializeProtoProperties(props){this.__data=Object.create(props);this.__dataPending=Object.create(props);this.__dataOld={}}/**
       * Overrides `PropertyAccessors` implementation to avoid setting
       * `_setProperty`'s `shouldNotify: true`.
       *
       * @override
       * @param {Object} props Properties to initialize on the instance
       * @return {void}
       */_initializeInstanceProperties(props){let readOnly=this[TYPES.READ_ONLY];for(let prop in props){if(!readOnly||!readOnly[prop]){this.__dataPending=this.__dataPending||{};this.__dataOld=this.__dataOld||{};this.__data[prop]=this.__dataPending[prop]=props[prop]}}}// Prototype setup ----------------------------------------
/**
     * Equivalent to static `addPropertyEffect` API but can be called on
     * an instance to add effects at runtime.  See that method for
     * full API docs.
     *
     * @override
     * @param {string} property Property that should trigger the effect
     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES
     * @param {Object=} effect Effect metadata object
     * @return {void}
     * @protected
     */_addPropertyEffect(property,type,effect){this._createPropertyAccessor(property,type==TYPES.READ_ONLY);// effects are accumulated into arrays per property based on type
let effects=ensureOwnEffectMap(this,type)[property];if(!effects){effects=this[type][property]=[]}effects.push(effect)}/**
       * Removes the given property effect.
       *
       * @override
       * @param {string} property Property the effect was associated with
       * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES
       * @param {Object=} effect Effect metadata object to remove
       * @return {void}
       */_removePropertyEffect(property,type,effect){let effects=ensureOwnEffectMap(this,type)[property],idx=effects.indexOf(effect);if(0<=idx){effects.splice(idx,1)}}/**
       * Returns whether the current prototype/instance has a property effect
       * of a certain type.
       *
       * @override
       * @param {string} property Property name
       * @param {string=} type Effect type, from this.PROPERTY_EFFECT_TYPES
       * @return {boolean} True if the prototype/instance has an effect of this
       *     type
       * @protected
       */_hasPropertyEffect(property,type){let effects=this[type];return!!(effects&&effects[property])}/**
       * Returns whether the current prototype/instance has a "read only"
       * accessor for the given property.
       *
       * @override
       * @param {string} property Property name
       * @return {boolean} True if the prototype/instance has an effect of this
       *     type
       * @protected
       */_hasReadOnlyEffect(property){return this._hasPropertyEffect(property,TYPES.READ_ONLY)}/**
       * Returns whether the current prototype/instance has a "notify"
       * property effect for the given property.
       *
       * @override
       * @param {string} property Property name
       * @return {boolean} True if the prototype/instance has an effect of this
       *     type
       * @protected
       */_hasNotifyEffect(property){return this._hasPropertyEffect(property,TYPES.NOTIFY)}/**
       * Returns whether the current prototype/instance has a "reflect to
       * attribute" property effect for the given property.
       *
       * @override
       * @param {string} property Property name
       * @return {boolean} True if the prototype/instance has an effect of this
       *     type
       * @protected
       */_hasReflectEffect(property){return this._hasPropertyEffect(property,TYPES.REFLECT)}/**
       * Returns whether the current prototype/instance has a "computed"
       * property effect for the given property.
       *
       * @override
       * @param {string} property Property name
       * @return {boolean} True if the prototype/instance has an effect of this
       *     type
       * @protected
       */_hasComputedEffect(property){return this._hasPropertyEffect(property,TYPES.COMPUTE)}// Runtime ----------------------------------------
/**
     * Sets a pending property or path.  If the root property of the path in
     * question had no accessor, the path is set, otherwise it is enqueued
     * via `_setPendingProperty`.
     *
     * This function isolates relatively expensive functionality necessary
     * for the public API (`set`, `setProperties`, `notifyPath`, and property
     * change listeners via {{...}} bindings), such that it is only done
     * when paths enter the system, and not at every propagation step.  It
     * also sets a `__dataHasPaths` flag on the instance which is used to
     * fast-path slower path-matching code in the property effects host paths.
     *
     * `path` can be a path string or array of path parts as accepted by the
     * public API.
     *
     * @override
     * @param {string | !Array<number|string>} path Path to set
     * @param {*} value Value to set
     * @param {boolean=} shouldNotify Set to true if this change should
     *  cause a property notification event dispatch
     * @param {boolean=} isPathNotification If the path being set is a path
     *   notification of an already changed value, as opposed to a request
     *   to set and notify the change.  In the latter `false` case, a dirty
     *   check is performed and then the value is set to the path before
     *   enqueuing the pending property change.
     * @return {boolean} Returns true if the property/path was enqueued in
     *   the pending changes bag.
     * @protected
     */_setPendingPropertyOrPath(path,value,shouldNotify,isPathNotification){if(isPathNotification||root(Array.isArray(path)?path[0]:path)!==path){// Dirty check changes being set to a path against the actual object,
// since this is the entry point for paths into the system; from here
// the only dirty checks are against the `__dataTemp` cache to prevent
// duplicate work in the same turn only. Note, if this was a notification
// of a change already set to a path (isPathNotification: true),
// we always let the change through and skip the `set` since it was
// already dirty checked at the point of entry and the underlying
// object has already been updated
if(!isPathNotification){let old=get(this,path);path=/** @type {string} */set(this,path,value);// Use property-accessor's simpler dirty check
if(!path||!super._shouldPropertyChange(path,value,old)){return!1}}this.__dataHasPaths=!0;if(this._setPendingProperty(/**@type{string}*/path,value,shouldNotify)){computeLinkedPaths(this,/**@type{string}*/path,value);return!0}}else{if(this.__dataHasAccessor&&this.__dataHasAccessor[path]){return this._setPendingProperty(/**@type{string}*/path,value,shouldNotify)}else{this[path]=value}}return!1}/**
       * Applies a value to a non-Polymer element/node's property.
       *
       * The implementation makes a best-effort at binding interop:
       * Some native element properties have side-effects when
       * re-setting the same value (e.g. setting `<input>.value` resets the
       * cursor position), so we do a dirty-check before setting the value.
       * However, for better interop with non-Polymer custom elements that
       * accept objects, we explicitly re-set object changes coming from the
       * Polymer world (which may include deep object changes without the
       * top reference changing), erring on the side of providing more
       * information.
       *
       * Users may override this method to provide alternate approaches.
       *
       * @override
       * @param {!Node} node The node to set a property on
       * @param {string} prop The property to set
       * @param {*} value The value to set
       * @return {void}
       * @protected
       */_setUnmanagedPropertyToNode(node,prop,value){// It is a judgment call that resetting primitives is
// "bad" and resettings objects is also "good"; alternatively we could
// implement a whitelist of tag & property values that should never
// be reset (e.g. <input>.value && <select>.value)
if(value!==node[prop]||"object"==typeof value){node[prop]=value}}/**
       * Overrides the `PropertiesChanged` implementation to introduce special
       * dirty check logic depending on the property & value being set:
       *
       * 1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})
       *    Stored in `__dataTemp`, dirty checked against `__dataTemp`
       * 2. Object set to simple property (e.g. 'prop': {...})
       *    Stored in `__dataTemp` and `__data`, dirty checked against
       *    `__dataTemp` by default implementation of `_shouldPropertyChange`
       * 3. Primitive value set to simple property (e.g. 'prop': 42)
       *    Stored in `__data`, dirty checked against `__data`
       *
       * The dirty-check is important to prevent cycles due to two-way
       * notification, but paths and objects are only dirty checked against any
       * previous value set during this turn via a "temporary cache" that is
       * cleared when the last `_propertiesChanged` exits. This is so:
       * a. any cached array paths (e.g. 'array.3.prop') may be invalidated
       *    due to array mutations like shift/unshift/splice; this is fine
       *    since path changes are dirty-checked at user entry points like `set`
       * b. dirty-checking for objects only lasts one turn to allow the user
       *    to mutate the object in-place and re-set it with the same identity
       *    and have all sub-properties re-propagated in a subsequent turn.
       *
       * The temp cache is not necessarily sufficient to prevent invalid array
       * paths, since a splice can happen during the same turn (with pathological
       * user code); we could introduce a "fixup" for temporarily cached array
       * paths if needed: https://github.com/Polymer/polymer/issues/4227
       *
       * @override
       * @param {string} property Name of the property
       * @param {*} value Value to set
       * @param {boolean=} shouldNotify True if property should fire notification
       *   event (applies only for `notify: true` properties)
       * @return {boolean} Returns true if the property changed
       */_setPendingProperty(property,value,shouldNotify){let propIsPath=this.__dataHasPaths&&isPath(property),prevProps=propIsPath?this.__dataTemp:this.__data;if(this._shouldPropertyChange(property,value,prevProps[property])){if(!this.__dataPending){this.__dataPending={};this.__dataOld={}}// Ensure old is captured from the last turn
if(!(property in this.__dataOld)){this.__dataOld[property]=this.__data[property]}// Paths are stored in temporary cache (cleared at end of turn),
// which is used for dirty-checking, all others stored in __data
if(propIsPath){this.__dataTemp[property]=value}else{this.__data[property]=value}// All changes go into pending property bag, passed to _propertiesChanged
this.__dataPending[property]=value;// Track properties that should notify separately
if(propIsPath||this[TYPES.NOTIFY]&&this[TYPES.NOTIFY][property]){this.__dataToNotify=this.__dataToNotify||{};this.__dataToNotify[property]=shouldNotify}return!0}return!1}/**
       * Overrides base implementation to ensure all accessors set `shouldNotify`
       * to true, for per-property notification tracking.
       *
       * @override
       * @param {string} property Name of the property
       * @param {*} value Value to set
       * @return {void}
       */_setProperty(property,value){if(this._setPendingProperty(property,value,!0)){this._invalidateProperties()}}/**
       * Overrides `PropertyAccessor`'s default async queuing of
       * `_propertiesChanged`: if `__dataReady` is false (has not yet been
       * manually flushed), the function no-ops; otherwise flushes
       * `_propertiesChanged` synchronously.
       *
       * @override
       * @return {void}
       */_invalidateProperties(){if(this.__dataReady){this._flushProperties()}}/**
       * Enqueues the given client on a list of pending clients, whose
       * pending property changes can later be flushed via a call to
       * `_flushClients`.
       *
       * @override
       * @param {Object} client PropertyEffects client to enqueue
       * @return {void}
       * @protected
       */_enqueueClient(client){this.__dataPendingClients=this.__dataPendingClients||[];if(client!==this){this.__dataPendingClients.push(client)}}/**
       * Overrides superclass implementation.
       *
       * @override
       * @return {void}
       * @protected
       */_flushProperties(){this.__dataCounter++;super._flushProperties();this.__dataCounter--}/**
       * Flushes any clients previously enqueued via `_enqueueClient`, causing
       * their `_flushProperties` method to run.
       *
       * @override
       * @return {void}
       * @protected
       */_flushClients(){if(!this.__dataClientsReady){this.__dataClientsReady=!0;this._readyClients();// Override point where accessors are turned on; importantly,
// this is after clients have fully readied, providing a guarantee
// that any property effects occur only after all clients are ready.
this.__dataReady=!0}else{this.__enableOrFlushClients()}}// NOTE: We ensure clients either enable or flush as appropriate. This
// handles two corner cases:
// (1) clients flush properly when connected/enabled before the host
// enables; e.g.
//   (a) Templatize stamps with no properties and does not flush and
//   (b) the instance is inserted into dom and
//   (c) then the instance flushes.
// (2) clients enable properly when not connected/enabled when the host
// flushes; e.g.
//   (a) a template is runtime stamped and not yet connected/enabled
//   (b) a host sets a property, causing stamped dom to flush
//   (c) the stamped dom enables.
__enableOrFlushClients(){let clients=this.__dataPendingClients;if(clients){this.__dataPendingClients=null;for(let i=0,client;i<clients.length;i++){client=clients[i];if(!client.__dataEnabled){client._enableProperties()}else if(client.__dataPending){client._flushProperties()}}}}/**
       * Perform any initial setup on client dom. Called before the first
       * `_flushProperties` call on client dom and before any element
       * observers are called.
       *
       * @override
       * @return {void}
       * @protected
       */_readyClients(){this.__enableOrFlushClients()}/**
       * Sets a bag of property changes to this instance, and
       * synchronously processes all effects of the properties as a batch.
       *
       * Property names must be simple properties, not paths.  Batched
       * path propagation is not supported.
       *
       * @override
       * @param {Object} props Bag of one or more key-value pairs whose key is
       *   a property and value is the new value to set for that property.
       * @param {boolean=} setReadOnly When true, any private values set in
       *   `props` will be set. By default, `setProperties` will not set
       *   `readOnly: true` root properties.
       * @return {void}
       * @public
       */setProperties(props,setReadOnly){for(let path in props){if(setReadOnly||!this[TYPES.READ_ONLY]||!this[TYPES.READ_ONLY][path]){//TODO(kschaaf): explicitly disallow paths in setProperty?
// wildcard observers currently only pass the first changed path
// in the `info` object, and you could do some odd things batching
// paths, e.g. {'foo.bar': {...}, 'foo': null}
this._setPendingPropertyOrPath(path,props[path],!0)}}this._invalidateProperties()}/**
       * Overrides `PropertyAccessors` so that property accessor
       * side effects are not enabled until after client dom is fully ready.
       * Also calls `_flushClients` callback to ensure client dom is enabled
       * that was not enabled as a result of flushing properties.
       *
       * @override
       * @return {void}
       */ready(){// It is important that `super.ready()` is not called here as it
// immediately turns on accessors. Instead, we wait until `readyClients`
// to enable accessors to provide a guarantee that clients are ready
// before processing any accessors side effects.
this._flushProperties();// If no data was pending, `_flushProperties` will not `flushClients`
// so ensure this is done.
if(!this.__dataClientsReady){this._flushClients()}// Before ready, client notifications do not trigger _flushProperties.
// Therefore a flush is necessary here if data has been set.
if(this.__dataPending){this._flushProperties()}}/**
       * Implements `PropertyAccessors`'s properties changed callback.
       *
       * Runs each class of effects for the batch of changed properties in
       * a specific order (compute, propagate, reflect, observe, notify).
       *
       * @override
       * @param {!Object} currentProps Bag of all current accessor values
       * @param {?Object} changedProps Bag of properties changed since the last
       *   call to `_propertiesChanged`
       * @param {?Object} oldProps Bag of previous values for each property
       *   in `changedProps`
       * @return {void}
       */_propertiesChanged(currentProps,changedProps,oldProps){// ----------------------------
// let c = Object.getOwnPropertyNames(changedProps || {});
// window.debug && console.group(this.localName + '#' + this.id + ': ' + c);
// if (window.debug) { debugger; }
// ----------------------------
let hasPaths=this.__dataHasPaths;this.__dataHasPaths=!1;// Compute properties
runComputedEffects(this,changedProps,oldProps,hasPaths);// Clear notify properties prior to possible reentry (propagate, observe),
// but after computing effects have a chance to add to them
let notifyProps=this.__dataToNotify;this.__dataToNotify=null;// Propagate properties to clients
this._propagatePropertyChanges(changedProps,oldProps,hasPaths);// Flush clients
this._flushClients();// Reflect properties
runEffects(this,this[TYPES.REFLECT],changedProps,oldProps,hasPaths);// Observe properties
runEffects(this,this[TYPES.OBSERVE],changedProps,oldProps,hasPaths);// Notify properties to host
if(notifyProps){runNotifyEffects(this,notifyProps,changedProps,oldProps,hasPaths)}// Clear temporary cache at end of turn
if(1==this.__dataCounter){this.__dataTemp={}}// ----------------------------
// window.debug && console.groupEnd(this.localName + '#' + this.id + ': ' + c);
// ----------------------------
}/**
       * Called to propagate any property changes to stamped template nodes
       * managed by this element.
       *
       * @override
       * @param {Object} changedProps Bag of changed properties
       * @param {Object} oldProps Bag of previous values for changed properties
       * @param {boolean} hasPaths True with `props` contains one or more paths
       * @return {void}
       * @protected
       */_propagatePropertyChanges(changedProps,oldProps,hasPaths){if(this[TYPES.PROPAGATE]){runEffects(this,this[TYPES.PROPAGATE],changedProps,oldProps,hasPaths)}let templateInfo=this.__templateInfo;while(templateInfo){runEffects(this,templateInfo.propertyEffects,changedProps,oldProps,hasPaths,templateInfo.nodeList);templateInfo=templateInfo.nextTemplateInfo}}/**
       * Aliases one data path as another, such that path notifications from one
       * are routed to the other.
       *
       * @override
       * @param {string | !Array<string|number>} to Target path to link.
       * @param {string | !Array<string|number>} from Source path to link.
       * @return {void}
       * @public
       */linkPaths(to,from){to=normalize(to);from=normalize(from);this.__dataLinkedPaths=this.__dataLinkedPaths||{};this.__dataLinkedPaths[to]=from}/**
       * Removes a data path alias previously established with `_linkPaths`.
       *
       * Note, the path to unlink should be the target (`to`) used when
       * linking the paths.
       *
       * @override
       * @param {string | !Array<string|number>} path Target path to unlink.
       * @return {void}
       * @public
       */unlinkPaths(path){path=normalize(path);if(this.__dataLinkedPaths){delete this.__dataLinkedPaths[path]}}/**
       * Notify that an array has changed.
       *
       * Example:
       *
       *     this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];
       *     ...
       *     this.items.splice(1, 1, {name: 'Sam'});
       *     this.items.push({name: 'Bob'});
       *     this.notifySplices('items', [
       *       { index: 1, removed: [{name: 'Todd'}], addedCount: 1,
       *         object: this.items, type: 'splice' },
       *       { index: 3, removed: [], addedCount: 1,
       *         object: this.items, type: 'splice'}
       *     ]);
       *
       * @param {string} path Path that should be notified.
       * @param {Array} splices Array of splice records indicating ordered
       *   changes that occurred to the array. Each record should have the
       *   following fields:
       *    * index: index at which the change occurred
       *    * removed: array of items that were removed from this index
       *    * addedCount: number of new items added at this index
       *    * object: a reference to the array in question
       *    * type: the string literal 'splice'
       *
       *   Note that splice records _must_ be normalized such that they are
       *   reported in index order (raw results from `Object.observe` are not
       *   ordered and must be normalized/merged before notifying).
       *
       * @override
       * @return {void}
       * @public
       */notifySplices(path,splices){let info={path:""},array=/** @type {Array} */get(this,path,info);notifySplices(this,array,info.path,splices)}/**
       * Convenience method for reading a value from a path.
       *
       * Note, if any part in the path is undefined, this method returns
       * `undefined` (this method does not throw when dereferencing undefined
       * paths).
       *
       * @override
       * @param {(string|!Array<(string|number)>)} path Path to the value
       *   to read.  The path may be specified as a string (e.g. `foo.bar.baz`)
       *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that
       *   bracketed expressions are not supported; string-based path parts
       *   *must* be separated by dots.  Note that when dereferencing array
       *   indices, the index may be used as a dotted part directly
       *   (e.g. `users.12.name` or `['users', 12, 'name']`).
       * @param {Object=} root Root object from which the path is evaluated.
       * @return {*} Value at the path, or `undefined` if any part of the path
       *   is undefined.
       * @public
       */get(path,root){return get(root||this,path)}/**
       * Convenience method for setting a value to a path and notifying any
       * elements bound to the same path.
       *
       * Note, if any part in the path except for the last is undefined,
       * this method does nothing (this method does not throw when
       * dereferencing undefined paths).
       *
       * @override
       * @param {(string|!Array<(string|number)>)} path Path to the value
       *   to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)
       *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that
       *   bracketed expressions are not supported; string-based path parts
       *   *must* be separated by dots.  Note that when dereferencing array
       *   indices, the index may be used as a dotted part directly
       *   (e.g. `'users.12.name'` or `['users', 12, 'name']`).
       * @param {*} value Value to set at the specified path.
       * @param {Object=} root Root object from which the path is evaluated.
       *   When specified, no notification will occur.
       * @return {void}
       * @public
       */set(path,value,root){if(root){set(root,path,value)}else{if(!this[TYPES.READ_ONLY]||!this[TYPES.READ_ONLY][/** @type {string} */path]){if(this._setPendingPropertyOrPath(path,value,!0)){this._invalidateProperties()}}}}/**
       * Adds items onto the end of the array at the path specified.
       *
       * The arguments after `path` and return value match that of
       * `Array.prototype.push`.
       *
       * This method notifies other paths to the same array that a
       * splice occurred to the array.
       *
       * @override
       * @param {string | !Array<string|number>} path Path to array.
       * @param {...*} items Items to push onto array
       * @return {number} New length of the array.
       * @public
       */push(path,...items){let info={path:""},array=/** @type {Array}*/get(this,path,info),len=array.length,ret=array.push(...items);if(items.length){notifySplice(this,array,info.path,len,items.length,[])}return ret}/**
       * Removes an item from the end of array at the path specified.
       *
       * The arguments after `path` and return value match that of
       * `Array.prototype.pop`.
       *
       * This method notifies other paths to the same array that a
       * splice occurred to the array.
       *
       * @override
       * @param {string | !Array<string|number>} path Path to array.
       * @return {*} Item that was removed.
       * @public
       */pop(path){let info={path:""},array=/** @type {Array} */get(this,path,info),hadLength=!!array.length,ret=array.pop();if(hadLength){notifySplice(this,array,info.path,array.length,0,[ret])}return ret}/**
       * Starting from the start index specified, removes 0 or more items
       * from the array and inserts 0 or more new items in their place.
       *
       * The arguments after `path` and return value match that of
       * `Array.prototype.splice`.
       *
       * This method notifies other paths to the same array that a
       * splice occurred to the array.
       *
       * @override
       * @param {string | !Array<string|number>} path Path to array.
       * @param {number} start Index from which to start removing/inserting.
       * @param {number=} deleteCount Number of items to remove.
       * @param {...*} items Items to insert into array.
       * @return {Array} Array of removed items.
       * @public
       */splice(path,start,deleteCount,...items){let info={path:""},array=/** @type {Array} */get(this,path,info);// Normalize fancy native splice handling of crazy start values
if(0>start){start=array.length-Math.floor(-start)}else if(start){start=Math.floor(start)}// array.splice does different things based on the number of arguments
// you pass in. Therefore, array.splice(0) and array.splice(0, undefined)
// do different things. In the former, the whole array is cleared. In the
// latter, no items are removed.
// This means that we need to detect whether 1. one of the arguments
// is actually passed in and then 2. determine how many arguments
// we should pass on to the native array.splice
//
let ret;// Omit any additional arguments if they were not passed in
if(2===arguments.length){ret=array.splice(start);// Either start was undefined and the others were defined, but in this
// case we can safely pass on all arguments
//
// Note: this includes the case where none of the arguments were passed in,
// e.g. this.splice('array'). However, if both start and deleteCount
// are undefined, array.splice will not modify the array (as expected)
}else{ret=array.splice(start,deleteCount,...items)}// At the end, check whether any items were passed in (e.g. insertions)
// or if the return array contains items (e.g. deletions).
// Only notify if items were added or deleted.
if(items.length||ret.length){notifySplice(this,array,info.path,start,items.length,ret)}return ret}/**
       * Removes an item from the beginning of array at the path specified.
       *
       * The arguments after `path` and return value match that of
       * `Array.prototype.pop`.
       *
       * This method notifies other paths to the same array that a
       * splice occurred to the array.
       *
       * @override
       * @param {string | !Array<string|number>} path Path to array.
       * @return {*} Item that was removed.
       * @public
       */shift(path){let info={path:""},array=/** @type {Array} */get(this,path,info),hadLength=!!array.length,ret=array.shift();if(hadLength){notifySplice(this,array,info.path,0,0,[ret])}return ret}/**
       * Adds items onto the beginning of the array at the path specified.
       *
       * The arguments after `path` and return value match that of
       * `Array.prototype.push`.
       *
       * This method notifies other paths to the same array that a
       * splice occurred to the array.
       *
       * @override
       * @param {string | !Array<string|number>} path Path to array.
       * @param {...*} items Items to insert info array
       * @return {number} New length of the array.
       * @public
       */unshift(path,...items){let info={path:""},array=/** @type {Array} */get(this,path,info),ret=array.unshift(...items);if(items.length){notifySplice(this,array,info.path,0,items.length,[])}return ret}/**
       * Notify that a path has changed.
       *
       * Example:
       *
       *     this.item.user.name = 'Bob';
       *     this.notifyPath('item.user.name');
       *
       * @override
       * @param {string} path Path that should be notified.
       * @param {*=} value Value at the path (optional).
       * @return {void}
       * @public
       */notifyPath(path,value){/** @type {string} */let propPath;if(1==arguments.length){// Get value if not supplied
let info={path:""};value=get(this,path,info);propPath=info.path}else if(Array.isArray(path)){// Normalize path if needed
propPath=normalize(path)}else{propPath=/** @type{string} */path}if(this._setPendingPropertyOrPath(propPath,value,!0,!0)){this._invalidateProperties()}}/**
       * Equivalent to static `createReadOnlyProperty` API but can be called on
       * an instance to add effects at runtime.  See that method for
       * full API docs.
       *
       * @override
       * @param {string} property Property name
       * @param {boolean=} protectedSetter Creates a custom protected setter
       *   when `true`.
       * @return {void}
       * @protected
       */_createReadOnlyProperty(property,protectedSetter){this._addPropertyEffect(property,TYPES.READ_ONLY);if(protectedSetter){this["_set"+upper(property)]=/** @this {PropertyEffects} */function(value){this._setProperty(property,value)}}}/**
       * Equivalent to static `createPropertyObserver` API but can be called on
       * an instance to add effects at runtime.  See that method for
       * full API docs.
       *
       * @override
       * @param {string} property Property name
       * @param {string|function(*,*)} method Function or name of observer method
       *     to call
       * @param {boolean=} dynamicFn Whether the method name should be included as
       *   a dependency to the effect.
       * @return {void}
       * @protected
       */_createPropertyObserver(property,method,dynamicFn){let info={property,method,dynamicFn:!!dynamicFn};this._addPropertyEffect(property,TYPES.OBSERVE,{fn:runObserverEffect,info,trigger:{name:property}});if(dynamicFn){this._addPropertyEffect(/** @type {string} */method,TYPES.OBSERVE,{fn:runObserverEffect,info,trigger:{name:method}})}}/**
       * Equivalent to static `createMethodObserver` API but can be called on
       * an instance to add effects at runtime.  See that method for
       * full API docs.
       *
       * @override
       * @param {string} expression Method expression
       * @param {boolean|Object=} dynamicFn Boolean or object map indicating
       *   whether method names should be included as a dependency to the effect.
       * @return {void}
       * @protected
       */_createMethodObserver(expression,dynamicFn){let sig=parseMethod(expression);if(!sig){throw new Error("Malformed observer expression '"+expression+"'")}createMethodEffect(this,sig,TYPES.OBSERVE,runMethodEffect,null,dynamicFn)}/**
       * Equivalent to static `createNotifyingProperty` API but can be called on
       * an instance to add effects at runtime.  See that method for
       * full API docs.
       *
       * @override
       * @param {string} property Property name
       * @return {void}
       * @protected
       */_createNotifyingProperty(property){this._addPropertyEffect(property,TYPES.NOTIFY,{fn:runNotifyEffect,info:{eventName:camelToDashCase(property)+"-changed",property:property}})}/**
       * Equivalent to static `createReflectedProperty` API but can be called on
       * an instance to add effects at runtime.  See that method for
       * full API docs.
       *
       * @override
       * @param {string} property Property name
       * @return {void}
       * @protected
       * @suppress {missingProperties} go/missingfnprops
       */_createReflectedProperty(property){let attr=this.constructor.attributeNameForProperty(property);if("-"===attr[0]){console.warn("Property "+property+" cannot be reflected to attribute "+attr+" because \"-\" is not a valid starting attribute name. Use a lowercase first letter for the property instead.")}else{this._addPropertyEffect(property,TYPES.REFLECT,{fn:runReflectEffect,info:{attrName:attr}})}}/**
       * Equivalent to static `createComputedProperty` API but can be called on
       * an instance to add effects at runtime.  See that method for
       * full API docs.
       *
       * @override
       * @param {string} property Name of computed property to set
       * @param {string} expression Method expression
       * @param {boolean|Object=} dynamicFn Boolean or object map indicating
       *   whether method names should be included as a dependency to the effect.
       * @return {void}
       * @protected
       */_createComputedProperty(property,expression,dynamicFn){let sig=parseMethod(expression);if(!sig){throw new Error("Malformed computed expression '"+expression+"'")}createMethodEffect(this,sig,TYPES.COMPUTE,runComputedEffect,property,dynamicFn)}/**
       * Gather the argument values for a method specified in the provided array
       * of argument metadata.
       *
       * The `path` and `value` arguments are used to fill in wildcard descriptor
       * when the method is being called as a result of a path notification.
       *
       * @param {!Array<!MethodArg>} args Array of argument metadata
       * @param {string} path Property/path name that triggered the method effect
       * @param {Object} props Bag of current property changes
       * @return {Array<*>} Array of argument values
       * @private
       */_marshalArgs(args,path,props){const data=this.__data,values=[];for(let i=0,l=args.length;i<l;i++){let{name,structured,wildcard,value,literal}=args[i];if(!literal){if(wildcard){const matches=isDescendant(name,path),pathValue=getArgValue(data,props,matches?path:name);value={path:matches?path:name,value:pathValue,base:matches?get(data,name):pathValue}}else{value=structured?getArgValue(data,props,name):data[name]}}values[i]=value}return values}// -- static class methods ------------
/**
     * Ensures an accessor exists for the specified property, and adds
     * to a list of "property effects" that will run when the accessor for
     * the specified property is set.  Effects are grouped by "type", which
     * roughly corresponds to a phase in effect processing.  The effect
     * metadata should be in the following form:
     *
     *     {
     *       fn: effectFunction, // Reference to function to call to perform effect
     *       info: { ... }       // Effect metadata passed to function
     *       trigger: {          // Optional triggering metadata; if not provided
     *         name: string      // the property is treated as a wildcard
     *         structured: boolean
     *         wildcard: boolean
     *       }
     *     }
     *
     * Effects are called from `_propertiesChanged` in the following order by
     * type:
     *
     * 1. COMPUTE
     * 2. PROPAGATE
     * 3. REFLECT
     * 4. OBSERVE
     * 5. NOTIFY
     *
     * Effect functions are called with the following signature:
     *
     *     effectFunction(inst, path, props, oldProps, info, hasPaths)
     *
     * @param {string} property Property that should trigger the effect
     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES
     * @param {Object=} effect Effect metadata object
     * @return {void}
     * @protected
     */static addPropertyEffect(property,type,effect){this.prototype._addPropertyEffect(property,type,effect)}/**
       * Creates a single-property observer for the given property.
       *
       * @param {string} property Property name
       * @param {string|function(*,*)} method Function or name of observer method to call
       * @param {boolean=} dynamicFn Whether the method name should be included as
       *   a dependency to the effect.
       * @return {void}
       * @protected
       */static createPropertyObserver(property,method,dynamicFn){this.prototype._createPropertyObserver(property,method,dynamicFn)}/**
       * Creates a multi-property "method observer" based on the provided
       * expression, which should be a string in the form of a normal JavaScript
       * function signature: `'methodName(arg1, [..., argn])'`.  Each argument
       * should correspond to a property or path in the context of this
       * prototype (or instance), or may be a literal string or number.
       *
       * @param {string} expression Method expression
       * @param {boolean|Object=} dynamicFn Boolean or object map indicating
       * @return {void}
       *   whether method names should be included as a dependency to the effect.
       * @protected
       */static createMethodObserver(expression,dynamicFn){this.prototype._createMethodObserver(expression,dynamicFn)}/**
       * Causes the setter for the given property to dispatch `<property>-changed`
       * events to notify of changes to the property.
       *
       * @param {string} property Property name
       * @return {void}
       * @protected
       */static createNotifyingProperty(property){this.prototype._createNotifyingProperty(property)}/**
       * Creates a read-only accessor for the given property.
       *
       * To set the property, use the protected `_setProperty` API.
       * To create a custom protected setter (e.g. `_setMyProp()` for
       * property `myProp`), pass `true` for `protectedSetter`.
       *
       * Note, if the property will have other property effects, this method
       * should be called first, before adding other effects.
       *
       * @param {string} property Property name
       * @param {boolean=} protectedSetter Creates a custom protected setter
       *   when `true`.
       * @return {void}
       * @protected
       */static createReadOnlyProperty(property,protectedSetter){this.prototype._createReadOnlyProperty(property,protectedSetter)}/**
       * Causes the setter for the given property to reflect the property value
       * to a (dash-cased) attribute of the same name.
       *
       * @param {string} property Property name
       * @return {void}
       * @protected
       */static createReflectedProperty(property){this.prototype._createReflectedProperty(property)}/**
       * Creates a computed property whose value is set to the result of the
       * method described by the given `expression` each time one or more
       * arguments to the method changes.  The expression should be a string
       * in the form of a normal JavaScript function signature:
       * `'methodName(arg1, [..., argn])'`
       *
       * @param {string} property Name of computed property to set
       * @param {string} expression Method expression
       * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether
       *   method names should be included as a dependency to the effect.
       * @return {void}
       * @protected
       */static createComputedProperty(property,expression,dynamicFn){this.prototype._createComputedProperty(property,expression,dynamicFn)}/**
       * Parses the provided template to ensure binding effects are created
       * for them, and then ensures property accessors are created for any
       * dependent properties in the template.  Binding effects for bound
       * templates are stored in a linked list on the instance so that
       * templates can be efficiently stamped and unstamped.
       *
       * @param {!HTMLTemplateElement} template Template containing binding
       *   bindings
       * @return {!TemplateInfo} Template metadata object
       * @protected
       */static bindTemplate(template){return this.prototype._bindTemplate(template)}// -- binding ----------------------------------------------
/**
     * Equivalent to static `bindTemplate` API but can be called on
     * an instance to add effects at runtime.  See that method for
     * full API docs.
     *
     * This method may be called on the prototype (for prototypical template
     * binding, to avoid creating accessors every instance) once per prototype,
     * and will be called with `runtimeBinding: true` by `_stampTemplate` to
     * create and link an instance of the template metadata associated with a
     * particular stamping.
     *
     * @override
     * @param {!HTMLTemplateElement} template Template containing binding
     *   bindings
     * @param {boolean=} instanceBinding When false (default), performs
     *   "prototypical" binding of the template and overwrites any previously
     *   bound template for the class. When true (as passed from
     *   `_stampTemplate`), the template info is instanced and linked into
     *   the list of bound templates.
     * @return {!TemplateInfo} Template metadata object; for `runtimeBinding`,
     *   this is an instance of the prototypical template info
     * @protected
     * @suppress {missingProperties} go/missingfnprops
     */_bindTemplate(template,instanceBinding){let templateInfo=this.constructor._parseTemplate(template),wasPreBound=this.__templateInfo==templateInfo;// Optimization: since this is called twice for proto-bound templates,
// don't attempt to recreate accessors if this template was pre-bound
if(!wasPreBound){for(let prop in templateInfo.propertyEffects){this._createPropertyAccessor(prop)}}if(instanceBinding){// For instance-time binding, create instance of template metadata
// and link into list of templates if necessary
templateInfo=/** @type {!TemplateInfo} */Object.create(templateInfo);templateInfo.wasPreBound=wasPreBound;if(!wasPreBound&&this.__templateInfo){let last=this.__templateInfoLast||this.__templateInfo;this.__templateInfoLast=last.nextTemplateInfo=templateInfo;templateInfo.previousTemplateInfo=last;return templateInfo}}return this.__templateInfo=templateInfo}/**
       * Adds a property effect to the given template metadata, which is run
       * at the "propagate" stage of `_propertiesChanged` when the template
       * has been bound to the element via `_bindTemplate`.
       *
       * The `effect` object should match the format in `_addPropertyEffect`.
       *
       * @param {Object} templateInfo Template metadata to add effect to
       * @param {string} prop Property that should trigger the effect
       * @param {Object=} effect Effect metadata object
       * @return {void}
       * @protected
       */static _addTemplatePropertyEffect(templateInfo,prop,effect){let hostProps=templateInfo.hostProps=templateInfo.hostProps||{};hostProps[prop]=!0;let effects=templateInfo.propertyEffects=templateInfo.propertyEffects||{},propEffects=effects[prop]=effects[prop]||[];propEffects.push(effect)}/**
       * Stamps the provided template and performs instance-time setup for
       * Polymer template features, including data bindings, declarative event
       * listeners, and the `this.$` map of `id`'s to nodes.  A document fragment
       * is returned containing the stamped DOM, ready for insertion into the
       * DOM.
       *
       * This method may be called more than once; however note that due to
       * `shadycss` polyfill limitations, only styles from templates prepared
       * using `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped
       * to the shadow root and support CSS custom properties), and note that
       * `ShadyCSS.prepareTemplate` may only be called once per element. As such,
       * any styles required by in runtime-stamped templates must be included
       * in the main element template.
       *
       * @param {!HTMLTemplateElement} template Template to stamp
       * @return {!StampedTemplate} Cloned template content
       * @override
       * @protected
       */_stampTemplate(template){// Ensures that created dom is `_enqueueClient`'d to this element so
// that it can be flushed on next call to `_flushProperties`
hostStack.beginHosting(this);let dom=super._stampTemplate(template);hostStack.endHosting(this);let templateInfo=/** @type {!TemplateInfo} */this._bindTemplate(template,!0);// Add template-instance-specific data to instanced templateInfo
templateInfo.nodeList=dom.nodeList;// Capture child nodes to allow unstamping of non-prototypical templates
if(!templateInfo.wasPreBound){let nodes=templateInfo.childNodes=[];for(let n=dom.firstChild;n;n=n.nextSibling){nodes.push(n)}}dom.templateInfo=templateInfo;// Setup compound storage, 2-way listeners, and dataHost for bindings
setupBindings(this,templateInfo);// Flush properties into template nodes if already booted
if(this.__dataReady){runEffects(this,templateInfo.propertyEffects,this.__data,null,!1,templateInfo.nodeList)}return dom}/**
       * Removes and unbinds the nodes previously contained in the provided
       * DocumentFragment returned from `_stampTemplate`.
       *
       * @override
       * @param {!StampedTemplate} dom DocumentFragment previously returned
       *   from `_stampTemplate` associated with the nodes to be removed
       * @return {void}
       * @protected
       */_removeBoundDom(dom){// Unlink template info
let templateInfo=dom.templateInfo;if(templateInfo.previousTemplateInfo){templateInfo.previousTemplateInfo.nextTemplateInfo=templateInfo.nextTemplateInfo}if(templateInfo.nextTemplateInfo){templateInfo.nextTemplateInfo.previousTemplateInfo=templateInfo.previousTemplateInfo}if(this.__templateInfoLast==templateInfo){this.__templateInfoLast=templateInfo.previousTemplateInfo}templateInfo.previousTemplateInfo=templateInfo.nextTemplateInfo=null;// Remove stamped nodes
let nodes=templateInfo.childNodes;for(let i=0,node;i<nodes.length;i++){node=nodes[i];node.parentNode.removeChild(node)}}/**
       * Overrides default `TemplateStamp` implementation to add support for
       * parsing bindings from `TextNode`'s' `textContent`.  A `bindings`
       * array is added to `nodeInfo` and populated with binding metadata
       * with information capturing the binding target, and a `parts` array
       * with one or more metadata objects capturing the source(s) of the
       * binding.
       *
       * @param {Node} node Node to parse
       * @param {TemplateInfo} templateInfo Template metadata for current template
       * @param {NodeInfo} nodeInfo Node metadata for current template node
       * @return {boolean} `true` if the visited node added node-specific
       *   metadata to `nodeInfo`
       * @protected
       * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
       */static _parseTemplateNode(node,templateInfo,nodeInfo){let noted=super._parseTemplateNode(node,templateInfo,nodeInfo);if(node.nodeType===Node.TEXT_NODE){let parts=this._parseBindings(node.textContent,templateInfo);if(parts){// Initialize the textContent with any literal parts
// NOTE: default to a space here so the textNode remains; some browsers
// (IE) omit an empty textNode following cloneNode/importNode.
node.textContent=literalFromParts(parts)||" ";addBinding(this,templateInfo,nodeInfo,"text","textContent",parts);noted=!0}}return noted}/**
       * Overrides default `TemplateStamp` implementation to add support for
       * parsing bindings from attributes.  A `bindings`
       * array is added to `nodeInfo` and populated with binding metadata
       * with information capturing the binding target, and a `parts` array
       * with one or more metadata objects capturing the source(s) of the
       * binding.
       *
       * @param {Element} node Node to parse
       * @param {TemplateInfo} templateInfo Template metadata for current template
       * @param {NodeInfo} nodeInfo Node metadata for current template node
       * @param {string} name Attribute name
       * @param {string} value Attribute value
       * @return {boolean} `true` if the visited node added node-specific
       *   metadata to `nodeInfo`
       * @protected
       * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
       */static _parseTemplateNodeAttribute(node,templateInfo,nodeInfo,name,value){let parts=this._parseBindings(value,templateInfo);if(parts){// Attribute or property
let origName=name,kind="property";// The only way we see a capital letter here is if the attr has
// a capital letter in it per spec. In this case, to make sure
// this binding works, we go ahead and make the binding to the attribute.
if(capitalAttributeRegex.test(name)){kind="attribute"}else if("$"==name[name.length-1]){name=name.slice(0,-1);kind="attribute"}// Initialize attribute bindings with any literal parts
let literal=literalFromParts(parts);if(literal&&"attribute"==kind){// Ensure a ShadyCSS template scoped style is not removed
// when a class$ binding's initial literal value is set.
if("class"==name&&node.hasAttribute("class")){literal+=" "+node.getAttribute(name)}node.setAttribute(name,literal)}// Clear attribute before removing, since IE won't allow removing
// `value` attribute if it previously had a value (can't
// unconditionally set '' before removing since attributes with `$`
// can't be set using setAttribute)
if("input"===node.localName&&"value"===origName){node.setAttribute(origName,"")}// Remove annotation
node.removeAttribute(origName);// Case hackery: attributes are lower-case, but bind targets
// (properties) are case sensitive. Gambit is to map dash-case to
// camel-case: `foo-bar` becomes `fooBar`.
// Attribute bindings are excepted.
if("property"===kind){name=dashToCamelCase(name)}addBinding(this,templateInfo,nodeInfo,kind,name,parts,literal);return!0}else{return super._parseTemplateNodeAttribute(node,templateInfo,nodeInfo,name,value)}}/**
       * Overrides default `TemplateStamp` implementation to add support for
       * binding the properties that a nested template depends on to the template
       * as `_host_<property>`.
       *
       * @param {Node} node Node to parse
       * @param {TemplateInfo} templateInfo Template metadata for current template
       * @param {NodeInfo} nodeInfo Node metadata for current template node
       * @return {boolean} `true` if the visited node added node-specific
       *   metadata to `nodeInfo`
       * @protected
       * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
       */static _parseTemplateNestedTemplate(node,templateInfo,nodeInfo){let noted=super._parseTemplateNestedTemplate(node,templateInfo,nodeInfo),hostProps=nodeInfo.templateInfo.hostProps,mode="{";// Merge host props into outer template and add bindings
for(let source in hostProps){let parts=[{mode,source,dependencies:[source]}];addBinding(this,templateInfo,nodeInfo,"property","_host_"+source,parts)}return noted}/**
       * Called to parse text in a template (either attribute values or
       * textContent) into binding metadata.
       *
       * Any overrides of this method should return an array of binding part
       * metadata  representing one or more bindings found in the provided text
       * and any "literal" text in between.  Any non-literal parts will be passed
       * to `_evaluateBinding` when any dependencies change.  The only required
       * fields of each "part" in the returned array are as follows:
       *
       * - `dependencies` - Array containing trigger metadata for each property
       *   that should trigger the binding to update
       * - `literal` - String containing text if the part represents a literal;
       *   in this case no `dependencies` are needed
       *
       * Additional metadata for use by `_evaluateBinding` may be provided in
       * each part object as needed.
       *
       * The default implementation handles the following types of bindings
       * (one or more may be intermixed with literal strings):
       * - Property binding: `[[prop]]`
       * - Path binding: `[[object.prop]]`
       * - Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`
       * - Two-way property or path bindings (supports negation):
       *   `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`
       * - Inline computed method (supports negation):
       *   `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`
       *
       * The default implementation uses a regular expression for best
       * performance. However, the regular expression uses a white-list of
       * allowed characters in a data-binding, which causes problems for
       * data-bindings that do use characters not in this white-list.
       *
       * Instead of updating the white-list with all allowed characters,
       * there is a StrictBindingParser (see lib/mixins/strict-binding-parser)
       * that uses a state machine instead. This state machine is able to handle
       * all characters. However, it is slightly less performant, therefore we
       * extracted it into a separate optional mixin.
       *
       * @param {string} text Text to parse from attribute or textContent
       * @param {Object} templateInfo Current template metadata
       * @return {Array<!BindingPart>} Array of binding part metadata
       * @protected
       */static _parseBindings(text,templateInfo){let parts=[],lastIndex=0,m;// Example: "literal1{{prop}}literal2[[!compute(foo,bar)]]final"
// Regex matches:
//        Iteration 1:  Iteration 2:
// m[1]: '{{'          '[['
// m[2]: ''            '!'
// m[3]: 'prop'        'compute(foo,bar)'
while(null!==(m=bindingRegex.exec(text))){// Add literal part
if(m.index>lastIndex){parts.push({literal:text.slice(lastIndex,m.index)})}// Add binding part
let mode=m[1][0],negate=!!m[2],source=m[3].trim(),customEvent=!1,notifyEvent="",colon=-1;if("{"==mode&&0<(colon=source.indexOf("::"))){notifyEvent=source.substring(colon+2);source=source.substring(0,colon);customEvent=!0}let signature=parseMethod(source),dependencies=[];if(signature){// Inline computed function
let{args,methodName}=signature;for(let i=0,arg;i<args.length;i++){arg=args[i];if(!arg.literal){dependencies.push(arg)}}let dynamicFns=templateInfo.dynamicFns;if(dynamicFns&&dynamicFns[methodName]||signature.static){dependencies.push(methodName);signature.dynamicFn=!0}}else{// Property or path
dependencies.push(source)}parts.push({source,mode,negate,customEvent,signature,dependencies,event:notifyEvent});lastIndex=bindingRegex.lastIndex}// Add a final literal part
if(lastIndex&&lastIndex<text.length){let literal=text.substring(lastIndex);if(literal){parts.push({literal:literal})}}if(parts.length){return parts}else{return null}}/**
       * Called to evaluate a previously parsed binding part based on a set of
       * one or more changed dependencies.
       *
       * @param {!Polymer_PropertyEffects} inst Element that should be used as
       *     scope for binding dependencies
       * @param {BindingPart} part Binding part metadata
       * @param {string} path Property/path that triggered this effect
       * @param {Object} props Bag of current property changes
       * @param {Object} oldProps Bag of previous values for changed properties
       * @param {boolean} hasPaths True with `props` contains one or more paths
       * @return {*} Value the binding part evaluated to
       * @protected
       */static _evaluateBinding(inst,part,path,props,oldProps,hasPaths){let value;if(part.signature){value=runMethodEffect(inst,path,props,oldProps,part.signature)}else if(path!=part.source){value=get(inst,part.source)}else{if(hasPaths&&isPath(path)){value=get(inst,path)}else{value=inst.__data[path]}}if(part.negate){value=!value}return value}}return PropertyEffects});/**
     * Helper api for enqueuing client dom created by a host element.
     *
     * By default elements are flushed via `_flushProperties` when
     * `connectedCallback` is called. Elements attach their client dom to
     * themselves at `ready` time which results from this first flush.
     * This provides an ordering guarantee that the client dom an element
     * creates is flushed before the element itself (i.e. client `ready`
     * fires before host `ready`).
     *
     * However, if `_flushProperties` is called *before* an element is connected,
     * as for example `Templatize` does, this ordering guarantee cannot be
     * satisfied because no elements are connected. (Note: Bound elements that
     * receive data do become enqueued clients and are properly ordered but
     * unbound elements are not.)
     *
     * To maintain the desired "client before host" ordering guarantee for this
     * case we rely on the "host stack. Client nodes registers themselves with
     * the creating host element when created. This ensures that all client dom
     * is readied in the proper order, maintaining the desired guarantee.
     *
     * @private
     */_exports.PropertyEffects=PropertyEffects;class HostStack{constructor(){this.stack=[]}/**
     * @param {*} inst Instance to add to hostStack
     * @return {void}
     */registerHost(inst){if(this.stack.length){let host=this.stack[this.stack.length-1];host._enqueueClient(inst)}}/**
     * @param {*} inst Instance to begin hosting
     * @return {void}
     */beginHosting(inst){this.stack.push(inst)}/**
     * @param {*} inst Instance to end hosting
     * @return {void}
     */endHosting(inst){let stackLen=this.stack.length;if(stackLen&&this.stack[stackLen-1]==inst){this.stack.pop()}}}const hostStack=new HostStack;var propertyEffects={PropertyEffects:PropertyEffects};/**
   @license
   Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */ /**
       * Total number of Polymer element instances created.
       * @type {number}
       */_exports.$propertyEffects=propertyEffects;let instanceCount=0;_exports.instanceCount=instanceCount;function incrementInstanceCount(){_exports.instanceCount=instanceCount=instanceCount+1}/**
   * Array of Polymer element classes that have been finalized.
   * @type {!Array<!PolymerElementConstructor>}
   */const registrations=[];/**
                                  * @param {!PolymerElementConstructor} prototype Element prototype to log
                                  * @private
                                  */_exports.registrations=registrations;function _regLog(prototype){console.log("["+/** @type {?} */prototype.is+"]: registered")}/**
   * Registers a class prototype for telemetry purposes.
   * @param {!PolymerElementConstructor} prototype Element prototype to register
   * @protected
   */function register(prototype){registrations.push(prototype)}/**
   * Logs all elements registered with an `is` to the console.
   * @public
   */function dumpRegistrations(){registrations.forEach(_regLog)}var telemetry={get instanceCount(){return instanceCount},incrementInstanceCount:incrementInstanceCount,registrations:registrations,register:register,dumpRegistrations:dumpRegistrations};_exports.$telemetry=telemetry;function normalizeProperties(props){const output={};for(let p in props){const o=props[p];output[p]="function"===typeof o?{type:o}:o}return output}/**
   * Mixin that provides a minimal starting point to using the PropertiesChanged
   * mixin by providing a mechanism to declare properties in a static
   * getter (e.g. static get properties() { return { foo: String } }). Changes
   * are reported via the `_propertiesChanged` method.
   *
   * This mixin provides no specific support for rendering. Users are expected
   * to create a ShadowRoot and put content into it and update it in whatever
   * way makes sense. This can be done in reaction to properties changing by
   * implementing `_propertiesChanged`.
   *
   * @mixinFunction
   * @polymer
   * @appliesMixin PropertiesChanged
   * @summary Mixin that provides a minimal starting point for using
   * the PropertiesChanged mixin by providing a declarative `properties` object.
   */const PropertiesMixin=dedupingMixin(superClass=>{/**
   * @constructor
   * @implements {Polymer_PropertiesChanged}
   * @private
   */const base=PropertiesChanged(superClass);/**
                                                  * Returns the super class constructor for the given class, if it is an
                                                  * instance of the PropertiesMixin.
                                                  *
                                                  * @param {!PropertiesMixinConstructor} constructor PropertiesMixin constructor
                                                  * @return {?PropertiesMixinConstructor} Super class constructor
                                                  */function superPropertiesClass(constructor){const superCtor=Object.getPrototypeOf(constructor);// Note, the `PropertiesMixin` class below only refers to the class
// generated by this call to the mixin; the instanceof test only works
// because the mixin is deduped and guaranteed only to apply once, hence
// all constructors in a proto chain will see the same `PropertiesMixin`
return superCtor.prototype instanceof PropertiesMixin?/** @type {!PropertiesMixinConstructor} */superCtor:null}/**
     * Returns a memoized version of the `properties` object for the
     * given class. Properties not in object format are converted to at
     * least {type}.
     *
     * @param {PropertiesMixinConstructor} constructor PropertiesMixin constructor
     * @return {Object} Memoized properties object
     */function ownProperties(constructor){if(!constructor.hasOwnProperty(JSCompiler_renameProperty("__ownProperties",constructor))){let props=null;if(constructor.hasOwnProperty(JSCompiler_renameProperty("properties",constructor))){const properties=constructor.properties;if(properties){props=normalizeProperties(properties)}}constructor.__ownProperties=props}return constructor.__ownProperties}/**
     * @polymer
     * @mixinClass
     * @extends {base}
     * @implements {Polymer_PropertiesMixin}
     * @unrestricted
     */class PropertiesMixin extends base{/**
     * Implements standard custom elements getter to observes the attributes
     * listed in `properties`.
     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
     */static get observedAttributes(){if(!this.hasOwnProperty("__observedAttributes")){register(this.prototype);const props=this._properties;this.__observedAttributes=props?Object.keys(props).map(p=>this.attributeNameForProperty(p)):[]}return this.__observedAttributes}/**
       * Finalizes an element definition, including ensuring any super classes
       * are also finalized. This includes ensuring property
       * accessors exist on the element prototype. This method calls
       * `_finalizeClass` to finalize each constructor in the prototype chain.
       * @return {void}
       */static finalize(){if(!this.hasOwnProperty(JSCompiler_renameProperty("__finalized",this))){const superCtor=superPropertiesClass(/** @type {!PropertiesMixinConstructor} */this);if(superCtor){superCtor.finalize()}this.__finalized=!0;this._finalizeClass()}}/**
       * Finalize an element class. This includes ensuring property
       * accessors exist on the element prototype. This method is called by
       * `finalize` and finalizes the class constructor.
       *
       * @protected
       */static _finalizeClass(){const props=ownProperties(/** @type {!PropertiesMixinConstructor} */this);if(props){this.createProperties(props)}}/**
       * Returns a memoized version of all properties, including those inherited
       * from super classes. Properties not in object format are converted to
       * at least {type}.
       *
       * @return {Object} Object containing properties for this class
       * @protected
       */static get _properties(){if(!this.hasOwnProperty(JSCompiler_renameProperty("__properties",this))){const superCtor=superPropertiesClass(/** @type {!PropertiesMixinConstructor} */this);this.__properties=Object.assign({},superCtor&&superCtor._properties,ownProperties(/** @type {PropertiesMixinConstructor} */this))}return this.__properties}/**
       * Overrides `PropertiesChanged` method to return type specified in the
       * static `properties` object for the given property.
       * @param {string} name Name of property
       * @return {*} Type to which to deserialize attribute
       *
       * @protected
       */static typeForProperty(name){const info=this._properties[name];return info&&info.type}/**
       * Overrides `PropertiesChanged` method and adds a call to
       * `finalize` which lazily configures the element's property accessors.
       * @override
       * @return {void}
       */_initializeProperties(){incrementInstanceCount();this.constructor.finalize();super._initializeProperties()}/**
       * Called when the element is added to a document.
       * Calls `_enableProperties` to turn on property system from
       * `PropertiesChanged`.
       * @suppress {missingProperties} Super may or may not implement the callback
       * @return {void}
       * @override
       */connectedCallback(){if(super.connectedCallback){super.connectedCallback()}this._enableProperties()}/**
       * Called when the element is removed from a document
       * @suppress {missingProperties} Super may or may not implement the callback
       * @return {void}
       * @override
       */disconnectedCallback(){if(super.disconnectedCallback){super.disconnectedCallback()}}}return PropertiesMixin});_exports.PropertiesMixin=PropertiesMixin;var propertiesMixin={PropertiesMixin:PropertiesMixin};_exports.$propertiesMixin=propertiesMixin;const bundledImportMeta=babelHelpers.objectSpread({},meta,{url:new URL("../../node_modules/%40polymer/polymer/lib/mixins/element-mixin.js",meta.url).href}),version$1="3.2.0";_exports.version$1=_exports.version=version$1;const builtCSS=window.ShadyCSS&&window.ShadyCSS.cssBuild,ElementMixin=dedupingMixin(base=>{/**
   * @constructor
   * @implements {Polymer_PropertyEffects}
   * @implements {Polymer_PropertiesMixin}
   * @extends {HTMLElement}
   * @private
   */const polymerElementBase=PropertiesMixin(PropertyEffects(base));/**
                                                                         * Returns a list of properties with default values.
                                                                         * This list is created as an optimization since it is a subset of
                                                                         * the list returned from `_properties`.
                                                                         * This list is used in `_initializeProperties` to set property defaults.
                                                                         *
                                                                         * @param {PolymerElementConstructor} constructor Element class
                                                                         * @return {PolymerElementProperties} Flattened properties for this class
                                                                         *   that have default values
                                                                         * @private
                                                                         */function propertyDefaults(constructor){if(!constructor.hasOwnProperty(JSCompiler_renameProperty("__propertyDefaults",constructor))){constructor.__propertyDefaults=null;let props=constructor._properties;for(let p in props){let info=props[p];if("value"in info){constructor.__propertyDefaults=constructor.__propertyDefaults||{};constructor.__propertyDefaults[p]=info}}}return constructor.__propertyDefaults}/**
     * Returns a memoized version of the `observers` array.
     * @param {PolymerElementConstructor} constructor Element class
     * @return {Array} Array containing own observers for the given class
     * @protected
     */function ownObservers(constructor){if(!constructor.hasOwnProperty(JSCompiler_renameProperty("__ownObservers",constructor))){constructor.__ownObservers=constructor.hasOwnProperty(JSCompiler_renameProperty("observers",constructor))?/** @type {PolymerElementConstructor} */constructor.observers:null}return constructor.__ownObservers}/**
     * Creates effects for a property.
     *
     * Note, once a property has been set to
     * `readOnly`, `computed`, `reflectToAttribute`, or `notify`
     * these values may not be changed. For example, a subclass cannot
     * alter these settings. However, additional `observers` may be added
     * by subclasses.
     *
     * The info object should contain property metadata as follows:
     *
     * * `type`: {function} type to which an attribute matching the property
     * is deserialized. Note the property is camel-cased from a dash-cased
     * attribute. For example, 'foo-bar' attribute is deserialized to a
     * property named 'fooBar'.
     *
     * * `readOnly`: {boolean} creates a readOnly property and
     * makes a private setter for the private of the form '_setFoo' for a
     * property 'foo',
     *
     * * `computed`: {string} creates a computed property. A computed property
     * is also automatically set to `readOnly: true`. The value is calculated
     * by running a method and arguments parsed from the given string. For
     * example 'compute(foo)' will compute a given property when the
     * 'foo' property changes by executing the 'compute' method. This method
     * must return the computed value.
     *
     * * `reflectToAttribute`: {boolean} If true, the property value is reflected
     * to an attribute of the same name. Note, the attribute is dash-cased
     * so a property named 'fooBar' is reflected as 'foo-bar'.
     *
     * * `notify`: {boolean} sends a non-bubbling notification event when
     * the property changes. For example, a property named 'foo' sends an
     * event named 'foo-changed' with `event.detail` set to the value of
     * the property.
     *
     * * observer: {string} name of a method that runs when the property
     * changes. The arguments of the method are (value, previousValue).
     *
     * Note: Users may want control over modifying property
     * effects via subclassing. For example, a user might want to make a
     * reflectToAttribute property not do so in a subclass. We've chosen to
     * disable this because it leads to additional complication.
     * For example, a readOnly effect generates a special setter. If a subclass
     * disables the effect, the setter would fail unexpectedly.
     * Based on feedback, we may want to try to make effects more malleable
     * and/or provide an advanced api for manipulating them.
     *
     * @param {!PolymerElement} proto Element class prototype to add accessors
     *   and effects to
     * @param {string} name Name of the property.
     * @param {Object} info Info object from which to create property effects.
     * Supported keys:
     * @param {Object} allProps Flattened map of all properties defined in this
     *   element (including inherited properties)
     * @return {void}
     * @private
     */function createPropertyFromConfig(proto,name,info,allProps){// computed forces readOnly...
if(info.computed){info.readOnly=!0}// Note, since all computed properties are readOnly, this prevents
// adding additional computed property effects (which leads to a confusing
// setup where multiple triggers for setting a property)
// While we do have `hasComputedEffect` this is set on the property's
// dependencies rather than itself.
if(info.computed){if(proto._hasReadOnlyEffect(name)){console.warn(`Cannot redefine computed property '${name}'.`)}else{proto._createComputedProperty(name,info.computed,allProps)}}if(info.readOnly&&!proto._hasReadOnlyEffect(name)){proto._createReadOnlyProperty(name,!info.computed)}else if(!1===info.readOnly&&proto._hasReadOnlyEffect(name)){console.warn(`Cannot make readOnly property '${name}' non-readOnly.`)}if(info.reflectToAttribute&&!proto._hasReflectEffect(name)){proto._createReflectedProperty(name)}else if(!1===info.reflectToAttribute&&proto._hasReflectEffect(name)){console.warn(`Cannot make reflected property '${name}' non-reflected.`)}if(info.notify&&!proto._hasNotifyEffect(name)){proto._createNotifyingProperty(name)}else if(!1===info.notify&&proto._hasNotifyEffect(name)){console.warn(`Cannot make notify property '${name}' non-notify.`)}// always add observer
if(info.observer){proto._createPropertyObserver(name,info.observer,allProps[info.observer])}// always create the mapping from attribute back to property for deserialization.
proto._addPropertyToAttributeMap(name)}/**
     * Process all style elements in the element template. Styles with the
     * `include` attribute are processed such that any styles in
     * the associated "style modules" are included in the element template.
     * @param {PolymerElementConstructor} klass Element class
     * @param {!HTMLTemplateElement} template Template to process
     * @param {string} is Name of element
     * @param {string} baseURI Base URI for element
     * @private
     */function processElementStyles(klass,template,is,baseURI){if(!builtCSS){const templateStyles=template.content.querySelectorAll("style"),stylesWithImports=stylesFromTemplate(template),linkedStyles=stylesFromModuleImports(is),firstTemplateChild=template.content.firstElementChild;for(let idx=0,s;idx<linkedStyles.length;idx++){s=linkedStyles[idx];s.textContent=klass._processStyleText(s.textContent,baseURI);template.content.insertBefore(s,firstTemplateChild)}// keep track of the last "concrete" style in the template we have encountered
let templateStyleIndex=0;// ensure all gathered styles are actually in this template.
for(let i=0;i<stylesWithImports.length;i++){let s=stylesWithImports[i],templateStyle=templateStyles[templateStyleIndex];// if the style is not in this template, it's been "included" and
// we put a clone of it in the template before the style that included it
if(templateStyle!==s){s=s.cloneNode(!0);templateStyle.parentNode.insertBefore(s,templateStyle)}else{templateStyleIndex++}s.textContent=klass._processStyleText(s.textContent,baseURI)}}if(window.ShadyCSS){window.ShadyCSS.prepareTemplate(template,is)}}/**
     * Look up template from dom-module for element
     *
     * @param {string} is Element name to look up
     * @return {?HTMLTemplateElement|undefined} Template found in dom module, or
     *   undefined if not found
     * @protected
     */function getTemplateFromDomModule(is){let template=null;// Under strictTemplatePolicy in 3.x+, dom-module lookup is only allowed
// when opted-in via allowTemplateFromDomModule
if(is&&(!strictTemplatePolicy||allowTemplateFromDomModule)){template=/** @type {?HTMLTemplateElement} */DomModule.import(is,"template");// Under strictTemplatePolicy, require any element with an `is`
// specified to have a dom-module
if(strictTemplatePolicy&&!template){throw new Error(`strictTemplatePolicy: expecting dom-module or null template for ${is}`)}}return template}/**
     * @polymer
     * @mixinClass
     * @unrestricted
     * @implements {Polymer_ElementMixin}
     * @extends {polymerElementBase}
     */class PolymerElement extends polymerElementBase{/**
     * Current Polymer version in Semver notation.
     * @type {string} Semver notation of the current version of Polymer.
     */static get polymerElementVersion(){return version$1}/**
       * Override of PropertiesMixin _finalizeClass to create observers and
       * find the template.
       * @return {void}
       * @protected
       * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
       */static _finalizeClass(){super._finalizeClass();const observers=ownObservers(this);if(observers){this.createObservers(observers,this._properties)}this._prepareTemplate()}static _prepareTemplate(){// note: create "working" template that is finalized at instance time
let template=/** @type {PolymerElementConstructor} */this.template;if(template){if("string"===typeof template){console.error("template getter must return HTMLTemplateElement");template=null}else if(!legacyOptimizations){template=template.cloneNode(!0)}}this.prototype._template=template}/**
       * Override of PropertiesChanged createProperties to create accessors
       * and property effects for all of the properties.
       * @param {!Object} props .
       * @return {void}
       * @protected
       */static createProperties(props){for(let p in props){createPropertyFromConfig(this.prototype,p,props[p],props)}}/**
       * Creates observers for the given `observers` array.
       * Leverages `PropertyEffects` to create observers.
       * @param {Object} observers Array of observer descriptors for
       *   this class
       * @param {Object} dynamicFns Object containing keys for any properties
       *   that are functions and should trigger the effect when the function
       *   reference is changed
       * @return {void}
       * @protected
       */static createObservers(observers,dynamicFns){const proto=this.prototype;for(let i=0;i<observers.length;i++){proto._createMethodObserver(observers[i],dynamicFns)}}/**
       * Returns the template that will be stamped into this element's shadow root.
       *
       * If a `static get is()` getter is defined, the default implementation
       * will return the first `<template>` in a `dom-module` whose `id`
       * matches this element's `is`.
       *
       * Users may override this getter to return an arbitrary template
       * (in which case the `is` getter is unnecessary). The template returned
       * must be an `HTMLTemplateElement`.
       *
       * Note that when subclassing, if the super class overrode the default
       * implementation and the subclass would like to provide an alternate
       * template via a `dom-module`, it should override this getter and
       * return `DomModule.import(this.is, 'template')`.
       *
       * If a subclass would like to modify the super class template, it should
       * clone it rather than modify it in place.  If the getter does expensive
       * work such as cloning/modifying a template, it should memoize the
       * template for maximum performance:
       *
       *   let memoizedTemplate;
       *   class MySubClass extends MySuperClass {
       *     static get template() {
       *       if (!memoizedTemplate) {
       *         memoizedTemplate = super.template.cloneNode(true);
       *         let subContent = document.createElement('div');
       *         subContent.textContent = 'This came from MySubClass';
       *         memoizedTemplate.content.appendChild(subContent);
       *       }
       *       return memoizedTemplate;
       *     }
       *   }
       *
       * @return {!HTMLTemplateElement|string} Template to be stamped
       */static get template(){// Explanation of template-related properties:
// - constructor.template (this getter): the template for the class.
//     This can come from the prototype (for legacy elements), from a
//     dom-module, or from the super class's template (or can be overridden
//     altogether by the user)
// - constructor._template: memoized version of constructor.template
// - prototype._template: working template for the element, which will be
//     parsed and modified in place. It is a cloned version of
//     constructor.template, saved in _finalizeClass(). Note that before
//     this getter is called, for legacy elements this could be from a
//     _template field on the info object passed to Polymer(), a behavior,
//     or set in registered(); once the static getter runs, a clone of it
//     will overwrite it on the prototype as the working template.
if(!this.hasOwnProperty(JSCompiler_renameProperty("_template",this))){this._template=// If user has put template on prototype (e.g. in legacy via registered
// callback or info object), prefer that first
this.prototype.hasOwnProperty(JSCompiler_renameProperty("_template",this.prototype))?this.prototype._template:// Look in dom-module associated with this element's is
getTemplateFromDomModule(/** @type {PolymerElementConstructor}*/this.is)||// Next look for superclass template (call the super impl this
// way so that `this` points to the superclass)
Object.getPrototypeOf(/** @type {PolymerElementConstructor}*/this.prototype).constructor.template}return this._template}/**
       * Set the template.
       *
       * @param {!HTMLTemplateElement|string} value Template to set.
       */static set template(value){this._template=value}/**
       * Path matching the url from which the element was imported.
       *
       * This path is used to resolve url's in template style cssText.
       * The `importPath` property is also set on element instances and can be
       * used to create bindings relative to the import path.
       *
       * For elements defined in ES modules, users should implement
       * `static get importMeta() { return import.meta; }`, and the default
       * implementation of `importPath` will  return `import.meta.url`'s path.
       * For elements defined in HTML imports, this getter will return the path
       * to the document containing a `dom-module` element matching this
       * element's static `is` property.
       *
       * Note, this path should contain a trailing `/`.
       *
       * @return {string} The import path for this element class
       * @suppress {missingProperties}
       */static get importPath(){if(!this.hasOwnProperty(JSCompiler_renameProperty("_importPath",this))){const meta=this.importMeta;if(meta){this._importPath=pathFromUrl(meta.url)}else{const module=DomModule.import(/** @type {PolymerElementConstructor} */this.is);this._importPath=module&&module.assetpath||Object.getPrototypeOf(/** @type {PolymerElementConstructor}*/this.prototype).constructor.importPath}}return this._importPath}constructor(){super();/** @type {HTMLTemplateElement} */this._template;/** @type {string} */this._importPath;/** @type {string} */this.rootPath;/** @type {string} */this.importPath;/** @type {StampedTemplate | HTMLElement | ShadowRoot} */this.root;/** @type {!Object<string, !Element>} */this.$}/**
       * Overrides the default `PropertyAccessors` to ensure class
       * metaprogramming related to property accessors and effects has
       * completed (calls `finalize`).
       *
       * It also initializes any property defaults provided via `value` in
       * `properties` metadata.
       *
       * @return {void}
       * @override
       * @suppress {invalidCasts,missingProperties} go/missingfnprops
       */_initializeProperties(){this.constructor.finalize();// note: finalize template when we have access to `localName` to
// avoid dependence on `is` for polyfilling styling.
this.constructor._finalizeTemplate(/** @type {!HTMLElement} */this.localName);super._initializeProperties();// set path defaults
this.rootPath=rootPath;this.importPath=this.constructor.importPath;// apply property defaults...
let p$=propertyDefaults(this.constructor);if(!p$){return}for(let p in p$){let info=p$[p];// Don't set default value if there is already an own property, which
// happens when a `properties` property with default but no effects had
// a property set (e.g. bound) by its host before upgrade
if(!this.hasOwnProperty(p)){let value="function"==typeof info.value?info.value.call(this):info.value;// Set via `_setProperty` if there is an accessor, to enable
// initializing readOnly property defaults
if(this._hasAccessor(p)){this._setPendingProperty(p,value,!0)}else{this[p]=value}}}}/**
       * Gather style text for a style element in the template.
       *
       * @param {string} cssText Text containing styling to process
       * @param {string} baseURI Base URI to rebase CSS paths against
       * @return {string} The processed CSS text
       * @protected
       */static _processStyleText(cssText,baseURI){return resolveCss(cssText,baseURI)}/**
      * Configures an element `proto` to function with a given `template`.
      * The element name `is` and extends `ext` must be specified for ShadyCSS
      * style scoping.
      *
      * @param {string} is Tag name (or type extension name) for this element
      * @return {void}
      * @protected
      */static _finalizeTemplate(is){/** @const {HTMLTemplateElement} */const template=this.prototype._template;if(template&&!template.__polymerFinalized){template.__polymerFinalized=!0;const importPath=this.importPath,baseURI=importPath?resolveUrl(importPath):"";// e.g. support `include="module-name"`, and ShadyCSS
processElementStyles(this,template,is,baseURI);this.prototype._bindTemplate(template)}}/**
       * Provides a default implementation of the standard Custom Elements
       * `connectedCallback`.
       *
       * The default implementation enables the property effects system and
       * flushes any pending properties, and updates shimmed CSS properties
       * when using the ShadyCSS scoping/custom properties polyfill.
       *
       * @override
       * @suppress {missingProperties, invalidCasts} Super may or may not
       *     implement the callback
       * @return {void}
       */connectedCallback(){if(window.ShadyCSS&&this._template){window.ShadyCSS.styleElement(/** @type {!HTMLElement} */this)}super.connectedCallback()}/**
       * Stamps the element template.
       *
       * @return {void}
       * @override
       */ready(){if(this._template){this.root=this._stampTemplate(this._template);this.$=this.root.$}super.ready()}/**
       * Implements `PropertyEffects`'s `_readyClients` call. Attaches
       * element dom by calling `_attachDom` with the dom stamped from the
       * element's template via `_stampTemplate`. Note that this allows
       * client dom to be attached to the element prior to any observers
       * running.
       *
       * @return {void}
       * @override
       */_readyClients(){if(this._template){this.root=this._attachDom(/** @type {StampedTemplate} */this.root)}// The super._readyClients here sets the clients initialized flag.
// We must wait to do this until after client dom is created/attached
// so that this flag can be checked to prevent notifications fired
// during this process from being handled before clients are ready.
super._readyClients()}/**
       * Attaches an element's stamped dom to itself. By default,
       * this method creates a `shadowRoot` and adds the dom to it.
       * However, this method may be overridden to allow an element
       * to put its dom in another location.
       *
       * @override
       * @throws {Error}
       * @suppress {missingReturn}
       * @param {StampedTemplate} dom to attach to the element.
       * @return {ShadowRoot} node to which the dom has been attached.
       */_attachDom(dom){const n=wrap$1(this);if(n.attachShadow){if(dom){if(!n.shadowRoot){n.attachShadow({mode:"open"})}n.shadowRoot.appendChild(dom);if(syncInitialRender&&window.ShadyDOM){ShadyDOM.flushInitial(n.shadowRoot)}return n.shadowRoot}return null}else{throw new Error("ShadowDOM not available. "+// TODO(sorvell): move to compile-time conditional when supported
"PolymerElement can create dom as children instead of in "+"ShadowDOM by setting `this.root = this;` before `ready`.")}}/**
       * When using the ShadyCSS scoping and custom property shim, causes all
       * shimmed styles in this element (and its subtree) to be updated
       * based on current custom property values.
       *
       * The optional parameter overrides inline custom property styles with an
       * object of properties where the keys are CSS properties, and the values
       * are strings.
       *
       * Example: `this.updateStyles({'--color': 'blue'})`
       *
       * These properties are retained unless a value of `null` is set.
       *
       * Note: This function does not support updating CSS mixins.
       * You can not dynamically change the value of an `@apply`.
       *
       * @override
       * @param {Object=} properties Bag of custom property key/values to
       *   apply to this element.
       * @return {void}
       * @suppress {invalidCasts}
       */updateStyles(properties){if(window.ShadyCSS){window.ShadyCSS.styleSubtree(/** @type {!HTMLElement} */this,properties)}}/**
       * Rewrites a given URL relative to a base URL. The base URL defaults to
       * the original location of the document containing the `dom-module` for
       * this element. This method will return the same URL before and after
       * bundling.
       *
       * Note that this function performs no resolution for URLs that start
       * with `/` (absolute URLs) or `#` (hash identifiers).  For general purpose
       * URL resolution, use `window.URL`.
       *
       * @override
       * @param {string} url URL to resolve.
       * @param {string=} base Optional base URL to resolve against, defaults
       * to the element's `importPath`
       * @return {string} Rewritten URL relative to base
       */resolveUrl(url,base){if(!base&&this.importPath){base=resolveUrl(this.importPath)}return resolveUrl(url,base)}/**
       * Overrides `PropertyEffects` to add map of dynamic functions on
       * template info, for consumption by `PropertyEffects` template binding
       * code. This map determines which method templates should have accessors
       * created for them.
       *
       * @param {!HTMLTemplateElement} template Template
       * @param {!TemplateInfo} templateInfo Template metadata for current template
       * @param {!NodeInfo} nodeInfo Node metadata for current template.
       * @return {boolean} .
       * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
       */static _parseTemplateContent(template,templateInfo,nodeInfo){templateInfo.dynamicFns=templateInfo.dynamicFns||this._properties;return super._parseTemplateContent(template,templateInfo,nodeInfo)}/**
       * Overrides `PropertyEffects` to warn on use of undeclared properties in
       * template.
       *
       * @param {Object} templateInfo Template metadata to add effect to
       * @param {string} prop Property that should trigger the effect
       * @param {Object=} effect Effect metadata object
       * @return {void}
       * @protected
       * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
       */static _addTemplatePropertyEffect(templateInfo,prop,effect){// Warn if properties are used in template without being declared.
// Properties must be listed in `properties` to be included in
// `observedAttributes` since CE V1 reads that at registration time, and
// since we want to keep template parsing lazy, we can't automatically
// add undeclared properties used in templates to `observedAttributes`.
// The warning is only enabled in `legacyOptimizations` mode, since
// we don't want to spam existing users who might have adopted the
// shorthand when attribute deserialization is not important.
if(legacyOptimizations&&!(prop in this._properties)){console.warn(`Property '${prop}' used in template but not declared in 'properties'; `+`attribute will not be observed.`)}return super._addTemplatePropertyEffect(templateInfo,prop,effect)}}return PolymerElement});/**
                                                                  * Element class mixin that provides the core API for Polymer's meta-programming
                                                                  * features including template stamping, data-binding, attribute deserialization,
                                                                  * and property change observation.
                                                                  *
                                                                  * Subclassers may provide the following static getters to return metadata
                                                                  * used to configure Polymer's features for the class:
                                                                  *
                                                                  * - `static get is()`: When the template is provided via a `dom-module`,
                                                                  *   users should return the `dom-module` id from a static `is` getter.  If
                                                                  *   no template is needed or the template is provided directly via the
                                                                  *   `template` getter, there is no need to define `is` for the element.
                                                                  *
                                                                  * - `static get template()`: Users may provide the template directly (as
                                                                  *   opposed to via `dom-module`) by implementing a static `template` getter.
                                                                  *   The getter must return an `HTMLTemplateElement`.
                                                                  *
                                                                  * - `static get properties()`: Should return an object describing
                                                                  *   property-related metadata used by Polymer features (key: property name
                                                                  *   value: object containing property metadata). Valid keys in per-property
                                                                  *   metadata include:
                                                                  *   - `type` (String|Number|Object|Array|...): Used by
                                                                  *     `attributeChangedCallback` to determine how string-based attributes
                                                                  *     are deserialized to JavaScript property values.
                                                                  *   - `notify` (boolean): Causes a change in the property to fire a
                                                                  *     non-bubbling event called `<property>-changed`. Elements that have
                                                                  *     enabled two-way binding to the property use this event to observe changes.
                                                                  *   - `readOnly` (boolean): Creates a getter for the property, but no setter.
                                                                  *     To set a read-only property, use the private setter method
                                                                  *     `_setProperty(property, value)`.
                                                                  *   - `observer` (string): Observer method name that will be called when
                                                                  *     the property changes. The arguments of the method are
                                                                  *     `(value, previousValue)`.
                                                                  *   - `computed` (string): String describing method and dependent properties
                                                                  *     for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).
                                                                  *     Computed properties are read-only by default and can only be changed
                                                                  *     via the return value of the computing method.
                                                                  *
                                                                  * - `static get observers()`: Array of strings describing multi-property
                                                                  *   observer methods and their dependent properties (e.g.
                                                                  *   `'observeABC(a, b, c)'`).
                                                                  *
                                                                  * The base class provides default implementations for the following standard
                                                                  * custom element lifecycle callbacks; users may override these, but should
                                                                  * call the super method to ensure
                                                                  * - `constructor`: Run when the element is created or upgraded
                                                                  * - `connectedCallback`: Run each time the element is connected to the
                                                                  *   document
                                                                  * - `disconnectedCallback`: Run each time the element is disconnected from
                                                                  *   the document
                                                                  * - `attributeChangedCallback`: Run each time an attribute in
                                                                  *   `observedAttributes` is set or removed (note: this element's default
                                                                  *   `observedAttributes` implementation will automatically return an array
                                                                  *   of dash-cased attributes based on `properties`)
                                                                  *
                                                                  * @mixinFunction
                                                                  * @polymer
                                                                  * @appliesMixin PropertyEffects
                                                                  * @appliesMixin PropertiesMixin
                                                                  * @property rootPath {string} Set to the value of `rootPath`,
                                                                  *   which defaults to the main document path
                                                                  * @property importPath {string} Set to the value of the class's static
                                                                  *   `importPath` property, which defaults to the path of this element's
                                                                  *   `dom-module` (when `is` is used), but can be overridden for other
                                                                  *   import strategies.
                                                                  * @summary Element class mixin that provides the core API for Polymer's
                                                                  * meta-programming features.
                                                                  */_exports.ElementMixin=ElementMixin;/**
     * When using the ShadyCSS scoping and custom property shim, causes all
     * shimmed `styles` (via `custom-style`) in the document (and its subtree)
     * to be updated based on current custom property values.
     *
     * The optional parameter overrides inline custom property styles with an
     * object of properties where the keys are CSS properties, and the values
     * are strings.
     *
     * Example: `updateStyles({'--color': 'blue'})`
     *
     * These properties are retained unless a value of `null` is set.
     *
     * @param {Object=} props Bag of custom property key/values to
     *   apply to the document.
     * @return {void}
     */const updateStyles=function(props){if(window.ShadyCSS){window.ShadyCSS.styleDocument(props)}};_exports.updateStyles=updateStyles;var elementMixin={version:version$1,ElementMixin:ElementMixin,updateStyles:updateStyles};_exports.$elementMixin=elementMixin;class Debouncer{constructor(){this._asyncModule=null;this._callback=null;this._timer=null}/**
     * Sets the scheduler; that is, a module with the Async interface,
     * a callback and optional arguments to be passed to the run function
     * from the async module.
     *
     * @param {!AsyncInterface} asyncModule Object with Async interface.
     * @param {function()} callback Callback to run.
     * @return {void}
     */setConfig(asyncModule,callback){this._asyncModule=asyncModule;this._callback=callback;this._timer=this._asyncModule.run(()=>{this._timer=null;debouncerQueue.delete(this);this._callback()})}/**
     * Cancels an active debouncer and returns a reference to itself.
     *
     * @return {void}
     */cancel(){if(this.isActive()){this._cancelAsync();// Canceling a debouncer removes its spot from the flush queue,
// so if a debouncer is manually canceled and re-debounced, it
// will reset its flush order (this is a very minor difference from 1.x)
// Re-debouncing via the `debounce` API retains the 1.x FIFO flush order
debouncerQueue.delete(this)}}/**
     * Cancels a debouncer's async callback.
     *
     * @return {void}
     */_cancelAsync(){if(this.isActive()){this._asyncModule.cancel(/** @type {number} */this._timer);this._timer=null}}/**
     * Flushes an active debouncer and returns a reference to itself.
     *
     * @return {void}
     */flush(){if(this.isActive()){this.cancel();this._callback()}}/**
     * Returns true if the debouncer is active.
     *
     * @return {boolean} True if active.
     */isActive(){return null!=this._timer}/**
     * Creates a debouncer if no debouncer is passed as a parameter
     * or it cancels an active debouncer otherwise. The following
     * example shows how a debouncer can be called multiple times within a
     * microtask and "debounced" such that the provided callback function is
     * called once. Add this method to a custom element:
     *
     * ```js
     * import {microTask} from '@polymer/polymer/lib/utils/async.js';
     * import {Debouncer} from '@polymer/polymer/lib/utils/debounce.js';
     * // ...
     *
     * _debounceWork() {
     *   this._debounceJob = Debouncer.debounce(this._debounceJob,
     *       microTask, () => this._doWork());
     * }
     * ```
     *
     * If the `_debounceWork` method is called multiple times within the same
     * microtask, the `_doWork` function will be called only once at the next
     * microtask checkpoint.
     *
     * Note: In testing it is often convenient to avoid asynchrony. To accomplish
     * this with a debouncer, you can use `enqueueDebouncer` and
     * `flush`. For example, extend the above example by adding
     * `enqueueDebouncer(this._debounceJob)` at the end of the
     * `_debounceWork` method. Then in a test, call `flush` to ensure
     * the debouncer has completed.
     *
     * @param {Debouncer?} debouncer Debouncer object.
     * @param {!AsyncInterface} asyncModule Object with Async interface
     * @param {function()} callback Callback to run.
     * @return {!Debouncer} Returns a debouncer object.
     */static debounce(debouncer,asyncModule,callback){if(debouncer instanceof Debouncer){// Cancel the async callback, but leave in debouncerQueue if it was
// enqueued, to maintain 1.x flush order
debouncer._cancelAsync()}else{debouncer=new Debouncer}debouncer.setConfig(asyncModule,callback);return debouncer}}_exports.Debouncer=Debouncer;let debouncerQueue=new Set;/**
                                 * Adds a `Debouncer` to a list of globally flushable tasks.
                                 *
                                 * @param {!Debouncer} debouncer Debouncer to enqueue
                                 * @return {void}
                                 */const enqueueDebouncer=function(debouncer){debouncerQueue.add(debouncer)};/**
    * Flushes any enqueued debouncers
    *
    * @return {boolean} Returns whether any debouncers were flushed
    */_exports.enqueueDebouncer$1=_exports.enqueueDebouncer=_exports.addDebouncer=enqueueDebouncer;const flushDebouncers=function(){const didFlush=!!debouncerQueue.size;// If new debouncers are added while flushing, Set.forEach will ensure
// newly added ones are also flushed
debouncerQueue.forEach(debouncer=>{try{debouncer.flush()}catch(e){setTimeout(()=>{throw e})}});return didFlush};_exports.flushDebouncers=flushDebouncers;var debounce={Debouncer:Debouncer,enqueueDebouncer:enqueueDebouncer,flushDebouncers:flushDebouncers};_exports.$debounce=debounce;let HAS_NATIVE_TA="string"===typeof document.head.style.touchAction,GESTURE_KEY="__polymerGestures",HANDLED_OBJ="__polymerGesturesHandled",TOUCH_ACTION="__polymerGesturesTouchAction",TAP_DISTANCE=25,TRACK_DISTANCE=5,TRACK_LENGTH=2,MOUSE_TIMEOUT=2500,MOUSE_EVENTS=["mousedown","mousemove","mouseup","click"],MOUSE_WHICH_TO_BUTTONS=[0,1,4,2],MOUSE_HAS_BUTTONS=function(){try{return 1===new MouseEvent("test",{buttons:1}).buttons}catch(e){return!1}}();/**
      * @param {string} name Possible mouse event name
      * @return {boolean} true if mouse event, false if not
      */function isMouseEvent(name){return-1<MOUSE_EVENTS.indexOf(name)}/* eslint no-empty: ["error", { "allowEmptyCatch": true }] */ // check for passive event listeners
let SUPPORTS_PASSIVE=!1;(function(){try{let opts=Object.defineProperty({},"passive",{get(){SUPPORTS_PASSIVE=!0}});window.addEventListener("test",null,opts);window.removeEventListener("test",null,opts)}catch(e){}})();/**
       * Generate settings for event listeners, dependant on `passiveTouchGestures`
       *
       * @param {string} eventName Event name to determine if `{passive}` option is
       *   needed
       * @return {{passive: boolean} | undefined} Options to use for addEventListener
       *   and removeEventListener
       */function PASSIVE_TOUCH(eventName){if(isMouseEvent(eventName)||"touchend"===eventName){return}if(HAS_NATIVE_TA&&SUPPORTS_PASSIVE&&passiveTouchGestures){return{passive:!0}}else{return}}// Check for touch-only devices
let IS_TOUCH_ONLY=navigator.userAgent.match(/iP(?:[oa]d|hone)|Android/);// keep track of any labels hit by the mouseCanceller
/** @type {!Array<!HTMLLabelElement>} */const clickedLabels=[],labellable={button:!0,input:!0,keygen:!0,meter:!0,output:!0,textarea:!0,progress:!0,select:!0},canBeDisabled={button:!0,command:!0,fieldset:!0,input:!0,keygen:!0,optgroup:!0,option:!0,select:!0,textarea:!0};/** @type {!Object<boolean>} */ /**
    * @param {HTMLElement} el Element to check labelling status
    * @return {boolean} element can have labels
    */function canBeLabelled(el){return labellable[el.localName]||!1}/**
   * @param {HTMLElement} el Element that may be labelled.
   * @return {!Array<!HTMLLabelElement>} Relevant label for `el`
   */function matchingLabels(el){let labels=Array.prototype.slice.call(/** @type {HTMLInputElement} */el.labels||[]);// IE doesn't have `labels` and Safari doesn't populate `labels`
// if element is in a shadowroot.
// In this instance, finding the non-ancestor labels is enough,
// as the mouseCancellor code will handle ancstor labels
if(!labels.length){labels=[];let root=el.getRootNode();// if there is an id on `el`, check for all labels with a matching `for` attribute
if(el.id){let matching=root.querySelectorAll(`label[for = ${el.id}]`);for(let i=0;i<matching.length;i++){labels.push(/** @type {!HTMLLabelElement} */matching[i])}}}return labels}// touch will make synthetic mouse events
// `preventDefault` on touchend will cancel them,
// but this breaks `<input>` focus and link clicks
// disable mouse handlers for MOUSE_TIMEOUT ms after
// a touchend to ignore synthetic mouse events
let mouseCanceller=function(mouseEvent){// Check for sourceCapabilities, used to distinguish synthetic events
// if mouseEvent did not come from a device that fires touch events,
// it was made by a real mouse and should be counted
// http://wicg.github.io/InputDeviceCapabilities/#dom-inputdevicecapabilities-firestouchevents
let sc=mouseEvent.sourceCapabilities;if(sc&&!sc.firesTouchEvents){return}// skip synthetic mouse events
mouseEvent[HANDLED_OBJ]={skip:!0};// disable "ghost clicks"
if("click"===mouseEvent.type){let clickFromLabel=!1,path=getComposedPath(mouseEvent);for(let i=0;i<path.length;i++){if(path[i].nodeType===Node.ELEMENT_NODE){if("label"===path[i].localName){clickedLabels.push(/** @type {!HTMLLabelElement} */path[i])}else if(canBeLabelled(/** @type {!HTMLElement} */path[i])){let ownerLabels=matchingLabels(/** @type {!HTMLElement} */path[i]);// check if one of the clicked labels is labelling this element
for(let j=0;j<ownerLabels.length;j++){clickFromLabel=clickFromLabel||-1<clickedLabels.indexOf(ownerLabels[j])}}}if(path[i]===POINTERSTATE.mouse.target){return}}// if one of the clicked labels was labelling the target element,
// this is not a ghost click
if(clickFromLabel){return}mouseEvent.preventDefault();mouseEvent.stopPropagation()}};/**
    * @param {boolean=} setup True to add, false to remove.
    * @return {void}
    */function setupTeardownMouseCanceller(setup){let events=IS_TOUCH_ONLY?["click"]:MOUSE_EVENTS;for(let i=0,en;i<events.length;i++){en=events[i];if(setup){// reset clickLabels array
clickedLabels.length=0;document.addEventListener(en,mouseCanceller,!0)}else{document.removeEventListener(en,mouseCanceller,!0)}}}function ignoreMouse(e){if(!POINTERSTATE.mouse.mouseIgnoreJob){setupTeardownMouseCanceller(!0)}let unset=function(){setupTeardownMouseCanceller();POINTERSTATE.mouse.target=null;POINTERSTATE.mouse.mouseIgnoreJob=null};POINTERSTATE.mouse.target=getComposedPath(e)[0];POINTERSTATE.mouse.mouseIgnoreJob=Debouncer.debounce(POINTERSTATE.mouse.mouseIgnoreJob,timeOut.after(MOUSE_TIMEOUT),unset)}/**
   * @param {MouseEvent} ev event to test for left mouse button down
   * @return {boolean} has left mouse button down
   */function hasLeftMouseButton(ev){let type=ev.type;// exit early if the event is not a mouse event
if(!isMouseEvent(type)){return!1}// ev.button is not reliable for mousemove (0 is overloaded as both left button and no buttons)
// instead we use ev.buttons (bitmask of buttons) or fall back to ev.which (deprecated, 0 for no buttons, 1 for left button)
if("mousemove"===type){// allow undefined for testing events
let buttons=ev.buttons===void 0?1:ev.buttons;if(ev instanceof window.MouseEvent&&!MOUSE_HAS_BUTTONS){buttons=MOUSE_WHICH_TO_BUTTONS[ev.which]||0}// buttons is a bitmask, check that the left button bit is set (1)
return!!(1&buttons)}else{// allow undefined for testing events
let button=ev.button===void 0?0:ev.button;// ev.button is 0 in mousedown/mouseup/click for left button activation
return 0===button}}function isSyntheticClick(ev){if("click"===ev.type){// ev.detail is 0 for HTMLElement.click in most browsers
if(0===ev.detail){return!0}// in the worst case, check that the x/y position of the click is within
// the bounding box of the target of the event
// Thanks IE 10 >:(
let t=_findOriginalTarget(ev);// make sure the target of the event is an element so we can use getBoundingClientRect,
// if not, just assume it is a synthetic click
if(!t.nodeType||/** @type {Element} */t.nodeType!==Node.ELEMENT_NODE){return!0}let bcr=/** @type {Element} */t.getBoundingClientRect(),x=ev.pageX,y=ev.pageY;// use page x/y to account for scrolling
// ev is a synthetic click if the position is outside the bounding box of the target
return!(x>=bcr.left&&x<=bcr.right&&y>=bcr.top&&y<=bcr.bottom)}return!1}let POINTERSTATE={mouse:{target:null,mouseIgnoreJob:null},touch:{x:0,y:0,id:-1,scrollDecided:!1}};function firstTouchAction(ev){let ta="auto",path=getComposedPath(ev);for(let i=0,n;i<path.length;i++){n=path[i];if(n[TOUCH_ACTION]){ta=n[TOUCH_ACTION];break}}return ta}function trackDocument(stateObj,movefn,upfn){stateObj.movefn=movefn;stateObj.upfn=upfn;document.addEventListener("mousemove",movefn);document.addEventListener("mouseup",upfn)}function untrackDocument(stateObj){document.removeEventListener("mousemove",stateObj.movefn);document.removeEventListener("mouseup",stateObj.upfn);stateObj.movefn=null;stateObj.upfn=null}// use a document-wide touchend listener to start the ghost-click prevention mechanism
// Use passive event listeners, if supported, to not affect scrolling performance
document.addEventListener("touchend",ignoreMouse,SUPPORTS_PASSIVE?{passive:!0}:!1);/**
             * Returns the composedPath for the given event.
             * @param {Event} event to process
             * @return {!Array<!EventTarget>} Path of the event
             */const getComposedPath=window.ShadyDOM&&window.ShadyDOM.noPatch?window.ShadyDOM.composedPath:event=>event.composedPath&&event.composedPath()||[],gestures={};/** @type {!Object<string, !GestureRecognizer>} */_exports.gestures=gestures;/** @type {!Array<!GestureRecognizer>} */const recognizers=[];/**
                                * Finds the element rendered on the screen at the provided coordinates.
                                *
                                * Similar to `document.elementFromPoint`, but pierces through
                                * shadow roots.
                                *
                                * @param {number} x Horizontal pixel coordinate
                                * @param {number} y Vertical pixel coordinate
                                * @return {Element} Returns the deepest shadowRoot inclusive element
                                * found at the screen position given.
                                */_exports.recognizers=recognizers;function deepTargetFind(x,y){let node=document.elementFromPoint(x,y),next=node;// this code path is only taken when native ShadowDOM is used
// if there is a shadowroot, it may have a node at x/y
// if there is not a shadowroot, exit the loop
while(next&&next.shadowRoot&&!window.ShadyDOM){// if there is a node at x/y in the shadowroot, look deeper
let oldNext=next;next=next.shadowRoot.elementFromPoint(x,y);// on Safari, elementFromPoint may return the shadowRoot host
if(oldNext===next){break}if(next){node=next}}return node}/**
   * a cheaper check than ev.composedPath()[0];
   *
   * @private
   * @param {Event|Touch} ev Event.
   * @return {EventTarget} Returns the event target.
   */function _findOriginalTarget(ev){const path=getComposedPath(/** @type {?Event} */ev);// It shouldn't be, but sometimes path is empty (window on Safari).
return 0<path.length?path[0]:ev.target}/**
   * @private
   * @param {Event} ev Event.
   * @return {void}
   */function _handleNative(ev){let handled,type=ev.type,node=ev.currentTarget,gobj=node[GESTURE_KEY];if(!gobj){return}let gs=gobj[type];if(!gs){return}if(!ev[HANDLED_OBJ]){ev[HANDLED_OBJ]={};if("touch"===type.slice(0,5)){ev=/** @type {TouchEvent} */ev;// eslint-disable-line no-self-assign
let t=ev.changedTouches[0];if("touchstart"===type){// only handle the first finger
if(1===ev.touches.length){POINTERSTATE.touch.id=t.identifier}}if(POINTERSTATE.touch.id!==t.identifier){return}if(!HAS_NATIVE_TA){if("touchstart"===type||"touchmove"===type){_handleTouchAction(ev)}}}}handled=ev[HANDLED_OBJ];// used to ignore synthetic mouse events
if(handled.skip){return}// reset recognizer state
for(let i=0,r;i<recognizers.length;i++){r=recognizers[i];if(gs[r.name]&&!handled[r.name]){if(r.flow&&-1<r.flow.start.indexOf(ev.type)&&r.reset){r.reset()}}}// enforce gesture recognizer order
for(let i=0,r;i<recognizers.length;i++){r=recognizers[i];if(gs[r.name]&&!handled[r.name]){handled[r.name]=!0;r[type](ev)}}}/**
   * @private
   * @param {TouchEvent} ev Event.
   * @return {void}
   */function _handleTouchAction(ev){let t=ev.changedTouches[0],type=ev.type;if("touchstart"===type){POINTERSTATE.touch.x=t.clientX;POINTERSTATE.touch.y=t.clientY;POINTERSTATE.touch.scrollDecided=!1}else if("touchmove"===type){if(POINTERSTATE.touch.scrollDecided){return}POINTERSTATE.touch.scrollDecided=!0;let ta=firstTouchAction(ev),shouldPrevent=!1,dx=Math.abs(POINTERSTATE.touch.x-t.clientX),dy=Math.abs(POINTERSTATE.touch.y-t.clientY);if(!ev.cancelable){// scrolling is happening
}else if("none"===ta){shouldPrevent=!0}else if("pan-x"===ta){shouldPrevent=dy>dx}else if("pan-y"===ta){shouldPrevent=dx>dy}if(shouldPrevent){ev.preventDefault()}else{prevent("track")}}}/**
   * Adds an event listener to a node for the given gesture type.
   *
   * @param {!EventTarget} node Node to add listener on
   * @param {string} evType Gesture type: `down`, `up`, `track`, or `tap`
   * @param {!function(!Event):void} handler Event listener function to call
   * @return {boolean} Returns true if a gesture event listener was added.
   */function addListener(node,evType,handler){if(gestures[evType]){_add(node,evType,handler);return!0}return!1}/**
   * Removes an event listener from a node for the given gesture type.
   *
   * @param {!EventTarget} node Node to remove listener from
   * @param {string} evType Gesture type: `down`, `up`, `track`, or `tap`
   * @param {!function(!Event):void} handler Event listener function previously passed to
   *  `addListener`.
   * @return {boolean} Returns true if a gesture event listener was removed.
   */function removeListener(node,evType,handler){if(gestures[evType]){_remove(node,evType,handler);return!0}return!1}/**
   * automate the event listeners for the native events
   *
   * @private
   * @param {!EventTarget} node Node on which to add the event.
   * @param {string} evType Event type to add.
   * @param {function(!Event)} handler Event handler function.
   * @return {void}
   */function _add(node,evType,handler){let recognizer=gestures[evType],deps=recognizer.deps,name=recognizer.name,gobj=node[GESTURE_KEY];if(!gobj){node[GESTURE_KEY]=gobj={}}for(let i=0,dep,gd;i<deps.length;i++){dep=deps[i];// don't add mouse handlers on iOS because they cause gray selection overlays
if(IS_TOUCH_ONLY&&isMouseEvent(dep)&&"click"!==dep){continue}gd=gobj[dep];if(!gd){gobj[dep]=gd={_count:0}}if(0===gd._count){node.addEventListener(dep,_handleNative,PASSIVE_TOUCH(dep))}gd[name]=(gd[name]||0)+1;gd._count=(gd._count||0)+1}node.addEventListener(evType,handler);if(recognizer.touchAction){setTouchAction(node,recognizer.touchAction)}}/**
   * automate event listener removal for native events
   *
   * @private
   * @param {!EventTarget} node Node on which to remove the event.
   * @param {string} evType Event type to remove.
   * @param {function(!Event): void} handler Event handler function.
   * @return {void}
   */function _remove(node,evType,handler){let recognizer=gestures[evType],deps=recognizer.deps,name=recognizer.name,gobj=node[GESTURE_KEY];if(gobj){for(let i=0,dep,gd;i<deps.length;i++){dep=deps[i];gd=gobj[dep];if(gd&&gd[name]){gd[name]=(gd[name]||1)-1;gd._count=(gd._count||1)-1;if(0===gd._count){node.removeEventListener(dep,_handleNative,PASSIVE_TOUCH(dep))}}}}node.removeEventListener(evType,handler)}/**
   * Registers a new gesture event recognizer for adding new custom
   * gesture event types.
   *
   * @param {!GestureRecognizer} recog Gesture recognizer descriptor
   * @return {void}
   */function register$1(recog){recognizers.push(recog);for(let i=0;i<recog.emits.length;i++){gestures[recog.emits[i]]=recog}}/**
   * @private
   * @param {string} evName Event name.
   * @return {Object} Returns the gesture for the given event name.
   */function _findRecognizerByEvent(evName){for(let i=0,r;i<recognizers.length;i++){r=recognizers[i];for(let j=0,n;j<r.emits.length;j++){n=r.emits[j];if(n===evName){return r}}}return null}/**
   * Sets scrolling direction on node.
   *
   * This value is checked on first move, thus it should be called prior to
   * adding event listeners.
   *
   * @param {!EventTarget} node Node to set touch action setting on
   * @param {string} value Touch action value
   * @return {void}
   */function setTouchAction(node,value){if(HAS_NATIVE_TA&&node instanceof HTMLElement){// NOTE: add touchAction async so that events can be added in
// custom element constructors. Otherwise we run afoul of custom
// elements restriction against settings attributes (style) in the
// constructor.
microTask.run(()=>{node.style.touchAction=value})}node[TOUCH_ACTION]=value}/**
   * Dispatches an event on the `target` element of `type` with the given
   * `detail`.
   * @private
   * @param {!EventTarget} target The element on which to fire an event.
   * @param {string} type The type of event to fire.
   * @param {!Object=} detail The detail object to populate on the event.
   * @return {void}
   */function _fire(target,type,detail){let ev=new Event(type,{bubbles:!0,cancelable:!0,composed:!0});ev.detail=detail;wrap$1(/** @type {!Node} */target).dispatchEvent(ev);// forward `preventDefault` in a clean way
if(ev.defaultPrevented){let preventer=detail.preventer||detail.sourceEvent;if(preventer&&preventer.preventDefault){preventer.preventDefault()}}}/**
   * Prevents the dispatch and default action of the given event name.
   *
   * @param {string} evName Event name.
   * @return {void}
   */function prevent(evName){let recognizer=_findRecognizerByEvent(evName);if(recognizer.info){recognizer.info.prevent=!0}}/**
   * Reset the 2500ms timeout on processing mouse input after detecting touch input.
   *
   * Touch inputs create synthesized mouse inputs anywhere from 0 to 2000ms after the touch.
   * This method should only be called during testing with simulated touch inputs.
   * Calling this method in production may cause duplicate taps or other Gestures.
   *
   * @return {void}
   */function resetMouseCanceller(){if(POINTERSTATE.mouse.mouseIgnoreJob){POINTERSTATE.mouse.mouseIgnoreJob.flush()}}/* eslint-disable valid-jsdoc */register$1({name:"downup",deps:["mousedown","touchstart","touchend"],flow:{start:["mousedown","touchstart"],end:["mouseup","touchend"]},emits:["down","up"],info:{movefn:null,upfn:null},/**
   * @this {GestureRecognizer}
   * @return {void}
   */reset:function(){untrackDocument(this.info)},/**
   * @this {GestureRecognizer}
   * @param {MouseEvent} e
   * @return {void}
   */mousedown:function(e){if(!hasLeftMouseButton(e)){return}let t=_findOriginalTarget(e),self=this,movefn=function movefn(e){if(!hasLeftMouseButton(e)){downupFire("up",t,e);untrackDocument(self.info)}},upfn=function upfn(e){if(hasLeftMouseButton(e)){downupFire("up",t,e)}untrackDocument(self.info)};trackDocument(this.info,movefn,upfn);downupFire("down",t,e)},/**
   * @this {GestureRecognizer}
   * @param {TouchEvent} e
   * @return {void}
   */touchstart:function(e){downupFire("down",_findOriginalTarget(e),e.changedTouches[0],e)},/**
   * @this {GestureRecognizer}
   * @param {TouchEvent} e
   * @return {void}
   */touchend:function(e){downupFire("up",_findOriginalTarget(e),e.changedTouches[0],e)}});/**
     * @param {string} type
     * @param {EventTarget} target
     * @param {Event|Touch} event
     * @param {Event=} preventer
     * @return {void}
     */function downupFire(type,target,event,preventer){if(!target){return}_fire(target,type,{x:event.clientX,y:event.clientY,sourceEvent:event,preventer:preventer,prevent:function(e){return prevent(e)}})}register$1({name:"track",touchAction:"none",deps:["mousedown","touchstart","touchmove","touchend"],flow:{start:["mousedown","touchstart"],end:["mouseup","touchend"]},emits:["track"],info:{x:0,y:0,state:"start",started:!1,moves:[],/** @this {GestureInfo} */addMove:function(move){if(this.moves.length>TRACK_LENGTH){this.moves.shift()}this.moves.push(move)},movefn:null,upfn:null,prevent:!1},/**
   * @this {GestureRecognizer}
   * @return {void}
   */reset:function(){this.info.state="start";this.info.started=!1;this.info.moves=[];this.info.x=0;this.info.y=0;this.info.prevent=!1;untrackDocument(this.info)},/**
   * @this {GestureRecognizer}
   * @param {MouseEvent} e
   * @return {void}
   */mousedown:function(e){if(!hasLeftMouseButton(e)){return}let t=_findOriginalTarget(e),self=this,movefn=function movefn(e){let x=e.clientX,y=e.clientY;if(trackHasMovedEnough(self.info,x,y)){// first move is 'start', subsequent moves are 'move', mouseup is 'end'
self.info.state=self.info.started?"mouseup"===e.type?"end":"track":"start";if("start"===self.info.state){// if and only if tracking, always prevent tap
prevent("tap")}self.info.addMove({x:x,y:y});if(!hasLeftMouseButton(e)){// always fire "end"
self.info.state="end";untrackDocument(self.info)}if(t){trackFire(self.info,t,e)}self.info.started=!0}},upfn=function upfn(e){if(self.info.started){movefn(e)}// remove the temporary listeners
untrackDocument(self.info)};// add temporary document listeners as mouse retargets
trackDocument(this.info,movefn,upfn);this.info.x=e.clientX;this.info.y=e.clientY},/**
   * @this {GestureRecognizer}
   * @param {TouchEvent} e
   * @return {void}
   */touchstart:function(e){let ct=e.changedTouches[0];this.info.x=ct.clientX;this.info.y=ct.clientY},/**
   * @this {GestureRecognizer}
   * @param {TouchEvent} e
   * @return {void}
   */touchmove:function(e){let t=_findOriginalTarget(e),ct=e.changedTouches[0],x=ct.clientX,y=ct.clientY;if(trackHasMovedEnough(this.info,x,y)){if("start"===this.info.state){// if and only if tracking, always prevent tap
prevent("tap")}this.info.addMove({x:x,y:y});trackFire(this.info,t,ct);this.info.state="track";this.info.started=!0}},/**
   * @this {GestureRecognizer}
   * @param {TouchEvent} e
   * @return {void}
   */touchend:function(e){let t=_findOriginalTarget(e),ct=e.changedTouches[0];// only trackend if track was started and not aborted
if(this.info.started){// reset started state on up
this.info.state="end";this.info.addMove({x:ct.clientX,y:ct.clientY});trackFire(this.info,t,ct)}}});/**
     * @param {!GestureInfo} info
     * @param {number} x
     * @param {number} y
     * @return {boolean}
     */function trackHasMovedEnough(info,x,y){if(info.prevent){return!1}if(info.started){return!0}let dx=Math.abs(info.x-x),dy=Math.abs(info.y-y);return dx>=TRACK_DISTANCE||dy>=TRACK_DISTANCE}/**
   * @param {!GestureInfo} info
   * @param {?EventTarget} target
   * @param {Touch} touch
   * @return {void}
   */function trackFire(info,target,touch){if(!target){return}let secondlast=info.moves[info.moves.length-2],lastmove=info.moves[info.moves.length-1],dx=lastmove.x-info.x,dy=lastmove.y-info.y,ddx,ddy=0;if(secondlast){ddx=lastmove.x-secondlast.x;ddy=lastmove.y-secondlast.y}_fire(target,"track",{state:info.state,x:touch.clientX,y:touch.clientY,dx:dx,dy:dy,ddx:ddx,ddy:ddy,sourceEvent:touch,hover:function(){return deepTargetFind(touch.clientX,touch.clientY)}})}register$1({name:"tap",deps:["mousedown","click","touchstart","touchend"],flow:{start:["mousedown","touchstart"],end:["click","touchend"]},emits:["tap"],info:{x:NaN,y:NaN,prevent:!1},/**
   * @this {GestureRecognizer}
   * @return {void}
   */reset:function(){this.info.x=NaN;this.info.y=NaN;this.info.prevent=!1},/**
   * @this {GestureRecognizer}
   * @param {MouseEvent} e
   * @return {void}
   */mousedown:function(e){if(hasLeftMouseButton(e)){this.info.x=e.clientX;this.info.y=e.clientY}},/**
   * @this {GestureRecognizer}
   * @param {MouseEvent} e
   * @return {void}
   */click:function(e){if(hasLeftMouseButton(e)){trackForward(this.info,e)}},/**
   * @this {GestureRecognizer}
   * @param {TouchEvent} e
   * @return {void}
   */touchstart:function(e){const touch=e.changedTouches[0];this.info.x=touch.clientX;this.info.y=touch.clientY},/**
   * @this {GestureRecognizer}
   * @param {TouchEvent} e
   * @return {void}
   */touchend:function(e){trackForward(this.info,e.changedTouches[0],e)}});/**
     * @param {!GestureInfo} info
     * @param {Event | Touch} e
     * @param {Event=} preventer
     * @return {void}
     */function trackForward(info,e,preventer){let dx=Math.abs(e.clientX-info.x),dy=Math.abs(e.clientY-info.y),t=_findOriginalTarget(preventer||e);if(!t||canBeDisabled[/** @type {!HTMLElement} */t.localName]&&t.hasAttribute("disabled")){return}// dx,dy can be NaN if `click` has been simulated and there was no `down` for `start`
if(isNaN(dx)||isNaN(dy)||dx<=TAP_DISTANCE&&dy<=TAP_DISTANCE||isSyntheticClick(e)){// prevent taps from being generated if an event has canceled them
if(!info.prevent){_fire(t,"tap",{x:e.clientX,y:e.clientY,sourceEvent:e,preventer:preventer})}}}/* eslint-enable valid-jsdoc */ /** @deprecated */const findOriginalTarget=_findOriginalTarget;/** @deprecated */_exports.findOriginalTarget=findOriginalTarget;const add=addListener;/** @deprecated */_exports.add=add;const remove=removeListener;_exports.remove=remove;var gestures$1={gestures:gestures,recognizers:recognizers,deepTargetFind:deepTargetFind,addListener:addListener,removeListener:removeListener,register:register$1,setTouchAction:setTouchAction,prevent:prevent,resetMouseCanceller:resetMouseCanceller,findOriginalTarget:findOriginalTarget,add:add,remove:remove};_exports.$gestures=gestures$1;const GestureEventListeners=dedupingMixin(/**
                                                     * @template T
                                                     * @param {function(new:T)} superClass Class to apply mixin to.
                                                     * @return {function(new:T)} superClass with mixin applied.
                                                     */superClass=>{/**
   * @polymer
   * @mixinClass
   * @implements {Polymer_GestureEventListeners}
   */class GestureEventListeners extends superClass{/**
     * Add the event listener to the node if it is a gestures event.
     *
     * @param {!EventTarget} node Node to add event listener to
     * @param {string} eventName Name of event
     * @param {function(!Event):void} handler Listener function to add
     * @return {void}
     * @override
     */_addEventListenerToNode(node,eventName,handler){if(!addListener(node,eventName,handler)){super._addEventListenerToNode(node,eventName,handler)}}/**
       * Remove the event listener to the node if it is a gestures event.
       *
       * @param {!EventTarget} node Node to remove event listener from
       * @param {string} eventName Name of event
       * @param {function(!Event):void} handler Listener function to remove
       * @return {void}
       * @override
       */_removeEventListenerFromNode(node,eventName,handler){if(!removeListener(node,eventName,handler)){super._removeEventListenerFromNode(node,eventName,handler)}}}return GestureEventListeners});_exports.GestureEventListeners=GestureEventListeners;var gestureEventListeners={GestureEventListeners:GestureEventListeners};_exports.$gestureEventListeners=gestureEventListeners;const HOST_DIR=/:host\(:dir\((ltr|rtl)\)\)/g,HOST_DIR_REPLACMENT=":host([dir=\"$1\"])",EL_DIR=/([\s\w-#\.\[\]\*]*):dir\((ltr|rtl)\)/g,EL_DIR_REPLACMENT=":host([dir=\"$2\"]) $1",DIR_CHECK=/:dir\((?:ltr|rtl)\)/,SHIM_SHADOW=!!(window.ShadyDOM&&window.ShadyDOM.inUse),DIR_INSTANCES=[];/** @type {?MutationObserver} */let observer=null,DOCUMENT_DIR="";function getRTL(){DOCUMENT_DIR=document.documentElement.getAttribute("dir")}/**
   * @param {!Polymer_DirMixin} instance Instance to set RTL status on
   */function setRTL(instance){if(!instance.__autoDirOptOut){const el=/** @type {!HTMLElement} */instance;el.setAttribute("dir",DOCUMENT_DIR)}}function updateDirection(){getRTL();DOCUMENT_DIR=document.documentElement.getAttribute("dir");for(let i=0;i<DIR_INSTANCES.length;i++){setRTL(DIR_INSTANCES[i])}}function takeRecords(){if(observer&&observer.takeRecords().length){updateDirection()}}/**
   * Element class mixin that allows elements to use the `:dir` CSS Selector to
   * have text direction specific styling.
   *
   * With this mixin, any stylesheet provided in the template will transform
   * `:dir` into `:host([dir])` and sync direction with the page via the
   * element's `dir` attribute.
   *
   * Elements can opt out of the global page text direction by setting the `dir`
   * attribute directly in `ready()` or in HTML.
   *
   * Caveats:
   * - Applications must set `<html dir="ltr">` or `<html dir="rtl">` to sync
   *   direction
   * - Automatic left-to-right or right-to-left styling is sync'd with the
   *   `<html>` element only.
   * - Changing `dir` at runtime is supported.
   * - Opting out of the global direction styling is permanent
   *
   * @mixinFunction
   * @polymer
   * @appliesMixin PropertyAccessors
   */const DirMixin=dedupingMixin(base=>{if(!SHIM_SHADOW){if(!observer){getRTL();observer=new MutationObserver(updateDirection);observer.observe(document.documentElement,{attributes:!0,attributeFilter:["dir"]})}}/**
     * @constructor
     * @implements {Polymer_PropertyAccessors}
     * @private
     */const elementBase=PropertyAccessors(base);/**
                                                * @polymer
                                                * @mixinClass
                                                * @implements {Polymer_DirMixin}
                                                */class Dir extends elementBase{/**
     * @param {string} cssText .
     * @param {string} baseURI .
     * @return {string} .
     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
     */static _processStyleText(cssText,baseURI){cssText=super._processStyleText(cssText,baseURI);if(!SHIM_SHADOW&&DIR_CHECK.test(cssText)){cssText=this._replaceDirInCssText(cssText);this.__activateDir=!0}return cssText}/**
       * Replace `:dir` in the given CSS text
       *
       * @param {string} text CSS text to replace DIR
       * @return {string} Modified CSS
       */static _replaceDirInCssText(text){let replacedText=text;replacedText=replacedText.replace(HOST_DIR,HOST_DIR_REPLACMENT);replacedText=replacedText.replace(EL_DIR,EL_DIR_REPLACMENT);return replacedText}constructor(){super();/** @type {boolean} */this.__autoDirOptOut=!1}/**
       * @override
       * @suppress {invalidCasts} Closure doesn't understand that `this` is an
       *     HTMLElement
       * @return {void}
       */ready(){super.ready();this.__autoDirOptOut=/** @type {!HTMLElement} */this.hasAttribute("dir")}/**
       * @override
       * @suppress {missingProperties} If it exists on elementBase, it can be
       *   super'd
       * @return {void}
       */connectedCallback(){if(elementBase.prototype.connectedCallback){super.connectedCallback()}if(this.constructor.__activateDir){takeRecords();DIR_INSTANCES.push(this);setRTL(this)}}/**
       * @override
       * @suppress {missingProperties} If it exists on elementBase, it can be
       *   super'd
       * @return {void}
       */disconnectedCallback(){if(elementBase.prototype.disconnectedCallback){super.disconnectedCallback()}if(this.constructor.__activateDir){const idx=DIR_INSTANCES.indexOf(this);if(-1<idx){DIR_INSTANCES.splice(idx,1)}}}}Dir.__activateDir=!1;return Dir});_exports.DirMixin=DirMixin;var dirMixin={DirMixin:DirMixin};_exports.$dirMixin=dirMixin;let scheduled=!1,beforeRenderQueue=[],afterRenderQueue=[];function schedule(){scheduled=!0;// before next render
requestAnimationFrame(function(){scheduled=!1;flushQueue(beforeRenderQueue);// after the render
setTimeout(function(){runQueue(afterRenderQueue)})})}function flushQueue(queue){while(queue.length){callMethod(queue.shift())}}function runQueue(queue){for(let i=0,l=queue.length;i<l;i++){callMethod(queue.shift())}}function callMethod(info){const context=info[0],callback=info[1],args=info[2];try{callback.apply(context,args)}catch(e){setTimeout(()=>{throw e})}}/**
   * Flushes all `beforeNextRender` tasks, followed by all `afterNextRender`
   * tasks.
   *
   * @return {void}
   */function flush(){while(beforeRenderQueue.length||afterRenderQueue.length){flushQueue(beforeRenderQueue);flushQueue(afterRenderQueue)}scheduled=!1}/**
   * Enqueues a callback which will be run before the next render, at
   * `requestAnimationFrame` timing.
   *
   * This method is useful for enqueuing work that requires DOM measurement,
   * since measurement may not be reliable in custom element callbacks before
   * the first render, as well as for batching measurement tasks in general.
   *
   * Tasks in this queue may be flushed by calling `flush()`.
   *
   * @param {*} context Context object the callback function will be bound to
   * @param {function(...*):void} callback Callback function
   * @param {!Array=} args An array of arguments to call the callback function with
   * @return {void}
   */function beforeNextRender(context,callback,args){if(!scheduled){schedule()}beforeRenderQueue.push([context,callback,args])}/**
   * Enqueues a callback which will be run after the next render, equivalent
   * to one task (`setTimeout`) after the next `requestAnimationFrame`.
   *
   * This method is useful for tuning the first-render performance of an
   * element or application by deferring non-critical work until after the
   * first paint.  Typical non-render-critical work may include adding UI
   * event listeners and aria attributes.
   *
   * @param {*} context Context object the callback function will be bound to
   * @param {function(...*):void} callback Callback function
   * @param {!Array=} args An array of arguments to call the callback function with
   * @return {void}
   */function afterNextRender(context,callback,args){if(!scheduled){schedule()}afterRenderQueue.push([context,callback,args])}var renderStatus={flush:flush,beforeNextRender:beforeNextRender,afterNextRender:afterNextRender};/**
   @license
   Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */_exports.$renderStatus=renderStatus;function resolve(){document.body.removeAttribute("unresolved")}if("interactive"===document.readyState||"complete"===document.readyState){resolve()}else{window.addEventListener("DOMContentLoaded",resolve)}function newSplice(index,removed,addedCount){return{index:index,removed:removed,addedCount:addedCount}}const EDIT_LEAVE=0,EDIT_UPDATE=1,EDIT_ADD=2,EDIT_DELETE=3;// Note: This function is *based* on the computation of the Levenshtein
// "edit" distance. The one change is that "updates" are treated as two
// edits - not one. With Array splices, an update is really a delete
// followed by an add. By retaining this, we optimize for "keeping" the
// maximum array items in the original array. For example:
//
//   'xxxx123' -> '123yyyy'
//
// With 1-edit updates, the shortest path would be just to update all seven
// characters. With 2-edit updates, we delete 4, leave 3, and add 4. This
// leaves the substring '123' intact.
function calcEditDistances(current,currentStart,currentEnd,old,oldStart,oldEnd){// "Deletion" columns
let rowCount=oldEnd-oldStart+1,columnCount=currentEnd-currentStart+1,distances=Array(rowCount);// "Addition" rows. Initialize null column.
for(let i=0;i<rowCount;i++){distances[i]=Array(columnCount);distances[i][0]=i}// Initialize null row
for(let j=0;j<columnCount;j++)distances[0][j]=j;for(let i=1;i<rowCount;i++){for(let j=1;j<columnCount;j++){if(equals$1(current[currentStart+j-1],old[oldStart+i-1]))distances[i][j]=distances[i-1][j-1];else{let north=distances[i-1][j]+1,west=distances[i][j-1]+1;distances[i][j]=north<west?north:west}}}return distances}// This starts at the final weight, and walks "backward" by finding
// the minimum previous weight recursively until the origin of the weight
// matrix.
function spliceOperationsFromEditDistances(distances){let i=distances.length-1,j=distances[0].length-1,current=distances[i][j],edits=[];while(0<i||0<j){if(0==i){edits.push(EDIT_ADD);j--;continue}if(0==j){edits.push(EDIT_DELETE);i--;continue}let northWest=distances[i-1][j-1],west=distances[i-1][j],north=distances[i][j-1],min;if(west<north)min=west<northWest?west:northWest;else min=north<northWest?north:northWest;if(min==northWest){if(northWest==current){edits.push(EDIT_LEAVE)}else{edits.push(EDIT_UPDATE);current=northWest}i--;j--}else if(min==west){edits.push(EDIT_DELETE);i--;current=west}else{edits.push(EDIT_ADD);j--;current=north}}edits.reverse();return edits}/**
   * Splice Projection functions:
   *
   * A splice map is a representation of how a previous array of items
   * was transformed into a new array of items. Conceptually it is a list of
   * tuples of
   *
   *   <index, removed, addedCount>
   *
   * which are kept in ascending index order of. The tuple represents that at
   * the |index|, |removed| sequence of items were removed, and counting forward
   * from |index|, |addedCount| items were added.
   */ /**
       * Lacking individual splice mutation information, the minimal set of
       * splices can be synthesized given the previous state and final state of an
       * array. The basic approach is to calculate the edit distance matrix and
       * choose the shortest path through it.
       *
       * Complexity: O(l * p)
       *   l: The length of the current array
       *   p: The length of the old array
       *
       * @param {!Array} current The current "changed" array for which to
       * calculate splices.
       * @param {number} currentStart Starting index in the `current` array for
       * which splices are calculated.
       * @param {number} currentEnd Ending index in the `current` array for
       * which splices are calculated.
       * @param {!Array} old The original "unchanged" array to compare `current`
       * against to determine splices.
       * @param {number} oldStart Starting index in the `old` array for
       * which splices are calculated.
       * @param {number} oldEnd Ending index in the `old` array for
       * which splices are calculated.
       * @return {!Array} Returns an array of splice record objects. Each of these
       * contains: `index` the location where the splice occurred; `removed`
       * the array of removed items from this location; `addedCount` the number
       * of items added at this location.
       */function calcSplices(current,currentStart,currentEnd,old,oldStart,oldEnd){let prefixCount=0,suffixCount=0,splice,minLength=Math.min(currentEnd-currentStart,oldEnd-oldStart);if(0==currentStart&&0==oldStart)prefixCount=sharedPrefix(current,old,minLength);if(currentEnd==current.length&&oldEnd==old.length)suffixCount=sharedSuffix(current,old,minLength-prefixCount);currentStart+=prefixCount;oldStart+=prefixCount;currentEnd-=suffixCount;oldEnd-=suffixCount;if(0==currentEnd-currentStart&&0==oldEnd-oldStart)return[];if(currentStart==currentEnd){splice=newSplice(currentStart,[],0);while(oldStart<oldEnd)splice.removed.push(old[oldStart++]);return[splice]}else if(oldStart==oldEnd)return[newSplice(currentStart,[],currentEnd-currentStart)];let ops=spliceOperationsFromEditDistances(calcEditDistances(current,currentStart,currentEnd,old,oldStart,oldEnd));splice=void 0;let splices=[],index=currentStart,oldIndex=oldStart;for(let i=0;i<ops.length;i++){switch(ops[i]){case EDIT_LEAVE:if(splice){splices.push(splice);splice=void 0}index++;oldIndex++;break;case EDIT_UPDATE:if(!splice)splice=newSplice(index,[],0);splice.addedCount++;index++;splice.removed.push(old[oldIndex]);oldIndex++;break;case EDIT_ADD:if(!splice)splice=newSplice(index,[],0);splice.addedCount++;index++;break;case EDIT_DELETE:if(!splice)splice=newSplice(index,[],0);splice.removed.push(old[oldIndex]);oldIndex++;break;}}if(splice){splices.push(splice)}return splices}function sharedPrefix(current,old,searchLength){for(let i=0;i<searchLength;i++)if(!equals$1(current[i],old[i]))return i;return searchLength}function sharedSuffix(current,old,searchLength){let index1=current.length,index2=old.length,count=0;while(count<searchLength&&equals$1(current[--index1],old[--index2]))count++;return count}/**
   * Returns an array of splice records indicating the minimum edits required
   * to transform the `previous` array into the `current` array.
   *
   * Splice records are ordered by index and contain the following fields:
   * - `index`: index where edit started
   * - `removed`: array of removed items from this index
   * - `addedCount`: number of items added at this index
   *
   * This function is based on the Levenshtein "minimum edit distance"
   * algorithm. Note that updates are treated as removal followed by addition.
   *
   * The worst-case time complexity of this algorithm is `O(l * p)`
   *   l: The length of the current array
   *   p: The length of the previous array
   *
   * However, the worst-case complexity is reduced by an `O(n)` optimization
   * to detect any shared prefix & suffix between the two arrays and only
   * perform the more expensive minimum edit distance calculation over the
   * non-shared portions of the arrays.
   *
   * @function
   * @param {!Array} current The "changed" array for which splices will be
   * calculated.
   * @param {!Array} previous The "unchanged" original array to compare
   * `current` against to determine the splices.
   * @return {!Array} Returns an array of splice record objects. Each of these
   * contains: `index` the location where the splice occurred; `removed`
   * the array of removed items from this location; `addedCount` the number
   * of items added at this location.
   */function calculateSplices(current,previous){return calcSplices(current,0,current.length,previous,0,previous.length)}function equals$1(currentValue,previousValue){return currentValue===previousValue}var arraySplice={calculateSplices:calculateSplices};_exports.$arraySplice=arraySplice;function isSlot(node){return"slot"===node.localName}/**
   * Class that listens for changes (additions or removals) to
   * "flattened nodes" on a given `node`. The list of flattened nodes consists
   * of a node's children and, for any children that are `<slot>` elements,
   * the expanded flattened list of `assignedNodes`.
   * For example, if the observed node has children `<a></a><slot></slot><b></b>`
   * and the `<slot>` has one `<div>` assigned to it, then the flattened
   * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other
   * `<slot>` elements assigned to it, these are flattened as well.
   *
   * The provided `callback` is called whenever any change to this list
   * of flattened nodes occurs, where an addition or removal of a node is
   * considered a change. The `callback` is called with one argument, an object
   * containing an array of any `addedNodes` and `removedNodes`.
   *
   * Note: the callback is called asynchronous to any changes
   * at a microtask checkpoint. This is because observation is performed using
   * `MutationObserver` and the `<slot>` element's `slotchange` event which
   * are asynchronous.
   *
   * An example:
   * ```js
   * class TestSelfObserve extends PolymerElement {
   *   static get is() { return 'test-self-observe';}
   *   connectedCallback() {
   *     super.connectedCallback();
   *     this._observer = new FlattenedNodesObserver(this, (info) => {
   *       this.info = info;
   *     });
   *   }
   *   disconnectedCallback() {
   *     super.disconnectedCallback();
   *     this._observer.disconnect();
   *   }
   * }
   * customElements.define(TestSelfObserve.is, TestSelfObserve);
   * ```
   *
   * @summary Class that listens for changes (additions or removals) to
   * "flattened nodes" on a given `node`.
   * @implements {PolymerDomApi.ObserveHandle}
   */let FlattenedNodesObserver=class{/**
   * Returns the list of flattened nodes for the given `node`.
   * This list consists of a node's children and, for any children
   * that are `<slot>` elements, the expanded flattened list of `assignedNodes`.
   * For example, if the observed node has children `<a></a><slot></slot><b></b>`
   * and the `<slot>` has one `<div>` assigned to it, then the flattened
   * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other
   * `<slot>` elements assigned to it, these are flattened as well.
   *
   * @param {!HTMLElement|!HTMLSlotElement} node The node for which to
   *      return the list of flattened nodes.
   * @return {!Array<!Node>} The list of flattened nodes for the given `node`.
   * @nocollapse See https://github.com/google/closure-compiler/issues/2763
   */ // eslint-disable-next-line
static getFlattenedNodes(node){const wrapped=wrap$1(node);if(isSlot(node)){node=/** @type {!HTMLSlotElement} */node;// eslint-disable-line no-self-assign
return wrapped.assignedNodes({flatten:!0})}else{return Array.from(wrapped.childNodes).map(node=>{if(isSlot(node)){node=/** @type {!HTMLSlotElement} */node;// eslint-disable-line no-self-assign
return wrap$1(node).assignedNodes({flatten:!0})}else{return[node]}}).reduce((a,b)=>a.concat(b),[])}}/**
     * @param {!HTMLElement} target Node on which to listen for changes.
     * @param {?function(this: Element, { target: !HTMLElement, addedNodes: !Array<!Element>, removedNodes: !Array<!Element> }):void} callback Function called when there are additions
     * or removals from the target's list of flattened nodes.
     */ // eslint-disable-next-line
constructor(target,callback){/**
     * @type {MutationObserver}
     * @private
     */this._shadyChildrenObserver=null;/**
                                            * @type {MutationObserver}
                                            * @private
                                            */this._nativeChildrenObserver=null;this._connected=!1;/**
                              * @type {!HTMLElement}
                              * @private
                              */this._target=target;this.callback=callback;this._effectiveNodes=[];this._observer=null;this._scheduled=!1;/**
                              * @type {function()}
                              * @private
                              */this._boundSchedule=()=>{this._schedule()};this.connect();this._schedule()}/**
     * Activates an observer. This method is automatically called when
     * a `FlattenedNodesObserver` is created. It should only be called to
     * re-activate an observer that has been deactivated via the `disconnect` method.
     *
     * @return {void}
     */connect(){if(isSlot(this._target)){this._listenSlots([this._target])}else if(wrap$1(this._target).children){this._listenSlots(/** @type {!NodeList<!Node>} */wrap$1(this._target).children);if(window.ShadyDOM){this._shadyChildrenObserver=ShadyDOM.observeChildren(this._target,mutations=>{this._processMutations(mutations)})}else{this._nativeChildrenObserver=new MutationObserver(mutations=>{this._processMutations(mutations)});this._nativeChildrenObserver.observe(this._target,{childList:!0})}}this._connected=!0}/**
     * Deactivates the flattened nodes observer. After calling this method
     * the observer callback will not be called when changes to flattened nodes
     * occur. The `connect` method may be subsequently called to reactivate
     * the observer.
     *
     * @return {void}
     * @override
     */disconnect(){if(isSlot(this._target)){this._unlistenSlots([this._target])}else if(wrap$1(this._target).children){this._unlistenSlots(/** @type {!NodeList<!Node>} */wrap$1(this._target).children);if(window.ShadyDOM&&this._shadyChildrenObserver){ShadyDOM.unobserveChildren(this._shadyChildrenObserver);this._shadyChildrenObserver=null}else if(this._nativeChildrenObserver){this._nativeChildrenObserver.disconnect();this._nativeChildrenObserver=null}}this._connected=!1}/**
     * @return {void}
     * @private
     */_schedule(){if(!this._scheduled){this._scheduled=!0;microTask.run(()=>this.flush())}}/**
     * @param {Array<MutationRecord>} mutations Mutations signaled by the mutation observer
     * @return {void}
     * @private
     */_processMutations(mutations){this._processSlotMutations(mutations);this.flush()}/**
     * @param {Array<MutationRecord>} mutations Mutations signaled by the mutation observer
     * @return {void}
     * @private
     */_processSlotMutations(mutations){if(mutations){for(let i=0,mutation;i<mutations.length;i++){mutation=mutations[i];if(mutation.addedNodes){this._listenSlots(mutation.addedNodes)}if(mutation.removedNodes){this._unlistenSlots(mutation.removedNodes)}}}}/**
     * Flushes the observer causing any pending changes to be immediately
     * delivered the observer callback. By default these changes are delivered
     * asynchronously at the next microtask checkpoint.
     *
     * @return {boolean} Returns true if any pending changes caused the observer
     * callback to run.
     */flush(){if(!this._connected){return!1}if(window.ShadyDOM){ShadyDOM.flush()}if(this._nativeChildrenObserver){this._processSlotMutations(this._nativeChildrenObserver.takeRecords())}else if(this._shadyChildrenObserver){this._processSlotMutations(this._shadyChildrenObserver.takeRecords())}this._scheduled=!1;let info={target:this._target,addedNodes:[],removedNodes:[]},newNodes=this.constructor.getFlattenedNodes(this._target),splices=calculateSplices(newNodes,this._effectiveNodes);// process removals
for(let i=0,s;i<splices.length&&(s=splices[i]);i++){for(let j=0,n;j<s.removed.length&&(n=s.removed[j]);j++){info.removedNodes.push(n)}}// process adds
for(let i=0,s;i<splices.length&&(s=splices[i]);i++){for(let j=s.index;j<s.index+s.addedCount;j++){info.addedNodes.push(newNodes[j])}}// update cache
this._effectiveNodes=newNodes;let didFlush=!1;if(info.addedNodes.length||info.removedNodes.length){didFlush=!0;this.callback.call(this._target,info)}return didFlush}/**
     * @param {!Array<!Node>|!NodeList<!Node>} nodeList Nodes that could change
     * @return {void}
     * @private
     */_listenSlots(nodeList){for(let i=0,n;i<nodeList.length;i++){n=nodeList[i];if(isSlot(n)){n.addEventListener("slotchange",this._boundSchedule)}}}/**
     * @param {!Array<!Node>|!NodeList<!Node>} nodeList Nodes that could change
     * @return {void}
     * @private
     */_unlistenSlots(nodeList){for(let i=0,n;i<nodeList.length;i++){n=nodeList[i];if(isSlot(n)){n.removeEventListener("slotchange",this._boundSchedule)}}}};_exports.FlattenedNodesObserver=FlattenedNodesObserver;var flattenedNodesObserver={FlattenedNodesObserver:FlattenedNodesObserver};/**
    * Forces several classes of asynchronously queued tasks to flush:
    * - Debouncers added via `enqueueDebouncer`
    * - ShadyDOM distribution
    *
    * @return {void}
    */_exports.$flattenedNodesObserver=flattenedNodesObserver;const flush$1=function(){let shadyDOM,debouncers;do{shadyDOM=window.ShadyDOM&&ShadyDOM.flush();if(window.ShadyCSS&&window.ShadyCSS.ScopingShim){window.ShadyCSS.ScopingShim.flush()}debouncers=flushDebouncers()}while(shadyDOM||debouncers)};_exports.flush$1=_exports.flush=flush$1;var flush$2={flush:flush$1,enqueueDebouncer:enqueueDebouncer};/* eslint-enable no-unused-vars */_exports.$flush=flush$2;const p$1=Element.prototype,normalizedMatchesSelector=p$1.matches||p$1.matchesSelector||p$1.mozMatchesSelector||p$1.msMatchesSelector||p$1.oMatchesSelector||p$1.webkitMatchesSelector,matchesSelector=function(node,selector){return normalizedMatchesSelector.call(node,selector)};/**
                               * @const {function(this:Node, string): boolean}
                               */_exports.matchesSelector=matchesSelector;/**
    * Node API wrapper class returned from `Polymer.dom.(target)` when
    * `target` is a `Node`.
    * @implements {PolymerDomApi}
    * @unrestricted
    */class DomApiNative{/**
   * @param {Node} node Node for which to create a Polymer.dom helper object.
   */constructor(node){this.node=node}/**
     * Returns an instance of `FlattenedNodesObserver` that
     * listens for node changes on this element.
     *
     * @param {function(this:HTMLElement, { target: !HTMLElement, addedNodes: !Array<!Element>, removedNodes: !Array<!Element> }):void} callback Called when direct or distributed children
     *   of this element changes
     * @return {!PolymerDomApi.ObserveHandle} Observer instance
     * @override
     */observeNodes(callback){return new FlattenedNodesObserver(/** @type {!HTMLElement} */this.node,callback)}/**
     * Disconnects an observer previously created via `observeNodes`
     *
     * @param {!PolymerDomApi.ObserveHandle} observerHandle Observer instance
     *   to disconnect.
     * @return {void}
     * @override
     */unobserveNodes(observerHandle){observerHandle.disconnect()}/**
     * Provided as a backwards-compatible API only.  This method does nothing.
     * @return {void}
     */notifyObserver(){}/**
                       * Returns true if the provided node is contained with this element's
                       * light-DOM children or shadow root, including any nested shadow roots
                       * of children therein.
                       *
                       * @param {Node} node Node to test
                       * @return {boolean} Returns true if the given `node` is contained within
                       *   this element's light or shadow DOM.
                       * @override
                       */deepContains(node){if(wrap$1(this.node).contains(node)){return!0}let n=node,doc=node.ownerDocument;// walk from node to `this` or `document`
while(n&&n!==doc&&n!==this.node){// use logical parentnode, or native ShadowRoot host
n=wrap$1(n).parentNode||wrap$1(n).host}return n===this.node}/**
     * Returns the root node of this node.  Equivalent to `getRootNode()`.
     *
     * @return {Node} Top most element in the dom tree in which the node
     * exists. If the node is connected to a document this is either a
     * shadowRoot or the document; otherwise, it may be the node
     * itself or a node or document fragment containing it.
     * @override
     */getOwnerRoot(){return wrap$1(this.node).getRootNode()}/**
     * For slot elements, returns the nodes assigned to the slot; otherwise
     * an empty array. It is equivalent to `<slot>.addignedNodes({flatten:true})`.
     *
     * @return {!Array<!Node>} Array of assigned nodes
     * @override
     */getDistributedNodes(){return"slot"===this.node.localName?wrap$1(this.node).assignedNodes({flatten:!0}):[]}/**
     * Returns an array of all slots this element was distributed to.
     *
     * @return {!Array<!HTMLSlotElement>} Description
     * @override
     */getDestinationInsertionPoints(){let ip$=[],n=wrap$1(this.node).assignedSlot;while(n){ip$.push(n);n=wrap$1(n).assignedSlot}return ip$}/**
     * Calls `importNode` on the `ownerDocument` for this node.
     *
     * @param {!Node} node Node to import
     * @param {boolean} deep True if the node should be cloned deeply during
     *   import
     * @return {Node} Clone of given node imported to this owner document
     */importNode(node,deep){let doc=this.node instanceof Document?this.node:this.node.ownerDocument;return wrap$1(doc).importNode(node,deep)}/**
     * @return {!Array<!Node>} Returns a flattened list of all child nodes and
     * nodes assigned to child slots.
     * @override
     */getEffectiveChildNodes(){return FlattenedNodesObserver.getFlattenedNodes(/** @type {!HTMLElement} */this.node)}/**
     * Returns a filtered list of flattened child elements for this element based
     * on the given selector.
     *
     * @param {string} selector Selector to filter nodes against
     * @return {!Array<!HTMLElement>} List of flattened child elements
     * @override
     */queryDistributedElements(selector){let c$=this.getEffectiveChildNodes(),list=[];for(let i=0,l=c$.length,c;i<l&&(c=c$[i]);i++){if(c.nodeType===Node.ELEMENT_NODE&&matchesSelector(c,selector)){list.push(c)}}return list}/**
     * For shadow roots, returns the currently focused element within this
     * shadow root.
     *
     * return {Node|undefined} Currently focused element
     * @override
     */get activeElement(){let node=this.node;return node._activeElement!==void 0?node._activeElement:node.activeElement}}function forwardMethods(proto,methods){for(let i=0,method;i<methods.length;i++){method=methods[i];/* eslint-disable valid-jsdoc */proto[method]=/** @this {DomApiNative} */function(){return this.node[method].apply(this.node,arguments)};/* eslint-enable */}}function forwardReadOnlyProperties(proto,properties){for(let i=0,name;i<properties.length;i++){name=properties[i];Object.defineProperty(proto,name,{get:function(){const domApi=/** @type {DomApiNative} */this;return domApi.node[name]},configurable:!0})}}function forwardProperties(proto,properties){for(let i=0,name;i<properties.length;i++){name=properties[i];Object.defineProperty(proto,name,{/**
       * @this {DomApiNative}
       * @return {*} .
       */get:function(){return this.node[name]},/**
       * @this {DomApiNative}
       * @param {*} value .
       */set:function(value){this.node[name]=value},configurable:!0})}}/**
   * Event API wrapper class returned from `dom.(target)` when
   * `target` is an `Event`.
   */class EventApi{constructor(event){this.event=event}/**
     * Returns the first node on the `composedPath` of this event.
     *
     * @return {!EventTarget} The node this event was dispatched to
     */get rootTarget(){return this.path[0]}/**
     * Returns the local (re-targeted) target for this event.
     *
     * @return {!EventTarget} The local (re-targeted) target for this event.
     */get localTarget(){return this.event.target}/**
     * Returns the `composedPath` for this event.
     * @return {!Array<!EventTarget>} The nodes this event propagated through
     */get path(){return this.event.composedPath()}}/**
   * @function
   * @param {boolean=} deep
   * @return {!Node}
   */_exports.EventApi=EventApi;DomApiNative.prototype.cloneNode;/**
                                   * @function
                                   * @param {!Node} node
                                   * @return {!Node}
                                   */DomApiNative.prototype.appendChild;/**
                                     * @function
                                     * @param {!Node} newChild
                                     * @param {Node} refChild
                                     * @return {!Node}
                                     */DomApiNative.prototype.insertBefore;/**
                                      * @function
                                      * @param {!Node} node
                                      * @return {!Node}
                                      */DomApiNative.prototype.removeChild;/**
                                     * @function
                                     * @param {!Node} oldChild
                                     * @param {!Node} newChild
                                     * @return {!Node}
                                     */DomApiNative.prototype.replaceChild;/**
                                      * @function
                                      * @param {string} name
                                      * @param {string} value
                                      * @return {void}
                                      */DomApiNative.prototype.setAttribute;/**
                                      * @function
                                      * @param {string} name
                                      * @return {void}
                                      */DomApiNative.prototype.removeAttribute;/**
                                         * @function
                                         * @param {string} selector
                                         * @return {?Element}
                                         */DomApiNative.prototype.querySelector;/**
                                       * @function
                                       * @param {string} selector
                                       * @return {!NodeList<!Element>}
                                       */DomApiNative.prototype.querySelectorAll;/** @type {?Node} */DomApiNative.prototype.parentNode;/** @type {?Node} */DomApiNative.prototype.firstChild;/** @type {?Node} */DomApiNative.prototype.lastChild;/** @type {?Node} */DomApiNative.prototype.nextSibling;/** @type {?Node} */DomApiNative.prototype.previousSibling;/** @type {?HTMLElement} */DomApiNative.prototype.firstElementChild;/** @type {?HTMLElement} */DomApiNative.prototype.lastElementChild;/** @type {?HTMLElement} */DomApiNative.prototype.nextElementSibling;/** @type {?HTMLElement} */DomApiNative.prototype.previousElementSibling;/** @type {!Array<!Node>} */DomApiNative.prototype.childNodes;/** @type {!Array<!HTMLElement>} */DomApiNative.prototype.children;/** @type {?DOMTokenList} */DomApiNative.prototype.classList;/** @type {string} */DomApiNative.prototype.textContent;/** @type {string} */DomApiNative.prototype.innerHTML;let DomApiImpl=DomApiNative;if(window.ShadyDOM&&window.ShadyDOM.inUse&&window.ShadyDOM.noPatch&&window.ShadyDOM.Wrapper){/**
   * @private
   * @extends {HTMLElement}
   */class Wrapper extends window.ShadyDOM.Wrapper{}// copy bespoke API onto wrapper
Object.getOwnPropertyNames(DomApiNative.prototype).forEach(prop=>{if("activeElement"!=prop){Wrapper.prototype[prop]=DomApiNative.prototype[prop]}});// Note, `classList` is here only for legacy compatibility since it does not
// trigger distribution in v1 Shadow DOM.
forwardReadOnlyProperties(Wrapper.prototype,["classList"]);DomApiImpl=Wrapper;Object.defineProperties(EventApi.prototype,{localTarget:{get(){return this.event.currentTarget},configurable:!0},path:{get(){return window.ShadyDOM.composedPath(this.event)},configurable:!0}})}else{// Methods that can provoke distribution or must return the logical, not
// composed tree.
forwardMethods(DomApiNative.prototype,["cloneNode","appendChild","insertBefore","removeChild","replaceChild","setAttribute","removeAttribute","querySelector","querySelectorAll"]);// Properties that should return the logical, not composed tree. Note, `classList`
// is here only for legacy compatibility since it does not trigger distribution
// in v1 Shadow DOM.
forwardReadOnlyProperties(DomApiNative.prototype,["parentNode","firstChild","lastChild","nextSibling","previousSibling","firstElementChild","lastElementChild","nextElementSibling","previousElementSibling","childNodes","children","classList"]);forwardProperties(DomApiNative.prototype,["textContent","innerHTML"])}const DomApi=DomApiImpl;/**
                                   * Legacy DOM and Event manipulation API wrapper factory used to abstract
                                   * differences between native Shadow DOM and "Shady DOM" when polyfilling on
                                   * older browsers.
                                   *
                                   * Note that in Polymer 2.x use of `Polymer.dom` is no longer required and
                                   * in the majority of cases simply facades directly to the standard native
                                   * API.
                                   *
                                   * @summary Legacy DOM and Event manipulation API wrapper factory used to
                                   * abstract differences between native Shadow DOM and "Shady DOM."
                                   * @param {(Node|Event|DomApiNative|EventApi)=} obj Node or event to operate on
                                   * @return {!DomApiNative|!EventApi} Wrapper providing either node API or event API
                                   */_exports.DomApi=DomApi;const dom=function(obj){obj=obj||document;if(obj instanceof DomApiImpl){return(/** @type {!DomApi} */obj)}if(obj instanceof EventApi){return(/** @type {!EventApi} */obj)}let helper=obj.__domApi;if(!helper){if(obj instanceof Event){helper=new EventApi(obj)}else{helper=new DomApiImpl(/** @type {Node} */obj)}obj.__domApi=helper}return helper};_exports.dom=dom;var polymer_dom={matchesSelector:matchesSelector,EventApi:EventApi,DomApi:DomApi,dom:dom,flush:flush$1,addDebouncer:enqueueDebouncer};_exports.$polymerDom=polymer_dom;const bundledImportMeta$1=babelHelpers.objectSpread({},meta,{url:new URL("../../node_modules/%40polymer/polymer/lib/legacy/legacy-element-mixin.js",meta.url).href});let styleInterface=window.ShadyCSS;/**
                                       * Element class mixin that provides Polymer's "legacy" API intended to be
                                       * backward-compatible to the greatest extent possible with the API
                                       * found on the Polymer 1.x `Polymer.Base` prototype applied to all elements
                                       * defined using the `Polymer({...})` function.
                                       *
                                       * @mixinFunction
                                       * @polymer
                                       * @appliesMixin ElementMixin
                                       * @appliesMixin GestureEventListeners
                                       * @property isAttached {boolean} Set to `true` in this element's
                                       *   `connectedCallback` and `false` in `disconnectedCallback`
                                       * @summary Element class mixin that provides Polymer's "legacy" API
                                       */const LegacyElementMixin=dedupingMixin(base=>{/**
   * @constructor
   * @implements {Polymer_ElementMixin}
   * @implements {Polymer_GestureEventListeners}
   * @implements {Polymer_DirMixin}
   * @extends {HTMLElement}
   * @private
   */const legacyElementBase=DirMixin(GestureEventListeners(ElementMixin(base))),DIRECTION_MAP={x:"pan-x",y:"pan-y",none:"none",all:"auto"};/**
                                                                                     * Map of simple names to touch action names
                                                                                     * @dict
                                                                                     */ /**
      * @polymer
      * @mixinClass
      * @extends {legacyElementBase}
      * @implements {Polymer_LegacyElementMixin}
      * @unrestricted
      */class LegacyElement extends legacyElementBase{constructor(){super();/** @type {boolean} */this.isAttached;/** @type {?WeakMap<!Element, !Object<string, !Function>>} */this.__boundListeners;/** @type {?Object<string, ?Function>} */this._debouncers}/**
       * Forwards `importMeta` from the prototype (i.e. from the info object
       * passed to `Polymer({...})`) to the static API.
       *
       * @return {!Object} The `import.meta` object set on the prototype
       * @suppress {missingProperties} `this` is always in the instance in
       *  closure for some reason even in a static method, rather than the class
       */static get importMeta(){return this.prototype.importMeta}/**
       * Legacy callback called during the `constructor`, for overriding
       * by the user.
       * @override
       * @return {void}
       */created(){}/**
                  * Provides an implementation of `connectedCallback`
                  * which adds Polymer legacy API's `attached` method.
                  * @return {void}
                  * @override
                  */connectedCallback(){super.connectedCallback();this.isAttached=!0;this.attached()}/**
       * Legacy callback called during `connectedCallback`, for overriding
       * by the user.
       * @override
       * @return {void}
       */attached(){}/**
                   * Provides an implementation of `disconnectedCallback`
                   * which adds Polymer legacy API's `detached` method.
                   * @return {void}
                   * @override
                   */disconnectedCallback(){super.disconnectedCallback();this.isAttached=!1;this.detached()}/**
       * Legacy callback called during `disconnectedCallback`, for overriding
       * by the user.
       * @override
       * @return {void}
       */detached(){}/**
                   * Provides an override implementation of `attributeChangedCallback`
                   * which adds the Polymer legacy API's `attributeChanged` method.
                   * @param {string} name Name of attribute.
                   * @param {?string} old Old value of attribute.
                   * @param {?string} value Current value of attribute.
                   * @param {?string} namespace Attribute namespace.
                   * @return {void}
                   * @override
                   */attributeChangedCallback(name,old,value,namespace){if(old!==value){super.attributeChangedCallback(name,old,value,namespace);this.attributeChanged(name,old,value)}}/**
       * Legacy callback called during `attributeChangedChallback`, for overriding
       * by the user.
       * @param {string} name Name of attribute.
       * @param {?string} old Old value of attribute.
       * @param {?string} value Current value of attribute.
       * @return {void}
       * @override
       */attributeChanged(name,old,value){}// eslint-disable-line no-unused-vars
/**
     * Overrides the default `Polymer.PropertyEffects` implementation to
     * add support for class initialization via the `_registered` callback.
     * This is called only when the first instance of the element is created.
     *
     * @return {void}
     * @override
     * @suppress {invalidCasts}
     */_initializeProperties(){let proto=Object.getPrototypeOf(this);if(!proto.hasOwnProperty("__hasRegisterFinished")){this._registered();// backstop in case the `_registered` implementation does not set this
proto.__hasRegisterFinished=!0}super._initializeProperties();this.root=/** @type {HTMLElement} */this;this.created();// Ensure listeners are applied immediately so that they are
// added before declarative event listeners. This allows an element to
// decorate itself via an event prior to any declarative listeners
// seeing the event. Note, this ensures compatibility with 1.x ordering.
this._applyListeners()}/**
       * Called automatically when an element is initializing.
       * Users may override this method to perform class registration time
       * work. The implementation should ensure the work is performed
       * only once for the class.
       * @protected
       * @return {void}
       * @override
       */_registered(){}/**
                      * Overrides the default `Polymer.PropertyEffects` implementation to
                      * add support for installing `hostAttributes` and `listeners`.
                      *
                      * @return {void}
                      * @override
                      */ready(){this._ensureAttributes();super.ready()}/**
       * Ensures an element has required attributes. Called when the element
       * is being readied via `ready`. Users should override to set the
       * element's required attributes. The implementation should be sure
       * to check and not override existing attributes added by
       * the user of the element. Typically, setting attributes should be left
       * to the element user and not done here; reasonable exceptions include
       * setting aria roles and focusability.
       * @protected
       * @return {void}
       * @override
       */_ensureAttributes(){}/**
                            * Adds element event listeners. Called when the element
                            * is being readied via `ready`. Users should override to
                            * add any required element event listeners.
                            * In performance critical elements, the work done here should be kept
                            * to a minimum since it is done before the element is rendered. In
                            * these elements, consider adding listeners asynchronously so as not to
                            * block render.
                            * @protected
                            * @return {void}
                            * @override
                            */_applyListeners(){}/**
                          * Converts a typed JavaScript value to a string.
                          *
                          * Note this method is provided as backward-compatible legacy API
                          * only.  It is not directly called by any Polymer features. To customize
                          * how properties are serialized to attributes for attribute bindings and
                          * `reflectToAttribute: true` properties as well as this method, override
                          * the `_serializeValue` method provided by `Polymer.PropertyAccessors`.
                          *
                          * @param {*} value Value to deserialize
                          * @return {string | undefined} Serialized value
                          * @override
                          */serialize(value){return this._serializeValue(value)}/**
       * Converts a string to a typed JavaScript value.
       *
       * Note this method is provided as backward-compatible legacy API
       * only.  It is not directly called by any Polymer features.  To customize
       * how attributes are deserialized to properties for in
       * `attributeChangedCallback`, override `_deserializeValue` method
       * provided by `Polymer.PropertyAccessors`.
       *
       * @param {string} value String to deserialize
       * @param {*} type Type to deserialize the string to
       * @return {*} Returns the deserialized value in the `type` given.
       * @override
       */deserialize(value,type){return this._deserializeValue(value,type)}/**
       * Serializes a property to its associated attribute.
       *
       * Note this method is provided as backward-compatible legacy API
       * only.  It is not directly called by any Polymer features.
       *
       * @param {string} property Property name to reflect.
       * @param {string=} attribute Attribute name to reflect.
       * @param {*=} value Property value to reflect.
       * @return {void}
       * @override
       */reflectPropertyToAttribute(property,attribute,value){this._propertyToAttribute(property,attribute,value)}/**
       * Sets a typed value to an HTML attribute on a node.
       *
       * Note this method is provided as backward-compatible legacy API
       * only.  It is not directly called by any Polymer features.
       *
       * @param {*} value Value to serialize.
       * @param {string} attribute Attribute name to serialize to.
       * @param {Element} node Element to set attribute to.
       * @return {void}
       * @override
       */serializeValueToAttribute(value,attribute,node){this._valueToNodeAttribute(/** @type {Element} */node||this,value,attribute)}/**
       * Copies own properties (including accessor descriptors) from a source
       * object to a target object.
       *
       * @param {Object} prototype Target object to copy properties to.
       * @param {Object} api Source object to copy properties from.
       * @return {Object} prototype object that was passed as first argument.
       * @override
       */extend(prototype,api){if(!(prototype&&api)){return prototype||api}let n$=Object.getOwnPropertyNames(api);for(let i=0,n,pd;i<n$.length&&(n=n$[i]);i++){pd=Object.getOwnPropertyDescriptor(api,n);if(pd){Object.defineProperty(prototype,n,pd)}}return prototype}/**
       * Copies props from a source object to a target object.
       *
       * Note, this method uses a simple `for...in` strategy for enumerating
       * properties.  To ensure only `ownProperties` are copied from source
       * to target and that accessor implementations are copied, use `extend`.
       *
       * @param {!Object} target Target object to copy properties to.
       * @param {!Object} source Source object to copy properties from.
       * @return {!Object} Target object that was passed as first argument.
       * @override
       */mixin(target,source){for(let i in source){target[i]=source[i]}return target}/**
       * Sets the prototype of an object.
       *
       * Note this method is provided as backward-compatible legacy API
       * only.  It is not directly called by any Polymer features.
       * @param {Object} object The object on which to set the prototype.
       * @param {Object} prototype The prototype that will be set on the given
       * `object`.
       * @return {Object} Returns the given `object` with its prototype set
       * to the given `prototype` object.
       * @override
       */chainObject(object,prototype){if(object&&prototype&&object!==prototype){object.__proto__=prototype}return object}/* **** Begin Template **** */ /**
                                      * Calls `importNode` on the `content` of the `template` specified and
                                      * returns a document fragment containing the imported content.
                                      *
                                      * @param {HTMLTemplateElement} template HTML template element to instance.
                                      * @return {!DocumentFragment} Document fragment containing the imported
                                      *   template content.
                                      * @override
                                      * @suppress {missingProperties} go/missingfnprops
                                      */instanceTemplate(template){let content=this.constructor._contentForTemplate(template),dom=/** @type {!DocumentFragment} */document.importNode(content,!0);return dom}/* **** Begin Events **** */ /**
                                    * Dispatches a custom event with an optional detail value.
                                    *
                                    * @param {string} type Name of event type.
                                    * @param {*=} detail Detail value containing event-specific
                                    *   payload.
                                    * @param {{ bubbles: (boolean|undefined), cancelable: (boolean|undefined),
                                    *     composed: (boolean|undefined) }=}
                                    *  options Object specifying options.  These may include:
                                    *  `bubbles` (boolean, defaults to `true`),
                                    *  `cancelable` (boolean, defaults to false), and
                                    *  `node` on which to fire the event (HTMLElement, defaults to `this`).
                                    * @return {!Event} The new event that was fired.
                                    * @override
                                    */fire(type,detail,options){options=options||{};detail=null===detail||detail===void 0?{}:detail;let event=new Event(type,{bubbles:options.bubbles===void 0?!0:options.bubbles,cancelable:!!options.cancelable,composed:options.composed===void 0?!0:options.composed});event.detail=detail;let node=options.node||this;wrap$1(node).dispatchEvent(event);return event}/**
       * Convenience method to add an event listener on a given element,
       * late bound to a named method on this element.
       *
       * @param {?EventTarget} node Element to add event listener to.
       * @param {string} eventName Name of event to listen for.
       * @param {string} methodName Name of handler method on `this` to call.
       * @return {void}
       * @override
       */listen(node,eventName,methodName){node=/** @type {!EventTarget} */node||this;let hbl=this.__boundListeners||(this.__boundListeners=new WeakMap),bl=hbl.get(node);if(!bl){bl={};hbl.set(node,bl)}let key=eventName+methodName;if(!bl[key]){bl[key]=this._addMethodEventListenerToNode(/** @type {!Node} */node,eventName,methodName,this)}}/**
       * Convenience method to remove an event listener from a given element,
       * late bound to a named method on this element.
       *
       * @param {?EventTarget} node Element to remove event listener from.
       * @param {string} eventName Name of event to stop listening to.
       * @param {string} methodName Name of handler method on `this` to not call
       anymore.
       * @return {void}
       * @override
       */unlisten(node,eventName,methodName){node=/** @type {!EventTarget} */node||this;let bl=this.__boundListeners&&this.__boundListeners.get(/** @type {!Element} */node),key=eventName+methodName,handler=bl&&bl[key];if(handler){this._removeEventListenerFromNode(/** @type {!Node} */node,eventName,handler);bl[key]=/** @type {?} */null}}/**
       * Override scrolling behavior to all direction, one direction, or none.
       *
       * Valid scroll directions:
       *   - 'all': scroll in any direction
       *   - 'x': scroll only in the 'x' direction
       *   - 'y': scroll only in the 'y' direction
       *   - 'none': disable scrolling for this node
       *
       * @param {string=} direction Direction to allow scrolling
       * Defaults to `all`.
       * @param {Element=} node Element to apply scroll direction setting.
       * Defaults to `this`.
       * @return {void}
       * @override
       */setScrollDirection(direction,node){setTouchAction(/** @type {!Element} */node||this,DIRECTION_MAP[direction]||"auto")}/* **** End Events **** */ /**
                                  * Convenience method to run `querySelector` on this local DOM scope.
                                  *
                                  * This function calls `Polymer.dom(this.root).querySelector(slctr)`.
                                  *
                                  * @param {string} slctr Selector to run on this local DOM scope
                                  * @return {Element} Element found by the selector, or null if not found.
                                  * @override
                                  */$$(slctr){// Note, no need to `wrap` this because root is always patched
return this.root.querySelector(slctr)}/**
       * Return the element whose local dom within which this element
       * is contained. This is a shorthand for
       * `this.getRootNode().host`.
       * @this {Element}
       */get domHost(){let root=wrap$1(this).getRootNode();return root instanceof DocumentFragment?/** @type {ShadowRoot} */root.host:root}/**
       * Force this element to distribute its children to its local dom.
       * This should not be necessary as of Polymer 2.0.2 and is provided only
       * for backwards compatibility.
       * @return {void}
       * @override
       */distributeContent(){const thisEl=/** @type {Element} */this,domApi=/** @type {PolymerDomApi} */dom(thisEl);if(window.ShadyDOM&&domApi.shadowRoot){ShadyDOM.flush()}}/**
       * Returns a list of nodes that are the effective childNodes. The effective
       * childNodes list is the same as the element's childNodes except that
       * any `<content>` elements are replaced with the list of nodes distributed
       * to the `<content>`, the result of its `getDistributedNodes` method.
       * @return {!Array<!Node>} List of effective child nodes.
       * @suppress {invalidCasts} LegacyElementMixin must be applied to an
       *     HTMLElement
       * @override
       */getEffectiveChildNodes(){const thisEl=/** @type {Element} */this,domApi=/** @type {PolymerDomApi} */dom(thisEl);return domApi.getEffectiveChildNodes()}/**
       * Returns a list of nodes distributed within this element that match
       * `selector`. These can be dom children or elements distributed to
       * children that are insertion points.
       * @param {string} selector Selector to run.
       * @return {!Array<!Node>} List of distributed elements that match selector.
       * @suppress {invalidCasts} LegacyElementMixin must be applied to an
       * HTMLElement
       * @override
       */queryDistributedElements(selector){const thisEl=/** @type {Element} */this,domApi=/** @type {PolymerDomApi} */dom(thisEl);return domApi.queryDistributedElements(selector)}/**
       * Returns a list of elements that are the effective children. The effective
       * children list is the same as the element's children except that
       * any `<content>` elements are replaced with the list of elements
       * distributed to the `<content>`.
       *
       * @return {!Array<!Node>} List of effective children.
       * @override
       */getEffectiveChildren(){let list=this.getEffectiveChildNodes();return list.filter(function(/** @type {!Node} */n){return n.nodeType===Node.ELEMENT_NODE})}/**
       * Returns a string of text content that is the concatenation of the
       * text content's of the element's effective childNodes (the elements
       * returned by <a href="#getEffectiveChildNodes>getEffectiveChildNodes</a>.
       *
       * @return {string} List of effective children.
       * @override
       */getEffectiveTextContent(){let cn=this.getEffectiveChildNodes(),tc=[];for(let i=0,c;c=cn[i];i++){if(c.nodeType!==Node.COMMENT_NODE){tc.push(c.textContent)}}return tc.join("")}/**
       * Returns the first effective childNode within this element that
       * match `selector`. These can be dom child nodes or elements distributed
       * to children that are insertion points.
       * @param {string} selector Selector to run.
       * @return {Node} First effective child node that matches selector.
       * @override
       */queryEffectiveChildren(selector){let e$=this.queryDistributedElements(selector);return e$&&e$[0]}/**
       * Returns a list of effective childNodes within this element that
       * match `selector`. These can be dom child nodes or elements distributed
       * to children that are insertion points.
       * @param {string} selector Selector to run.
       * @return {!Array<!Node>} List of effective child nodes that match
       *     selector.
       * @override
       */queryAllEffectiveChildren(selector){return this.queryDistributedElements(selector)}/**
       * Returns a list of nodes distributed to this element's `<slot>`.
       *
       * If this element contains more than one `<slot>` in its local DOM,
       * an optional selector may be passed to choose the desired content.
       *
       * @param {string=} slctr CSS selector to choose the desired
       *   `<slot>`.  Defaults to `content`.
       * @return {!Array<!Node>} List of distributed nodes for the `<slot>`.
       * @override
       */getContentChildNodes(slctr){// Note, no need to `wrap` this because root is always
let content=this.root.querySelector(slctr||"slot");return content?/** @type {PolymerDomApi} */dom(content).getDistributedNodes():[]}/**
       * Returns a list of element children distributed to this element's
       * `<slot>`.
       *
       * If this element contains more than one `<slot>` in its
       * local DOM, an optional selector may be passed to choose the desired
       * content.  This method differs from `getContentChildNodes` in that only
       * elements are returned.
       *
       * @param {string=} slctr CSS selector to choose the desired
       *   `<content>`.  Defaults to `content`.
       * @return {!Array<!HTMLElement>} List of distributed nodes for the
       *   `<slot>`.
       * @suppress {invalidCasts}
       * @override
       */getContentChildren(slctr){let children=/** @type {!Array<!HTMLElement>} */this.getContentChildNodes(slctr).filter(function(n){return n.nodeType===Node.ELEMENT_NODE});return children}/**
       * Checks whether an element is in this element's light DOM tree.
       *
       * @param {?Node} node The element to be checked.
       * @return {boolean} true if node is in this element's light DOM tree.
       * @suppress {invalidCasts} LegacyElementMixin must be applied to an
       * HTMLElement
       * @override
       */isLightDescendant(node){const thisNode=/** @type {Node} */this;return thisNode!==node&&wrap$1(thisNode).contains(node)&&wrap$1(thisNode).getRootNode()===wrap$1(node).getRootNode()}/**
       * Checks whether an element is in this element's local DOM tree.
       *
       * @param {!Element} node The element to be checked.
       * @return {boolean} true if node is in this element's local DOM tree.
       * @override
       */isLocalDescendant(node){return this.root===wrap$1(node).getRootNode()}/**
       * No-op for backwards compatibility. This should now be handled by
       * ShadyCss library.
       * @param  {*} container Unused
       * @param  {*} shouldObserve Unused
       * @return {void}
       * @override
       */scopeSubtree(container,shouldObserve){}// eslint-disable-line no-unused-vars
/**
     * Returns the computed style value for the given property.
     * @param {string} property The css property name.
     * @return {string} Returns the computed css property value for the given
     * `property`.
     * @suppress {invalidCasts} LegacyElementMixin must be applied to an
     *     HTMLElement
     * @override
     */getComputedStyleValue(property){return styleInterface.getComputedStyleValue(/** @type {!Element} */this,property)}// debounce
/**
     * Call `debounce` to collapse multiple requests for a named task into
     * one invocation which is made after the wait time has elapsed with
     * no new request.  If no wait time is given, the callback will be called
     * at microtask timing (guaranteed before paint).
     *
     *     debouncedClickAction(e) {
     *       // will not call `processClick` more than once per 100ms
     *       this.debounce('click', function() {
     *        this.processClick();
     *       } 100);
     *     }
     *
     * @param {string} jobName String to identify the debounce job.
     * @param {function():void} callback Function that is called (with `this`
     *   context) when the wait time elapses.
     * @param {number=} wait Optional wait time in milliseconds (ms) after the
     *   last signal that must elapse before invoking `callback`
     * @return {!Object} Returns a debouncer object on which exists the
     * following methods: `isActive()` returns true if the debouncer is
     * active; `cancel()` cancels the debouncer if it is active;
     * `flush()` immediately invokes the debounced callback if the debouncer
     * is active.
     * @override
     */debounce(jobName,callback,wait){this._debouncers=this._debouncers||{};return this._debouncers[jobName]=Debouncer.debounce(this._debouncers[jobName],0<wait?timeOut.after(wait):microTask,callback.bind(this))}/**
       * Returns whether a named debouncer is active.
       *
       * @param {string} jobName The name of the debouncer started with `debounce`
       * @return {boolean} Whether the debouncer is active (has not yet fired).
       * @override
       */isDebouncerActive(jobName){this._debouncers=this._debouncers||{};let debouncer=this._debouncers[jobName];return!!(debouncer&&debouncer.isActive())}/**
       * Immediately calls the debouncer `callback` and inactivates it.
       *
       * @param {string} jobName The name of the debouncer started with `debounce`
       * @return {void}
       * @override
       */flushDebouncer(jobName){this._debouncers=this._debouncers||{};let debouncer=this._debouncers[jobName];if(debouncer){debouncer.flush()}}/**
       * Cancels an active debouncer.  The `callback` will not be called.
       *
       * @param {string} jobName The name of the debouncer started with `debounce`
       * @return {void}
       * @override
       */cancelDebouncer(jobName){this._debouncers=this._debouncers||{};let debouncer=this._debouncers[jobName];if(debouncer){debouncer.cancel()}}/**
       * Runs a callback function asynchronously.
       *
       * By default (if no waitTime is specified), async callbacks are run at
       * microtask timing, which will occur before paint.
       *
       * @param {!Function} callback The callback function to run, bound to
       *     `this`.
       * @param {number=} waitTime Time to wait before calling the
       *   `callback`.  If unspecified or 0, the callback will be run at microtask
       *   timing (before paint).
       * @return {number} Handle that may be used to cancel the async job.
       * @override
       */async(callback,waitTime){return 0<waitTime?timeOut.run(callback.bind(this),waitTime):~microTask.run(callback.bind(this))}/**
       * Cancels an async operation started with `async`.
       *
       * @param {number} handle Handle returned from original `async` call to
       *   cancel.
       * @return {void}
       * @override
       */cancelAsync(handle){0>handle?microTask.cancel(~handle):timeOut.cancel(handle)}// other
/**
     * Convenience method for creating an element and configuring it.
     *
     * @param {string} tag HTML element tag to create.
     * @param {Object=} props Object of properties to configure on the
     *    instance.
     * @return {!Element} Newly created and configured element.
     * @override
     */create(tag,props){let elt=document.createElement(tag);if(props){if(elt.setProperties){elt.setProperties(props)}else{for(let n in props){elt[n]=props[n]}}}return elt}/**
       * Polyfill for Element.prototype.matches, which is sometimes still
       * prefixed.
       *
       * @param {string} selector Selector to test.
       * @param {!Element=} node Element to test the selector against.
       * @return {boolean} Whether the element matches the selector.
       * @override
       */elementMatches(selector,node){return matchesSelector(node||this,selector)}/**
       * Toggles an HTML attribute on or off.
       *
       * @param {string} name HTML attribute name
       * @param {boolean=} bool Boolean to force the attribute on or off.
       *    When unspecified, the state of the attribute will be reversed.
       * @return {boolean} true if the attribute now exists
       * @override
       */toggleAttribute(name,bool){let node=/** @type {Element} */this;if(3===arguments.length){node=/** @type {Element} */arguments[2]}if(1==arguments.length){bool=!node.hasAttribute(name)}if(bool){wrap$1(node).setAttribute(name,"");return!0}else{wrap$1(node).removeAttribute(name);return!1}}/**
       * Toggles a CSS class on or off.
       *
       * @param {string} name CSS class name
       * @param {boolean=} bool Boolean to force the class on or off.
       *    When unspecified, the state of the class will be reversed.
       * @param {Element=} node Node to target.  Defaults to `this`.
       * @return {void}
       * @override
       */toggleClass(name,bool,node){node=/** @type {Element} */node||this;if(1==arguments.length){bool=!node.classList.contains(name)}if(bool){node.classList.add(name)}else{node.classList.remove(name)}}/**
       * Cross-platform helper for setting an element's CSS `transform` property.
       *
       * @param {string} transformText Transform setting.
       * @param {Element=} node Element to apply the transform to.
       * Defaults to `this`
       * @return {void}
       * @override
       */transform(transformText,node){node=/** @type {Element} */node||this;node.style.webkitTransform=transformText;node.style.transform=transformText}/**
       * Cross-platform helper for setting an element's CSS `translate3d`
       * property.
       *
       * @param {number} x X offset.
       * @param {number} y Y offset.
       * @param {number} z Z offset.
       * @param {Element=} node Element to apply the transform to.
       * Defaults to `this`.
       * @return {void}
       * @override
       */translate3d(x,y,z,node){node=/** @type {Element} */node||this;this.transform("translate3d("+x+","+y+","+z+")",node)}/**
       * Removes an item from an array, if it exists.
       *
       * If the array is specified by path, a change notification is
       * generated, so that observers, data bindings and computed
       * properties watching that path can update.
       *
       * If the array is passed directly, **no change
       * notification is generated**.
       *
       * @param {string | !Array<number|string>} arrayOrPath Path to array from
       *     which to remove the item
       *   (or the array itself).
       * @param {*} item Item to remove.
       * @return {Array} Array containing item removed.
       * @override
       */arrayDelete(arrayOrPath,item){let index;if(Array.isArray(arrayOrPath)){index=arrayOrPath.indexOf(item);if(0<=index){return arrayOrPath.splice(index,1)}}else{let arr=get(this,arrayOrPath);index=arr.indexOf(item);if(0<=index){return this.splice(arrayOrPath,index,1)}}return null}// logging
/**
     * Facades `console.log`/`warn`/`error` as override point.
     *
     * @param {string} level One of 'log', 'warn', 'error'
     * @param {Array} args Array of strings or objects to log
     * @return {void}
     * @override
     */_logger(level,args){// accept ['foo', 'bar'] and [['foo', 'bar']]
if(Array.isArray(args)&&1===args.length&&Array.isArray(args[0])){args=args[0]}switch(level){case"log":case"warn":case"error":console[level](...args);}}/**
       * Facades `console.log` as an override point.
       *
       * @param {...*} args Array of strings or objects to log
       * @return {void}
       * @override
       */_log(...args){this._logger("log",args)}/**
       * Facades `console.warn` as an override point.
       *
       * @param {...*} args Array of strings or objects to log
       * @return {void}
       * @override
       */_warn(...args){this._logger("warn",args)}/**
       * Facades `console.error` as an override point.
       *
       * @param {...*} args Array of strings or objects to log
       * @return {void}
       * @override
       */_error(...args){this._logger("error",args)}/**
       * Formats a message using the element type an a method name.
       *
       * @param {string} methodName Method name to associate with message
       * @param {...*} args Array of strings or objects to log
       * @return {Array} Array with formatting information for `console`
       *   logging.
       * @override
       */_logf(methodName,...args){return["[%s::%s]",this.is,methodName,...args]}}LegacyElement.prototype.is="";return LegacyElement});_exports.LegacyElementMixin=LegacyElementMixin;var legacyElementMixin={LegacyElementMixin:LegacyElementMixin};_exports.$legacyElementMixin=legacyElementMixin;const lifecycleProps={attached:!0,detached:!0,ready:!0,created:!0,beforeRegister:!0,registered:!0,attributeChanged:!0,listeners:!0,hostAttributes:!0},excludeOnInfo={attached:!0,detached:!0,ready:!0,created:!0,beforeRegister:!0,registered:!0,attributeChanged:!0,behaviors:!0,_noAccessors:!0},excludeOnBehaviors=Object.assign({listeners:!0,hostAttributes:!0,properties:!0,observers:!0},excludeOnInfo);function copyProperties(source,target,excludeProps){const noAccessors=source._noAccessors,propertyNames=Object.getOwnPropertyNames(source);for(let i=0,p;i<propertyNames.length;i++){p=propertyNames[i];if(p in excludeProps){continue}if(noAccessors){target[p]=source[p]}else{let pd=Object.getOwnPropertyDescriptor(source,p);if(pd){// ensure property is configurable so that a later behavior can
// re-configure it.
pd.configurable=!0;Object.defineProperty(target,p,pd)}}}}/**
   * Applies a "legacy" behavior or array of behaviors to the provided class.
   *
   * Note: this method will automatically also apply the `LegacyElementMixin`
   * to ensure that any legacy behaviors can rely on legacy Polymer API on
   * the underlying element.
   *
   * @function
   * @template T
   * @param {!Object|!Array<!Object>} behaviors Behavior object or array of behaviors.
   * @param {function(new:T)} klass Element class.
   * @return {?} Returns a new Element class extended by the
   * passed in `behaviors` and also by `LegacyElementMixin`.
   * @suppress {invalidCasts, checkTypes}
   */function mixinBehaviors(behaviors,klass){return GenerateClassFromInfo({},LegacyElementMixin(klass),behaviors)}// NOTE:
// 1.x
// Behaviors were mixed in *in reverse order* and de-duped on the fly.
// The rule was that behavior properties were copied onto the element
// prototype if and only if the property did not already exist.
// Given: Polymer{ behaviors: [A, B, C, A, B]}, property copy order was:
// (1), B, (2), A, (3) C. This means prototype properties win over
// B properties win over A win over C. This mirrors what would happen
// with inheritance if element extended B extended A extended C.
//
// Again given, Polymer{ behaviors: [A, B, C, A, B]}, the resulting
// `behaviors` array was [C, A, B].
// Behavior lifecycle methods were called in behavior array order
// followed by the element, e.g. (1) C.created, (2) A.created,
// (3) B.created, (4) element.created. There was no support for
// super, and "super-behavior" methods were callable only by name).
//
// 2.x
// Behaviors are made into proper mixins which live in the
// element's prototype chain. Behaviors are placed in the element prototype
// eldest to youngest and de-duped youngest to oldest:
// So, first [A, B, C, A, B] becomes [C, A, B] then,
// the element prototype becomes (oldest) (1) PolymerElement, (2) class(C),
// (3) class(A), (4) class(B), (5) class(Polymer({...})).
// Result:
// This means element properties win over B properties win over A win
// over C. (same as 1.x)
// If lifecycle is called (super then me), order is
// (1) C.created, (2) A.created, (3) B.created, (4) element.created
// (again same as 1.x)
function applyBehaviors(proto,behaviors,lifecycle){for(let i=0;i<behaviors.length;i++){applyInfo(proto,behaviors[i],lifecycle,excludeOnBehaviors)}}function applyInfo(proto,info,lifecycle,excludeProps){copyProperties(info,proto,excludeProps);for(let p in lifecycleProps){if(info[p]){lifecycle[p]=lifecycle[p]||[];lifecycle[p].push(info[p])}}}/**
   * @param {Array} behaviors List of behaviors to flatten.
   * @param {Array=} list Target list to flatten behaviors into.
   * @param {Array=} exclude List of behaviors to exclude from the list.
   * @return {!Array} Returns the list of flattened behaviors.
   */function flattenBehaviors(behaviors,list,exclude){list=list||[];for(let i=behaviors.length-1,b;0<=i;i--){b=behaviors[i];if(b){if(Array.isArray(b)){flattenBehaviors(b,list)}else{// dedup
if(0>list.indexOf(b)&&(!exclude||0>exclude.indexOf(b))){list.unshift(b)}}}else{console.warn("behavior is null, check for missing or 404 import")}}return list}/**
   * Copies property descriptors from source to target, overwriting all fields
   * of any previous descriptor for a property *except* for `value`, which is
   * merged in from the target if it does not exist on the source.
   * 
   * @param {*} target Target properties object
   * @param {*} source Source properties object
   */function mergeProperties(target,source){for(const p in source){const targetInfo=target[p],sourceInfo=source[p];if(!("value"in sourceInfo)&&targetInfo&&"value"in targetInfo){target[p]=Object.assign({value:targetInfo.value},sourceInfo)}else{target[p]=sourceInfo}}}/* Note about construction and extension of legacy classes.
    [Changed in Q4 2018 to optimize performance.]
  
    When calling `Polymer` or `mixinBehaviors`, the generated class below is
    made. The list of behaviors was previously made into one generated class per
    behavior, but this is no longer the case as behaviors are now called
    manually. Note, there may *still* be multiple generated classes in the
    element's prototype chain if extension is used with `mixinBehaviors`.
  
    The generated class is directly tied to the info object and behaviors
    used to create it. That list of behaviors is filtered so it's only the
    behaviors not active on the superclass. In order to call through to the
    entire list of lifecycle methods, it's important to call `super`.
  
    The element's `properties` and `observers` are controlled via the finalization
    mechanism provided by `PropertiesMixin`. `Properties` and `observers` are
    collected by manually traversing the prototype chain and merging.
  
    To limit changes, the `_registered` method is called via `_initializeProperties`
    and not `_finalizeClass`.
  
  */ /**
      * @param {!PolymerInit} info Polymer info object
      * @param {function(new:HTMLElement)} Base base class to extend with info object
      * @param {Object=} behaviors behaviors to copy into the element
      * @return {function(new:HTMLElement)} Generated class
      * @suppress {checkTypes}
      * @private
      */function GenerateClassFromInfo(info,Base,behaviors){// manages behavior and lifecycle processing (filled in after class definition)
let behaviorList;const lifecycle={};/** @private */class PolymerGenerated extends Base{// explicitly not calling super._finalizeClass
static _finalizeClass(){// if calling via a subclass that hasn't been generated, pass through to super
if(!this.hasOwnProperty(JSCompiler_renameProperty("generatedFrom",this))){super._finalizeClass()}else{// interleave properties and observers per behavior and `info`
if(behaviorList){for(let i=0,b;i<behaviorList.length;i++){b=behaviorList[i];if(b.properties){this.createProperties(b.properties)}if(b.observers){this.createObservers(b.observers,b.properties)}}}if(info.properties){this.createProperties(info.properties)}if(info.observers){this.createObservers(info.observers,info.properties)}// make sure to prepare the element template
this._prepareTemplate()}}static get properties(){const properties={};if(behaviorList){for(let i=0;i<behaviorList.length;i++){mergeProperties(properties,behaviorList[i].properties)}}mergeProperties(properties,info.properties);return properties}static get observers(){let observers=[];if(behaviorList){for(let i=0,b;i<behaviorList.length;i++){b=behaviorList[i];if(b.observers){observers=observers.concat(b.observers)}}}if(info.observers){observers=observers.concat(info.observers)}return observers}/**
       * @return {void}
       */created(){super.created();const list=lifecycle.created;if(list){for(let i=0;i<list.length;i++){list[i].call(this)}}}/**
       * @return {void}
       */_registered(){/* NOTE: `beforeRegister` is called here for bc, but the behavior
        is different than in 1.x. In 1.0, the method was called *after*
        mixing prototypes together but *before* processing of meta-objects.
        However, dynamic effects can still be set here and can be done either
        in `beforeRegister` or `registered`. It is no longer possible to set
        `is` in `beforeRegister` as you could in 1.x.
      */ // only proceed if the generated class' prototype has not been registered.
const generatedProto=PolymerGenerated.prototype;if(!generatedProto.hasOwnProperty("__hasRegisterFinished")){generatedProto.__hasRegisterFinished=!0;// ensure superclass is registered first.
super._registered();// copy properties onto the generated class lazily if we're optimizing,
if(legacyOptimizations){copyPropertiesToProto(generatedProto)}// make sure legacy lifecycle is called on the *element*'s prototype
// and not the generated class prototype; if the element has been
// extended, these are *not* the same.
const proto=Object.getPrototypeOf(this);let list=lifecycle.beforeRegister;if(list){for(let i=0;i<list.length;i++){list[i].call(proto)}}list=lifecycle.registered;if(list){for(let i=0;i<list.length;i++){list[i].call(proto)}}}}/**
       * @return {void}
       */_applyListeners(){super._applyListeners();const list=lifecycle.listeners;if(list){for(let i=0;i<list.length;i++){const listeners=list[i];if(listeners){for(let l in listeners){this._addMethodEventListenerToNode(this,l,listeners[l])}}}}}// note: exception to "super then me" rule;
// do work before calling super so that super attributes
// only apply if not already set.
/**
     * @return {void}
     */_ensureAttributes(){const list=lifecycle.hostAttributes;if(list){for(let i=list.length-1;0<=i;i--){const hostAttributes=list[i];for(let a in hostAttributes){this._ensureAttribute(a,hostAttributes[a])}}}super._ensureAttributes()}/**
       * @return {void}
       */ready(){super.ready();let list=lifecycle.ready;if(list){for(let i=0;i<list.length;i++){list[i].call(this)}}}/**
       * @return {void}
       */attached(){super.attached();let list=lifecycle.attached;if(list){for(let i=0;i<list.length;i++){list[i].call(this)}}}/**
       * @return {void}
       */detached(){super.detached();let list=lifecycle.detached;if(list){for(let i=0;i<list.length;i++){list[i].call(this)}}}/**
       * Implements native Custom Elements `attributeChangedCallback` to
       * set an attribute value to a property via `_attributeToProperty`.
       *
       * @param {string} name Name of attribute that changed
       * @param {?string} old Old attribute value
       * @param {?string} value New attribute value
       * @return {void}
       */attributeChanged(name,old,value){super.attributeChanged();let list=lifecycle.attributeChanged;if(list){for(let i=0;i<list.length;i++){list[i].call(this,name,old,value)}}}}// apply behaviors, note actual copying is done lazily at first instance creation
if(behaviors){// NOTE: ensure the behavior is extending a class with
// legacy element api. This is necessary since behaviors expect to be able
// to access 1.x legacy api.
if(!Array.isArray(behaviors)){behaviors=[behaviors]}let superBehaviors=Base.prototype.behaviors;// get flattened, deduped list of behaviors *not* already on super class
behaviorList=flattenBehaviors(behaviors,null,superBehaviors);PolymerGenerated.prototype.behaviors=superBehaviors?superBehaviors.concat(behaviors):behaviorList}const copyPropertiesToProto=proto=>{if(behaviorList){applyBehaviors(proto,behaviorList,lifecycle)}applyInfo(proto,info,lifecycle,excludeOnInfo)};// copy properties if we're not optimizing
if(!legacyOptimizations){copyPropertiesToProto(PolymerGenerated.prototype)}PolymerGenerated.generatedFrom=info;return PolymerGenerated}/**
   * Generates a class that extends `LegacyElement` based on the
   * provided info object.  Metadata objects on the `info` object
   * (`properties`, `observers`, `listeners`, `behaviors`, `is`) are used
   * for Polymer's meta-programming systems, and any functions are copied
   * to the generated class.
   *
   * Valid "metadata" values are as follows:
   *
   * `is`: String providing the tag name to register the element under. In
   * addition, if a `dom-module` with the same id exists, the first template
   * in that `dom-module` will be stamped into the shadow root of this element,
   * with support for declarative event listeners (`on-...`), Polymer data
   * bindings (`[[...]]` and `{{...}}`), and id-based node finding into
   * `this.$`.
   *
   * `properties`: Object describing property-related metadata used by Polymer
   * features (key: property names, value: object containing property metadata).
   * Valid keys in per-property metadata include:
   * - `type` (String|Number|Object|Array|...): Used by
   *   `attributeChangedCallback` to determine how string-based attributes
   *   are deserialized to JavaScript property values.
   * - `notify` (boolean): Causes a change in the property to fire a
   *   non-bubbling event called `<property>-changed`. Elements that have
   *   enabled two-way binding to the property use this event to observe changes.
   * - `readOnly` (boolean): Creates a getter for the property, but no setter.
   *   To set a read-only property, use the private setter method
   *   `_setProperty(property, value)`.
   * - `observer` (string): Observer method name that will be called when
   *   the property changes. The arguments of the method are
   *   `(value, previousValue)`.
   * - `computed` (string): String describing method and dependent properties
   *   for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).
   *   Computed properties are read-only by default and can only be changed
   *   via the return value of the computing method.
   *
   * `observers`: Array of strings describing multi-property observer methods
   *  and their dependent properties (e.g. `'observeABC(a, b, c)'`).
   *
   * `listeners`: Object describing event listeners to be added to each
   *  instance of this element (key: event name, value: method name).
   *
   * `behaviors`: Array of additional `info` objects containing metadata
   * and callbacks in the same format as the `info` object here which are
   * merged into this element.
   *
   * `hostAttributes`: Object listing attributes to be applied to the host
   *  once created (key: attribute name, value: attribute value).  Values
   *  are serialized based on the type of the value.  Host attributes should
   *  generally be limited to attributes such as `tabIndex` and `aria-...`.
   *  Attributes in `hostAttributes` are only applied if a user-supplied
   *  attribute is not already present (attributes in markup override
   *  `hostAttributes`).
   *
   * In addition, the following Polymer-specific callbacks may be provided:
   * - `registered`: called after first instance of this element,
   * - `created`: called during `constructor`
   * - `attached`: called during `connectedCallback`
   * - `detached`: called during `disconnectedCallback`
   * - `ready`: called before first `attached`, after all properties of
   *   this element have been propagated to its template and all observers
   *   have run
   *
   * @param {!PolymerInit} info Object containing Polymer metadata and functions
   *   to become class methods.
   * @template T
   * @param {function(T):T} mixin Optional mixin to apply to legacy base class
   *   before extending with Polymer metaprogramming.
   * @return {function(new:HTMLElement)} Generated class
   */const Class=function(info,mixin){if(!info){console.warn("Polymer.Class requires `info` argument")}let klass=mixin?mixin(LegacyElementMixin(HTMLElement)):LegacyElementMixin(HTMLElement);klass=GenerateClassFromInfo(info,klass,info.behaviors);// decorate klass with registration info
klass.is=klass.prototype.is=info.is;return klass};_exports.Class=Class;var _class={mixinBehaviors:mixinBehaviors,Class:Class};_exports.$class=_class;const Polymer=function(info){// if input is a `class` (aka a function with a prototype), use the prototype
// remember that the `constructor` will never be called
let klass;if("function"===typeof info){klass=info}else{klass=Polymer.Class(info)}customElements.define(klass.is,/** @type {!HTMLElement} */klass);return klass};_exports.Polymer$1=_exports.Polymer=Polymer;Polymer.Class=Class;var polymerFn={Polymer:Polymer};_exports.$polymerFn=polymerFn;function mutablePropertyChange(inst,property,value,old,mutableData){let isObject;if(mutableData){isObject="object"===typeof value&&null!==value;// Pull `old` for Objects from temp cache, but treat `null` as a primitive
if(isObject){old=inst.__dataTemp[property]}}// Strict equality check, but return false for NaN===NaN
let shouldChange=old!==value&&(old===old||value===value);// Objects are stored in temporary cache (cleared at end of
// turn), which is used for dirty-checking
if(isObject&&shouldChange){inst.__dataTemp[property]=value}return shouldChange}/**
   * Element class mixin to skip strict dirty-checking for objects and arrays
   * (always consider them to be "dirty"), for use on elements utilizing
   * `PropertyEffects`
   *
   * By default, `PropertyEffects` performs strict dirty checking on
   * objects, which means that any deep modifications to an object or array will
   * not be propagated unless "immutable" data patterns are used (i.e. all object
   * references from the root to the mutation were changed).
   *
   * Polymer also provides a proprietary data mutation and path notification API
   * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient
   * mutation and notification of deep changes in an object graph to all elements
   * bound to the same object graph.
   *
   * In cases where neither immutable patterns nor the data mutation API can be
   * used, applying this mixin will cause Polymer to skip dirty checking for
   * objects and arrays (always consider them to be "dirty").  This allows a
   * user to make a deep modification to a bound object graph, and then either
   * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`
   * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all
   * elements that wish to be updated based on deep mutations must apply this
   * mixin or otherwise skip strict dirty checking for objects/arrays.
   * Specifically, any elements in the binding tree between the source of a
   * mutation and the consumption of it must apply this mixin or enable the
   * `OptionalMutableData` mixin.
   *
   * In order to make the dirty check strategy configurable, see
   * `OptionalMutableData`.
   *
   * Note, the performance characteristics of propagating large object graphs
   * will be worse as opposed to using strict dirty checking with immutable
   * patterns or Polymer's path notification API.
   *
   * @mixinFunction
   * @polymer
   * @summary Element class mixin to skip strict dirty-checking for objects
   *   and arrays
   */const MutableData=dedupingMixin(superClass=>{/**
   * @polymer
   * @mixinClass
   * @implements {Polymer_MutableData}
   */class MutableData extends superClass{/**
     * Overrides `PropertyEffects` to provide option for skipping
     * strict equality checking for Objects and Arrays.
     *
     * This method pulls the value to dirty check against from the `__dataTemp`
     * cache (rather than the normal `__data` cache) for Objects.  Since the temp
     * cache is cleared at the end of a turn, this implementation allows
     * side-effects of deep object changes to be processed by re-setting the
     * same object (using the temp cache as an in-turn backstop to prevent
     * cycles due to 2-way notification).
     *
     * @param {string} property Property name
     * @param {*} value New property value
     * @param {*} old Previous property value
     * @return {boolean} Whether the property should be considered a change
     * @protected
     */_shouldPropertyChange(property,value,old){return mutablePropertyChange(this,property,value,old,!0)}}return MutableData});/**
     * Element class mixin to add the optional ability to skip strict
     * dirty-checking for objects and arrays (always consider them to be
     * "dirty") by setting a `mutable-data` attribute on an element instance.
     *
     * By default, `PropertyEffects` performs strict dirty checking on
     * objects, which means that any deep modifications to an object or array will
     * not be propagated unless "immutable" data patterns are used (i.e. all object
     * references from the root to the mutation were changed).
     *
     * Polymer also provides a proprietary data mutation and path notification API
     * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient
     * mutation and notification of deep changes in an object graph to all elements
     * bound to the same object graph.
     *
     * In cases where neither immutable patterns nor the data mutation API can be
     * used, applying this mixin will allow Polymer to skip dirty checking for
     * objects and arrays (always consider them to be "dirty").  This allows a
     * user to make a deep modification to a bound object graph, and then either
     * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`
     * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all
     * elements that wish to be updated based on deep mutations must apply this
     * mixin or otherwise skip strict dirty checking for objects/arrays.
     * Specifically, any elements in the binding tree between the source of a
     * mutation and the consumption of it must enable this mixin or apply the
     * `MutableData` mixin.
     *
     * While this mixin adds the ability to forgo Object/Array dirty checking,
     * the `mutableData` flag defaults to false and must be set on the instance.
     *
     * Note, the performance characteristics of propagating large object graphs
     * will be worse by relying on `mutableData: true` as opposed to using
     * strict dirty checking with immutable patterns or Polymer's path notification
     * API.
     *
     * @mixinFunction
     * @polymer
     * @summary Element class mixin to optionally skip strict dirty-checking
     *   for objects and arrays
     */_exports.MutableData=MutableData;const OptionalMutableData=dedupingMixin(superClass=>{/**
   * @mixinClass
   * @polymer
   * @implements {Polymer_OptionalMutableData}
   */class OptionalMutableData extends superClass{static get properties(){return{/**
         * Instance-level flag for configuring the dirty-checking strategy
         * for this element.  When true, Objects and Arrays will skip dirty
         * checking, otherwise strict equality checking will be used.
         */mutableData:Boolean}}/**
       * Overrides `PropertyEffects` to provide option for skipping
       * strict equality checking for Objects and Arrays.
       *
       * When `this.mutableData` is true on this instance, this method
       * pulls the value to dirty check against from the `__dataTemp` cache
       * (rather than the normal `__data` cache) for Objects.  Since the temp
       * cache is cleared at the end of a turn, this implementation allows
       * side-effects of deep object changes to be processed by re-setting the
       * same object (using the temp cache as an in-turn backstop to prevent
       * cycles due to 2-way notification).
       *
       * @param {string} property Property name
       * @param {*} value New property value
       * @param {*} old Previous property value
       * @return {boolean} Whether the property should be considered a change
       * @protected
       */_shouldPropertyChange(property,value,old){return mutablePropertyChange(this,property,value,old,this.mutableData)}}return OptionalMutableData});// Export for use by legacy behavior
_exports.OptionalMutableData=OptionalMutableData;MutableData._mutablePropertyChange=mutablePropertyChange;var mutableData={MutableData:MutableData,OptionalMutableData:OptionalMutableData};// machinery for propagating host properties to children. This is an ES5
// class only because Babel (incorrectly) requires super() in the class
// constructor even though no `this` is used and it returns an instance.
_exports.$mutableData=mutableData;let newInstance=null;/**
                         * @constructor
                         * @extends {HTMLTemplateElement}
                         * @private
                         */function HTMLTemplateElementExtension(){return newInstance}HTMLTemplateElementExtension.prototype=Object.create(HTMLTemplateElement.prototype,{constructor:{value:HTMLTemplateElementExtension,writable:!0}});/**
     * @constructor
     * @implements {Polymer_PropertyEffects}
     * @extends {HTMLTemplateElementExtension}
     * @private
     */const DataTemplate=PropertyEffects(HTMLTemplateElementExtension),MutableDataTemplate=MutableData(DataTemplate);/**
                                                                     * @constructor
                                                                     * @implements {Polymer_MutableData}
                                                                     * @extends {DataTemplate}
                                                                     * @private
                                                                     */ // Applies a DataTemplate subclass to a <template> instance
function upgradeTemplate(template,constructor){newInstance=template;Object.setPrototypeOf(template,constructor.prototype);new constructor;newInstance=null}/**
   * Base class for TemplateInstance.
   * @constructor
   * @implements {Polymer_PropertyEffects}
   * @private
   */const templateInstanceBase=PropertyEffects(class{});/**
                                                         * @polymer
                                                         * @customElement
                                                         * @appliesMixin PropertyEffects
                                                         * @unrestricted
                                                         */class TemplateInstanceBase extends templateInstanceBase{constructor(props){super();this._configureProperties(props);/** @type {!StampedTemplate} */this.root=this._stampTemplate(this.__dataHost);// Save list of stamped children
let children=this.children=[];// Polymer 1.x did not use `Polymer.dom` here so not bothering.
for(let n=this.root.firstChild;n;n=n.nextSibling){children.push(n);n.__templatizeInstance=this}if(this.__templatizeOwner&&this.__templatizeOwner.__hideTemplateChildren__){this._showHideChildren(!0)}// Flush props only when props are passed if instance props exist
// or when there isn't instance props.
let options=this.__templatizeOptions;if(props&&options.instanceProps||!options.instanceProps){this._enableProperties()}}/**
     * Configure the given `props` by calling `_setPendingProperty`. Also
     * sets any properties stored in `__hostProps`.
     * @private
     * @param {Object} props Object of property name-value pairs to set.
     * @return {void}
     */_configureProperties(props){let options=this.__templatizeOptions;if(options.forwardHostProp){for(let hprop in this.__hostProps){this._setPendingProperty(hprop,this.__dataHost["_host_"+hprop])}}// Any instance props passed in the constructor will overwrite host props;
// normally this would be a user error but we don't specifically filter them
for(let iprop in props){this._setPendingProperty(iprop,props[iprop])}}/**
     * Forwards a host property to this instance.  This method should be
     * called on instances from the `options.forwardHostProp` callback
     * to propagate changes of host properties to each instance.
     *
     * Note this method enqueues the change, which are flushed as a batch.
     *
     * @param {string} prop Property or path name
     * @param {*} value Value of the property to forward
     * @return {void}
     */forwardHostProp(prop,value){if(this._setPendingPropertyOrPath(prop,value,!1,!0)){this.__dataHost._enqueueClient(this)}}/**
     * Override point for adding custom or simulated event handling.
     *
     * @override
     * @param {!Node} node Node to add event listener to
     * @param {string} eventName Name of event
     * @param {function(!Event):void} handler Listener function to add
     * @return {void}
     */_addEventListenerToNode(node,eventName,handler){if(this._methodHost&&this.__templatizeOptions.parentModel){// If this instance should be considered a parent model, decorate
// events this template instance as `model`
this._methodHost._addEventListenerToNode(node,eventName,e=>{e.model=this;handler(e)})}else{// Otherwise delegate to the template's host (which could be)
// another template instance
let templateHost=this.__dataHost.__dataHost;if(templateHost){templateHost._addEventListenerToNode(node,eventName,handler)}}}/**
     * Shows or hides the template instance top level child elements. For
     * text nodes, `textContent` is removed while "hidden" and replaced when
     * "shown."
     * @param {boolean} hide Set to true to hide the children;
     * set to false to show them.
     * @return {void}
     * @protected
     */_showHideChildren(hide){let c=this.children;for(let i=0,n;i<c.length;i++){n=c[i];// Ignore non-changes
if(!!hide!=!!n.__hideTemplateChildren__){if(n.nodeType===Node.TEXT_NODE){if(hide){n.__polymerTextContent__=n.textContent;n.textContent=""}else{n.textContent=n.__polymerTextContent__}// remove and replace slot
}else if("slot"===n.localName){if(hide){n.__polymerReplaced__=document.createComment("hidden-slot");wrap$1(wrap$1(n).parentNode).replaceChild(n.__polymerReplaced__,n)}else{const replace=n.__polymerReplaced__;if(replace){wrap$1(wrap$1(replace).parentNode).replaceChild(n,replace)}}}else if(n.style){if(hide){n.__polymerDisplay__=n.style.display;n.style.display="none"}else{n.style.display=n.__polymerDisplay__}}}n.__hideTemplateChildren__=hide;if(n._showHideChildren){n._showHideChildren(hide)}}}/**
     * Overrides default property-effects implementation to intercept
     * textContent bindings while children are "hidden" and cache in
     * private storage for later retrieval.
     *
     * @override
     * @param {!Node} node The node to set a property on
     * @param {string} prop The property to set
     * @param {*} value The value to set
     * @return {void}
     * @protected
     */_setUnmanagedPropertyToNode(node,prop,value){if(node.__hideTemplateChildren__&&node.nodeType==Node.TEXT_NODE&&"textContent"==prop){node.__polymerTextContent__=value}else{super._setUnmanagedPropertyToNode(node,prop,value)}}/**
     * Find the parent model of this template instance.  The parent model
     * is either another templatize instance that had option `parentModel: true`,
     * or else the host element.
     *
     * @return {!Polymer_PropertyEffects} The parent model of this instance
     */get parentModel(){let model=this.__parentModel;if(!model){let options;model=this;do{// A template instance's `__dataHost` is a <template>
// `model.__dataHost.__dataHost` is the template's host
model=model.__dataHost.__dataHost}while((options=model.__templatizeOptions)&&!options.parentModel);this.__parentModel=model}return model}/**
     * Stub of HTMLElement's `dispatchEvent`, so that effects that may
     * dispatch events safely no-op.
     *
     * @param {Event} event Event to dispatch
     * @return {boolean} Always true.
     */dispatchEvent(event){// eslint-disable-line no-unused-vars
return!0}}/** @type {!DataTemplate} */_exports.TemplateInstanceBase=TemplateInstanceBase;TemplateInstanceBase.prototype.__dataHost;/** @type {!TemplatizeOptions} */TemplateInstanceBase.prototype.__templatizeOptions;/** @type {!Polymer_PropertyEffects} */TemplateInstanceBase.prototype._methodHost;/** @type {!Object} */TemplateInstanceBase.prototype.__templatizeOwner;/** @type {!Object} */TemplateInstanceBase.prototype.__hostProps;/**
                                             * @constructor
                                             * @extends {TemplateInstanceBase}
                                             * @implements {Polymer_MutableData}
                                             * @private
                                             */const MutableTemplateInstanceBase=MutableData(TemplateInstanceBase);function findMethodHost(template){// Technically this should be the owner of the outermost template.
// In shadow dom, this is always getRootNode().host, but we can
// approximate this via cooperation with our dataHost always setting
// `_methodHost` as long as there were bindings (or id's) on this
// instance causing it to get a dataHost.
let templateHost=template.__dataHost;return templateHost&&templateHost._methodHost||templateHost}/* eslint-disable valid-jsdoc */ /**
                                    * @suppress {missingProperties} class.prototype is not defined for some reason
                                    */function createTemplatizerClass(template,templateInfo,options){/**
   * @constructor
   * @extends {TemplateInstanceBase}
   */let templatizerBase=options.mutableData?MutableTemplateInstanceBase:TemplateInstanceBase;// Affordance for global mixins onto TemplatizeInstance
if(templatize.mixin){templatizerBase=templatize.mixin(templatizerBase)}/**
     * Anonymous class created by the templatize
     * @constructor
     * @private
     */let klass=class extends templatizerBase{};/** @override */klass.prototype.__templatizeOptions=options;klass.prototype._bindTemplate(template);addNotifyEffects(klass,template,templateInfo,options);return klass}/**
   * @suppress {missingProperties} class.prototype is not defined for some reason
   */function addPropagateEffects(template,templateInfo,options){let userForwardHostProp=options.forwardHostProp;if(userForwardHostProp){// Provide data API and property effects on memoized template class
let klass=templateInfo.templatizeTemplateClass;if(!klass){/**
       * @constructor
       * @extends {DataTemplate}
       */let templatizedBase=options.mutableData?MutableDataTemplate:DataTemplate;/** @private */klass=templateInfo.templatizeTemplateClass=class TemplatizedTemplate extends templatizedBase{};// Add template - >instances effects
// and host <- template effects
let hostProps=templateInfo.hostProps;for(let prop in hostProps){klass.prototype._addPropertyEffect("_host_"+prop,klass.prototype.PROPERTY_EFFECT_TYPES.PROPAGATE,{fn:createForwardHostPropEffect(prop,userForwardHostProp)});klass.prototype._createNotifyingProperty("_host_"+prop)}}upgradeTemplate(template,klass);// Mix any pre-bound data into __data; no need to flush this to
// instances since they pull from the template at instance-time
if(template.__dataProto){// Note, generally `__dataProto` could be chained, but it's guaranteed
// to not be since this is a vanilla template we just added effects to
Object.assign(template.__data,template.__dataProto)}// Clear any pending data for performance
template.__dataTemp={};template.__dataPending=null;template.__dataOld=null;template._enableProperties()}}/* eslint-enable valid-jsdoc */function createForwardHostPropEffect(hostProp,userForwardHostProp){return function forwardHostProp(template,prop,props){userForwardHostProp.call(template.__templatizeOwner,prop.substring("_host_".length),props[prop])}}function addNotifyEffects(klass,template,templateInfo,options){let hostProps=templateInfo.hostProps||{};for(let iprop in options.instanceProps){delete hostProps[iprop];let userNotifyInstanceProp=options.notifyInstanceProp;if(userNotifyInstanceProp){klass.prototype._addPropertyEffect(iprop,klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,{fn:createNotifyInstancePropEffect(iprop,userNotifyInstanceProp)})}}if(options.forwardHostProp&&template.__dataHost){for(let hprop in hostProps){klass.prototype._addPropertyEffect(hprop,klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,{fn:createNotifyHostPropEffect()})}}}function createNotifyInstancePropEffect(instProp,userNotifyInstanceProp){return function notifyInstanceProp(inst,prop,props){userNotifyInstanceProp.call(inst.__templatizeOwner,inst,prop,props[prop])}}function createNotifyHostPropEffect(){return function notifyHostProp(inst,prop,props){inst.__dataHost._setPendingPropertyOrPath("_host_"+prop,props[prop],!0,!0)}}/**
   * Returns an anonymous `PropertyEffects` class bound to the
   * `<template>` provided.  Instancing the class will result in the
   * template being stamped into a document fragment stored as the instance's
   * `root` property, after which it can be appended to the DOM.
   *
   * Templates may utilize all Polymer data-binding features as well as
   * declarative event listeners.  Event listeners and inline computing
   * functions in the template will be called on the host of the template.
   *
   * The constructor returned takes a single argument dictionary of initial
   * property values to propagate into template bindings.  Additionally
   * host properties can be forwarded in, and instance properties can be
   * notified out by providing optional callbacks in the `options` dictionary.
   *
   * Valid configuration in `options` are as follows:
   *
   * - `forwardHostProp(property, value)`: Called when a property referenced
   *   in the template changed on the template's host. As this library does
   *   not retain references to templates instanced by the user, it is the
   *   templatize owner's responsibility to forward host property changes into
   *   user-stamped instances.  The `instance.forwardHostProp(property, value)`
   *    method on the generated class should be called to forward host
   *   properties into the template to prevent unnecessary property-changed
   *   notifications. Any properties referenced in the template that are not
   *   defined in `instanceProps` will be notified up to the template's host
   *   automatically.
   * - `instanceProps`: Dictionary of property names that will be added
   *   to the instance by the templatize owner.  These properties shadow any
   *   host properties, and changes within the template to these properties
   *   will result in `notifyInstanceProp` being called.
   * - `mutableData`: When `true`, the generated class will skip strict
   *   dirty-checking for objects and arrays (always consider them to be
   *   "dirty").
   * - `notifyInstanceProp(instance, property, value)`: Called when
   *   an instance property changes.  Users may choose to call `notifyPath`
   *   on e.g. the owner to notify the change.
   * - `parentModel`: When `true`, events handled by declarative event listeners
   *   (`on-event="handler"`) will be decorated with a `model` property pointing
   *   to the template instance that stamped it.  It will also be returned
   *   from `instance.parentModel` in cases where template instance nesting
   *   causes an inner model to shadow an outer model.
   *
   * All callbacks are called bound to the `owner`. Any context
   * needed for the callbacks (such as references to `instances` stamped)
   * should be stored on the `owner` such that they can be retrieved via
   * `this`.
   *
   * When `options.forwardHostProp` is declared as an option, any properties
   * referenced in the template will be automatically forwarded from the host of
   * the `<template>` to instances, with the exception of any properties listed in
   * the `options.instanceProps` object.  `instanceProps` are assumed to be
   * managed by the owner of the instances, either passed into the constructor
   * or set after the fact.  Note, any properties passed into the constructor will
   * always be set to the instance (regardless of whether they would normally
   * be forwarded from the host).
   *
   * Note that `templatize()` can be run only once for a given `<template>`.
   * Further calls will result in an error. Also, there is a special
   * behavior if the template was duplicated through a mechanism such as
   * `<dom-repeat>` or `<test-fixture>`. In this case, all calls to
   * `templatize()` return the same class for all duplicates of a template.
   * The class returned from `templatize()` is generated only once using
   * the `options` from the first call. This means that any `options`
   * provided to subsequent calls will be ignored. Therefore, it is very
   * important not to close over any variables inside the callbacks. Also,
   * arrow functions must be avoided because they bind the outer `this`.
   * Inside the callbacks, any contextual information can be accessed
   * through `this`, which points to the `owner`.
   *
   * @param {!HTMLTemplateElement} template Template to templatize
   * @param {Polymer_PropertyEffects=} owner Owner of the template instances;
   *   any optional callbacks will be bound to this owner.
   * @param {Object=} options Options dictionary (see summary for details)
   * @return {function(new:TemplateInstanceBase)} Generated class bound to the template
   *   provided
   * @suppress {invalidCasts}
   */function templatize(template,owner,options){// Under strictTemplatePolicy, the templatized element must be owned
// by a (trusted) Polymer element, indicated by existence of _methodHost;
// e.g. for dom-if & dom-repeat in main document, _methodHost is null
if(strictTemplatePolicy&&!findMethodHost(template)){throw new Error("strictTemplatePolicy: template owner not trusted")}options=/** @type {!TemplatizeOptions} */options||{};if(template.__templatizeOwner){throw new Error("A <template> can only be templatized once")}template.__templatizeOwner=owner;const ctor=owner?owner.constructor:TemplateInstanceBase;let templateInfo=ctor._parseTemplate(template),baseClass=templateInfo.templatizeInstanceClass;// Get memoized base class for the prototypical template, which
// includes property effects for binding template & forwarding
/**
   * @constructor
   * @extends {TemplateInstanceBase}
   */if(!baseClass){baseClass=createTemplatizerClass(template,templateInfo,options);templateInfo.templatizeInstanceClass=baseClass}// Host property forwarding must be installed onto template instance
addPropagateEffects(template,templateInfo,options);// Subclass base class and add reference for this specific template
/** @private */let klass=class TemplateInstance extends baseClass{};/** @override */klass.prototype._methodHost=findMethodHost(template);/** @override */klass.prototype.__dataHost=/** @type {!DataTemplate} */template;/** @override */klass.prototype.__templatizeOwner=/** @type {!Object} */owner;/** @override */klass.prototype.__hostProps=templateInfo.hostProps;klass=/** @type {function(new:TemplateInstanceBase)} */klass;//eslint-disable-line no-self-assign
return klass}/**
   * Returns the template "model" associated with a given element, which
   * serves as the binding scope for the template instance the element is
   * contained in. A template model is an instance of
   * `TemplateInstanceBase`, and should be used to manipulate data
   * associated with this template instance.
   *
   * Example:
   *
   *   let model = modelForElement(el);
   *   if (model.index < 10) {
   *     model.set('item.checked', true);
   *   }
   *
   * @param {HTMLTemplateElement} template The model will be returned for
   *   elements stamped from this template
   * @param {Node=} node Node for which to return a template model.
   * @return {TemplateInstanceBase} Template instance representing the
   *   binding scope for the element
   */function modelForElement(template,node){let model;while(node){// An element with a __templatizeInstance marks the top boundary
// of a scope; walk up until we find one, and then ensure that
// its __dataHost matches `this`, meaning this dom-repeat stamped it
if(model=node.__templatizeInstance){// Found an element stamped by another template; keep walking up
// from its __dataHost
if(model.__dataHost!=template){node=model.__dataHost}else{return model}}else{// Still in a template scope, keep going up until
// a __templatizeInstance is found
node=wrap$1(node).parentNode}}return null}var templatize$1={templatize:templatize,modelForElement:modelForElement,TemplateInstanceBase:TemplateInstanceBase};/**
    * @typedef {{
    *   _templatizerTemplate: HTMLTemplateElement,
    *   _parentModel: boolean,
    *   _instanceProps: Object,
    *   _forwardHostPropV2: Function,
    *   _notifyInstancePropV2: Function,
    *   ctor: TemplateInstanceBase
    * }}
    */_exports.$templatize=templatize$1;let TemplatizerUser;// eslint-disable-line
/**
 * The `Templatizer` behavior adds methods to generate instances of
 * templates that are each managed by an anonymous `PropertyEffects`
 * instance where data-bindings in the stamped template content are bound to
 * accessors on itself.
 *
 * This behavior is provided in Polymer 2.x-3.x as a hybrid-element convenience
 * only.  For non-hybrid usage, the `Templatize` library
 * should be used instead.
 *
 * Example:
 *
 *     import {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';
 *     // Get a template from somewhere, e.g. light DOM
 *     let template = this.querySelector('template');
 *     // Prepare the template
 *     this.templatize(template);
 *     // Instance the template with an initial data model
 *     let instance = this.stamp({myProp: 'initial'});
 *     // Insert the instance's DOM somewhere, e.g. light DOM
 *     dom(this).appendChild(instance.root);
 *     // Changing a property on the instance will propagate to bindings
 *     // in the template
 *     instance.myProp = 'new value';
 *
 * Users of `Templatizer` may need to implement the following abstract
 * API's to determine how properties and paths from the host should be
 * forwarded into to instances:
 *
 *     _forwardHostPropV2: function(prop, value)
 *
 * Likewise, users may implement these additional abstract API's to determine
 * how instance-specific properties that change on the instance should be
 * forwarded out to the host, if necessary.
 *
 *     _notifyInstancePropV2: function(inst, prop, value)
 *
 * In order to determine which properties are instance-specific and require
 * custom notification via `_notifyInstanceProp`, define an `_instanceProps`
 * object containing keys for each instance prop, for example:
 *
 *     _instanceProps: {
 *       item: true,
 *       index: true
 *     }
 *
 * Any properties used in the template that are not defined in _instanceProp
 * will be forwarded out to the Templatize `owner` automatically.
 *
 * Users may also implement the following abstract function to show or
 * hide any DOM generated using `stamp`:
 *
 *     _showHideChildren: function(shouldHide)
 *
 * Note that some callbacks are suffixed with `V2` in the Polymer 2.x behavior
 * as the implementations will need to differ from the callbacks required
 * by the 1.x Templatizer API due to changes in the `TemplateInstance` API
 * between versions 1.x and 2.x.
 *
 * @polymerBehavior
 */const Templatizer={/**
   * Generates an anonymous `TemplateInstance` class (stored as `this.ctor`)
   * for the provided template.  This method should be called once per
   * template to prepare an element for stamping the template, followed
   * by `stamp` to create new instances of the template.
   *
   * @param {!HTMLTemplateElement} template Template to prepare
   * @param {boolean=} mutableData When `true`, the generated class will skip
   *   strict dirty-checking for objects and arrays (always consider them to
   *   be "dirty"). Defaults to false.
   * @return {void}
   * @this {TemplatizerUser}
   */templatize(template,mutableData){this._templatizerTemplate=template;this.ctor=templatize(template,this,{mutableData:!!mutableData,parentModel:this._parentModel,instanceProps:this._instanceProps,forwardHostProp:this._forwardHostPropV2,notifyInstanceProp:this._notifyInstancePropV2})},/**
   * Creates an instance of the template prepared by `templatize`.  The object
   * returned is an instance of the anonymous class generated by `templatize`
   * whose `root` property is a document fragment containing newly cloned
   * template content, and which has property accessors corresponding to
   * properties referenced in template bindings.
   *
   * @param {Object=} model Object containing initial property values to
   *   populate into the template bindings.
   * @return {TemplateInstanceBase} Returns the created instance of
   * the template prepared by `templatize`.
   * @this {TemplatizerUser}
   */stamp(model){return new this.ctor(model)},/**
   * Returns the template "model" (`TemplateInstance`) associated with
   * a given element, which serves as the binding scope for the template
   * instance the element is contained in.  A template model should be used
   * to manipulate data associated with this template instance.
   *
   * @param {HTMLElement} el Element for which to return a template model.
   * @return {TemplateInstanceBase} Model representing the binding scope for
   *   the element.
   * @this {TemplatizerUser}
   */modelForElement(el){return modelForElement(this._templatizerTemplate,el)}};_exports.Templatizer=Templatizer;var templatizerBehavior={Templatizer:Templatizer};_exports.$templatizerBehavior=templatizerBehavior;const domBindBase=GestureEventListeners(OptionalMutableData(PropertyEffects(HTMLElement)));/**
                                                                                               * Custom element to allow using Polymer's template features (data binding,
                                                                                               * declarative event listeners, etc.) in the main document without defining
                                                                                               * a new custom element.
                                                                                               *
                                                                                               * `<template>` tags utilizing bindings may be wrapped with the `<dom-bind>`
                                                                                               * element, which will immediately stamp the wrapped template into the main
                                                                                               * document and bind elements to the `dom-bind` element itself as the
                                                                                               * binding scope.
                                                                                               *
                                                                                               * @polymer
                                                                                               * @customElement
                                                                                               * @appliesMixin PropertyEffects
                                                                                               * @appliesMixin OptionalMutableData
                                                                                               * @appliesMixin GestureEventListeners
                                                                                               * @extends {domBindBase}
                                                                                               * @summary Custom element to allow using Polymer's template features (data
                                                                                               *   binding, declarative event listeners, etc.) in the main document.
                                                                                               */class DomBind extends domBindBase{static get observedAttributes(){return["mutable-data"]}constructor(){super();if(strictTemplatePolicy){throw new Error(`strictTemplatePolicy: dom-bind not allowed`)}this.root=null;this.$=null;this.__children=null}/**
     * @override
     * @return {void}
     */attributeChangedCallback(){// assumes only one observed attribute
this.mutableData=!0}/**
     * @override
     * @return {void}
     */connectedCallback(){this.style.display="none";this.render()}/**
     * @override
     * @return {void}
     */disconnectedCallback(){this.__removeChildren()}__insertChildren(){wrap$1(wrap$1(this).parentNode).insertBefore(this.root,this)}__removeChildren(){if(this.__children){for(let i=0;i<this.__children.length;i++){this.root.appendChild(this.__children[i])}}}/**
     * Forces the element to render its content. This is typically only
     * necessary to call if HTMLImports with the async attribute are used.
     * @return {void}
     */render(){let template;if(!this.__children){template=/** @type {HTMLTemplateElement} */template||this.querySelector("template");if(!template){// Wait until childList changes and template should be there by then
let observer=new MutationObserver(()=>{template=/** @type {HTMLTemplateElement} */this.querySelector("template");if(template){observer.disconnect();this.render()}else{throw new Error("dom-bind requires a <template> child")}});observer.observe(this,{childList:!0});return}this.root=this._stampTemplate(/** @type {!HTMLTemplateElement} */template);this.$=this.root.$;this.__children=[];for(let n=this.root.firstChild;n;n=n.nextSibling){this.__children[this.__children.length]=n}this._enableProperties()}this.__insertChildren();this.dispatchEvent(new CustomEvent("dom-change",{bubbles:!0,composed:!0}))}}_exports.DomBind=DomBind;customElements.define("dom-bind",DomBind);var domBind={DomBind:DomBind};_exports.$domBind=domBind;class LiteralString{constructor(string){/** @type {string} */this.value=string.toString()}/**
     * @return {string} LiteralString string value
     * @override
     */toString(){return this.value}}/**
   * @param {*} value Object to stringify into HTML
   * @return {string} HTML stringified form of `obj`
   */function literalValue(value){if(value instanceof LiteralString){return(/** @type {!LiteralString} */value.value)}else{throw new Error(`non-literal value passed to Polymer's htmlLiteral function: ${value}`)}}/**
   * @param {*} value Object to stringify into HTML
   * @return {string} HTML stringified form of `obj`
   */function htmlValue(value){if(value instanceof HTMLTemplateElement){return(/** @type {!HTMLTemplateElement } */value.innerHTML)}else if(value instanceof LiteralString){return literalValue(value)}else{throw new Error(`non-template value passed to Polymer's html function: ${value}`)}}/**
   * A template literal tag that creates an HTML <template> element from the
   * contents of the string.
   *
   * This allows you to write a Polymer Template in JavaScript.
   *
   * Templates can be composed by interpolating `HTMLTemplateElement`s in
   * expressions in the JavaScript template literal. The nested template's
   * `innerHTML` is included in the containing template.  The only other
   * values allowed in expressions are those returned from `htmlLiteral`
   * which ensures only literal values from JS source ever reach the HTML, to
   * guard against XSS risks.
   *
   * All other values are disallowed in expressions to help prevent XSS
   * attacks; however, `htmlLiteral` can be used to compose static
   * string values into templates. This is useful to compose strings into
   * places that do not accept html, like the css text of a `style`
   * element.
   *
   * Example:
   *
   *     static get template() {
   *       return html`
   *         <style>:host{ content:"..." }</style>
   *         <div class="shadowed">${this.partialTemplate}</div>
   *         ${super.template}
   *       `;
   *     }
   *     static get partialTemplate() { return html`<span>Partial!</span>`; }
   *
   * @param {!ITemplateArray} strings Constant parts of tagged template literal
   * @param {...*} values Variable parts of tagged template literal
   * @return {!HTMLTemplateElement} Constructed HTMLTemplateElement
   */const html=function html(strings,...values){const template=/** @type {!HTMLTemplateElement} */document.createElement("template");template.innerHTML=values.reduce((acc,v,idx)=>acc+htmlValue(v)+strings[idx+1],strings[0]);return template};/**
    * An html literal tag that can be used with `html` to compose.
    * a literal string.
    *
    * Example:
    *
    *     static get template() {
    *       return html`
    *         <style>
    *           :host { display: block; }
    *           ${this.styleTemplate()}
    *         </style>
    *         <div class="shadowed">${staticValue}</div>
    *         ${super.template}
    *       `;
    *     }
    *     static get styleTemplate() {
    *        return htmlLiteral`.shadowed { background: gray; }`;
    *     }
    *
    * @param {!ITemplateArray} strings Constant parts of tagged template literal
    * @param {...*} values Variable parts of tagged template literal
    * @return {!LiteralString} Constructed literal string
    */_exports.html$2=_exports.html$1=_exports.html=html;const htmlLiteral=function(strings,...values){return new LiteralString(values.reduce((acc,v,idx)=>acc+literalValue(v)+strings[idx+1],strings[0]))};_exports.htmlLiteral=htmlLiteral;var htmlTag={html:html,htmlLiteral:htmlLiteral};_exports.$htmlTag=htmlTag;const PolymerElement=ElementMixin(HTMLElement);_exports.PolymerElement=PolymerElement;var polymerElement={version:version$1,PolymerElement:PolymerElement,html:html};_exports.$polymerElement=polymerElement;const domRepeatBase=OptionalMutableData(PolymerElement);/**
                                                            * The `<dom-repeat>` element will automatically stamp and binds one instance
                                                            * of template content to each object in a user-provided array.
                                                            * `dom-repeat` accepts an `items` property, and one instance of the template
                                                            * is stamped for each item into the DOM at the location of the `dom-repeat`
                                                            * element.  The `item` property will be set on each instance's binding
                                                            * scope, thus templates should bind to sub-properties of `item`.
                                                            *
                                                            * Example:
                                                            *
                                                            * ```html
                                                            * <dom-module id="employee-list">
                                                            *
                                                            *   <template>
                                                            *
                                                            *     <div> Employee list: </div>
                                                            *     <dom-repeat items="{{employees}}">
                                                            *       <template>
                                                            *         <div>First name: <span>{{item.first}}</span></div>
                                                            *         <div>Last name: <span>{{item.last}}</span></div>
                                                            *       </template>
                                                            *     </dom-repeat>
                                                            *
                                                            *   </template>
                                                            *
                                                            * </dom-module>
                                                            * ```
                                                            *
                                                            * With the following custom element definition:
                                                            *
                                                            * ```js
                                                            * class EmployeeList extends PolymerElement {
                                                            *   static get is() { return 'employee-list'; }
                                                            *   static get properties() {
                                                            *     return {
                                                            *       employees: {
                                                            *         value() {
                                                            *           return [
                                                            *             {first: 'Bob', last: 'Smith'},
                                                            *             {first: 'Sally', last: 'Johnson'},
                                                            *             ...
                                                            *           ];
                                                            *         }
                                                            *       }
                                                            *     };
                                                            *   }
                                                            * }
                                                            * ```
                                                            *
                                                            * Notifications for changes to items sub-properties will be forwarded to template
                                                            * instances, which will update via the normal structured data notification system.
                                                            *
                                                            * Mutations to the `items` array itself should be made using the Array
                                                            * mutation API's on the PropertyEffects mixin (`push`, `pop`, `splice`,
                                                            * `shift`, `unshift`), and template instances will be kept in sync with the
                                                            * data in the array.
                                                            *
                                                            * Events caught by event handlers within the `dom-repeat` template will be
                                                            * decorated with a `model` property, which represents the binding scope for
                                                            * each template instance.  The model should be used to manipulate data on the
                                                            * instance, for example `event.model.set('item.checked', true);`.
                                                            *
                                                            * Alternatively, the model for a template instance for an element stamped by
                                                            * a `dom-repeat` can be obtained using the `modelForElement` API on the
                                                            * `dom-repeat` that stamped it, for example
                                                            * `this.$.domRepeat.modelForElement(event.target).set('item.checked', true);`.
                                                            * This may be useful for manipulating instance data of event targets obtained
                                                            * by event handlers on parents of the `dom-repeat` (event delegation).
                                                            *
                                                            * A view-specific filter/sort may be applied to each `dom-repeat` by supplying a
                                                            * `filter` and/or `sort` property.  This may be a string that names a function on
                                                            * the host, or a function may be assigned to the property directly.  The functions
                                                            * should implemented following the standard `Array` filter/sort API.
                                                            *
                                                            * In order to re-run the filter or sort functions based on changes to sub-fields
                                                            * of `items`, the `observe` property may be set as a space-separated list of
                                                            * `item` sub-fields that should cause a re-filter/sort when modified.  If
                                                            * the filter or sort function depends on properties not contained in `items`,
                                                            * the user should observe changes to those properties and call `render` to update
                                                            * the view based on the dependency change.
                                                            *
                                                            * For example, for an `dom-repeat` with a filter of the following:
                                                            *
                                                            * ```js
                                                            * isEngineer(item) {
                                                            *   return item.type == 'engineer' || item.manager.type == 'engineer';
                                                            * }
                                                            * ```
                                                            *
                                                            * Then the `observe` property should be configured as follows:
                                                            *
                                                            * ```html
                                                            * <dom-repeat items="{{employees}}" filter="isEngineer" observe="type manager.type">
                                                            * ```
                                                            *
                                                            * @customElement
                                                            * @polymer
                                                            * @extends {domRepeatBase}
                                                            * @appliesMixin OptionalMutableData
                                                            * @summary Custom element for stamping instance of a template bound to
                                                            *   items in an array.
                                                            */class DomRepeat extends domRepeatBase{// Not needed to find template; can be removed once the analyzer
// can find the tag name from customElements.define call
static get is(){return"dom-repeat"}static get template(){return null}static get properties(){/**
     * Fired whenever DOM is added or removed by this template (by
     * default, rendering occurs lazily).  To force immediate rendering, call
     * `render`.
     *
     * @event dom-change
     */return{/**
       * An array containing items determining how many instances of the template
       * to stamp and that that each template instance should bind to.
       */items:{type:Array},/**
       * The name of the variable to add to the binding scope for the array
       * element associated with a given template instance.
       */as:{type:String,value:"item"},/**
       * The name of the variable to add to the binding scope with the index
       * of the instance in the sorted and filtered list of rendered items.
       * Note, for the index in the `this.items` array, use the value of the
       * `itemsIndexAs` property.
       */indexAs:{type:String,value:"index"},/**
       * The name of the variable to add to the binding scope with the index
       * of the instance in the `this.items` array. Note, for the index of
       * this instance in the sorted and filtered list of rendered items,
       * use the value of the `indexAs` property.
       */itemsIndexAs:{type:String,value:"itemsIndex"},/**
       * A function that should determine the sort order of the items.  This
       * property should either be provided as a string, indicating a method
       * name on the element's host, or else be an actual function.  The
       * function should match the sort function passed to `Array.sort`.
       * Using a sort function has no effect on the underlying `items` array.
       */sort:{type:Function,observer:"__sortChanged"},/**
       * A function that can be used to filter items out of the view.  This
       * property should either be provided as a string, indicating a method
       * name on the element's host, or else be an actual function.  The
       * function should match the sort function passed to `Array.filter`.
       * Using a filter function has no effect on the underlying `items` array.
       */filter:{type:Function,observer:"__filterChanged"},/**
       * When using a `filter` or `sort` function, the `observe` property
       * should be set to a space-separated list of the names of item
       * sub-fields that should trigger a re-sort or re-filter when changed.
       * These should generally be fields of `item` that the sort or filter
       * function depends on.
       */observe:{type:String,observer:"__observeChanged"},/**
       * When using a `filter` or `sort` function, the `delay` property
       * determines a debounce time in ms after a change to observed item
       * properties that must pass before the filter or sort is re-run.
       * This is useful in rate-limiting shuffling of the view when
       * item changes may be frequent.
       */delay:Number,/**
       * Count of currently rendered items after `filter` (if any) has been applied.
       * If "chunking mode" is enabled, `renderedItemCount` is updated each time a
       * set of template instances is rendered.
       *
       */renderedItemCount:{type:Number,notify:!0,readOnly:!0},/**
       * Defines an initial count of template instances to render after setting
       * the `items` array, before the next paint, and puts the `dom-repeat`
       * into "chunking mode".  The remaining items will be created and rendered
       * incrementally at each animation frame therof until all instances have
       * been rendered.
       */initialCount:{type:Number,observer:"__initializeChunking"},/**
       * When `initialCount` is used, this property defines a frame rate (in
       * fps) to target by throttling the number of instances rendered each
       * frame to not exceed the budget for the target frame rate.  The
       * framerate is effectively the number of `requestAnimationFrame`s that
       * it tries to allow to actually fire in a given second. It does this
       * by measuring the time between `rAF`s and continuously adjusting the
       * number of items created each `rAF` to maintain the target framerate.
       * Setting this to a higher number allows lower latency and higher
       * throughput for event handlers and other tasks, but results in a
       * longer time for the remaining items to complete rendering.
       */targetFramerate:{type:Number,value:20},_targetFrameTime:{type:Number,computed:"__computeFrameTime(targetFramerate)"}}}static get observers(){return["__itemsChanged(items.*)"]}constructor(){super();this.__instances=[];this.__limit=1/0;this.__pool=[];this.__renderDebouncer=null;this.__itemsIdxToInstIdx={};this.__chunkCount=null;this.__lastChunkTime=null;this.__sortFn=null;this.__filterFn=null;this.__observePaths=null;/** @type {?function(new:Polymer.TemplateInstanceBase, *)} */this.__ctor=null;this.__isDetached=!0;this.template=null}/**
     * @override
     * @return {void}
     */disconnectedCallback(){super.disconnectedCallback();this.__isDetached=!0;for(let i=0;i<this.__instances.length;i++){this.__detachInstance(i)}}/**
     * @override
     * @return {void}
     */connectedCallback(){super.connectedCallback();this.style.display="none";// only perform attachment if the element was previously detached.
if(this.__isDetached){this.__isDetached=!1;let wrappedParent=wrap$1(wrap$1(this).parentNode);for(let i=0;i<this.__instances.length;i++){this.__attachInstance(i,wrappedParent)}}}__ensureTemplatized(){// Templatizing (generating the instance constructor) needs to wait
// until ready, since won't have its template content handed back to
// it until then
if(!this.__ctor){let template=this.template=/** @type {HTMLTemplateElement} */this.querySelector("template");if(!template){// // Wait until childList changes and template should be there by then
let observer=new MutationObserver(()=>{if(this.querySelector("template")){observer.disconnect();this.__render()}else{throw new Error("dom-repeat requires a <template> child")}});observer.observe(this,{childList:!0});return!1}// Template instance props that should be excluded from forwarding
let instanceProps={};instanceProps[this.as]=!0;instanceProps[this.indexAs]=!0;instanceProps[this.itemsIndexAs]=!0;this.__ctor=templatize(template,this,{mutableData:this.mutableData,parentModel:!0,instanceProps:instanceProps,/**
         * @this {DomRepeat}
         * @param {string} prop Property to set
         * @param {*} value Value to set property to
         */forwardHostProp:function(prop,value){let i$=this.__instances;for(let i=0,inst;i<i$.length&&(inst=i$[i]);i++){inst.forwardHostProp(prop,value)}},/**
         * @this {DomRepeat}
         * @param {Object} inst Instance to notify
         * @param {string} prop Property to notify
         * @param {*} value Value to notify
         */notifyInstanceProp:function(inst,prop,value){if(matches(this.as,prop)){let idx=inst[this.itemsIndexAs];if(prop==this.as){this.items[idx]=value}let path=translate(this.as,`${JSCompiler_renameProperty("items",this)}.${idx}`,prop);this.notifyPath(path,value)}}})}return!0}__getMethodHost(){// Technically this should be the owner of the outermost template.
// In shadow dom, this is always getRootNode().host, but we can
// approximate this via cooperation with our dataHost always setting
// `_methodHost` as long as there were bindings (or id's) on this
// instance causing it to get a dataHost.
return this.__dataHost._methodHost||this.__dataHost}__functionFromPropertyValue(functionOrMethodName){if("string"===typeof functionOrMethodName){let methodName=functionOrMethodName,obj=this.__getMethodHost();return function(){return obj[methodName].apply(obj,arguments)}}return functionOrMethodName}__sortChanged(sort){this.__sortFn=this.__functionFromPropertyValue(sort);if(this.items){this.__debounceRender(this.__render)}}__filterChanged(filter){this.__filterFn=this.__functionFromPropertyValue(filter);if(this.items){this.__debounceRender(this.__render)}}__computeFrameTime(rate){return Math.ceil(1e3/rate)}__initializeChunking(){if(this.initialCount){this.__limit=this.initialCount;this.__chunkCount=this.initialCount;this.__lastChunkTime=performance.now()}}__tryRenderChunk(){// Debounced so that multiple calls through `_render` between animation
// frames only queue one new rAF (e.g. array mutation & chunked render)
if(this.items&&this.__limit<this.items.length){this.__debounceRender(this.__requestRenderChunk)}}__requestRenderChunk(){requestAnimationFrame(()=>this.__renderChunk())}__renderChunk(){// Simple auto chunkSize throttling algorithm based on feedback loop:
// measure actual time between frames and scale chunk count by ratio
// of target/actual frame time
let currChunkTime=performance.now(),ratio=this._targetFrameTime/(currChunkTime-this.__lastChunkTime);this.__chunkCount=Math.round(this.__chunkCount*ratio)||1;this.__limit+=this.__chunkCount;this.__lastChunkTime=currChunkTime;this.__debounceRender(this.__render)}__observeChanged(){this.__observePaths=this.observe&&this.observe.replace(".*",".").split(" ")}__itemsChanged(change){if(this.items&&!Array.isArray(this.items)){console.warn("dom-repeat expected array for `items`, found",this.items)}// If path was to an item (e.g. 'items.3' or 'items.3.foo'), forward the
// path to that instance synchronously (returns false for non-item paths)
if(!this.__handleItemPath(change.path,change.value)){// Otherwise, the array was reset ('items') or spliced ('items.splices'),
// so queue a full refresh
this.__initializeChunking();this.__debounceRender(this.__render)}}__handleObservedPaths(path){// Handle cases where path changes should cause a re-sort/filter
if(this.__sortFn||this.__filterFn){if(!path){// Always re-render if the item itself changed
this.__debounceRender(this.__render,this.delay)}else if(this.__observePaths){// Otherwise, re-render if the path changed matches an observed path
let paths=this.__observePaths;for(let i=0;i<paths.length;i++){if(0===path.indexOf(paths[i])){this.__debounceRender(this.__render,this.delay)}}}}}/**
     * @param {function(this:DomRepeat)} fn Function to debounce.
     * @param {number=} delay Delay in ms to debounce by.
     */__debounceRender(fn,delay=0){this.__renderDebouncer=Debouncer.debounce(this.__renderDebouncer,0<delay?timeOut.after(delay):microTask,fn.bind(this));enqueueDebouncer(this.__renderDebouncer)}/**
     * Forces the element to render its content. Normally rendering is
     * asynchronous to a provoking change. This is done for efficiency so
     * that multiple changes trigger only a single render. The render method
     * should be called if, for example, template rendering is required to
     * validate application state.
     * @return {void}
     */render(){// Queue this repeater, then flush all in order
this.__debounceRender(this.__render);flush$1()}__render(){if(!this.__ensureTemplatized()){// No template found yet
return}this.__applyFullRefresh();// Reset the pool
// TODO(kschaaf): Reuse pool across turns and nested templates
// Now that objects/arrays are re-evaluated when set, we can safely
// reuse pooled instances across turns, however we still need to decide
// semantics regarding how long to hold, how many to hold, etc.
this.__pool.length=0;// Set rendered item count
this._setRenderedItemCount(this.__instances.length);// Notify users
this.dispatchEvent(new CustomEvent("dom-change",{bubbles:!0,composed:!0}));// Check to see if we need to render more items
this.__tryRenderChunk()}__applyFullRefresh(){let items=this.items||[],isntIdxToItemsIdx=Array(items.length);for(let i=0;i<items.length;i++){isntIdxToItemsIdx[i]=i}// Apply user filter
if(this.__filterFn){isntIdxToItemsIdx=isntIdxToItemsIdx.filter((i,idx,array)=>this.__filterFn(items[i],idx,array))}// Apply user sort
if(this.__sortFn){isntIdxToItemsIdx.sort((a,b)=>this.__sortFn(items[a],items[b]))}// items->inst map kept for item path forwarding
const itemsIdxToInstIdx=this.__itemsIdxToInstIdx={};let instIdx=0;// Generate instances and assign items
const limit=Math.min(isntIdxToItemsIdx.length,this.__limit);for(;instIdx<limit;instIdx++){let inst=this.__instances[instIdx],itemIdx=isntIdxToItemsIdx[instIdx],item=items[itemIdx];itemsIdxToInstIdx[itemIdx]=instIdx;if(inst){inst._setPendingProperty(this.as,item);inst._setPendingProperty(this.indexAs,instIdx);inst._setPendingProperty(this.itemsIndexAs,itemIdx);inst._flushProperties()}else{this.__insertInstance(item,instIdx,itemIdx)}}// Remove any extra instances from previous state
for(let i=this.__instances.length-1;i>=instIdx;i--){this.__detachAndRemoveInstance(i)}}__detachInstance(idx){let inst=this.__instances[idx];const wrappedRoot=wrap$1(inst.root);for(let i=0,el;i<inst.children.length;i++){el=inst.children[i];wrappedRoot.appendChild(el)}return inst}__attachInstance(idx,parent){let inst=this.__instances[idx];// Note, this is pre-wrapped as an optimization
parent.insertBefore(inst.root,this)}__detachAndRemoveInstance(idx){let inst=this.__detachInstance(idx);if(inst){this.__pool.push(inst)}this.__instances.splice(idx,1)}__stampInstance(item,instIdx,itemIdx){let model={};model[this.as]=item;model[this.indexAs]=instIdx;model[this.itemsIndexAs]=itemIdx;return new this.__ctor(model)}__insertInstance(item,instIdx,itemIdx){let inst=this.__pool.pop();if(inst){// TODO(kschaaf): If the pool is shared across turns, hostProps
// need to be re-set to reused instances in addition to item
inst._setPendingProperty(this.as,item);inst._setPendingProperty(this.indexAs,instIdx);inst._setPendingProperty(this.itemsIndexAs,itemIdx);inst._flushProperties()}else{inst=this.__stampInstance(item,instIdx,itemIdx)}let beforeRow=this.__instances[instIdx+1],beforeNode=beforeRow?beforeRow.children[0]:this;wrap$1(wrap$1(this).parentNode).insertBefore(inst.root,beforeNode);this.__instances[instIdx]=inst;return inst}// Implements extension point from Templatize mixin
/**
   * Shows or hides the template instance top level child elements. For
   * text nodes, `textContent` is removed while "hidden" and replaced when
   * "shown."
   * @param {boolean} hidden Set to true to hide the children;
   * set to false to show them.
   * @return {void}
   * @protected
   */_showHideChildren(hidden){for(let i=0;i<this.__instances.length;i++){this.__instances[i]._showHideChildren(hidden)}}// Called as a side effect of a host items.<key>.<path> path change,
// responsible for notifying item.<path> changes to inst for key
__handleItemPath(path,value){let itemsPath=path.slice(6),dot=itemsPath.indexOf("."),itemsIdx=0>dot?itemsPath:itemsPath.substring(0,dot);// 'items.'.length == 6
// If path was index into array...
if(itemsIdx==parseInt(itemsIdx,10)){let itemSubPath=0>dot?"":itemsPath.substring(dot+1);// If the path is observed, it will trigger a full refresh
this.__handleObservedPaths(itemSubPath);// Note, even if a rull refresh is triggered, always do the path
// notification because unless mutableData is used for dom-repeat
// and all elements in the instance subtree, a full refresh may
// not trigger the proper update.
let instIdx=this.__itemsIdxToInstIdx[itemsIdx],inst=this.__instances[instIdx];if(inst){let itemPath=this.as+(itemSubPath?"."+itemSubPath:"");// This is effectively `notifyPath`, but avoids some of the overhead
// of the public API
inst._setPendingPropertyOrPath(itemPath,value,!1,!0);inst._flushProperties()}return!0}}/**
     * Returns the item associated with a given element stamped by
     * this `dom-repeat`.
     *
     * Note, to modify sub-properties of the item,
     * `modelForElement(el).set('item.<sub-prop>', value)`
     * should be used.
     *
     * @param {!HTMLElement} el Element for which to return the item.
     * @return {*} Item associated with the element.
     */itemForElement(el){let instance=this.modelForElement(el);return instance&&instance[this.as]}/**
     * Returns the inst index for a given element stamped by this `dom-repeat`.
     * If `sort` is provided, the index will reflect the sorted order (rather
     * than the original array order).
     *
     * @param {!HTMLElement} el Element for which to return the index.
     * @return {?number} Row index associated with the element (note this may
     *   not correspond to the array index if a user `sort` is applied).
     */indexForElement(el){let instance=this.modelForElement(el);return instance&&instance[this.indexAs]}/**
     * Returns the template "model" associated with a given element, which
     * serves as the binding scope for the template instance the element is
     * contained in. A template model
     * should be used to manipulate data associated with this template instance.
     *
     * Example:
     *
     *   let model = modelForElement(el);
     *   if (model.index < 10) {
     *     model.set('item.checked', true);
     *   }
     *
     * @param {!HTMLElement} el Element for which to return a template model.
     * @return {TemplateInstanceBase} Model representing the binding scope for
     *   the element.
     */modelForElement(el){return modelForElement(this.template,el)}}_exports.DomRepeat=DomRepeat;customElements.define(DomRepeat.is,DomRepeat);var domRepeat={DomRepeat:DomRepeat};_exports.$domRepeat=domRepeat;class DomIf extends PolymerElement{// Not needed to find template; can be removed once the analyzer
// can find the tag name from customElements.define call
static get is(){return"dom-if"}static get template(){return null}static get properties(){return{/**
       * Fired whenever DOM is added or removed/hidden by this template (by
       * default, rendering occurs lazily).  To force immediate rendering, call
       * `render`.
       *
       * @event dom-change
       */ /**
           * A boolean indicating whether this template should stamp.
           */if:{type:Boolean,observer:"__debounceRender"},/**
       * When true, elements will be removed from DOM and discarded when `if`
       * becomes false and re-created and added back to the DOM when `if`
       * becomes true.  By default, stamped elements will be hidden but left
       * in the DOM when `if` becomes false, which is generally results
       * in better performance.
       */restamp:{type:Boolean,observer:"__debounceRender"}}}constructor(){super();this.__renderDebouncer=null;this.__invalidProps=null;this.__instance=null;this._lastIf=!1;this.__ctor=null;this.__hideTemplateChildren__=!1}__debounceRender(){// Render is async for 2 reasons:
// 1. To eliminate dom creation trashing if user code thrashes `if` in the
//    same turn. This was more common in 1.x where a compound computed
//    property could result in the result changing multiple times, but is
//    mitigated to a large extent by batched property processing in 2.x.
// 2. To avoid double object propagation when a bag including values bound
//    to the `if` property as well as one or more hostProps could enqueue
//    the <dom-if> to flush before the <template>'s host property
//    forwarding. In that scenario creating an instance would result in
//    the host props being set once, and then the enqueued changes on the
//    template would set properties a second time, potentially causing an
//    object to be set to an instance more than once.  Creating the
//    instance async from flushing data ensures this doesn't happen. If
//    we wanted a sync option in the future, simply having <dom-if> flush
//    (or clear) its template's pending host properties before creating
//    the instance would also avoid the problem.
this.__renderDebouncer=Debouncer.debounce(this.__renderDebouncer,microTask,()=>this.__render());enqueueDebouncer(this.__renderDebouncer)}/**
     * @override
     * @return {void}
     */disconnectedCallback(){super.disconnectedCallback();const parent=wrap$1(this).parentNode;if(!parent||parent.nodeType==Node.DOCUMENT_FRAGMENT_NODE&&!wrap$1(parent).host){this.__teardownInstance()}}/**
     * @override
     * @return {void}
     */connectedCallback(){super.connectedCallback();this.style.display="none";if(this.if){this.__debounceRender()}}/**
     * Forces the element to render its content. Normally rendering is
     * asynchronous to a provoking change. This is done for efficiency so
     * that multiple changes trigger only a single render. The render method
     * should be called if, for example, template rendering is required to
     * validate application state.
     * @return {void}
     */render(){flush$1()}__render(){if(this.if){if(!this.__ensureInstance()){// No template found yet
return}this._showHideChildren()}else if(this.restamp){this.__teardownInstance()}if(!this.restamp&&this.__instance){this._showHideChildren()}if(this.if!=this._lastIf){this.dispatchEvent(new CustomEvent("dom-change",{bubbles:!0,composed:!0}));this._lastIf=this.if}}__ensureInstance(){let parentNode=wrap$1(this).parentNode;// Guard against element being detached while render was queued
if(parentNode){if(!this.__ctor){let template=/** @type {HTMLTemplateElement} */wrap$1(this).querySelector("template");if(!template){// Wait until childList changes and template should be there by then
let observer=new MutationObserver(()=>{if(wrap$1(this).querySelector("template")){observer.disconnect();this.__render()}else{throw new Error("dom-if requires a <template> child")}});observer.observe(this,{childList:!0});return!1}this.__ctor=templatize(template,this,{// dom-if templatizer instances require `mutable: true`, as
// `__syncHostProperties` relies on that behavior to sync objects
mutableData:!0,/**
           * @param {string} prop Property to forward
           * @param {*} value Value of property
           * @this {DomIf}
           */forwardHostProp:function(prop,value){if(this.__instance){if(this.if){this.__instance.forwardHostProp(prop,value)}else{// If we have an instance but are squelching host property
// forwarding due to if being false, note the invalidated
// properties so `__syncHostProperties` can sync them the next
// time `if` becomes true
this.__invalidProps=this.__invalidProps||Object.create(null);this.__invalidProps[root(prop)]=!0}}}})}if(!this.__instance){this.__instance=new this.__ctor;wrap$1(parentNode).insertBefore(this.__instance.root,this)}else{this.__syncHostProperties();let c$=this.__instance.children;if(c$&&c$.length){// Detect case where dom-if was re-attached in new position
let lastChild=wrap$1(this).previousSibling;if(lastChild!==c$[c$.length-1]){for(let i=0,n;i<c$.length&&(n=c$[i]);i++){wrap$1(parentNode).insertBefore(n,this)}}}}}return!0}__syncHostProperties(){let props=this.__invalidProps;if(props){for(let prop in props){this.__instance._setPendingProperty(prop,this.__dataHost[prop])}this.__invalidProps=null;this.__instance._flushProperties()}}__teardownInstance(){if(this.__instance){let c$=this.__instance.children;if(c$&&c$.length){// use first child parent, for case when dom-if may have been detached
let parent=wrap$1(c$[0]).parentNode;// Instance children may be disconnected from parents when dom-if
// detaches if a tree was innerHTML'ed
if(parent){parent=wrap$1(parent);for(let i=0,n;i<c$.length&&(n=c$[i]);i++){parent.removeChild(n)}}}this.__instance=null;this.__invalidProps=null}}/**
     * Shows or hides the template instance top level child elements. For
     * text nodes, `textContent` is removed while "hidden" and replaced when
     * "shown."
     * @return {void}
     * @protected
     * @suppress {visibility}
     */_showHideChildren(){let hidden=this.__hideTemplateChildren__||!this.if;if(this.__instance){this.__instance._showHideChildren(hidden)}}}_exports.DomIf=DomIf;customElements.define(DomIf.is,DomIf);var domIf={DomIf:DomIf};_exports.$domIf=domIf;let ArraySelectorMixin=dedupingMixin(superClass=>{/**
   * @constructor
   * @implements {Polymer_ElementMixin}
   * @private
   */let elementBase=ElementMixin(superClass);/**
                                                  * @polymer
                                                  * @mixinClass
                                                  * @implements {Polymer_ArraySelectorMixin}
                                                  * @unrestricted
                                                  */class ArraySelectorMixin extends elementBase{static get properties(){return{/**
         * An array containing items from which selection will be made.
         */items:{type:Array},/**
         * When `true`, multiple items may be selected at once (in this case,
         * `selected` is an array of currently selected items).  When `false`,
         * only one item may be selected at a time.
         */multi:{type:Boolean,value:!1},/**
         * When `multi` is true, this is an array that contains any selected.
         * When `multi` is false, this is the currently selected item, or `null`
         * if no item is selected.
         * @type {?Object|?Array<!Object>}
         */selected:{type:Object,notify:!0},/**
         * When `multi` is false, this is the currently selected item, or `null`
         * if no item is selected.
         * @type {?Object}
         */selectedItem:{type:Object,notify:!0},/**
         * When `true`, calling `select` on an item that is already selected
         * will deselect the item.
         */toggle:{type:Boolean,value:!1}}}static get observers(){return["__updateSelection(multi, items.*)"]}constructor(){super();this.__lastItems=null;this.__lastMulti=null;this.__selectedMap=null}__updateSelection(multi,itemsInfo){let path=itemsInfo.path;if(path==JSCompiler_renameProperty("items",this)){// Case 1 - items array changed, so diff against previous array and
// deselect any removed items and adjust selected indices
let newItems=itemsInfo.base||[],lastItems=this.__lastItems,lastMulti=this.__lastMulti;if(multi!==lastMulti){this.clearSelection()}if(lastItems){let splices=calculateSplices(newItems,lastItems);this.__applySplices(splices)}this.__lastItems=newItems;this.__lastMulti=multi}else if(`${JSCompiler_renameProperty("items",this)}.splices`==itemsInfo.path){// Case 2 - got specific splice information describing the array mutation:
// deselect any removed items and adjust selected indices
this.__applySplices(itemsInfo.value.indexSplices)}else{// Case 3 - an array element was changed, so deselect the previous
// item for that index if it was previously selected
let part=path.slice(`${JSCompiler_renameProperty("items",this)}.`.length),idx=parseInt(part,10);if(0>part.indexOf(".")&&part==idx){this.__deselectChangedIdx(idx)}}}__applySplices(splices){let selected=this.__selectedMap;// Adjust selected indices and mark removals
for(let i=0,s;i<splices.length;i++){s=splices[i];selected.forEach((idx,item)=>{if(idx<s.index){// no change
}else if(idx>=s.index+s.removed.length){// adjust index
selected.set(item,idx+s.addedCount-s.removed.length)}else{// remove index
selected.set(item,-1)}});for(let j=0,idx;j<s.addedCount;j++){idx=s.index+j;if(selected.has(this.items[idx])){selected.set(this.items[idx],idx)}}}// Update linked paths
this.__updateLinks();// Remove selected items that were removed from the items array
let sidx=0;selected.forEach((idx,item)=>{if(0>idx){if(this.multi){this.splice(JSCompiler_renameProperty("selected",this),sidx,1)}else{this.selected=this.selectedItem=null}selected.delete(item)}else{sidx++}})}__updateLinks(){this.__dataLinkedPaths={};if(this.multi){let sidx=0;this.__selectedMap.forEach(idx=>{if(0<=idx){this.linkPaths(`${JSCompiler_renameProperty("items",this)}.${idx}`,`${JSCompiler_renameProperty("selected",this)}.${sidx++}`)}})}else{this.__selectedMap.forEach(idx=>{this.linkPaths(JSCompiler_renameProperty("selected",this),`${JSCompiler_renameProperty("items",this)}.${idx}`);this.linkPaths(JSCompiler_renameProperty("selectedItem",this),`${JSCompiler_renameProperty("items",this)}.${idx}`)})}}/**
       * Clears the selection state.
       * @override
       * @return {void}
       */clearSelection(){// Unbind previous selection
this.__dataLinkedPaths={};// The selected map stores 3 pieces of information:
// key: items array object
// value: items array index
// order: selected array index
this.__selectedMap=new Map;// Initialize selection
this.selected=this.multi?[]:null;this.selectedItem=null}/**
       * Returns whether the item is currently selected.
       *
       * @override
       * @param {*} item Item from `items` array to test
       * @return {boolean} Whether the item is selected
       */isSelected(item){return this.__selectedMap.has(item)}/**
       * Returns whether the item is currently selected.
       *
       * @override
       * @param {number} idx Index from `items` array to test
       * @return {boolean} Whether the item is selected
       */isIndexSelected(idx){return this.isSelected(this.items[idx])}__deselectChangedIdx(idx){let sidx=this.__selectedIndexForItemIndex(idx);if(0<=sidx){let i=0;this.__selectedMap.forEach((idx,item)=>{if(sidx==i++){this.deselect(item)}})}}__selectedIndexForItemIndex(idx){let selected=this.__dataLinkedPaths[`${JSCompiler_renameProperty("items",this)}.${idx}`];if(selected){return parseInt(selected.slice(`${JSCompiler_renameProperty("selected",this)}.`.length),10)}}/**
       * Deselects the given item if it is already selected.
       *
       * @override
       * @param {*} item Item from `items` array to deselect
       * @return {void}
       */deselect(item){let idx=this.__selectedMap.get(item);if(0<=idx){this.__selectedMap.delete(item);let sidx;if(this.multi){sidx=this.__selectedIndexForItemIndex(idx)}this.__updateLinks();if(this.multi){this.splice(JSCompiler_renameProperty("selected",this),sidx,1)}else{this.selected=this.selectedItem=null}}}/**
       * Deselects the given index if it is already selected.
       *
       * @override
       * @param {number} idx Index from `items` array to deselect
       * @return {void}
       */deselectIndex(idx){this.deselect(this.items[idx])}/**
       * Selects the given item.  When `toggle` is true, this will automatically
       * deselect the item if already selected.
       *
       * @override
       * @param {*} item Item from `items` array to select
       * @return {void}
       */select(item){this.selectIndex(this.items.indexOf(item))}/**
       * Selects the given index.  When `toggle` is true, this will automatically
       * deselect the item if already selected.
       *
       * @override
       * @param {number} idx Index from `items` array to select
       * @return {void}
       */selectIndex(idx){let item=this.items[idx];if(!this.isSelected(item)){if(!this.multi){this.__selectedMap.clear()}this.__selectedMap.set(item,idx);this.__updateLinks();if(this.multi){this.push(JSCompiler_renameProperty("selected",this),item)}else{this.selected=this.selectedItem=item}}else if(this.toggle){this.deselectIndex(idx)}}}return ArraySelectorMixin});// export mixin
_exports.ArraySelectorMixin=ArraySelectorMixin;let baseArraySelector=ArraySelectorMixin(PolymerElement);/**
                                                             * Element implementing the `ArraySelector` mixin, which records
                                                             * dynamic associations between item paths in a master `items` array and a
                                                             * `selected` array such that path changes to the master array (at the host)
                                                             * element or elsewhere via data-binding) are correctly propagated to items
                                                             * in the selected array and vice-versa.
                                                             *
                                                             * The `items` property accepts an array of user data, and via the
                                                             * `select(item)` and `deselect(item)` API, updates the `selected` property
                                                             * which may be bound to other parts of the application, and any changes to
                                                             * sub-fields of `selected` item(s) will be kept in sync with items in the
                                                             * `items` array.  When `multi` is false, `selected` is a property
                                                             * representing the last selected item.  When `multi` is true, `selected`
                                                             * is an array of multiply selected items.
                                                             *
                                                             * Example:
                                                             *
                                                             * ```js
                                                             * import {PolymerElement} from '@polymer/polymer';
                                                             * import '@polymer/polymer/lib/elements/array-selector.js';
                                                             *
                                                             * class EmployeeList extends PolymerElement {
                                                             *   static get _template() {
                                                             *     return html`
                                                             *         <div> Employee list: </div>
                                                             *         <dom-repeat id="employeeList" items="{{employees}}">
                                                             *           <template>
                                                             *             <div>First name: <span>{{item.first}}</span></div>
                                                             *               <div>Last name: <span>{{item.last}}</span></div>
                                                             *               <button on-click="toggleSelection">Select</button>
                                                             *           </template>
                                                             *         </dom-repeat>
                                                             *
                                                             *         <array-selector id="selector"
                                                             *                         items="{{employees}}"
                                                             *                         selected="{{selected}}"
                                                             *                         multi toggle></array-selector>
                                                             *
                                                             *         <div> Selected employees: </div>
                                                             *         <dom-repeat items="{{selected}}">
                                                             *           <template>
                                                             *             <div>First name: <span>{{item.first}}</span></div>
                                                             *             <div>Last name: <span>{{item.last}}</span></div>
                                                             *           </template>
                                                             *         </dom-repeat>`;
                                                             *   }
                                                             *   static get is() { return 'employee-list'; }
                                                             *   static get properties() {
                                                             *     return {
                                                             *       employees: {
                                                             *         value() {
                                                             *           return [
                                                             *             {first: 'Bob', last: 'Smith'},
                                                             *             {first: 'Sally', last: 'Johnson'},
                                                             *             ...
                                                             *           ];
                                                             *         }
                                                             *       }
                                                             *     };
                                                             *   }
                                                             *   toggleSelection(e) {
                                                             *     const item = this.$.employeeList.itemForElement(e.target);
                                                             *     this.$.selector.select(item);
                                                             *   }
                                                             * }
                                                             * ```
                                                             *
                                                             * @polymer
                                                             * @customElement
                                                             * @extends {baseArraySelector}
                                                             * @appliesMixin ArraySelectorMixin
                                                             * @summary Custom element that links paths between an input `items` array and
                                                             *   an output `selected` item or array based on calls to its selection API.
                                                             */class ArraySelector extends baseArraySelector{// Not needed to find template; can be removed once the analyzer
// can find the tag name from customElements.define call
static get is(){return"array-selector"}static get template(){return null}}_exports.ArraySelector=ArraySelector;customElements.define(ArraySelector.is,ArraySelector);var arraySelector={ArraySelectorMixin:ArraySelectorMixin,ArraySelector:ArraySelector};/**
   @license
   Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
   The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
   The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
   Code distributed by Google as part of the polymer project is also
   subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
   */_exports.$arraySelector=arraySelector;"use strict";const customStyleInterface$1=new CustomStyleInterface;if(!window.ShadyCSS){window.ShadyCSS={/**
     * @param {!HTMLTemplateElement} template
     * @param {string} elementName
     * @param {string=} elementExtends
     */prepareTemplate(template,elementName,elementExtends){},// eslint-disable-line no-unused-vars
/**
     * @param {!HTMLTemplateElement} template
     * @param {string} elementName
     */prepareTemplateDom(template,elementName){},// eslint-disable-line no-unused-vars
/**
     * @param {!HTMLTemplateElement} template
     * @param {string} elementName
     * @param {string=} elementExtends
     */prepareTemplateStyles(template,elementName,elementExtends){},// eslint-disable-line no-unused-vars
/**
     * @param {Element} element
     * @param {Object=} properties
     */styleSubtree(element,properties){customStyleInterface$1.processStyles();updateNativeProperties(element,properties)},/**
     * @param {Element} element
     */styleElement(element){// eslint-disable-line no-unused-vars
customStyleInterface$1.processStyles()},/**
     * @param {Object=} properties
     */styleDocument(properties){customStyleInterface$1.processStyles();updateNativeProperties(document.body,properties)},/**
     * @param {Element} element
     * @param {string} property
     * @return {string}
     */getComputedStyleValue(element,property){return getComputedStyleValue(element,property)},flushCustomStyles(){},nativeCss:nativeCssVariables,nativeShadow:nativeShadow,cssBuild:cssBuild,disableRuntime:disableRuntime}}window.ShadyCSS.CustomStyleInterface=customStyleInterface$1;const attr="include",CustomStyleInterface$1=window.ShadyCSS.CustomStyleInterface;/**
                                                                     * Custom element for defining styles in the main document that can take
                                                                     * advantage of [shady DOM](https://github.com/webcomponents/shadycss) shims
                                                                     * for style encapsulation, custom properties, and custom mixins.
                                                                     *
                                                                     * - Document styles defined in a `<custom-style>` are shimmed to ensure they
                                                                     *   do not leak into local DOM when running on browsers without native
                                                                     *   Shadow DOM.
                                                                     * - Custom properties can be defined in a `<custom-style>`. Use the `html` selector
                                                                     *   to define custom properties that apply to all custom elements.
                                                                     * - Custom mixins can be defined in a `<custom-style>`, if you import the optional
                                                                     *   [apply shim](https://github.com/webcomponents/shadycss#about-applyshim)
                                                                     *   (`shadycss/apply-shim.html`).
                                                                     *
                                                                     * To use:
                                                                     *
                                                                     * - Import `custom-style.html`.
                                                                     * - Place a `<custom-style>` element in the main document, wrapping an inline `<style>` tag that
                                                                     *   contains the CSS rules you want to shim.
                                                                     *
                                                                     * For example:
                                                                     *
                                                                     * ```html
                                                                     * <!-- import apply shim--only required if using mixins -->
                                                                     * <link rel="import" href="bower_components/shadycss/apply-shim.html">
                                                                     * <!-- import custom-style element -->
                                                                     * <link rel="import" href="bower_components/polymer/lib/elements/custom-style.html">
                                                                     *
                                                                     * <custom-style>
                                                                     *   <style>
                                                                     *     html {
                                                                     *       --custom-color: blue;
                                                                     *       --custom-mixin: {
                                                                     *         font-weight: bold;
                                                                     *         color: red;
                                                                     *       };
                                                                     *     }
                                                                     *   </style>
                                                                     * </custom-style>
                                                                     * ```
                                                                     *
                                                                     * @customElement
                                                                     * @extends HTMLElement
                                                                     * @summary Custom element for defining styles in the main document that can
                                                                     *   take advantage of Polymer's style scoping and custom properties shims.
                                                                     */class CustomStyle extends HTMLElement{constructor(){super();this._style=null;CustomStyleInterface$1.addCustomStyle(this)}/**
     * Returns the light-DOM `<style>` child this element wraps.  Upon first
     * call any style modules referenced via the `include` attribute will be
     * concatenated to this element's `<style>`.
     *
     * @export
     * @return {HTMLStyleElement} This element's light-DOM `<style>`
     */getStyle(){if(this._style){return this._style}const style=/** @type {HTMLStyleElement} */this.querySelector("style");if(!style){return null}this._style=style;const include=style.getAttribute(attr);if(include){style.removeAttribute(attr);style.textContent=cssFromModules(include)+style.textContent}/*
      HTML Imports styling the main document are deprecated in Chrome
      https://crbug.com/523952
       If this element is not in the main document, then it must be in an HTML Import document.
      In that case, move the custom style to the main document.
       The ordering of `<custom-style>` should stay the same as when loaded by HTML Imports, but there may be odd
      cases of ordering w.r.t the main document styles.
      */if(this.ownerDocument!==window.document){window.document.head.appendChild(this)}return this._style}}_exports.CustomStyle=CustomStyle;window.customElements.define("custom-style",CustomStyle);var customStyle={CustomStyle:CustomStyle};_exports.$customStyle=customStyle;let mutablePropertyChange$1;/** @suppress {missingProperties} */(()=>{mutablePropertyChange$1=MutableData._mutablePropertyChange})();/**
       * Legacy element behavior to skip strict dirty-checking for objects and arrays,
       * (always consider them to be "dirty") for use on legacy API Polymer elements.
       *
       * By default, `Polymer.PropertyEffects` performs strict dirty checking on
       * objects, which means that any deep modifications to an object or array will
       * not be propagated unless "immutable" data patterns are used (i.e. all object
       * references from the root to the mutation were changed).
       *
       * Polymer also provides a proprietary data mutation and path notification API
       * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient
       * mutation and notification of deep changes in an object graph to all elements
       * bound to the same object graph.
       *
       * In cases where neither immutable patterns nor the data mutation API can be
       * used, applying this mixin will cause Polymer to skip dirty checking for
       * objects and arrays (always consider them to be "dirty").  This allows a
       * user to make a deep modification to a bound object graph, and then either
       * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`
       * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all
       * elements that wish to be updated based on deep mutations must apply this
       * mixin or otherwise skip strict dirty checking for objects/arrays.
       * Specifically, any elements in the binding tree between the source of a
       * mutation and the consumption of it must apply this behavior or enable the
       * `Polymer.OptionalMutableDataBehavior`.
       *
       * In order to make the dirty check strategy configurable, see
       * `Polymer.OptionalMutableDataBehavior`.
       *
       * Note, the performance characteristics of propagating large object graphs
       * will be worse as opposed to using strict dirty checking with immutable
       * patterns or Polymer's path notification API.
       *
       * @polymerBehavior
       * @summary Behavior to skip strict dirty-checking for objects and
       *   arrays
       */const MutableDataBehavior={/**
   * Overrides `Polymer.PropertyEffects` to provide option for skipping
   * strict equality checking for Objects and Arrays.
   *
   * This method pulls the value to dirty check against from the `__dataTemp`
   * cache (rather than the normal `__data` cache) for Objects.  Since the temp
   * cache is cleared at the end of a turn, this implementation allows
   * side-effects of deep object changes to be processed by re-setting the
   * same object (using the temp cache as an in-turn backstop to prevent
   * cycles due to 2-way notification).
   *
   * @param {string} property Property name
   * @param {*} value New property value
   * @param {*} old Previous property value
   * @return {boolean} Whether the property should be considered a change
   * @protected
   */_shouldPropertyChange(property,value,old){return mutablePropertyChange$1(this,property,value,old,!0)}};/**
    * Legacy element behavior to add the optional ability to skip strict
    * dirty-checking for objects and arrays (always consider them to be
    * "dirty") by setting a `mutable-data` attribute on an element instance.
    *
    * By default, `Polymer.PropertyEffects` performs strict dirty checking on
    * objects, which means that any deep modifications to an object or array will
    * not be propagated unless "immutable" data patterns are used (i.e. all object
    * references from the root to the mutation were changed).
    *
    * Polymer also provides a proprietary data mutation and path notification API
    * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient
    * mutation and notification of deep changes in an object graph to all elements
    * bound to the same object graph.
    *
    * In cases where neither immutable patterns nor the data mutation API can be
    * used, applying this mixin will allow Polymer to skip dirty checking for
    * objects and arrays (always consider them to be "dirty").  This allows a
    * user to make a deep modification to a bound object graph, and then either
    * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`
    * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all
    * elements that wish to be updated based on deep mutations must apply this
    * mixin or otherwise skip strict dirty checking for objects/arrays.
    * Specifically, any elements in the binding tree between the source of a
    * mutation and the consumption of it must enable this behavior or apply the
    * `Polymer.OptionalMutableDataBehavior`.
    *
    * While this behavior adds the ability to forgo Object/Array dirty checking,
    * the `mutableData` flag defaults to false and must be set on the instance.
    *
    * Note, the performance characteristics of propagating large object graphs
    * will be worse by relying on `mutableData: true` as opposed to using
    * strict dirty checking with immutable patterns or Polymer's path notification
    * API.
    *
    * @polymerBehavior
    * @summary Behavior to optionally skip strict dirty-checking for objects and
    *   arrays
    */_exports.MutableDataBehavior=MutableDataBehavior;const OptionalMutableDataBehavior={properties:{/**
     * Instance-level flag for configuring the dirty-checking strategy
     * for this element.  When true, Objects and Arrays will skip dirty
     * checking, otherwise strict equality checking will be used.
     */mutableData:Boolean},/**
   * Overrides `Polymer.PropertyEffects` to skip strict equality checking
   * for Objects and Arrays.
   *
   * Pulls the value to dirty check against from the `__dataTemp` cache
   * (rather than the normal `__data` cache) for Objects.  Since the temp
   * cache is cleared at the end of a turn, this implementation allows
   * side-effects of deep object changes to be processed by re-setting the
   * same object (using the temp cache as an in-turn backstop to prevent
   * cycles due to 2-way notification).
   *
   * @param {string} property Property name
   * @param {*} value New property value
   * @param {*} old Previous property value
   * @return {boolean} Whether the property should be considered a change
   * @this {this}
   * @protected
   */_shouldPropertyChange(property,value,old){return mutablePropertyChange$1(this,property,value,old,this.mutableData)}};_exports.OptionalMutableDataBehavior=OptionalMutableDataBehavior;var mutableDataBehavior={MutableDataBehavior:MutableDataBehavior,OptionalMutableDataBehavior:OptionalMutableDataBehavior};_exports.$mutableDataBehavior=mutableDataBehavior;const Base=LegacyElementMixin(HTMLElement).prototype;_exports.Base=Base;var polymerLegacy={Base:Base,Polymer:Polymer,html:html};_exports.$polymerLegacy=polymerLegacy;const template=html`
<custom-style>
  <style is="custom-style">
    [hidden] {
      display: none !important;
    }
  </style>
</custom-style>
<custom-style>
  <style is="custom-style">
    html {

      --layout: {
        display: -ms-flexbox;
        display: -webkit-flex;
        display: flex;
      };

      --layout-inline: {
        display: -ms-inline-flexbox;
        display: -webkit-inline-flex;
        display: inline-flex;
      };

      --layout-horizontal: {
        @apply --layout;

        -ms-flex-direction: row;
        -webkit-flex-direction: row;
        flex-direction: row;
      };

      --layout-horizontal-reverse: {
        @apply --layout;

        -ms-flex-direction: row-reverse;
        -webkit-flex-direction: row-reverse;
        flex-direction: row-reverse;
      };

      --layout-vertical: {
        @apply --layout;

        -ms-flex-direction: column;
        -webkit-flex-direction: column;
        flex-direction: column;
      };

      --layout-vertical-reverse: {
        @apply --layout;

        -ms-flex-direction: column-reverse;
        -webkit-flex-direction: column-reverse;
        flex-direction: column-reverse;
      };

      --layout-wrap: {
        -ms-flex-wrap: wrap;
        -webkit-flex-wrap: wrap;
        flex-wrap: wrap;
      };

      --layout-wrap-reverse: {
        -ms-flex-wrap: wrap-reverse;
        -webkit-flex-wrap: wrap-reverse;
        flex-wrap: wrap-reverse;
      };

      --layout-flex-auto: {
        -ms-flex: 1 1 auto;
        -webkit-flex: 1 1 auto;
        flex: 1 1 auto;
      };

      --layout-flex-none: {
        -ms-flex: none;
        -webkit-flex: none;
        flex: none;
      };

      --layout-flex: {
        -ms-flex: 1 1 0.000000001px;
        -webkit-flex: 1;
        flex: 1;
        -webkit-flex-basis: 0.000000001px;
        flex-basis: 0.000000001px;
      };

      --layout-flex-2: {
        -ms-flex: 2;
        -webkit-flex: 2;
        flex: 2;
      };

      --layout-flex-3: {
        -ms-flex: 3;
        -webkit-flex: 3;
        flex: 3;
      };

      --layout-flex-4: {
        -ms-flex: 4;
        -webkit-flex: 4;
        flex: 4;
      };

      --layout-flex-5: {
        -ms-flex: 5;
        -webkit-flex: 5;
        flex: 5;
      };

      --layout-flex-6: {
        -ms-flex: 6;
        -webkit-flex: 6;
        flex: 6;
      };

      --layout-flex-7: {
        -ms-flex: 7;
        -webkit-flex: 7;
        flex: 7;
      };

      --layout-flex-8: {
        -ms-flex: 8;
        -webkit-flex: 8;
        flex: 8;
      };

      --layout-flex-9: {
        -ms-flex: 9;
        -webkit-flex: 9;
        flex: 9;
      };

      --layout-flex-10: {
        -ms-flex: 10;
        -webkit-flex: 10;
        flex: 10;
      };

      --layout-flex-11: {
        -ms-flex: 11;
        -webkit-flex: 11;
        flex: 11;
      };

      --layout-flex-12: {
        -ms-flex: 12;
        -webkit-flex: 12;
        flex: 12;
      };

      /* alignment in cross axis */

      --layout-start: {
        -ms-flex-align: start;
        -webkit-align-items: flex-start;
        align-items: flex-start;
      };

      --layout-center: {
        -ms-flex-align: center;
        -webkit-align-items: center;
        align-items: center;
      };

      --layout-end: {
        -ms-flex-align: end;
        -webkit-align-items: flex-end;
        align-items: flex-end;
      };

      --layout-baseline: {
        -ms-flex-align: baseline;
        -webkit-align-items: baseline;
        align-items: baseline;
      };

      /* alignment in main axis */

      --layout-start-justified: {
        -ms-flex-pack: start;
        -webkit-justify-content: flex-start;
        justify-content: flex-start;
      };

      --layout-center-justified: {
        -ms-flex-pack: center;
        -webkit-justify-content: center;
        justify-content: center;
      };

      --layout-end-justified: {
        -ms-flex-pack: end;
        -webkit-justify-content: flex-end;
        justify-content: flex-end;
      };

      --layout-around-justified: {
        -ms-flex-pack: distribute;
        -webkit-justify-content: space-around;
        justify-content: space-around;
      };

      --layout-justified: {
        -ms-flex-pack: justify;
        -webkit-justify-content: space-between;
        justify-content: space-between;
      };

      --layout-center-center: {
        @apply --layout-center;
        @apply --layout-center-justified;
      };

      /* self alignment */

      --layout-self-start: {
        -ms-align-self: flex-start;
        -webkit-align-self: flex-start;
        align-self: flex-start;
      };

      --layout-self-center: {
        -ms-align-self: center;
        -webkit-align-self: center;
        align-self: center;
      };

      --layout-self-end: {
        -ms-align-self: flex-end;
        -webkit-align-self: flex-end;
        align-self: flex-end;
      };

      --layout-self-stretch: {
        -ms-align-self: stretch;
        -webkit-align-self: stretch;
        align-self: stretch;
      };

      --layout-self-baseline: {
        -ms-align-self: baseline;
        -webkit-align-self: baseline;
        align-self: baseline;
      };

      /* multi-line alignment in main axis */

      --layout-start-aligned: {
        -ms-flex-line-pack: start;  /* IE10 */
        -ms-align-content: flex-start;
        -webkit-align-content: flex-start;
        align-content: flex-start;
      };

      --layout-end-aligned: {
        -ms-flex-line-pack: end;  /* IE10 */
        -ms-align-content: flex-end;
        -webkit-align-content: flex-end;
        align-content: flex-end;
      };

      --layout-center-aligned: {
        -ms-flex-line-pack: center;  /* IE10 */
        -ms-align-content: center;
        -webkit-align-content: center;
        align-content: center;
      };

      --layout-between-aligned: {
        -ms-flex-line-pack: justify;  /* IE10 */
        -ms-align-content: space-between;
        -webkit-align-content: space-between;
        align-content: space-between;
      };

      --layout-around-aligned: {
        -ms-flex-line-pack: distribute;  /* IE10 */
        -ms-align-content: space-around;
        -webkit-align-content: space-around;
        align-content: space-around;
      };

      /*******************************
                Other Layout
      *******************************/

      --layout-block: {
        display: block;
      };

      --layout-invisible: {
        visibility: hidden !important;
      };

      --layout-relative: {
        position: relative;
      };

      --layout-fit: {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
      };

      --layout-scroll: {
        -webkit-overflow-scrolling: touch;
        overflow: auto;
      };

      --layout-fullbleed: {
        margin: 0;
        height: 100vh;
      };

      /* fixed position */

      --layout-fixed-top: {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
      };

      --layout-fixed-right: {
        position: fixed;
        top: 0;
        right: 0;
        bottom: 0;
      };

      --layout-fixed-bottom: {
        position: fixed;
        right: 0;
        bottom: 0;
        left: 0;
      };

      --layout-fixed-left: {
        position: fixed;
        top: 0;
        bottom: 0;
        left: 0;
      };

    }
  </style>
</custom-style>`;template.setAttribute("style","display: none;");document.head.appendChild(template.content);var style=document.createElement("style");style.textContent="[hidden] { display: none !important; }";document.head.appendChild(style);var ORPHANS=new Set;/**
                          * `IronResizableBehavior` is a behavior that can be used in Polymer elements to
                          * coordinate the flow of resize events between "resizers" (elements that
                          *control the size or hidden state of their children) and "resizables" (elements
                          *that need to be notified when they are resized or un-hidden by their parents
                          *in order to take action on their new measurements).
                          *
                          * Elements that perform measurement should add the `IronResizableBehavior`
                          *behavior to their element definition and listen for the `iron-resize` event on
                          *themselves. This event will be fired when they become showing after having
                          *been hidden, when they are resized explicitly by another resizable, or when
                          *the window has been resized.
                          *
                          * Note, the `iron-resize` event is non-bubbling.
                          *
                          * @polymerBehavior
                          * @demo demo/index.html
                          **/const IronResizableBehavior={properties:{/**
     * The closest ancestor element that implements `IronResizableBehavior`.
     */_parentResizable:{type:Object,observer:"_parentResizableChanged"},/**
     * True if this element is currently notifying its descendant elements of
     * resize.
     */_notifyingDescendant:{type:Boolean,value:!1}},listeners:{"iron-request-resize-notifications":"_onIronRequestResizeNotifications"},created:function(){// We don't really need property effects on these, and also we want them
// to be created before the `_parentResizable` observer fires:
this._interestedResizables=[];this._boundNotifyResize=this.notifyResize.bind(this);this._boundOnDescendantIronResize=this._onDescendantIronResize.bind(this)},attached:function(){this._requestResizeNotifications()},detached:function(){if(this._parentResizable){this._parentResizable.stopResizeNotificationsFor(this)}else{ORPHANS.delete(this);window.removeEventListener("resize",this._boundNotifyResize)}this._parentResizable=null},/**
   * Can be called to manually notify a resizable and its descendant
   * resizables of a resize change.
   */notifyResize:function(){if(!this.isAttached){return}this._interestedResizables.forEach(function(resizable){if(this.resizerShouldNotify(resizable)){this._notifyDescendant(resizable)}},this);this._fireResize()},/**
   * Used to assign the closest resizable ancestor to this resizable
   * if the ancestor detects a request for notifications.
   */assignParentResizable:function(parentResizable){if(this._parentResizable){this._parentResizable.stopResizeNotificationsFor(this)}this._parentResizable=parentResizable;if(parentResizable&&-1===parentResizable._interestedResizables.indexOf(this)){parentResizable._interestedResizables.push(this);parentResizable._subscribeIronResize(this)}},/**
   * Used to remove a resizable descendant from the list of descendants
   * that should be notified of a resize change.
   */stopResizeNotificationsFor:function(target){var index=this._interestedResizables.indexOf(target);if(-1<index){this._interestedResizables.splice(index,1);this._unsubscribeIronResize(target)}},/**
   * Subscribe this element to listen to iron-resize events on the given target.
   *
   * Preferred over target.listen because the property renamer does not
   * understand to rename when the target is not specifically "this"
   *
   * @param {!HTMLElement} target Element to listen to for iron-resize events.
   */_subscribeIronResize:function(target){target.addEventListener("iron-resize",this._boundOnDescendantIronResize)},/**
   * Unsubscribe this element from listening to to iron-resize events on the
   * given target.
   *
   * Preferred over target.unlisten because the property renamer does not
   * understand to rename when the target is not specifically "this"
   *
   * @param {!HTMLElement} target Element to listen to for iron-resize events.
   */_unsubscribeIronResize:function(target){target.removeEventListener("iron-resize",this._boundOnDescendantIronResize)},/**
   * This method can be overridden to filter nested elements that should or
   * should not be notified by the current element. Return true if an element
   * should be notified, or false if it should not be notified.
   *
   * @param {HTMLElement} element A candidate descendant element that
   * implements `IronResizableBehavior`.
   * @return {boolean} True if the `element` should be notified of resize.
   */resizerShouldNotify:function(element){return!0},_onDescendantIronResize:function(event){if(this._notifyingDescendant){event.stopPropagation();return}// no need to use this during shadow dom because of event retargeting
if(!useShadow){this._fireResize()}},_fireResize:function(){this.fire("iron-resize",null,{node:this,bubbles:!1})},_onIronRequestResizeNotifications:function(event){var target=/** @type {!EventTarget} */dom(event).rootTarget;if(target===this){return}target.assignParentResizable(this);this._notifyDescendant(target);event.stopPropagation()},_parentResizableChanged:function(parentResizable){if(parentResizable){window.removeEventListener("resize",this._boundNotifyResize)}},_notifyDescendant:function(descendant){// NOTE(cdata): In IE10, attached is fired on children first, so it's
// important not to notify them if the parent is not attached yet (or
// else they will get redundantly notified when the parent attaches).
if(!this.isAttached){return}this._notifyingDescendant=!0;descendant.notifyResize();this._notifyingDescendant=!1},_requestResizeNotifications:function(){if(!this.isAttached){return}if("loading"===document.readyState){var _requestResizeNotifications=this._requestResizeNotifications.bind(this);document.addEventListener("readystatechange",function readystatechanged(){document.removeEventListener("readystatechange",readystatechanged);_requestResizeNotifications()})}else{this._findParent();if(!this._parentResizable){// If this resizable is an orphan, tell other orphans to try to find
// their parent again, in case it's this resizable.
ORPHANS.forEach(function(orphan){if(orphan!==this){orphan._findParent()}},this);window.addEventListener("resize",this._boundNotifyResize);this.notifyResize()}else{// If this resizable has a parent, tell other child resizables of
// that parent to try finding their parent again, in case it's this
// resizable.
this._parentResizable._interestedResizables.forEach(function(resizable){if(resizable!==this){resizable._findParent()}},this)}}},_findParent:function(){this.assignParentResizable(null);this.fire("iron-request-resize-notifications",null,{node:this,bubbles:!0,cancelable:!0});if(!this._parentResizable){ORPHANS.add(this)}else{ORPHANS.delete(this)}}};_exports.IronResizableBehavior=IronResizableBehavior;var ironResizableBehavior={IronResizableBehavior:IronResizableBehavior};_exports.$ironResizableBehavior=ironResizableBehavior;const IronScrollTargetBehavior={properties:{/**
     * Specifies the element that will handle the scroll event
     * on the behalf of the current element. This is typically a reference to an
     *element, but there are a few more posibilities:
     *
     * ### Elements id
     *
     *```html
     * <div id="scrollable-element" style="overflow: auto;">
     *  <x-element scroll-target="scrollable-element">
     *    <!-- Content-->
     *  </x-element>
     * </div>
     *```
     * In this case, the `scrollTarget` will point to the outer div element.
     *
     * ### Document scrolling
     *
     * For document scrolling, you can use the reserved word `document`:
     *
     *```html
     * <x-element scroll-target="document">
     *   <!-- Content -->
     * </x-element>
     *```
     *
     * ### Elements reference
     *
     *```js
     * appHeader.scrollTarget = document.querySelector('#scrollable-element');
     *```
     *
     * @type {HTMLElement}
     * @default document
     */scrollTarget:{type:HTMLElement,value:function(){return this._defaultScrollTarget}}},observers:["_scrollTargetChanged(scrollTarget, isAttached)"],/**
   * True if the event listener should be installed.
   */_shouldHaveListener:!0,_scrollTargetChanged:function(scrollTarget,isAttached){var eventTarget;if(this._oldScrollTarget){this._toggleScrollListener(!1,this._oldScrollTarget);this._oldScrollTarget=null}if(!isAttached){return}// Support element id references
if("document"===scrollTarget){this.scrollTarget=this._doc}else if("string"===typeof scrollTarget){var domHost=this.domHost;this.scrollTarget=domHost&&domHost.$?domHost.$[scrollTarget]:dom(this.ownerDocument).querySelector("#"+scrollTarget)}else if(this._isValidScrollTarget()){this._oldScrollTarget=scrollTarget;this._toggleScrollListener(this._shouldHaveListener,scrollTarget)}},/**
   * Runs on every scroll event. Consumer of this behavior may override this
   * method.
   *
   * @protected
   */_scrollHandler:function scrollHandler(){},/**
   * The default scroll target. Consumers of this behavior may want to customize
   * the default scroll target.
   *
   * @type {Element}
   */get _defaultScrollTarget(){return this._doc},/**
   * Shortcut for the document element
   *
   * @type {Element}
   */get _doc(){return this.ownerDocument.documentElement},/**
   * Gets the number of pixels that the content of an element is scrolled
   * upward.
   *
   * @type {number}
   */get _scrollTop(){if(this._isValidScrollTarget()){return this.scrollTarget===this._doc?window.pageYOffset:this.scrollTarget.scrollTop}return 0},/**
   * Gets the number of pixels that the content of an element is scrolled to the
   * left.
   *
   * @type {number}
   */get _scrollLeft(){if(this._isValidScrollTarget()){return this.scrollTarget===this._doc?window.pageXOffset:this.scrollTarget.scrollLeft}return 0},/**
   * Sets the number of pixels that the content of an element is scrolled
   * upward.
   *
   * @type {number}
   */set _scrollTop(top){if(this.scrollTarget===this._doc){window.scrollTo(window.pageXOffset,top)}else if(this._isValidScrollTarget()){this.scrollTarget.scrollTop=top}},/**
   * Sets the number of pixels that the content of an element is scrolled to the
   * left.
   *
   * @type {number}
   */set _scrollLeft(left){if(this.scrollTarget===this._doc){window.scrollTo(left,window.pageYOffset)}else if(this._isValidScrollTarget()){this.scrollTarget.scrollLeft=left}},/**
   * Scrolls the content to a particular place.
   *
   * @method scroll
   * @param {number|!{left: number, top: number}} leftOrOptions The left position or scroll options
   * @param {number=} top The top position
   * @return {void}
   */scroll:function(leftOrOptions,top){var left;if("object"===typeof leftOrOptions){left=leftOrOptions.left;top=leftOrOptions.top}else{left=leftOrOptions}left=left||0;top=top||0;if(this.scrollTarget===this._doc){window.scrollTo(left,top)}else if(this._isValidScrollTarget()){this.scrollTarget.scrollLeft=left;this.scrollTarget.scrollTop=top}},/**
   * Gets the width of the scroll target.
   *
   * @type {number}
   */get _scrollTargetWidth(){if(this._isValidScrollTarget()){return this.scrollTarget===this._doc?window.innerWidth:this.scrollTarget.offsetWidth}return 0},/**
   * Gets the height of the scroll target.
   *
   * @type {number}
   */get _scrollTargetHeight(){if(this._isValidScrollTarget()){return this.scrollTarget===this._doc?window.innerHeight:this.scrollTarget.offsetHeight}return 0},/**
   * Returns true if the scroll target is a valid HTMLElement.
   *
   * @return {boolean}
   */_isValidScrollTarget:function(){return this.scrollTarget instanceof HTMLElement},_toggleScrollListener:function(yes,scrollTarget){var eventTarget=scrollTarget===this._doc?window:scrollTarget;if(yes){if(!this._boundScrollHandler){this._boundScrollHandler=this._scrollHandler.bind(this);eventTarget.addEventListener("scroll",this._boundScrollHandler)}}else{if(this._boundScrollHandler){eventTarget.removeEventListener("scroll",this._boundScrollHandler);this._boundScrollHandler=null}}},/**
   * Enables or disables the scroll event listener.
   *
   * @param {boolean} yes True to add the event, False to remove it.
   */toggleScrollListener:function(yes){this._shouldHaveListener=yes;this._toggleScrollListener(yes,this.scrollTarget)}};_exports.IronScrollTargetBehavior=IronScrollTargetBehavior;var ironScrollTargetBehavior={IronScrollTargetBehavior:IronScrollTargetBehavior};_exports.$ironScrollTargetBehavior=ironScrollTargetBehavior;const _scrollEffects={};_exports._scrollEffects=_scrollEffects;let _scrollTimer=null;_exports._scrollTimer=_scrollTimer;const scrollTimingFunction=function easeOutQuad(t,b,c,d){t/=d;return-c*t*(t-2)+b};/**
    * Registers a scroll effect to be used in elements that implement the
    * `Polymer.AppScrollEffectsBehavior` behavior.
    *
    * @param {string} effectName The effect name.
    * @param {Object} effectDef The effect definition.
    */_exports.scrollTimingFunction=scrollTimingFunction;const registerEffect=function registerEffect(effectName,effectDef){if(null!=_scrollEffects[effectName]){throw new Error("effect `"+effectName+"` is already registered.")}_scrollEffects[effectName]=effectDef};_exports.registerEffect=registerEffect;const queryAllRoot=function(selector,root){var queue=[root],matches=[];while(0<queue.length){var node=queue.shift();matches.push.apply(matches,node.querySelectorAll(selector));for(var i=0;node.children[i];i++){if(node.children[i].shadowRoot){queue.push(node.children[i].shadowRoot)}}}return matches};/**
    * Scrolls to a particular set of coordinates in a scroll target.
    * If the scroll target is not defined, then it would use the main document as
    * the target.
    *
    * To scroll in a smooth fashion, you can set the option `behavior: 'smooth'`.
    * e.g.
    *
    * ```js
    * Polymer.AppLayout.scroll({top: 0, behavior: 'smooth'});
    * ```
    *
    * To scroll in a silent mode, without notifying scroll changes to any
    * app-layout elements, you can set the option `behavior: 'silent'`. This is
    * particularly useful we you are using `app-header` and you desire to scroll to
    * the top of a scrolling region without running scroll effects. e.g.
    *
    * ```js
    * Polymer.AppLayout.scroll({top: 0, behavior: 'silent'});
    * ```
    *
    * @param {Object} options {top: Number, left: Number, behavior: String(smooth | silent)}
    */_exports.queryAllRoot=queryAllRoot;const scroll=function scroll(options){options=options||{};var docEl=document.documentElement,target=options.target||docEl,hasNativeScrollBehavior="scrollBehavior"in target.style&&target.scroll,scrollClassName="app-layout-silent-scroll",scrollTop=options.top||0,scrollLeft=options.left||0,scrollTo=target===docEl?window.scrollTo:function scrollTo(scrollLeft,scrollTop){target.scrollLeft=scrollLeft;target.scrollTop=scrollTop};if("smooth"===options.behavior){if(hasNativeScrollBehavior){target.scroll(options)}else{var timingFn=scrollTimingFunction,startTime=Date.now(),currentScrollTop=target===docEl?window.pageYOffset:target.scrollTop,currentScrollLeft=target===docEl?window.pageXOffset:target.scrollLeft,deltaScrollTop=scrollTop-currentScrollTop,deltaScrollLeft=scrollLeft-currentScrollLeft,duration=300,updateFrame=function updateFrame(){var now=Date.now(),elapsedTime=now-startTime;if(elapsedTime<duration){scrollTo(timingFn(elapsedTime,currentScrollLeft,deltaScrollLeft,duration),timingFn(elapsedTime,currentScrollTop,deltaScrollTop,duration));requestAnimationFrame(updateFrame)}else{scrollTo(scrollLeft,scrollTop)}}.bind(this);updateFrame()}}else if("silent"===options.behavior){var headers=queryAllRoot("app-header",document.body);headers.forEach(function(header){header.setAttribute("silent-scroll","")});// Browsers keep the scroll momentum even if the bottom of the scrolling
// content was reached. This means that calling scroll({top: 0, behavior:
// 'silent'}) when the momentum is still going will result in more scroll
// events and thus scroll effects. This seems to only apply when using
// document scrolling. Therefore, when should we remove the class from the
// document element?
if(_scrollTimer){window.cancelAnimationFrame(_scrollTimer)}_exports._scrollTimer=_scrollTimer=window.requestAnimationFrame(function(){headers.forEach(function(header){header.removeAttribute("silent-scroll")});_exports._scrollTimer=_scrollTimer=null});scrollTo(scrollLeft,scrollTop)}else{scrollTo(scrollLeft,scrollTop)}};_exports.scroll=scroll;var helpers={_scrollEffects:_scrollEffects,get _scrollTimer(){return _scrollTimer},scrollTimingFunction:scrollTimingFunction,registerEffect:registerEffect,queryAllRoot:queryAllRoot,scroll:scroll};_exports.$helpers=helpers;const AppScrollEffectsBehavior=[IronScrollTargetBehavior,{properties:{/**
     * A space-separated list of the effects names that will be triggered when
     * the user scrolls. e.g. `waterfall parallax-background` installs the
     * `waterfall` and `parallax-background`.
     */effects:{type:String},/**
     * An object that configurates the effects installed via the `effects`
     * property. e.g.
     * ```js
     *  element.effectsConfig = {
     *   "blend-background": {
     *     "startsAt": 0.5
     *   }
     * };
     * ```
     * Every effect has at least two config properties: `startsAt` and
     * `endsAt`. These properties indicate when the event should start and end
     * respectively and relative to the overall element progress. So for
     * example, if `blend-background` starts at `0.5`, the effect will only
     * start once the current element reaches 0.5 of its progress. In this
     * context, the progress is a value in the range of `[0, 1]` that
     * indicates where this element is on the screen relative to the viewport.
     */effectsConfig:{type:Object,value:function(){return{}}},/**
     * Disables CSS transitions and scroll effects on the element.
     */disabled:{type:Boolean,reflectToAttribute:!0,value:!1},/**
     * Allows to set a `scrollTop` threshold. When greater than 0,
     * `thresholdTriggered` is true only when the scroll target's `scrollTop`
     * has reached this value.
     *
     * For example, if `threshold = 100`, `thresholdTriggered` is true when
     * the `scrollTop` is at least `100`.
     */threshold:{type:Number,value:0},/**
     * True if the `scrollTop` threshold (set in `scrollTopThreshold`) has
     * been reached.
     */thresholdTriggered:{type:Boolean,notify:!0,readOnly:!0,reflectToAttribute:!0}},observers:["_effectsChanged(effects, effectsConfig, isAttached)"],/**
   * Updates the scroll state. This method should be overridden
   * by the consumer of this behavior.
   *
   * @method _updateScrollState
   * @param {number} scrollTop
   */_updateScrollState:function(scrollTop){},/**
   * Returns true if the current element is on the screen.
   * That is, visible in the current viewport. This method should be
   * overridden by the consumer of this behavior.
   *
   * @method isOnScreen
   * @return {boolean}
   */isOnScreen:function(){return!1},/**
   * Returns true if there's content below the current element. This method
   * should be overridden by the consumer of this behavior.
   *
   * @method isContentBelow
   * @return {boolean}
   */isContentBelow:function(){return!1},/**
   * List of effects handlers that will take place during scroll.
   *
   * @type {Array<Function>}
   */_effectsRunFn:null,/**
   * List of the effects definitions installed via the `effects` property.
   *
   * @type {Array<Object>}
   */_effects:null,/**
   * The clamped value of `_scrollTop`.
   * @type number
   */get _clampedScrollTop(){return Math.max(0,this._scrollTop)},attached:function(){this._scrollStateChanged()},detached:function(){this._tearDownEffects()},/**
   * Creates an effect object from an effect's name that can be used to run
   * effects programmatically.
   *
   * @method createEffect
   * @param {string} effectName The effect's name registered via `Polymer.AppLayout.registerEffect`.
   * @param {Object=} effectConfig The effect config object. (Optional)
   * @return {Object} An effect object with the following functions:
   *
   *  * `effect.setUp()`, Sets up the requirements for the effect.
   *       This function is called automatically before the `effect` function
   * returns.
   *  * `effect.run(progress, y)`, Runs the effect given a `progress`.
   *  * `effect.tearDown()`, Cleans up any DOM nodes or element references
   * used by the effect.
   *
   * Example:
   * ```js
   * var parallax = element.createEffect('parallax-background');
   * // runs the effect
   * parallax.run(0.5, 0);
   * ```
   */createEffect:function(effectName,effectConfig){var effectDef=_scrollEffects[effectName];if(!effectDef){throw new ReferenceError(this._getUndefinedMsg(effectName))}var prop=this._boundEffect(effectDef,effectConfig||{});prop.setUp();return prop},/**
   * Called when `effects` or `effectsConfig` changes.
   */_effectsChanged:function(effects,effectsConfig,isAttached){this._tearDownEffects();if(!effects||!isAttached){return}effects.split(" ").forEach(function(effectName){var effectDef;if(""!==effectName){if(effectDef=_scrollEffects[effectName]){this._effects.push(this._boundEffect(effectDef,effectsConfig[effectName]))}else{console.warn(this._getUndefinedMsg(effectName))}}},this);this._setUpEffect()},/**
   * Forces layout
   */_layoutIfDirty:function(){return this.offsetWidth},/**
   * Returns an effect object bound to the current context.
   *
   * @param {Object} effectDef
   * @param {Object=} effectsConfig The effect config object if the effect accepts config values. (Optional)
   */_boundEffect:function(effectDef,effectsConfig){effectsConfig=effectsConfig||{};var startsAt=parseFloat(effectsConfig.startsAt||0),endsAt=parseFloat(effectsConfig.endsAt||1),deltaS=endsAt-startsAt,noop=function(){},runFn=0===startsAt&&1===endsAt?effectDef.run:function(progress,y){effectDef.run.call(this,Math.max(0,(progress-startsAt)/deltaS),y)};return{setUp:effectDef.setUp?effectDef.setUp.bind(this,effectsConfig):noop,run:effectDef.run?runFn.bind(this):noop,tearDown:effectDef.tearDown?effectDef.tearDown.bind(this):noop}},/**
   * Sets up the effects.
   */_setUpEffect:function(){if(this.isAttached&&this._effects){this._effectsRunFn=[];this._effects.forEach(function(effectDef){// install the effect only if no error was reported
if(!1!==effectDef.setUp()){this._effectsRunFn.push(effectDef.run)}},this)}},/**
   * Tears down the effects.
   */_tearDownEffects:function(){if(this._effects){this._effects.forEach(function(effectDef){effectDef.tearDown()})}this._effectsRunFn=[];this._effects=[]},/**
   * Runs the effects.
   *
   * @param {number} p The progress
   * @param {number} y The top position of the current element relative to the viewport.
   */_runEffects:function(p,y){if(this._effectsRunFn){this._effectsRunFn.forEach(function(run){run(p,y)})}},/**
   * Overrides the `_scrollHandler`.
   */_scrollHandler:function(){this._scrollStateChanged()},_scrollStateChanged:function(){if(!this.disabled){var scrollTop=this._clampedScrollTop;this._updateScrollState(scrollTop);if(0<this.threshold){this._setThresholdTriggered(scrollTop>=this.threshold)}}},/**
   * Override this method to return a reference to a node in the local DOM.
   * The node is consumed by a scroll effect.
   *
   * @param {string} id The id for the node.
   */_getDOMRef:function(id){console.warn("_getDOMRef","`"+id+"` is undefined")},_getUndefinedMsg:function(effectName){return"Scroll effect `"+effectName+"` is undefined. "+"Did you forget to import app-layout/app-scroll-effects/effects/"+effectName+".html ?"}}];_exports.AppScrollEffectsBehavior=AppScrollEffectsBehavior;var appScrollEffectsBehavior={AppScrollEffectsBehavior:AppScrollEffectsBehavior};_exports.$appScrollEffectsBehavior=appScrollEffectsBehavior;Polymer({_template:html`
    <style>
      :host {
        position: relative;
        display: block;
      }

      #background {
        @apply --layout-fit;
        overflow: hidden;
        height: 100%;
      }

      #backgroundFrontLayer {
        min-height: 100%;
        pointer-events: none;
        background-size: cover;
        @apply --app-box-background-front-layer;
      }

      #contentContainer {
        position: relative;
        width: 100%;
        height: 100%;
      }

      :host([disabled]),
      :host([disabled]) #backgroundFrontLayer {
        transition: none !important;
      }
    </style>

    <div id="background">
      <div id="backgroundFrontLayer">
        <slot name="background"></slot>
      </div>
    </div>
    <div id="contentContainer">
      <slot></slot>
    </div>
`,is:"app-box",behaviors:[AppScrollEffectsBehavior,IronResizableBehavior],listeners:{"iron-resize":"_resizeHandler"},/**
   * The current scroll progress.
   *
   * @type {number}
   */_progress:0,attached:function(){this.resetLayout()},_debounceRaf:function(fn){var self=this;if(this._raf){window.cancelAnimationFrame(this._raf)}this._raf=window.requestAnimationFrame(function(){self._raf=null;fn.call(self)})},/**
   * Resets the layout. This method is automatically called when the element is
   * attached to the DOM.
   *
   * @method resetLayout
   */resetLayout:function(){this._debounceRaf(function(){// noop if the box isn't in the rendered tree
if(0===this.offsetWidth&&0===this.offsetHeight){return}var scrollTop=this._clampedScrollTop,savedDisabled=this.disabled;this.disabled=!0;this._elementTop=this._getElementTop();this._elementHeight=this.offsetHeight;this._cachedScrollTargetHeight=this._scrollTargetHeight;this._setUpEffect();this._updateScrollState(scrollTop);this.disabled=savedDisabled})},_getElementTop:function(){var currentNode=this,top=0;while(currentNode&&currentNode!==this.scrollTarget){top+=currentNode.offsetTop;currentNode=currentNode.offsetParent}return top},_updateScrollState:function(scrollTop){if(this.isOnScreen()){var viewportTop=this._elementTop-scrollTop;this._progress=1-(viewportTop+this._elementHeight)/this._cachedScrollTargetHeight;this._runEffects(this._progress,scrollTop)}},/**
   * Returns true if this app-box is on the screen.
   * That is, visible in the current viewport.
   *
   * @method isOnScreen
   * @return {boolean}
   */isOnScreen:function(){return this._elementTop<this._scrollTop+this._cachedScrollTargetHeight&&this._elementTop+this._elementHeight>this._scrollTop},_resizeHandler:function(){this.resetLayout()},_getDOMRef:function(id){if("background"===id){return this.$.background}if("backgroundFrontLayer"===id){return this.$.backgroundFrontLayer}},/**
   * Returns an object containing the progress value of the scroll effects.
   *
   * @method getScrollState
   * @return {Object}
   */getScrollState:function(){return{progress:this._progress}}});Polymer({is:"iron-media-query",properties:{/**
     * The Boolean return value of the media query.
     */queryMatches:{type:Boolean,value:!1,readOnly:!0,notify:!0},/**
     * The CSS media query to evaluate.
     */query:{type:String,observer:"queryChanged"},/**
     * If true, the query attribute is assumed to be a complete media query
     * string rather than a single media feature.
     */full:{type:Boolean,value:!1},/**
     * @type {function(MediaQueryList)}
     */_boundMQHandler:{value:function(){return this.queryHandler.bind(this)}},/**
     * @type {MediaQueryList}
     */_mq:{value:null}},attached:function(){this.style.display="none";this.queryChanged()},detached:function(){this._remove()},_add:function(){if(this._mq){this._mq.addListener(this._boundMQHandler)}},_remove:function(){if(this._mq){this._mq.removeListener(this._boundMQHandler)}this._mq=null},queryChanged:function(){this._remove();var query=this.query;if(!query){return}if(!this.full&&"("!==query[0]){query="("+query+")"}this._mq=window.matchMedia(query);this._add();this.queryHandler(this._mq)},queryHandler:function(mq){this._setQueryMatches(mq.matches)}});const AppLayoutBehavior=[IronResizableBehavior,{listeners:{"app-reset-layout":"_appResetLayoutHandler","iron-resize":"resetLayout"},attached:function(){this.fire("app-reset-layout")},_appResetLayoutHandler:function(e){if(dom(e).path[0]===this){return}this.resetLayout();e.stopPropagation()},_updateLayoutStates:function(){console.error("unimplemented")},/**
   * Resets the layout. If you changed the size of this element via CSS
   * you can notify the changes by either firing the `iron-resize` event
   * or calling `resetLayout` directly.
   *
   * @method resetLayout
   */resetLayout:function(){var self=this,cb=this._updateLayoutStates.bind(this);this._layoutDebouncer=Debouncer.debounce(this._layoutDebouncer,animationFrame,cb);enqueueDebouncer(this._layoutDebouncer);this._notifyDescendantResize()},_notifyLayoutChanged:function(){var self=this;// TODO: the event `app-reset-layout` can be fired synchronously
// as long as `_updateLayoutStates` waits for all the microtasks after
// rAF. E.g. requestAnimationFrame(setTimeOut())
requestAnimationFrame(function(){self.fire("app-reset-layout")})},_notifyDescendantResize:function(){if(!this.isAttached){return}this._interestedResizables.forEach(function(resizable){if(this.resizerShouldNotify(resizable)){this._notifyDescendant(resizable)}},this)}}];_exports.AppLayoutBehavior=AppLayoutBehavior;var appLayoutBehavior={AppLayoutBehavior:AppLayoutBehavior};_exports.$appLayoutBehavior=appLayoutBehavior;Polymer({_template:html`
    <style>
      :host {
        display: block;
        /**
         * Force app-drawer-layout to have its own stacking context so that its parent can
         * control the stacking of it relative to other elements.
         */
        position: relative;
        z-index: 0;
      }

      :host ::slotted([slot=drawer]) {
        z-index: 1;
      }

      :host([fullbleed]) {
        @apply --layout-fit;
      }

      #contentContainer {
        /* Create a stacking context here so that all children appear below the header. */
        position: relative;
        z-index: 0;
        height: 100%;
        transition: var(--app-drawer-layout-content-transition, none);
      }

      #contentContainer[drawer-position=left] {
        margin-left: var(--app-drawer-width, 256px);
      }

      #contentContainer[drawer-position=right] {
        margin-right: var(--app-drawer-width, 256px);
      }
    </style>

    <slot id="drawerSlot" name="drawer"></slot>

    <div id="contentContainer" drawer-position\$="[[_drawerPosition]]">
      <slot></slot>
    </div>

    <iron-media-query query="[[_computeMediaQuery(forceNarrow, responsiveWidth)]]" on-query-matches-changed="_onQueryMatchesChanged"></iron-media-query>
`,is:"app-drawer-layout",behaviors:[AppLayoutBehavior],properties:{/**
     * If true, ignore `responsiveWidth` setting and force the narrow layout.
     */forceNarrow:{type:Boolean,value:!1},/**
     * If the viewport's width is smaller than this value, the panel will change
     * to narrow layout. In the mode the drawer will be closed.
     */responsiveWidth:{type:String,value:"640px"},/**
     * Returns true if it is in narrow layout. This is useful if you need to
     * show/hide elements based on the layout.
     */narrow:{type:Boolean,reflectToAttribute:!0,readOnly:!0,notify:!0},/**
     * If true, the drawer will initially be opened when in narrow layout mode.
     */openedWhenNarrow:{type:Boolean,value:!1},_drawerPosition:{type:String}},listeners:{click:"_clickHandler"},observers:["_narrowChanged(narrow)"],/**
   * A reference to the app-drawer element.
   *
   * @property drawer
   */get drawer(){return dom(this.$.drawerSlot).getDistributedNodes()[0]},attached:function(){// Disable drawer transitions until after app-drawer-layout sets the initial
// opened state.
var drawer=this.drawer;if(drawer){drawer.setAttribute("no-transition","")}},_clickHandler:function(e){var target=dom(e).localTarget;if(target&&target.hasAttribute("drawer-toggle")){var drawer=this.drawer;if(drawer&&!drawer.persistent){drawer.toggle()}}},_updateLayoutStates:function(){var drawer=this.drawer;if(!this.isAttached||!drawer){return}this._drawerPosition=this.narrow?null:drawer.position;if(this._drawerNeedsReset){if(this.narrow){drawer.opened=this.openedWhenNarrow;drawer.persistent=!1}else{drawer.opened=drawer.persistent=!0}if(drawer.hasAttribute("no-transition")){// Enable drawer transitions after app-drawer-layout sets the initial
// opened state.
afterNextRender(this,function(){drawer.removeAttribute("no-transition")})}this._drawerNeedsReset=!1}},_narrowChanged:function(){this._drawerNeedsReset=!0;this.resetLayout()},_onQueryMatchesChanged:function(event){this._setNarrow(event.detail.value)},_computeMediaQuery:function(forceNarrow,responsiveWidth){return forceNarrow?"(min-width: 0px)":"(max-width: "+responsiveWidth+")"}});Polymer({_template:html`
    <style>
      :host {
        position: fixed;
        top: -120px;
        right: 0;
        bottom: -120px;
        left: 0;

        visibility: hidden;

        transition-property: visibility;
      }

      :host([opened]) {
        visibility: visible;
      }

      :host([persistent]) {
        width: var(--app-drawer-width, 256px);
      }

      :host([persistent][position=left]) {
        right: auto;
      }

      :host([persistent][position=right]) {
        left: auto;
      }

      #contentContainer {
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;

        width: var(--app-drawer-width, 256px);
        padding: 120px 0;

        transition-property: -webkit-transform;
        transition-property: transform;
        -webkit-transform: translate3d(-100%, 0, 0);
        transform: translate3d(-100%, 0, 0);

        background-color: #FFF;

        @apply --app-drawer-content-container;
      }

      #contentContainer[persistent] {
        width: 100%;
      }

      #contentContainer[position=right] {
        right: 0;
        left: auto;

        -webkit-transform: translate3d(100%, 0, 0);
        transform: translate3d(100%, 0, 0);
      }

      #contentContainer[swipe-open]::after {
        position: fixed;
        top: 0;
        bottom: 0;
        left: 100%;

        visibility: visible;

        width: 20px;

        content: '';
      }

      #contentContainer[swipe-open][position=right]::after {
        right: 100%;
        left: auto;
      }

      #contentContainer[opened] {
        -webkit-transform: translate3d(0, 0, 0);
        transform: translate3d(0, 0, 0);
      }

      #scrim {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;

        transition-property: opacity;
        -webkit-transform: translateZ(0);
        transform:  translateZ(0);

        opacity: 0;
        background: var(--app-drawer-scrim-background, rgba(0, 0, 0, 0.5));
      }

      #scrim.visible {
        opacity: 1;
      }

      :host([no-transition]) #contentContainer {
        transition-property: none;
      }
    </style>

    <div id="scrim" on-click="close"></div>

    <!-- HACK(keanulee): Bind attributes here (in addition to :host) for styling to workaround Safari
    bug. https://bugs.webkit.org/show_bug.cgi?id=170762 -->
    <div id="contentContainer" opened\$="[[opened]]" persistent\$="[[persistent]]" position\$="[[position]]" swipe-open\$="[[swipeOpen]]">
      <slot></slot>
    </div>
`,is:"app-drawer",properties:{/**
     * The opened state of the drawer.
     */opened:{type:Boolean,value:!1,notify:!0,reflectToAttribute:!0},/**
     * The drawer does not have a scrim and cannot be swiped close.
     */persistent:{type:Boolean,value:!1,reflectToAttribute:!0},/**
     * The transition duration of the drawer in milliseconds.
     */transitionDuration:{type:Number,value:200},/**
     * The alignment of the drawer on the screen ('left', 'right', 'start' or
     * 'end'). 'start' computes to left and 'end' to right in LTR layout and
     * vice versa in RTL layout.
     */align:{type:String,value:"left"},/**
     * The computed, read-only position of the drawer on the screen ('left' or
     * 'right').
     */position:{type:String,readOnly:!0,reflectToAttribute:!0},/**
     * Create an area at the edge of the screen to swipe open the drawer.
     */swipeOpen:{type:Boolean,value:!1,reflectToAttribute:!0},/**
     * Trap keyboard focus when the drawer is opened and not persistent.
     */noFocusTrap:{type:Boolean,value:!1},/**
     * Disables swiping on the drawer.
     */disableSwipe:{type:Boolean,value:!1}},observers:["resetLayout(position, isAttached)","_resetPosition(align, isAttached)","_styleTransitionDuration(transitionDuration)","_openedPersistentChanged(opened, persistent)"],_translateOffset:0,_trackDetails:null,_drawerState:0,_boundEscKeydownHandler:null,_firstTabStop:null,_lastTabStop:null,attached:function(){afterNextRender(this,function(){this._boundEscKeydownHandler=this._escKeydownHandler.bind(this);this.addEventListener("keydown",this._tabKeydownHandler.bind(this));// Only listen for horizontal track so you can vertically scroll
// inside the drawer.
this.listen(this,"track","_track");this.setScrollDirection("y")});this.fire("app-reset-layout")},detached:function(){document.removeEventListener("keydown",this._boundEscKeydownHandler)},/**
   * Opens the drawer.
   */open:function(){this.opened=!0},/**
   * Closes the drawer.
   */close:function(){this.opened=!1},/**
   * Toggles the drawer open and close.
   */toggle:function(){this.opened=!this.opened},/**
   * Gets the width of the drawer.
   *
   * @return {number} The width of the drawer in pixels.
   */getWidth:function(){return this._savedWidth||this.$.contentContainer.offsetWidth},_isRTL:function(){return"rtl"===window.getComputedStyle(this).direction},_resetPosition:function(){switch(this.align){case"start":this._setPosition(this._isRTL()?"right":"left");return;case"end":this._setPosition(this._isRTL()?"left":"right");return;}this._setPosition(this.align)},_escKeydownHandler:function(event){var ESC_KEYCODE=27;if(event.keyCode===ESC_KEYCODE){// Prevent any side effects if app-drawer closes.
event.preventDefault();this.close()}},_track:function(event){if(this.persistent||this.disableSwipe){return}// Disable user selection on desktop.
event.preventDefault();switch(event.detail.state){case"start":this._trackStart(event);break;case"track":this._trackMove(event);break;case"end":this._trackEnd(event);break;}},_trackStart:function(event){this._drawerState=this._DRAWER_STATE.TRACKING;var rect=this.$.contentContainer.getBoundingClientRect();this._savedWidth=rect.width;if("left"===this.position){this._translateOffset=rect.left}else{this._translateOffset=rect.right-window.innerWidth}this._trackDetails=[];// Disable transitions since style attributes will reflect user track
// events.
this._styleTransitionDuration(0);this.style.visibility="visible"},_trackMove:function(event){this._translateDrawer(event.detail.dx+this._translateOffset);// Use Date.now() since event.timeStamp is inconsistent across browsers
// (e.g. most browsers use milliseconds but FF 44 uses microseconds).
this._trackDetails.push({dx:event.detail.dx,timeStamp:Date.now()})},_trackEnd:function(event){var x=event.detail.dx+this._translateOffset,drawerWidth=this.getWidth(),isPositionLeft="left"===this.position,isInEndState=isPositionLeft?0<=x||x<=-drawerWidth:0>=x||x>=drawerWidth;if(!isInEndState){// No longer need the track events after this method returns - allow them
// to be GC'd.
var trackDetails=this._trackDetails;this._trackDetails=null;this._flingDrawer(event,trackDetails);if(this._drawerState===this._DRAWER_STATE.FLINGING){return}}// If the drawer is not flinging, toggle the opened state based on the
// position of the drawer.
var halfWidth=drawerWidth/2;if(event.detail.dx<-halfWidth){this.opened="right"===this.position}else if(event.detail.dx>halfWidth){this.opened="left"===this.position}if(isInEndState){this.debounce("_resetDrawerState",this._resetDrawerState)}else{this.debounce("_resetDrawerState",this._resetDrawerState,this.transitionDuration)}this._styleTransitionDuration(this.transitionDuration);this._resetDrawerTranslate();this.style.visibility=""},_calculateVelocity:function(event,trackDetails){// Find the oldest track event that is within 100ms using binary search.
var now=Date.now(),timeLowerBound=now-100,trackDetail,min=0,max=trackDetails.length-1;while(min<=max){// Floor of average of min and max.
var mid=min+max>>1,d=trackDetails[mid];if(d.timeStamp>=timeLowerBound){trackDetail=d;max=mid-1}else{min=mid+1}}if(trackDetail){var dx=event.detail.dx-trackDetail.dx,dt=now-trackDetail.timeStamp||1;return dx/dt}return 0},_flingDrawer:function(event,trackDetails){var velocity=this._calculateVelocity(event,trackDetails);// Do not fling if velocity is not above a threshold.
if(Math.abs(velocity)<this._MIN_FLING_THRESHOLD){return}this._drawerState=this._DRAWER_STATE.FLINGING;var x=event.detail.dx+this._translateOffset,drawerWidth=this.getWidth(),isPositionLeft="left"===this.position,isVelocityPositive=0<velocity,isClosingLeft=!isVelocityPositive&&isPositionLeft,isClosingRight=isVelocityPositive&&!isPositionLeft,dx;if(isClosingLeft){dx=-(x+drawerWidth)}else if(isClosingRight){dx=drawerWidth-x}else{dx=-x}// Enforce a minimum transition velocity to make the drawer feel snappy.
if(isVelocityPositive){velocity=Math.max(velocity,this._MIN_TRANSITION_VELOCITY);this.opened="left"===this.position}else{velocity=Math.min(velocity,-this._MIN_TRANSITION_VELOCITY);this.opened="right"===this.position}// Calculate the amount of time needed to finish the transition based on the
// initial slope of the timing function.
var t=this._FLING_INITIAL_SLOPE*dx/velocity;this._styleTransitionDuration(t);this._styleTransitionTimingFunction(this._FLING_TIMING_FUNCTION);this._resetDrawerTranslate();this.debounce("_resetDrawerState",this._resetDrawerState,t)},_styleTransitionDuration:function(duration){this.style.transitionDuration=duration+"ms";this.$.contentContainer.style.transitionDuration=duration+"ms";this.$.scrim.style.transitionDuration=duration+"ms"},_styleTransitionTimingFunction:function(timingFunction){this.$.contentContainer.style.transitionTimingFunction=timingFunction;this.$.scrim.style.transitionTimingFunction=timingFunction},_translateDrawer:function(x){var drawerWidth=this.getWidth();if("left"===this.position){x=Math.max(-drawerWidth,Math.min(x,0));this.$.scrim.style.opacity=1+x/drawerWidth}else{x=Math.max(0,Math.min(x,drawerWidth));this.$.scrim.style.opacity=1-x/drawerWidth}this.translate3d(x+"px","0","0",this.$.contentContainer)},_resetDrawerTranslate:function(){this.$.scrim.style.opacity="";this.transform("",this.$.contentContainer)},_resetDrawerState:function(){var oldState=this._drawerState;// If the drawer was flinging, we need to reset the style attributes.
if(oldState===this._DRAWER_STATE.FLINGING){this._styleTransitionDuration(this.transitionDuration);this._styleTransitionTimingFunction("");this.style.visibility=""}this._savedWidth=null;if(this.opened){this._drawerState=this.persistent?this._DRAWER_STATE.OPENED_PERSISTENT:this._DRAWER_STATE.OPENED}else{this._drawerState=this._DRAWER_STATE.CLOSED}if(oldState!==this._drawerState){if(this._drawerState===this._DRAWER_STATE.OPENED){this._setKeyboardFocusTrap();document.addEventListener("keydown",this._boundEscKeydownHandler);document.body.style.overflow="hidden"}else{document.removeEventListener("keydown",this._boundEscKeydownHandler);document.body.style.overflow=""}// Don't fire the event on initial load.
if(oldState!==this._DRAWER_STATE.INIT){this.fire("app-drawer-transitioned")}}},/**
   * Resets the layout.
   *
   * @method resetLayout
   */resetLayout:function(){this.fire("app-reset-layout")},_setKeyboardFocusTrap:function(){if(this.noFocusTrap){return}// NOTE: Unless we use /deep/ (which we shouldn't since it's deprecated),
// this will not select focusable elements inside shadow roots.
var focusableElementsSelector=["a[href]:not([tabindex=\"-1\"])","area[href]:not([tabindex=\"-1\"])","input:not([disabled]):not([tabindex=\"-1\"])","select:not([disabled]):not([tabindex=\"-1\"])","textarea:not([disabled]):not([tabindex=\"-1\"])","button:not([disabled]):not([tabindex=\"-1\"])","iframe:not([tabindex=\"-1\"])","[tabindex]:not([tabindex=\"-1\"])","[contentEditable=true]:not([tabindex=\"-1\"])"].join(","),focusableElements=dom(this).querySelectorAll(focusableElementsSelector);if(0<focusableElements.length){this._firstTabStop=focusableElements[0];this._lastTabStop=focusableElements[focusableElements.length-1]}else{// Reset saved tab stops when there are no focusable elements in the
// drawer.
this._firstTabStop=null;this._lastTabStop=null}// Focus on app-drawer if it has non-zero tabindex. Otherwise, focus the
// first focusable element in the drawer, if it exists. Use the tabindex
// attribute since the this.tabIndex property in IE/Edge returns 0 (instead
// of -1) when the attribute is not set.
var tabindex=this.getAttribute("tabindex");if(tabindex&&-1<parseInt(tabindex,10)){this.focus()}else if(this._firstTabStop){this._firstTabStop.focus()}},_tabKeydownHandler:function(event){if(this.noFocusTrap){return}var TAB_KEYCODE=9;if(this._drawerState===this._DRAWER_STATE.OPENED&&event.keyCode===TAB_KEYCODE){if(event.shiftKey){if(this._firstTabStop&&dom(event).localTarget===this._firstTabStop){event.preventDefault();this._lastTabStop.focus()}}else{if(this._lastTabStop&&dom(event).localTarget===this._lastTabStop){event.preventDefault();this._firstTabStop.focus()}}}},_openedPersistentChanged:function(opened,persistent){this.toggleClass("visible",opened&&!persistent,this.$.scrim);// Use a debounce timer instead of transitionend since transitionend won't
// fire when app-drawer is display: none.
this.debounce("_resetDrawerState",this._resetDrawerState,this.transitionDuration)},_MIN_FLING_THRESHOLD:.2,_MIN_TRANSITION_VELOCITY:1.2,_FLING_TIMING_FUNCTION:"cubic-bezier(0.667, 1, 0.667, 1)",_FLING_INITIAL_SLOPE:1.5,_DRAWER_STATE:{INIT:0,OPENED:1,OPENED_PERSISTENT:2,CLOSED:3,TRACKING:4,FLINGING:5/**
                 * Fired when the layout of app-drawer has changed.
                 *
                 * @event app-reset-layout
                 */ /**
                     * Fired when app-drawer has finished transitioning.
                     *
                     * @event app-drawer-transitioned
                     */}});const $_documentContainer=document.createElement("template");$_documentContainer.setAttribute("style","display: none;");$_documentContainer.innerHTML=`<dom-module id="app-grid-style">
  <template>
    <style>
      :host {
        /**
         * The width for the expandible item is:
         * ((100% - subPixelAdjustment) / columns * itemColumns - gutter
         *
         * - subPixelAdjustment: 0.1px (Required for IE 11)
         * - gutter: var(--app-grid-gutter)
         * - columns: var(--app-grid-columns)
         * - itemColumn: var(--app-grid-expandible-item-columns)
         */
        --app-grid-expandible-item: {
          -webkit-flex-basis: calc((100% - 0.1px) / var(--app-grid-columns, 1) * var(--app-grid-expandible-item-columns, 1) - var(--app-grid-gutter, 0px)) !important;
          flex-basis: calc((100% - 0.1px) / var(--app-grid-columns, 1) * var(--app-grid-expandible-item-columns, 1) - var(--app-grid-gutter, 0px)) !important;
          max-width: calc((100% - 0.1px) / var(--app-grid-columns, 1) * var(--app-grid-expandible-item-columns, 1) - var(--app-grid-gutter, 0px)) !important;
        };
      }

      .app-grid {
        display: -ms-flexbox;
        display: -webkit-flex;
        display: flex;

        -ms-flex-direction: row;
        -webkit-flex-direction: row;
        flex-direction: row;

        -ms-flex-wrap: wrap;
        -webkit-flex-wrap: wrap;
        flex-wrap: wrap;

        padding-top: var(--app-grid-gutter, 0px);
        padding-left: var(--app-grid-gutter, 0px);
        box-sizing: border-box;
      }

      .app-grid > * {
        /* Required for IE 10 */
        -ms-flex: 1 1 100%;
        -webkit-flex: 1;
        flex: 1;

        /* The width for an item is: (100% - subPixelAdjustment - gutter * columns) / columns */
        -webkit-flex-basis: calc((100% - 0.1px - (var(--app-grid-gutter, 0px) * var(--app-grid-columns, 1))) / var(--app-grid-columns, 1));
        flex-basis: calc((100% - 0.1px - (var(--app-grid-gutter, 0px) * var(--app-grid-columns, 1))) / var(--app-grid-columns, 1));

        max-width: calc((100% - 0.1px - (var(--app-grid-gutter, 0px) * var(--app-grid-columns, 1))) / var(--app-grid-columns, 1));
        margin-bottom: var(--app-grid-gutter, 0px);
        margin-right: var(--app-grid-gutter, 0px);
        height: var(--app-grid-item-height);
        box-sizing: border-box;
      }

      .app-grid[has-aspect-ratio] > * {
        position: relative;
      }

      .app-grid[has-aspect-ratio] > *::before {
        display: block;
        content: "";
        padding-top: var(--app-grid-item-height, 100%);
      }

      .app-grid[has-aspect-ratio] > * > * {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
      }
    </style>
  </template>
</dom-module>`;document.head.appendChild($_documentContainer.content);Polymer({_template:html`
    <style>
      :host {
        display: block;
        /**
         * Force app-header-layout to have its own stacking context so that its parent can
         * control the stacking of it relative to other elements (e.g. app-drawer-layout).
         * This could be done using \`isolation: isolate\`, but that's not well supported
         * across browsers.
         */
        position: relative;
        z-index: 0;
      }

      #wrapper ::slotted([slot=header]) {
        @apply --layout-fixed-top;
        z-index: 1;
      }

      #wrapper.initializing ::slotted([slot=header]) {
        position: relative;
      }

      :host([has-scrolling-region]) {
        height: 100%;
      }

      :host([has-scrolling-region]) #wrapper ::slotted([slot=header]) {
        position: absolute;
      }

      :host([has-scrolling-region]) #wrapper.initializing ::slotted([slot=header]) {
        position: relative;
      }

      :host([has-scrolling-region]) #wrapper #contentContainer {
        @apply --layout-fit;
        overflow-y: auto;
        -webkit-overflow-scrolling: touch;
      }

      :host([has-scrolling-region]) #wrapper.initializing #contentContainer {
        position: relative;
      }

      :host([fullbleed]) {
        @apply --layout-vertical;
        @apply --layout-fit;
      }

      :host([fullbleed]) #wrapper,
      :host([fullbleed]) #wrapper #contentContainer {
        @apply --layout-vertical;
        @apply --layout-flex;
      }

      #contentContainer {
        /* Create a stacking context here so that all children appear below the header. */
        position: relative;
        z-index: 0;
      }

      @media print {
        :host([has-scrolling-region]) #wrapper #contentContainer {
          overflow-y: visible;
        }
      }

    </style>

    <div id="wrapper" class="initializing">
      <slot id="headerSlot" name="header"></slot>

      <div id="contentContainer">
        <slot></slot>
      </div>
    </div>
`,is:"app-header-layout",behaviors:[AppLayoutBehavior],properties:{/**
     * If true, the current element will have its own scrolling region.
     * Otherwise, it will use the document scroll to control the header.
     */hasScrollingRegion:{type:Boolean,value:!1,reflectToAttribute:!0}},observers:["resetLayout(isAttached, hasScrollingRegion)"],/**
   * A reference to the app-header element.
   *
   * @property header
   */get header(){return dom(this.$.headerSlot).getDistributedNodes()[0]},_updateLayoutStates:function(){var header=this.header;if(!this.isAttached||!header){return}// Remove the initializing class, which staticly positions the header and
// the content until the height of the header can be read.
this.$.wrapper.classList.remove("initializing");// Update scroll target.
header.scrollTarget=this.hasScrollingRegion?this.$.contentContainer:this.ownerDocument.documentElement;// Get header height here so that style reads are batched together before
// style writes (i.e. getBoundingClientRect() below).
var headerHeight=header.offsetHeight;// Update the header position.
if(!this.hasScrollingRegion){requestAnimationFrame(function(){var rect=this.getBoundingClientRect(),rightOffset=document.documentElement.clientWidth-rect.right;header.style.left=rect.left+"px";header.style.right=rightOffset+"px"}.bind(this))}else{header.style.left="";header.style.right=""}// Update the content container position.
var containerStyle=this.$.contentContainer.style;if(header.fixed&&!header.condenses&&this.hasScrollingRegion){// If the header size does not change and we're using a scrolling region,
// exclude the header area from the scrolling region so that the header
// doesn't overlap the scrollbar.
containerStyle.marginTop=headerHeight+"px";containerStyle.paddingTop=""}else{containerStyle.paddingTop=headerHeight+"px";containerStyle.marginTop=""}}});Polymer({_template:html`
    <style>
      :host {
        position: relative;
        display: block;
        transition-timing-function: linear;
        transition-property: -webkit-transform;
        transition-property: transform;
      }

      :host::before {
        position: absolute;
        right: 0px;
        bottom: -5px;
        left: 0px;
        width: 100%;
        height: 5px;
        content: "";
        transition: opacity 0.4s;
        pointer-events: none;
        opacity: 0;
        box-shadow: inset 0px 5px 6px -3px rgba(0, 0, 0, 0.4);
        will-change: opacity;
        @apply --app-header-shadow;
      }

      :host([shadow])::before {
        opacity: 1;
      }

      #background {
        @apply --layout-fit;
        overflow: hidden;
      }

      #backgroundFrontLayer,
      #backgroundRearLayer {
        @apply --layout-fit;
        height: 100%;
        pointer-events: none;
        background-size: cover;
      }

      #backgroundFrontLayer {
        @apply --app-header-background-front-layer;
      }

      #backgroundRearLayer {
        opacity: 0;
        @apply --app-header-background-rear-layer;
      }

      #contentContainer {
        position: relative;
        width: 100%;
        height: 100%;
      }

      :host([disabled]),
      :host([disabled])::after,
      :host([disabled]) #backgroundFrontLayer,
      :host([disabled]) #backgroundRearLayer,
      /* Silent scrolling should not run CSS transitions */
      :host([silent-scroll]),
      :host([silent-scroll])::after,
      :host([silent-scroll]) #backgroundFrontLayer,
      :host([silent-scroll]) #backgroundRearLayer {
        transition: none !important;
      }

      :host([disabled]) ::slotted(app-toolbar:first-of-type),
      :host([disabled]) ::slotted([sticky]),
      /* Silent scrolling should not run CSS transitions */
      :host([silent-scroll]) ::slotted(app-toolbar:first-of-type),
      :host([silent-scroll]) ::slotted([sticky]) {
        transition: none !important;
      }

    </style>
    <div id="contentContainer">
      <slot id="slot"></slot>
    </div>
`,is:"app-header",behaviors:[AppScrollEffectsBehavior,AppLayoutBehavior],properties:{/**
     * If true, the header will automatically collapse when scrolling down.
     * That is, the `sticky` element remains visible when the header is fully
     *condensed whereas the rest of the elements will collapse below `sticky`
     *element.
     *
     * By default, the `sticky` element is the first toolbar in the light DOM:
     *
     *```html
     * <app-header condenses>
     *   <app-toolbar>This toolbar remains on top</app-toolbar>
     *   <app-toolbar></app-toolbar>
     *   <app-toolbar></app-toolbar>
     * </app-header>
     * ```
     *
     * Additionally, you can specify which toolbar or element remains visible in
     *condensed mode by adding the `sticky` attribute to that element. For
     *example: if we want the last toolbar to remain visible, we can add the
     *`sticky` attribute to it.
     *
     *```html
     * <app-header condenses>
     *   <app-toolbar></app-toolbar>
     *   <app-toolbar></app-toolbar>
     *   <app-toolbar sticky>This toolbar remains on top</app-toolbar>
     * </app-header>
     * ```
     *
     * Note the `sticky` element must be a direct child of `app-header`.
     */condenses:{type:Boolean,value:!1},/**
     * Mantains the header fixed at the top so it never moves away.
     */fixed:{type:Boolean,value:!1},/**
     * Slides back the header when scrolling back up.
     */reveals:{type:Boolean,value:!1},/**
     * Displays a shadow below the header.
     */shadow:{type:Boolean,reflectToAttribute:!0,value:!1}},observers:["_configChanged(isAttached, condenses, fixed)"],/**
   * A cached offsetHeight of the current element.
   *
   * @type {number}
   */_height:0,/**
   * The distance in pixels the header will be translated to when scrolling.
   *
   * @type {number}
   */_dHeight:0,/**
   * The offsetTop of `_stickyEl`
   *
   * @type {number}
   */_stickyElTop:0,/**
   * A reference to the element that remains visible when the header condenses.
   *
   * @type {HTMLElement}
   */_stickyElRef:null,/**
   * The header's top value used for the `transformY`
   *
   * @type {number}
   */_top:0,/**
   * The current scroll progress.
   *
   * @type {number}
   */_progress:0,_wasScrollingDown:!1,_initScrollTop:0,_initTimestamp:0,_lastTimestamp:0,_lastScrollTop:0,/**
   * The distance the header is allowed to move away.
   *
   * @type {number}
   */get _maxHeaderTop(){return this.fixed?this._dHeight:this._height+5},/**
   * Returns a reference to the sticky element.
   *
   * @return {HTMLElement}?
   */get _stickyEl(){if(this._stickyElRef){return this._stickyElRef}// Get the element with the sticky attribute on it or the first element in
// the light DOM.
for(var nodes=dom(this.$.slot).getDistributedNodes(),i=0,node;node=/** @type {!HTMLElement} */nodes[i];i++){if(node.nodeType===Node.ELEMENT_NODE){if(node.hasAttribute("sticky")){this._stickyElRef=node;break}else if(!this._stickyElRef){this._stickyElRef=node}}}return this._stickyElRef},_configChanged:function(){this.resetLayout();this._notifyLayoutChanged()},_updateLayoutStates:function(){if(0===this.offsetWidth&&0===this.offsetHeight){return}var scrollTop=this._clampedScrollTop,firstSetup=0===this._height||0===scrollTop,currentDisabled=this.disabled;this._height=this.offsetHeight;this._stickyElRef=null;this.disabled=!0;// prepare for measurement
if(!firstSetup){this._updateScrollState(0,!0)}if(this._mayMove()){this._dHeight=this._stickyEl?this._height-this._stickyEl.offsetHeight:0}else{this._dHeight=0}this._stickyElTop=this._stickyEl?this._stickyEl.offsetTop:0;this._setUpEffect();if(firstSetup){this._updateScrollState(scrollTop,!0)}else{this._updateScrollState(this._lastScrollTop,!0);this._layoutIfDirty()}// restore no transition
this.disabled=currentDisabled},/**
   * Updates the scroll state.
   *
   * @param {number} scrollTop
   * @param {boolean=} forceUpdate (default: false)
   */_updateScrollState:function(scrollTop,forceUpdate){if(0===this._height){return}var progress=0,top=0,lastTop=this._top,lastScrollTop=this._lastScrollTop,maxHeaderTop=this._maxHeaderTop,dScrollTop=scrollTop-this._lastScrollTop,absDScrollTop=Math.abs(dScrollTop),isScrollingDown=scrollTop>this._lastScrollTop,now=performance.now();if(this._mayMove()){top=this._clamp(this.reveals?lastTop+dScrollTop:scrollTop,0,maxHeaderTop)}if(scrollTop>=this._dHeight){top=this.condenses&&!this.fixed?Math.max(this._dHeight,top):top;this.style.transitionDuration="0ms"}if(this.reveals&&!this.disabled&&100>absDScrollTop){// set the initial scroll position
if(300<now-this._initTimestamp||this._wasScrollingDown!==isScrollingDown){this._initScrollTop=scrollTop;this._initTimestamp=now}if(scrollTop>=maxHeaderTop){// check if the header is allowed to snap
if(30<Math.abs(this._initScrollTop-scrollTop)||10<absDScrollTop){if(isScrollingDown&&scrollTop>=maxHeaderTop){top=maxHeaderTop}else if(!isScrollingDown&&scrollTop>=this._dHeight){top=this.condenses&&!this.fixed?this._dHeight:0}var scrollVelocity=dScrollTop/(now-this._lastTimestamp);this.style.transitionDuration=this._clamp((top-lastTop)/scrollVelocity,0,300)+"ms"}else{top=this._top}}}if(0===this._dHeight){progress=0<scrollTop?1:0}else{progress=top/this._dHeight}if(!forceUpdate){this._lastScrollTop=scrollTop;this._top=top;this._wasScrollingDown=isScrollingDown;this._lastTimestamp=now}if(forceUpdate||progress!==this._progress||lastTop!==top||0===scrollTop){this._progress=progress;this._runEffects(progress,top);this._transformHeader(top)}},/**
   * Returns true if the current header is allowed to move as the user scrolls.
   *
   * @return {boolean}
   */_mayMove:function(){return this.condenses||!this.fixed},/**
   * Returns true if the current header will condense based on the size of the
   * header and the `consenses` property.
   *
   * @return {boolean}
   */willCondense:function(){return 0<this._dHeight&&this.condenses},/**
   * Returns true if the current element is on the screen.
   * That is, visible in the current viewport.
   *
   * @method isOnScreen
   * @return {boolean}
   */isOnScreen:function(){return 0!==this._height&&this._top<this._height},/**
   * Returns true if there's content below the current element.
   *
   * @method isContentBelow
   * @return {boolean}
   */isContentBelow:function(){return 0===this._top?0<this._clampedScrollTop:0<=this._clampedScrollTop-this._maxHeaderTop},/**
   * Transforms the header.
   *
   * @param {number} y
   */_transformHeader:function(y){this.translate3d(0,-y+"px",0);if(this._stickyEl){this.translate3d(0,this.condenses&&y>=this._stickyElTop?Math.min(y,this._dHeight)-this._stickyElTop+"px":0,0,this._stickyEl)}},_clamp:function(v,min,max){return Math.min(max,Math.max(min,v))},_ensureBgContainers:function(){if(!this._bgContainer){this._bgContainer=document.createElement("div");this._bgContainer.id="background";this._bgRear=document.createElement("div");this._bgRear.id="backgroundRearLayer";this._bgContainer.appendChild(this._bgRear);this._bgFront=document.createElement("div");this._bgFront.id="backgroundFrontLayer";this._bgContainer.appendChild(this._bgFront);dom(this.root).insertBefore(this._bgContainer,this.$.contentContainer)}},_getDOMRef:function(id){switch(id){case"backgroundFrontLayer":this._ensureBgContainers();return this._bgFront;case"backgroundRearLayer":this._ensureBgContainers();return this._bgRear;case"background":this._ensureBgContainers();return this._bgContainer;case"mainTitle":return dom(this).querySelector("[main-title]");case"condensedTitle":return dom(this).querySelector("[condensed-title]");}return null},/**
   * Returns an object containing the progress value of the scroll effects
   * and the top position of the header.
   *
   * @method getScrollState
   * @return {Object}
   */getScrollState:function(){return{progress:this._progress,top:this._top}}});Polymer({_template:html`
    <style>

      :host {
        @apply --layout-horizontal;
        @apply --layout-center;
        position: relative;
        height: 64px;
        padding: 0 16px;
        pointer-events: none;
        font-size: var(--app-toolbar-font-size, 20px);
      }

      :host ::slotted(*) {
        pointer-events: auto;
      }

      :host ::slotted(paper-icon-button) {
        /* paper-icon-button/issues/33 */
        font-size: 0;
      }

      :host ::slotted([main-title]),
      :host ::slotted([condensed-title]) {
        pointer-events: none;
        @apply --layout-flex;
      }

      :host ::slotted([bottom-item]) {
        position: absolute;
        right: 0;
        bottom: 0;
        left: 0;
      }

      :host ::slotted([top-item]) {
        position: absolute;
        top: 0;
        right: 0;
        left: 0;
      }

      :host ::slotted([spacer]) {
        margin-left: 64px;
      }
    </style>

    <slot></slot>
`,is:"app-toolbar"});registerEffect("blend-background",{/** @this Polymer.AppLayout.ElementWithBackground */setUp:function setUp(){var fx={backgroundFrontLayer:this._getDOMRef("backgroundFrontLayer"),backgroundRearLayer:this._getDOMRef("backgroundRearLayer")};fx.backgroundFrontLayer.style.willChange="opacity";fx.backgroundFrontLayer.style.transform="translateZ(0)";fx.backgroundRearLayer.style.willChange="opacity";fx.backgroundRearLayer.style.transform="translateZ(0)";fx.backgroundRearLayer.style.opacity=0;this._fxBlendBackground=fx},/** @this Polymer.AppLayout.ElementWithBackground */run:function run(p,y){var fx=this._fxBlendBackground;fx.backgroundFrontLayer.style.opacity=1-p;fx.backgroundRearLayer.style.opacity=p},/** @this Polymer.AppLayout.ElementWithBackground */tearDown:function tearDown(){delete this._fxBlendBackground}});registerEffect("fade-background",{/** @this Polymer.AppLayout.ElementWithBackground */setUp:function setUp(config){var fx={},duration=config.duration||"0.5s";fx.backgroundFrontLayer=this._getDOMRef("backgroundFrontLayer");fx.backgroundRearLayer=this._getDOMRef("backgroundRearLayer");fx.backgroundFrontLayer.style.willChange="opacity";fx.backgroundFrontLayer.style.webkitTransform="translateZ(0)";fx.backgroundFrontLayer.style.transitionProperty="opacity";fx.backgroundFrontLayer.style.transitionDuration=duration;fx.backgroundRearLayer.style.willChange="opacity";fx.backgroundRearLayer.style.webkitTransform="translateZ(0)";fx.backgroundRearLayer.style.transitionProperty="opacity";fx.backgroundRearLayer.style.transitionDuration=duration;this._fxFadeBackground=fx},/** @this Polymer.AppLayout.ElementWithBackground */run:function run(p,y){var fx=this._fxFadeBackground;if(1<=p){fx.backgroundFrontLayer.style.opacity=0;fx.backgroundRearLayer.style.opacity=1}else{fx.backgroundFrontLayer.style.opacity=1;fx.backgroundRearLayer.style.opacity=0}},/** @this Polymer.AppLayout.ElementWithBackground */tearDown:function tearDown(){delete this._fxFadeBackground}});registerEffect("waterfall",{/**
   *  @this Polymer.AppLayout.ElementWithBackground
   */run:function run(){this.shadow=this.isOnScreen()&&this.isContentBelow()}});function interpolate(progress,points,fn,ctx){fn.apply(ctx,points.map(function(point){return point[0]+(point[1]-point[0])*progress}))}/**
   * Transform the font size of a designated title element between two values
   * based on the scroll position.
   */registerEffect("resize-title",{/** @this Polymer.AppLayout.ElementWithBackground */setUp:function setUp(){var title=this._getDOMRef("mainTitle"),condensedTitle=this._getDOMRef("condensedTitle");if(!condensedTitle){console.warn("Scroll effect `resize-title`: undefined `condensed-title`");return!1}if(!title){console.warn("Scroll effect `resize-title`: undefined `main-title`");return!1}condensedTitle.style.willChange="opacity";condensedTitle.style.webkitTransform="translateZ(0)";condensedTitle.style.transform="translateZ(0)";condensedTitle.style.webkitTransformOrigin="left top";condensedTitle.style.transformOrigin="left top";title.style.willChange="opacity";title.style.webkitTransformOrigin="left top";title.style.transformOrigin="left top";title.style.webkitTransform="translateZ(0)";title.style.transform="translateZ(0)";var titleClientRect=title.getBoundingClientRect(),condensedTitleClientRect=condensedTitle.getBoundingClientRect(),fx={};fx.scale=parseInt(window.getComputedStyle(condensedTitle)["font-size"],10)/parseInt(window.getComputedStyle(title)["font-size"],10);fx.titleDX=titleClientRect.left-condensedTitleClientRect.left;fx.titleDY=titleClientRect.top-condensedTitleClientRect.top;fx.condensedTitle=condensedTitle;fx.title=title;this._fxResizeTitle=fx},/** @this PolymerElement */run:function run(p,y){var fx=this._fxResizeTitle;if(!this.condenses){y=0}if(1<=p){fx.title.style.opacity=0;fx.condensedTitle.style.opacity=1}else{fx.title.style.opacity=1;fx.condensedTitle.style.opacity=0}interpolate(Math.min(1,p),[[1,fx.scale],[0,-fx.titleDX],[y,y-fx.titleDY]],function(scale,translateX,translateY){this.transform("translate("+translateX+"px, "+translateY+"px) "+"scale3d("+scale+", "+scale+", 1)",fx.title)},this)},/** @this Polymer.AppLayout.ElementWithBackground */tearDown:function tearDown(){delete this._fxResizeTitle}});registerEffect("parallax-background",{/**
   * @param {{scalar: string}} config
   * @this Polymer.AppLayout.ElementWithBackground
   */setUp:function setUp(config){var fx={},scalar=parseFloat(config.scalar);fx.background=this._getDOMRef("background");fx.backgroundFrontLayer=this._getDOMRef("backgroundFrontLayer");fx.backgroundRearLayer=this._getDOMRef("backgroundRearLayer");fx.deltaBg=fx.backgroundFrontLayer.offsetHeight-fx.background.offsetHeight;if(0===fx.deltaBg){if(isNaN(scalar)){scalar=.8}fx.deltaBg=(this._dHeight||0)*scalar}else{if(isNaN(scalar)){scalar=1}fx.deltaBg=fx.deltaBg*scalar}this._fxParallaxBackground=fx},/** @this Polymer.AppLayout.ElementWithBackground */run:function run(p,y){var fx=this._fxParallaxBackground;this.transform("translate3d(0px, "+fx.deltaBg*Math.min(1,p)+"px, 0px)",fx.backgroundFrontLayer);if(fx.backgroundRearLayer){this.transform("translate3d(0px, "+fx.deltaBg*Math.min(1,p)+"px, 0px)",fx.backgroundRearLayer)}},/** @this Polymer.AppLayout.ElementWithBackground */tearDown:function tearDown(){delete this._fxParallaxBackground}});registerEffect("material",{/**
   * @this Polymer.AppLayout.ElementWithBackground
   */setUp:function setUp(){this.effects="waterfall resize-title blend-background parallax-background";return!1}});registerEffect("resize-snapped-title",{/**
   * @this Polymer.AppLayout.ElementWithBackground
   */setUp:function setUp(config){var title=this._getDOMRef("mainTitle"),condensedTitle=this._getDOMRef("condensedTitle"),duration=config.duration||"0.2s",fx={};if(!condensedTitle){console.warn("Scroll effect `resize-snapped-title`: undefined `condensed-title`");return!1}if(!title){console.warn("Scroll effect `resize-snapped-title`: undefined `main-title`");return!1}title.style.transitionProperty="opacity";title.style.transitionDuration=duration;condensedTitle.style.transitionProperty="opacity";condensedTitle.style.transitionDuration=duration;fx.condensedTitle=condensedTitle;fx.title=title;this._fxResizeSnappedTitle=fx},/** @this Polymer.AppLayout.ElementWithBackground */run:function run(p,y){var fx=this._fxResizeSnappedTitle;if(0<p){fx.title.style.opacity=0;fx.condensedTitle.style.opacity=1}else{fx.title.style.opacity=1;fx.condensedTitle.style.opacity=0}},/** @this Polymer.AppLayout.ElementWithBackground */tearDown:function tearDown(){var fx=this._fxResizeSnappedTitle;fx.title.style.transition="";fx.condensedTitle.style.transition="";delete this._fxResizeSnappedTitle}});// Give the user the choice to opt out of font loading.
if(!window.polymerSkipLoadingFontRoboto){const link=document.createElement("link");link.rel="stylesheet";link.type="text/css";link.crossOrigin="anonymous";link.href="https://fonts.googleapis.com/css?family=Roboto+Mono:400,700|Roboto:400,300,300italic,400italic,500,500italic,700,700italic";document.head.appendChild(link)}const IronA11yAnnouncer=Polymer({_template:html`
    <style>
      :host {
        display: inline-block;
        position: fixed;
        clip: rect(0px,0px,0px,0px);
      }
    </style>
    <div aria-live$="[[mode]]">[[_text]]</div>
`,is:"iron-a11y-announcer",properties:{/**
     * The value of mode is used to set the `aria-live` attribute
     * for the element that will be announced. Valid values are: `off`,
     * `polite` and `assertive`.
     */mode:{type:String,value:"polite"},_text:{type:String,value:""}},created:function(){if(!IronA11yAnnouncer.instance){IronA11yAnnouncer.instance=this}document.body.addEventListener("iron-announce",this._onIronAnnounce.bind(this))},/**
   * Cause a text string to be announced by screen readers.
   *
   * @param {string} text The text that should be announced.
   */announce:function(text){this._text="";this.async(function(){this._text=text},100)},_onIronAnnounce:function(event){if(event.detail&&event.detail.text){this.announce(event.detail.text)}}});_exports.IronA11yAnnouncer=IronA11yAnnouncer;IronA11yAnnouncer.instance=null;IronA11yAnnouncer.requestAvailability=function(){if(!IronA11yAnnouncer.instance){IronA11yAnnouncer.instance=document.createElement("iron-a11y-announcer")}document.body.appendChild(IronA11yAnnouncer.instance)};var ironA11yAnnouncer={IronA11yAnnouncer:IronA11yAnnouncer};_exports.$ironA11yAnnouncer=ironA11yAnnouncer;var KEY_IDENTIFIER={"U+0008":"backspace","U+0009":"tab","U+001B":"esc","U+0020":"space","U+007F":"del"},KEY_CODE={8:"backspace",9:"tab",13:"enter",27:"esc",33:"pageup",34:"pagedown",35:"end",36:"home",32:"space",37:"left",38:"up",39:"right",40:"down",46:"del",106:"*"},MODIFIER_KEYS={shift:"shiftKey",ctrl:"ctrlKey",alt:"altKey",meta:"metaKey"},KEY_CHAR=/[a-z0-9*]/,IDENT_CHAR=/U\+/,ARROW_KEY=/^arrow/,SPACE_KEY=/^space(bar)?/,ESC_KEY=/^escape$/;/**
    * Special table for KeyboardEvent.keyCode.
    * KeyboardEvent.keyIdentifier is better, and KeyBoardEvent.key is even better
    * than that.
    *
    * Values from:
    * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent.keyCode#Value_of_keyCode
    */ /**
                           * Transforms the key.
                           * @param {string} key The KeyBoardEvent.key
                           * @param {Boolean} [noSpecialChars] Limits the transformation to
                           * alpha-numeric characters.
                           */function transformKey(key,noSpecialChars){var validKey="";if(key){var lKey=key.toLowerCase();if(" "===lKey||SPACE_KEY.test(lKey)){validKey="space"}else if(ESC_KEY.test(lKey)){validKey="esc"}else if(1==lKey.length){if(!noSpecialChars||KEY_CHAR.test(lKey)){validKey=lKey}}else if(ARROW_KEY.test(lKey)){validKey=lKey.replace("arrow","")}else if("multiply"==lKey){// numpad '*' can map to Multiply on IE/Windows
validKey="*"}else{validKey=lKey}}return validKey}function transformKeyIdentifier(keyIdent){var validKey="";if(keyIdent){if(keyIdent in KEY_IDENTIFIER){validKey=KEY_IDENTIFIER[keyIdent]}else if(IDENT_CHAR.test(keyIdent)){keyIdent=parseInt(keyIdent.replace("U+","0x"),16);validKey=String.fromCharCode(keyIdent).toLowerCase()}else{validKey=keyIdent.toLowerCase()}}return validKey}function transformKeyCode(keyCode){var validKey="";if(+keyCode){if(65<=keyCode&&90>=keyCode){// ascii a-z
// lowercase is 32 offset from uppercase
validKey=String.fromCharCode(32+keyCode)}else if(112<=keyCode&&123>=keyCode){// function keys f1-f12
validKey="f"+(keyCode-112+1)}else if(48<=keyCode&&57>=keyCode){// top 0-9 keys
validKey=keyCode-48+""}else if(96<=keyCode&&105>=keyCode){// num pad 0-9
validKey=keyCode-96+""}else{validKey=KEY_CODE[keyCode]}}return validKey}/**
   * Calculates the normalized key for a KeyboardEvent.
   * @param {KeyboardEvent} keyEvent
   * @param {Boolean} [noSpecialChars] Set to true to limit keyEvent.key
   * transformation to alpha-numeric chars. This is useful with key
   * combinations like shift + 2, which on FF for MacOS produces
   * keyEvent.key = @
   * To get 2 returned, set noSpecialChars = true
   * To get @ returned, set noSpecialChars = false
   */function normalizedKeyForEvent(keyEvent,noSpecialChars){// Fall back from .key, to .detail.key for artifical keyboard events,
// and then to deprecated .keyIdentifier and .keyCode.
if(keyEvent.key){return transformKey(keyEvent.key,noSpecialChars)}if(keyEvent.detail&&keyEvent.detail.key){return transformKey(keyEvent.detail.key,noSpecialChars)}return transformKeyIdentifier(keyEvent.keyIdentifier)||transformKeyCode(keyEvent.keyCode)||""}function keyComboMatchesEvent(keyCombo,event){// For combos with modifiers we support only alpha-numeric keys
var keyEvent=normalizedKeyForEvent(event,keyCombo.hasModifiers);return keyEvent===keyCombo.key&&(!keyCombo.hasModifiers||!!event.shiftKey===!!keyCombo.shiftKey&&!!event.ctrlKey===!!keyCombo.ctrlKey&&!!event.altKey===!!keyCombo.altKey&&!!event.metaKey===!!keyCombo.metaKey)}function parseKeyComboString(keyComboString){if(1===keyComboString.length){return{combo:keyComboString,key:keyComboString,event:"keydown"}}return keyComboString.split("+").reduce(function(parsedKeyCombo,keyComboPart){var eventParts=keyComboPart.split(":"),keyName=eventParts[0],event=eventParts[1];if(keyName in MODIFIER_KEYS){parsedKeyCombo[MODIFIER_KEYS[keyName]]=!0;parsedKeyCombo.hasModifiers=!0}else{parsedKeyCombo.key=keyName;parsedKeyCombo.event=event||"keydown"}return parsedKeyCombo},{combo:keyComboString.split(":").shift()})}function parseEventString(eventString){return eventString.trim().split(" ").map(function(keyComboString){return parseKeyComboString(keyComboString)})}/**
   * `Polymer.IronA11yKeysBehavior` provides a normalized interface for processing
   * keyboard commands that pertain to [WAI-ARIA best
   * practices](http://www.w3.org/TR/wai-aria-practices/#kbd_general_binding). The
   * element takes care of browser differences with respect to Keyboard events and
   * uses an expressive syntax to filter key presses.
   *
   * Use the `keyBindings` prototype property to express what combination of keys
   * will trigger the callback. A key binding has the format
   * `"KEY+MODIFIER:EVENT": "callback"` (`"KEY": "callback"` or
   * `"KEY:EVENT": "callback"` are valid as well). Some examples:
   *
   *      keyBindings: {
   *        'space': '_onKeydown', // same as 'space:keydown'
   *        'shift+tab': '_onKeydown',
   *        'enter:keypress': '_onKeypress',
   *        'esc:keyup': '_onKeyup'
   *      }
   *
   * The callback will receive with an event containing the following information
   * in `event.detail`:
   *
   *      _onKeydown: function(event) {
   *        console.log(event.detail.combo); // KEY+MODIFIER, e.g. "shift+tab"
   *        console.log(event.detail.key); // KEY only, e.g. "tab"
   *        console.log(event.detail.event); // EVENT, e.g. "keydown"
   *        console.log(event.detail.keyboardEvent); // the original KeyboardEvent
   *      }
   *
   * Use the `keyEventTarget` attribute to set up event handlers on a specific
   * node.
   *
   * See the [demo source
   * code](https://github.com/PolymerElements/iron-a11y-keys-behavior/blob/master/demo/x-key-aware.html)
   * for an example.
   *
   * @demo demo/index.html
   * @polymerBehavior
   */const IronA11yKeysBehavior={properties:{/**
     * The EventTarget that will be firing relevant KeyboardEvents. Set it to
     * `null` to disable the listeners.
     * @type {?EventTarget}
     */keyEventTarget:{type:Object,value:function(){return this}},/**
     * If true, this property will cause the implementing element to
     * automatically stop propagation on any handled KeyboardEvents.
     */stopKeyboardEventPropagation:{type:Boolean,value:!1},_boundKeyHandlers:{type:Array,value:function(){return[]}},// We use this due to a limitation in IE10 where instances will have
// own properties of everything on the "prototype".
_imperativeKeyBindings:{type:Object,value:function(){return{}}}},observers:["_resetKeyEventListeners(keyEventTarget, _boundKeyHandlers)"],/**
   * To be used to express what combination of keys  will trigger the relative
   * callback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`
   * @type {!Object}
   */keyBindings:{},registered:function(){this._prepKeyBindings()},attached:function(){this._listenKeyEventListeners()},detached:function(){this._unlistenKeyEventListeners()},/**
   * Can be used to imperatively add a key binding to the implementing
   * element. This is the imperative equivalent of declaring a keybinding
   * in the `keyBindings` prototype property.
   *
   * @param {string} eventString
   * @param {string} handlerName
   */addOwnKeyBinding:function(eventString,handlerName){this._imperativeKeyBindings[eventString]=handlerName;this._prepKeyBindings();this._resetKeyEventListeners()},/**
   * When called, will remove all imperatively-added key bindings.
   */removeOwnKeyBindings:function(){this._imperativeKeyBindings={};this._prepKeyBindings();this._resetKeyEventListeners()},/**
   * Returns true if a keyboard event matches `eventString`.
   *
   * @param {KeyboardEvent} event
   * @param {string} eventString
   * @return {boolean}
   */keyboardEventMatchesKeys:function(event,eventString){for(var keyCombos=parseEventString(eventString),i=0;i<keyCombos.length;++i){if(keyComboMatchesEvent(keyCombos[i],event)){return!0}}return!1},_collectKeyBindings:function(){var keyBindings=this.behaviors.map(function(behavior){return behavior.keyBindings});if(-1===keyBindings.indexOf(this.keyBindings)){keyBindings.push(this.keyBindings)}return keyBindings},_prepKeyBindings:function(){this._keyBindings={};this._collectKeyBindings().forEach(function(keyBindings){for(var eventString in keyBindings){this._addKeyBinding(eventString,keyBindings[eventString])}},this);for(var eventString in this._imperativeKeyBindings){this._addKeyBinding(eventString,this._imperativeKeyBindings[eventString])}// Give precedence to combos with modifiers to be checked first.
for(var eventName in this._keyBindings){this._keyBindings[eventName].sort(function(kb1,kb2){var b1=kb1[0].hasModifiers,b2=kb2[0].hasModifiers;return b1===b2?0:b1?-1:1})}},_addKeyBinding:function(eventString,handlerName){parseEventString(eventString).forEach(function(keyCombo){this._keyBindings[keyCombo.event]=this._keyBindings[keyCombo.event]||[];this._keyBindings[keyCombo.event].push([keyCombo,handlerName])},this)},_resetKeyEventListeners:function(){this._unlistenKeyEventListeners();if(this.isAttached){this._listenKeyEventListeners()}},_listenKeyEventListeners:function(){if(!this.keyEventTarget){return}Object.keys(this._keyBindings).forEach(function(eventName){var keyBindings=this._keyBindings[eventName],boundKeyHandler=this._onKeyBindingEvent.bind(this,keyBindings);this._boundKeyHandlers.push([this.keyEventTarget,eventName,boundKeyHandler]);this.keyEventTarget.addEventListener(eventName,boundKeyHandler)},this)},_unlistenKeyEventListeners:function(){var keyHandlerTuple,keyEventTarget,eventName,boundKeyHandler;while(this._boundKeyHandlers.length){// My kingdom for block-scope binding and destructuring assignment..
keyHandlerTuple=this._boundKeyHandlers.pop();keyEventTarget=keyHandlerTuple[0];eventName=keyHandlerTuple[1];boundKeyHandler=keyHandlerTuple[2];keyEventTarget.removeEventListener(eventName,boundKeyHandler)}},_onKeyBindingEvent:function(keyBindings,event){if(this.stopKeyboardEventPropagation){event.stopPropagation()}// if event has been already prevented, don't do anything
if(event.defaultPrevented){return}for(var i=0;i<keyBindings.length;i++){var keyCombo=keyBindings[i][0],handlerName=keyBindings[i][1];if(keyComboMatchesEvent(keyCombo,event)){this._triggerKeyHandler(keyCombo,handlerName,event);// exit the loop if eventDefault was prevented
if(event.defaultPrevented){return}}}},_triggerKeyHandler:function(keyCombo,handlerName,keyboardEvent){var detail=Object.create(keyCombo);detail.keyboardEvent=keyboardEvent;var event=new CustomEvent(keyCombo.event,{detail:detail,cancelable:!0});this[handlerName].call(this,event);if(event.defaultPrevented){keyboardEvent.preventDefault()}}};_exports.IronA11yKeysBehavior=IronA11yKeysBehavior;var ironA11yKeysBehavior={IronA11yKeysBehavior:IronA11yKeysBehavior};_exports.$ironA11yKeysBehavior=ironA11yKeysBehavior;const IronControlState={properties:{/**
     * If true, the element currently has focus.
     */focused:{type:Boolean,value:!1,notify:!0,readOnly:!0,reflectToAttribute:!0},/**
     * If true, the user cannot interact with this element.
     */disabled:{type:Boolean,value:!1,notify:!0,observer:"_disabledChanged",reflectToAttribute:!0},/**
     * Value of the `tabindex` attribute before `disabled` was activated.
     * `null` means the attribute was not present.
     * @type {?string|undefined}
     */_oldTabIndex:{type:String},_boundFocusBlurHandler:{type:Function,value:function(){return this._focusBlurHandler.bind(this)}}},observers:["_changedControlState(focused, disabled)"],/**
   * @return {void}
   */ready:function(){this.addEventListener("focus",this._boundFocusBlurHandler,!0);this.addEventListener("blur",this._boundFocusBlurHandler,!0)},_focusBlurHandler:function(event){// Polymer takes care of retargeting events.
this._setFocused("focus"===event.type);return},_disabledChanged:function(disabled,old){this.setAttribute("aria-disabled",disabled?"true":"false");this.style.pointerEvents=disabled?"none":"";if(disabled){// Read the `tabindex` attribute instead of the `tabIndex` property.
// The property returns `-1` if there is no `tabindex` attribute.
// This distinction is important when restoring the value because
// leaving `-1` hides shadow root children from the tab order.
this._oldTabIndex=this.getAttribute("tabindex");this._setFocused(!1);this.tabIndex=-1;this.blur()}else if(this._oldTabIndex!==void 0){if(null===this._oldTabIndex){this.removeAttribute("tabindex")}else{this.setAttribute("tabindex",this._oldTabIndex)}}},_changedControlState:function(){// _controlStateChanged is abstract, follow-on behaviors may implement it
if(this._controlStateChanged){this._controlStateChanged()}}};_exports.IronControlState=IronControlState;var ironControlState={IronControlState:IronControlState};_exports.$ironControlState=ironControlState;class IronMeta{/**
   * @param {{
   *   type: (string|null|undefined),
   *   key: (string|null|undefined),
   *   value: *,
   * }=} options
   */constructor(options){IronMeta[" "](options);/** @type {string} */this.type=options&&options.type||"default";/** @type {string|null|undefined} */this.key=options&&options.key;if(options&&"value"in options){/** @type {*} */this.value=options.value}}/** @return {*} */get value(){var type=this.type,key=this.key;if(type&&key){return IronMeta.types[type]&&IronMeta.types[type][key]}}/** @param {*} value */set value(value){var type=this.type,key=this.key;if(type&&key){type=IronMeta.types[type]=IronMeta.types[type]||{};if(null==value){delete type[key]}else{type[key]=value}}}/** @return {!Array<*>} */get list(){var type=this.type;if(type){var items=IronMeta.types[this.type];if(!items){return[]}return Object.keys(items).map(function(key){return metaDatas[this.type][key]},this)}}/**
     * @param {string} key
     * @return {*}
     */byKey(key){this.key=key;return this.value}}_exports.IronMeta=IronMeta;;// This function is used to convince Closure not to remove constructor calls
// for instances that are not held anywhere. For example, when
// `new IronMeta({...})` is used only for the side effect of adding a value.
IronMeta[" "]=function(){};IronMeta.types={};var metaDatas=IronMeta.types;/**
                                `iron-meta` is a generic element you can use for sharing information across the
                                DOM tree. It uses [monostate pattern](http://c2.com/cgi/wiki?MonostatePattern)
                                such that any instance of iron-meta has access to the shared information. You
                                can use `iron-meta` to share whatever you want (or create an extension [like
                                x-meta] for enhancements).
                                
                                The `iron-meta` instances containing your actual data can be loaded in an
                                import, or constructed in any way you see fit. The only requirement is that you
                                create them before you try to access them.
                                
                                Examples:
                                
                                If I create an instance like this:
                                
                                    <iron-meta key="info" value="foo/bar"></iron-meta>
                                
                                Note that value="foo/bar" is the metadata I've defined. I could define more
                                attributes or use child nodes to define additional metadata.
                                
                                Now I can access that element (and it's metadata) from any iron-meta instance
                                via the byKey method, e.g.
                                
                                    meta.byKey('info');
                                
                                Pure imperative form would be like:
                                
                                    document.createElement('iron-meta').byKey('info');
                                
                                Or, in a Polymer element, you can include a meta in your template:
                                
                                    <iron-meta id="meta"></iron-meta>
                                    ...
                                    this.$.meta.byKey('info');
                                
                                @group Iron Elements
                                @demo demo/index.html
                                @element iron-meta
                                */Polymer({is:"iron-meta",properties:{/**
     * The type of meta-data.  All meta-data of the same type is stored
     * together.
     * @type {string}
     */type:{type:String,value:"default"},/**
     * The key used to store `value` under the `type` namespace.
     * @type {?string}
     */key:{type:String},/**
     * The meta-data to store or retrieve.
     * @type {*}
     */value:{type:String,notify:!0},/**
     * If true, `value` is set to the iron-meta instance itself.
     */self:{type:Boolean,observer:"_selfChanged"},__meta:{type:Boolean,computed:"__computeMeta(type, key, value)"}},hostAttributes:{hidden:!0},__computeMeta:function(type,key,value){var meta=new IronMeta({type:type,key:key});if(value!==void 0&&value!==meta.value){meta.value=value}else if(this.value!==meta.value){this.value=meta.value}return meta},get list(){return this.__meta&&this.__meta.list},_selfChanged:function(self){if(self){this.value=this}},/**
   * Retrieves meta data value by key.
   *
   * @method byKey
   * @param {string} key The key of the meta-data to be returned.
   * @return {*}
   */byKey:function(key){return new IronMeta({type:this.type,key:key}).value}});var ironMeta={IronMeta:IronMeta};_exports.$ironMeta=ironMeta;let IronValidatableBehaviorMeta=null;/**
                                                * `Use IronValidatableBehavior` to implement an element that validates
                                                * user input. Use the related `IronValidatorBehavior` to add custom
                                                * validation logic to an iron-input.
                                                *
                                                * By default, an `<iron-form>` element validates its fields when the user
                                                * presses the submit button. To validate a form imperatively, call the form's
                                                * `validate()` method, which in turn will call `validate()` on all its
                                                * children. By using `IronValidatableBehavior`, your custom element
                                                * will get a public `validate()`, which will return the validity of the
                                                * element, and a corresponding `invalid` attribute, which can be used for
                                                * styling.
                                                *
                                                * To implement the custom validation logic of your element, you must override
                                                * the protected `_getValidity()` method of this behaviour, rather than
                                                * `validate()`. See
                                                * [this](https://github.com/PolymerElements/iron-form/blob/master/demo/simple-element.html)
                                                * for an example.
                                                *
                                                * ### Accessibility
                                                *
                                                * Changing the `invalid` property, either manually or by calling `validate()`
                                                * will update the `aria-invalid` attribute.
                                                *
                                                * @demo demo/index.html
                                                * @polymerBehavior
                                                */_exports.IronValidatableBehaviorMeta=IronValidatableBehaviorMeta;const IronValidatableBehavior={properties:{/**
     * Name of the validator to use.
     */validator:{type:String},/**
     * True if the last call to `validate` is invalid.
     */invalid:{notify:!0,reflectToAttribute:!0,type:Boolean,value:!1,observer:"_invalidChanged"}},registered:function(){_exports.IronValidatableBehaviorMeta=IronValidatableBehaviorMeta=new IronMeta({type:"validator"})},_invalidChanged:function(){if(this.invalid){this.setAttribute("aria-invalid","true")}else{this.removeAttribute("aria-invalid")}},/* Recompute this every time it's needed, because we don't know if the
   * underlying IronValidatableBehaviorMeta has changed. */get _validator(){return IronValidatableBehaviorMeta&&IronValidatableBehaviorMeta.byKey(this.validator)},/**
   * @return {boolean} True if the validator `validator` exists.
   */hasValidator:function(){return null!=this._validator},/**
   * Returns true if the `value` is valid, and updates `invalid`. If you want
   * your element to have custom validation logic, do not override this method;
   * override `_getValidity(value)` instead.
    * @param {Object} value Deprecated: The value to be validated. By default,
   * it is passed to the validator's `validate()` function, if a validator is
   set.
   * If this argument is not specified, then the element's `value` property
   * is used, if it exists.
   * @return {boolean} True if `value` is valid.
   */validate:function(value){// If this is an element that also has a value property, and there was
// no explicit value argument passed, use the element's property instead.
if(value===void 0&&this.value!==void 0)this.invalid=!this._getValidity(this.value);else this.invalid=!this._getValidity(value);return!this.invalid},/**
   * Returns true if `value` is valid.  By default, it is passed
   * to the validator's `validate()` function, if a validator is set. You
   * should override this method if you want to implement custom validity
   * logic for your element.
   *
   * @param {Object} value The value to be validated.
   * @return {boolean} True if `value` is valid.
   */_getValidity:function(value){if(this.hasValidator()){return this._validator.validate(value)}return!0}};_exports.IronValidatableBehavior=IronValidatableBehavior;var ironValidatableBehavior={get IronValidatableBehaviorMeta(){return IronValidatableBehaviorMeta},IronValidatableBehavior:IronValidatableBehavior};_exports.$ironValidatableBehavior=ironValidatableBehavior;Polymer({_template:html`
    <style>
      :host {
        display: inline-block;
        position: relative;
        width: 400px;
        border: 1px solid;
        padding: 2px;
        -moz-appearance: textarea;
        -webkit-appearance: textarea;
        overflow: hidden;
      }

      .mirror-text {
        visibility: hidden;
        word-wrap: break-word;
        @apply --iron-autogrow-textarea;
      }

      .fit {
        @apply --layout-fit;
      }

      textarea {
        position: relative;
        outline: none;
        border: none;
        resize: none;
        background: inherit;
        color: inherit;
        /* see comments in template */
        width: 100%;
        height: 100%;
        font-size: inherit;
        font-family: inherit;
        line-height: inherit;
        text-align: inherit;
        @apply --iron-autogrow-textarea;
      }

      textarea::-webkit-input-placeholder {
        @apply --iron-autogrow-textarea-placeholder;
      }

      textarea:-moz-placeholder {
        @apply --iron-autogrow-textarea-placeholder;
      }

      textarea::-moz-placeholder {
        @apply --iron-autogrow-textarea-placeholder;
      }

      textarea:-ms-input-placeholder {
        @apply --iron-autogrow-textarea-placeholder;
      }
    </style>

    <!-- the mirror sizes the input/textarea so it grows with typing -->
    <!-- use &#160; instead &nbsp; of to allow this element to be used in XHTML -->
    <div id="mirror" class="mirror-text" aria-hidden="true">&nbsp;</div>

    <!-- size the input/textarea with a div, because the textarea has intrinsic size in ff -->
    <div class="textarea-container fit">
      <textarea id="textarea" name\$="[[name]]" aria-label\$="[[label]]" autocomplete\$="[[autocomplete]]" autofocus\$="[[autofocus]]" inputmode\$="[[inputmode]]" placeholder\$="[[placeholder]]" readonly\$="[[readonly]]" required\$="[[required]]" disabled\$="[[disabled]]" rows\$="[[rows]]" minlength\$="[[minlength]]" maxlength\$="[[maxlength]]"></textarea>
    </div>
`,is:"iron-autogrow-textarea",behaviors:[IronValidatableBehavior,IronControlState],properties:{/**
     * Use this property instead of `bind-value` for two-way data binding.
     * @type {string|number}
     */value:{observer:"_valueChanged",type:String,notify:!0},/**
     * This property is deprecated, and just mirrors `value`. Use `value`
     * instead.
     * @type {string|number}
     */bindValue:{observer:"_bindValueChanged",type:String,notify:!0},/**
     * The initial number of rows.
     *
     * @attribute rows
     * @type number
     * @default 1
     */rows:{type:Number,value:1,observer:"_updateCached"},/**
     * The maximum number of rows this element can grow to until it
     * scrolls. 0 means no maximum.
     *
     * @attribute maxRows
     * @type number
     * @default 0
     */maxRows:{type:Number,value:0,observer:"_updateCached"},/**
     * Bound to the textarea's `autocomplete` attribute.
     */autocomplete:{type:String,value:"off"},/**
     * Bound to the textarea's `autofocus` attribute.
     */autofocus:{type:Boolean,value:!1},/**
     * Bound to the textarea's `inputmode` attribute.
     */inputmode:{type:String},/**
     * Bound to the textarea's `placeholder` attribute.
     */placeholder:{type:String},/**
     * Bound to the textarea's `readonly` attribute.
     */readonly:{type:String},/**
     * Set to true to mark the textarea as required.
     */required:{type:Boolean},/**
     * The minimum length of the input value.
     */minlength:{type:Number},/**
     * The maximum length of the input value.
     */maxlength:{type:Number},/**
     * Bound to the textarea's `aria-label` attribute.
     */label:{type:String}},listeners:{input:"_onInput"},/**
   * Returns the underlying textarea.
   * @return {!HTMLTextAreaElement}
   */get textarea(){return this.$.textarea},/**
   * Returns textarea's selection start.
   * @return {number}
   */get selectionStart(){return this.$.textarea.selectionStart},/**
   * Returns textarea's selection end.
   * @return {number}
   */get selectionEnd(){return this.$.textarea.selectionEnd},/**
   * Sets the textarea's selection start.
   */set selectionStart(value){this.$.textarea.selectionStart=value},/**
   * Sets the textarea's selection end.
   */set selectionEnd(value){this.$.textarea.selectionEnd=value},attached:function(){/* iOS has an arbitrary left margin of 3px that isn't present
     * in any other browser, and means that the paper-textarea's cursor
     * overlaps the label.
     * See https://github.com/PolymerElements/paper-input/issues/468.
     */var IS_IOS=navigator.userAgent.match(/iP(?:[oa]d|hone)/);if(IS_IOS){this.$.textarea.style.marginLeft="-3px"}},/**
   * Returns true if `value` is valid. The validator provided in `validator`
   * will be used first, if it exists; otherwise, the `textarea`'s validity
   * is used.
   * @return {boolean} True if the value is valid.
   */validate:function(){// Use the nested input's native validity.
var valid=this.$.textarea.validity.valid;// Only do extra checking if the browser thought this was valid.
if(valid){// Empty, required input is invalid
if(this.required&&""===this.value){valid=!1}else if(this.hasValidator()){valid=IronValidatableBehavior.validate.call(this,this.value)}}this.invalid=!valid;this.fire("iron-input-validate");return valid},_bindValueChanged:function(bindValue){this.value=bindValue},_valueChanged:function(value){var textarea=this.textarea;if(!textarea){return}// If the bindValue changed manually, then we need to also update
// the underlying textarea's value. Otherwise this change was probably
// generated from the _onInput handler, and the two values are already
// the same.
if(textarea.value!==value){textarea.value=!(value||0===value)?"":value}this.bindValue=value;this.$.mirror.innerHTML=this._valueForMirror();// Manually notify because we don't want to notify until after setting
// value.
this.fire("bind-value-changed",{value:this.bindValue})},_onInput:function(event){var eventPath=dom(event).path;this.value=eventPath?eventPath[0].value:event.target.value},_constrain:function(tokens){var _tokens;tokens=tokens||[""];// Enforce the min and max heights for a multiline input to avoid
// measurement
if(0<this.maxRows&&tokens.length>this.maxRows){_tokens=tokens.slice(0,this.maxRows)}else{_tokens=tokens.slice(0)}while(0<this.rows&&_tokens.length<this.rows){_tokens.push("")}// Use &#160; instead &nbsp; of to allow this element to be used in XHTML.
return _tokens.join("<br/>")+"&#160;"},_valueForMirror:function(){var input=this.textarea;if(!input){return}this.tokens=input&&input.value?input.value.replace(/&/gm,"&amp;").replace(/"/gm,"&quot;").replace(/'/gm,"&#39;").replace(/</gm,"&lt;").replace(/>/gm,"&gt;").split("\n"):[""];return this._constrain(this.tokens)},_updateCached:function(){this.$.mirror.innerHTML=this._constrain(this.tokens)}});const IronButtonStateImpl={properties:{/**
     * If true, the user is currently holding down the button.
     */pressed:{type:Boolean,readOnly:!0,value:!1,reflectToAttribute:!0,observer:"_pressedChanged"},/**
     * If true, the button toggles the active state with each tap or press
     * of the spacebar.
     */toggles:{type:Boolean,value:!1,reflectToAttribute:!0},/**
     * If true, the button is a toggle and is currently in the active state.
     */active:{type:Boolean,value:!1,notify:!0,reflectToAttribute:!0},/**
     * True if the element is currently being pressed by a "pointer," which
     * is loosely defined as mouse or touch input (but specifically excluding
     * keyboard input).
     */pointerDown:{type:Boolean,readOnly:!0,value:!1},/**
     * True if the input device that caused the element to receive focus
     * was a keyboard.
     */receivedFocusFromKeyboard:{type:Boolean,readOnly:!0},/**
     * The aria attribute to be set if the button is a toggle and in the
     * active state.
     */ariaActiveAttribute:{type:String,value:"aria-pressed",observer:"_ariaActiveAttributeChanged"}},listeners:{down:"_downHandler",up:"_upHandler",tap:"_tapHandler"},observers:["_focusChanged(focused)","_activeChanged(active, ariaActiveAttribute)"],/**
   * @type {!Object}
   */keyBindings:{"enter:keydown":"_asyncClick","space:keydown":"_spaceKeyDownHandler","space:keyup":"_spaceKeyUpHandler"},_mouseEventRe:/^mouse/,_tapHandler:function(){if(this.toggles){// a tap is needed to toggle the active state
this._userActivate(!this.active)}else{this.active=!1}},_focusChanged:function(focused){this._detectKeyboardFocus(focused);if(!focused){this._setPressed(!1)}},_detectKeyboardFocus:function(focused){this._setReceivedFocusFromKeyboard(!this.pointerDown&&focused)},// to emulate native checkbox, (de-)activations from a user interaction fire
// 'change' events
_userActivate:function(active){if(this.active!==active){this.active=active;this.fire("change")}},_downHandler:function(event){this._setPointerDown(!0);this._setPressed(!0);this._setReceivedFocusFromKeyboard(!1)},_upHandler:function(){this._setPointerDown(!1);this._setPressed(!1)},/**
   * @param {!KeyboardEvent} event .
   */_spaceKeyDownHandler:function(event){var keyboardEvent=event.detail.keyboardEvent,target=dom(keyboardEvent).localTarget;// Ignore the event if this is coming from a focused light child, since that
// element will deal with it.
if(this.isLightDescendant(/** @type {Node} */target))return;keyboardEvent.preventDefault();keyboardEvent.stopImmediatePropagation();this._setPressed(!0)},/**
   * @param {!KeyboardEvent} event .
   */_spaceKeyUpHandler:function(event){var keyboardEvent=event.detail.keyboardEvent,target=dom(keyboardEvent).localTarget;// Ignore the event if this is coming from a focused light child, since that
// element will deal with it.
if(this.isLightDescendant(/** @type {Node} */target))return;if(this.pressed){this._asyncClick()}this._setPressed(!1)},// trigger click asynchronously, the asynchrony is useful to allow one
// event handler to unwind before triggering another event
_asyncClick:function(){this.async(function(){this.click()},1)},// any of these changes are considered a change to button state
_pressedChanged:function(pressed){this._changedButtonState()},_ariaActiveAttributeChanged:function(value,oldValue){if(oldValue&&oldValue!=value&&this.hasAttribute(oldValue)){this.removeAttribute(oldValue)}},_activeChanged:function(active,ariaActiveAttribute){if(this.toggles){this.setAttribute(this.ariaActiveAttribute,active?"true":"false")}else{this.removeAttribute(this.ariaActiveAttribute)}this._changedButtonState()},_controlStateChanged:function(){if(this.disabled){this._setPressed(!1)}else{this._changedButtonState()}},// provide hook for follow-on behaviors to react to button-state
_changedButtonState:function(){if(this._buttonStateChanged){this._buttonStateChanged();// abstract
}}};/** @polymerBehavior */_exports.IronButtonStateImpl=IronButtonStateImpl;const IronButtonState=[IronA11yKeysBehavior,IronButtonStateImpl];_exports.IronButtonState=IronButtonState;var ironButtonState={IronButtonStateImpl:IronButtonStateImpl,IronButtonState:IronButtonState};_exports.$ironButtonState=ironButtonState;const IronFormElementBehavior={properties:{/**
     * The name of this element.
     */name:{type:String},/**
     * The value for this element.
     * @type {*}
     */value:{notify:!0,type:String},/**
     * Set to true to mark the input as required. If used in a form, a
     * custom element that uses this behavior should also use
     * IronValidatableBehavior and define a custom validation method.
     * Otherwise, a `required` element will always be considered valid.
     * It's also strongly recommended to provide a visual style for the element
     * when its value is invalid.
     */required:{type:Boolean,value:!1}},// Empty implementations for backcompatibility.
attached:function(){},detached:function(){}};_exports.IronFormElementBehavior=IronFormElementBehavior;var ironFormElementBehavior={IronFormElementBehavior:IronFormElementBehavior};_exports.$ironFormElementBehavior=ironFormElementBehavior;const IronCheckedElementBehaviorImpl={properties:{/**
     * Fired when the checked state changes.
     *
     * @event iron-change
     */ /**
         * Gets or sets the state, `true` is checked and `false` is unchecked.
         */checked:{type:Boolean,value:!1,reflectToAttribute:!0,notify:!0,observer:"_checkedChanged"},/**
     * If true, the button toggles the active state with each tap or press
     * of the spacebar.
     */toggles:{type:Boolean,value:!0,reflectToAttribute:!0},/* Overriden from IronFormElementBehavior */value:{type:String,value:"on",observer:"_valueChanged"}},observers:["_requiredChanged(required)"],created:function(){// Used by `iron-form` to handle the case that an element with this behavior
// doesn't have a role of 'checkbox' or 'radio', but should still only be
// included when the form is serialized if `this.checked === true`.
this._hasIronCheckedElementBehavior=!0},/**
   * Returns false if the element is required and not checked, and true
   * otherwise.
   * @param {*=} _value Ignored.
   * @return {boolean} true if `required` is false or if `checked` is true.
   */_getValidity:function(_value){return this.disabled||!this.required||this.checked},/**
   * Update the aria-required label when `required` is changed.
   */_requiredChanged:function(){if(this.required){this.setAttribute("aria-required","true")}else{this.removeAttribute("aria-required")}},/**
   * Fire `iron-changed` when the checked state changes.
   */_checkedChanged:function(){this.active=this.checked;this.fire("iron-change")},/**
   * Reset value to 'on' if it is set to `undefined`.
   */_valueChanged:function(){if(this.value===void 0||null===this.value){this.value="on"}}};/** @polymerBehavior */_exports.IronCheckedElementBehaviorImpl=IronCheckedElementBehaviorImpl;const IronCheckedElementBehavior=[IronFormElementBehavior,IronValidatableBehavior,IronCheckedElementBehaviorImpl];_exports.IronCheckedElementBehavior=IronCheckedElementBehavior;var ironCheckedElementBehavior={IronCheckedElementBehaviorImpl:IronCheckedElementBehaviorImpl,IronCheckedElementBehavior:IronCheckedElementBehavior};_exports.$ironCheckedElementBehavior=ironCheckedElementBehavior;const IronFitBehavior={properties:{/**
     * The element that will receive a `max-height`/`width`. By default it is
     * the same as `this`, but it can be set to a child element. This is useful,
     * for example, for implementing a scrolling region inside the element.
     * @type {!Element}
     */sizingTarget:{type:Object,value:function(){return this}},/**
     * The element to fit `this` into.
     */fitInto:{type:Object,value:window},/**
     * Will position the element around the positionTarget without overlapping
     * it.
     */noOverlap:{type:Boolean},/**
     * The element that should be used to position the element. If not set, it
     * will default to the parent node.
     * @type {!Element}
     */positionTarget:{type:Element},/**
     * The orientation against which to align the element horizontally
     * relative to the `positionTarget`. Possible values are "left", "right",
     * "center", "auto".
     */horizontalAlign:{type:String},/**
     * The orientation against which to align the element vertically
     * relative to the `positionTarget`. Possible values are "top", "bottom",
     * "middle", "auto".
     */verticalAlign:{type:String},/**
     * If true, it will use `horizontalAlign` and `verticalAlign` values as
     * preferred alignment and if there's not enough space, it will pick the
     * values which minimize the cropping.
     */dynamicAlign:{type:Boolean},/**
     * A pixel value that will be added to the position calculated for the
     * given `horizontalAlign`, in the direction of alignment. You can think
     * of it as increasing or decreasing the distance to the side of the
     * screen given by `horizontalAlign`.
     *
     * If `horizontalAlign` is "left" or "center", this offset will increase or
     * decrease the distance to the left side of the screen: a negative offset
     * will move the dropdown to the left; a positive one, to the right.
     *
     * Conversely if `horizontalAlign` is "right", this offset will increase
     * or decrease the distance to the right side of the screen: a negative
     * offset will move the dropdown to the right; a positive one, to the left.
     */horizontalOffset:{type:Number,value:0,notify:!0},/**
     * A pixel value that will be added to the position calculated for the
     * given `verticalAlign`, in the direction of alignment. You can think
     * of it as increasing or decreasing the distance to the side of the
     * screen given by `verticalAlign`.
     *
     * If `verticalAlign` is "top" or "middle", this offset will increase or
     * decrease the distance to the top side of the screen: a negative offset
     * will move the dropdown upwards; a positive one, downwards.
     *
     * Conversely if `verticalAlign` is "bottom", this offset will increase
     * or decrease the distance to the bottom side of the screen: a negative
     * offset will move the dropdown downwards; a positive one, upwards.
     */verticalOffset:{type:Number,value:0,notify:!0},/**
     * Set to true to auto-fit on attach.
     */autoFitOnAttach:{type:Boolean,value:!1},/** @type {?Object} */_fitInfo:{type:Object}},get _fitWidth(){var fitWidth;if(this.fitInto===window){fitWidth=this.fitInto.innerWidth}else{fitWidth=this.fitInto.getBoundingClientRect().width}return fitWidth},get _fitHeight(){var fitHeight;if(this.fitInto===window){fitHeight=this.fitInto.innerHeight}else{fitHeight=this.fitInto.getBoundingClientRect().height}return fitHeight},get _fitLeft(){var fitLeft;if(this.fitInto===window){fitLeft=0}else{fitLeft=this.fitInto.getBoundingClientRect().left}return fitLeft},get _fitTop(){var fitTop;if(this.fitInto===window){fitTop=0}else{fitTop=this.fitInto.getBoundingClientRect().top}return fitTop},/**
   * The element that should be used to position the element,
   * if no position target is configured.
   */get _defaultPositionTarget(){var parent=dom(this).parentNode;if(parent&&parent.nodeType===Node.DOCUMENT_FRAGMENT_NODE){parent=parent.host}return parent},/**
   * The horizontal align value, accounting for the RTL/LTR text direction.
   */get _localeHorizontalAlign(){if(this._isRTL){// In RTL, "left" becomes "right".
if("right"===this.horizontalAlign){return"left"}if("left"===this.horizontalAlign){return"right"}}return this.horizontalAlign},/**
   * True if the element should be positioned instead of centered.
   * @private
   */get __shouldPosition(){return(this.horizontalAlign||this.verticalAlign)&&this.positionTarget},attached:function(){// Memoize this to avoid expensive calculations & relayouts.
// Make sure we do it only once
if("undefined"===typeof this._isRTL){this._isRTL="rtl"==window.getComputedStyle(this).direction}this.positionTarget=this.positionTarget||this._defaultPositionTarget;if(this.autoFitOnAttach){if("none"===window.getComputedStyle(this).display){setTimeout(function(){this.fit()}.bind(this))}else{// NOTE: shadydom applies distribution asynchronously
// for performance reasons webcomponents/shadydom#120
// Flush to get correct layout info.
window.ShadyDOM&&ShadyDOM.flush();this.fit()}}},detached:function(){if(this.__deferredFit){clearTimeout(this.__deferredFit);this.__deferredFit=null}},/**
   * Positions and fits the element into the `fitInto` element.
   */fit:function(){this.position();this.constrain();this.center()},/**
   * Memoize information needed to position and size the target element.
   * @suppress {deprecated}
   */_discoverInfo:function(){if(this._fitInfo){return}var target=window.getComputedStyle(this),sizer=window.getComputedStyle(this.sizingTarget);this._fitInfo={inlineStyle:{top:this.style.top||"",left:this.style.left||"",position:this.style.position||""},sizerInlineStyle:{maxWidth:this.sizingTarget.style.maxWidth||"",maxHeight:this.sizingTarget.style.maxHeight||"",boxSizing:this.sizingTarget.style.boxSizing||""},positionedBy:{vertically:"auto"!==target.top?"top":"auto"!==target.bottom?"bottom":null,horizontally:"auto"!==target.left?"left":"auto"!==target.right?"right":null},sizedBy:{height:"none"!==sizer.maxHeight,width:"none"!==sizer.maxWidth,minWidth:parseInt(sizer.minWidth,10)||0,minHeight:parseInt(sizer.minHeight,10)||0},margin:{top:parseInt(target.marginTop,10)||0,right:parseInt(target.marginRight,10)||0,bottom:parseInt(target.marginBottom,10)||0,left:parseInt(target.marginLeft,10)||0}}},/**
   * Resets the target element's position and size constraints, and clear
   * the memoized data.
   */resetFit:function(){var info=this._fitInfo||{};for(var property in info.sizerInlineStyle){this.sizingTarget.style[property]=info.sizerInlineStyle[property]}for(var property in info.inlineStyle){this.style[property]=info.inlineStyle[property]}this._fitInfo=null},/**
   * Equivalent to calling `resetFit()` and `fit()`. Useful to call this after
   * the element or the `fitInto` element has been resized, or if any of the
   * positioning properties (e.g. `horizontalAlign, verticalAlign`) is updated.
   * It preserves the scroll position of the sizingTarget.
   */refit:function(){var scrollLeft=this.sizingTarget.scrollLeft,scrollTop=this.sizingTarget.scrollTop;this.resetFit();this.fit();this.sizingTarget.scrollLeft=scrollLeft;this.sizingTarget.scrollTop=scrollTop},/**
   * Positions the element according to `horizontalAlign, verticalAlign`.
   */position:function(){if(!this.__shouldPosition){// needs to be centered, and it is done after constrain.
return}this._discoverInfo();this.style.position="fixed";// Need border-box for margin/padding.
this.sizingTarget.style.boxSizing="border-box";// Set to 0, 0 in order to discover any offset caused by parent stacking
// contexts.
this.style.left="0px";this.style.top="0px";var rect=this.getBoundingClientRect(),positionRect=this.__getNormalizedRect(this.positionTarget),fitRect=this.__getNormalizedRect(this.fitInto),margin=this._fitInfo.margin,size={width:rect.width+margin.left+margin.right,height:rect.height+margin.top+margin.bottom},position=this.__getPosition(this._localeHorizontalAlign,this.verticalAlign,size,rect,positionRect,fitRect),left=position.left+margin.left,top=position.top+margin.top,right=Math.min(fitRect.right-margin.right,left+rect.width),bottom=Math.min(fitRect.bottom-margin.bottom,top+rect.height);// Keep left/top within fitInto respecting the margin.
left=Math.max(fitRect.left+margin.left,Math.min(left,right-this._fitInfo.sizedBy.minWidth));top=Math.max(fitRect.top+margin.top,Math.min(top,bottom-this._fitInfo.sizedBy.minHeight));// Use right/bottom to set maxWidth/maxHeight, and respect
// minWidth/minHeight.
this.sizingTarget.style.maxWidth=Math.max(right-left,this._fitInfo.sizedBy.minWidth)+"px";this.sizingTarget.style.maxHeight=Math.max(bottom-top,this._fitInfo.sizedBy.minHeight)+"px";// Remove the offset caused by any stacking context.
this.style.left=left-rect.left+"px";this.style.top=top-rect.top+"px"},/**
   * Constrains the size of the element to `fitInto` by setting `max-height`
   * and/or `max-width`.
   */constrain:function(){if(this.__shouldPosition){return}this._discoverInfo();var info=this._fitInfo;// position at (0px, 0px) if not already positioned, so we can measure the
// natural size.
if(!info.positionedBy.vertically){this.style.position="fixed";this.style.top="0px"}if(!info.positionedBy.horizontally){this.style.position="fixed";this.style.left="0px"}// need border-box for margin/padding
this.sizingTarget.style.boxSizing="border-box";// constrain the width and height if not already set
var rect=this.getBoundingClientRect();if(!info.sizedBy.height){this.__sizeDimension(rect,info.positionedBy.vertically,"top","bottom","Height")}if(!info.sizedBy.width){this.__sizeDimension(rect,info.positionedBy.horizontally,"left","right","Width")}},/**
   * @protected
   * @deprecated
   */_sizeDimension:function(rect,positionedBy,start,end,extent){this.__sizeDimension(rect,positionedBy,start,end,extent)},/**
   * @private
   */__sizeDimension:function(rect,positionedBy,start,end,extent){var info=this._fitInfo,fitRect=this.__getNormalizedRect(this.fitInto),max="Width"===extent?fitRect.width:fitRect.height,flip=positionedBy===end,offset=flip?max-rect[end]:rect[start],margin=info.margin[flip?start:end],offsetExtent="offset"+extent,sizingOffset=this[offsetExtent]-this.sizingTarget[offsetExtent];this.sizingTarget.style["max"+extent]=max-margin-offset-sizingOffset+"px"},/**
   * Centers horizontally and vertically if not already positioned. This also
   * sets `position:fixed`.
   */center:function(){if(this.__shouldPosition){return}this._discoverInfo();var positionedBy=this._fitInfo.positionedBy;if(positionedBy.vertically&&positionedBy.horizontally){// Already positioned.
return}// Need position:fixed to center
this.style.position="fixed";// Take into account the offset caused by parents that create stacking
// contexts (e.g. with transform: translate3d). Translate to 0,0 and
// measure the bounding rect.
if(!positionedBy.vertically){this.style.top="0px"}if(!positionedBy.horizontally){this.style.left="0px"}// It will take in consideration margins and transforms
var rect=this.getBoundingClientRect(),fitRect=this.__getNormalizedRect(this.fitInto);if(!positionedBy.vertically){var top=fitRect.top-rect.top+(fitRect.height-rect.height)/2;this.style.top=top+"px"}if(!positionedBy.horizontally){var left=fitRect.left-rect.left+(fitRect.width-rect.width)/2;this.style.left=left+"px"}},__getNormalizedRect:function(target){if(target===document.documentElement||target===window){return{top:0,left:0,width:window.innerWidth,height:window.innerHeight,right:window.innerWidth,bottom:window.innerHeight}}return target.getBoundingClientRect()},__getOffscreenArea:function(position,size,fitRect){var verticalCrop=Math.min(0,position.top)+Math.min(0,fitRect.bottom-(position.top+size.height)),horizontalCrop=Math.min(0,position.left)+Math.min(0,fitRect.right-(position.left+size.width));return Math.abs(verticalCrop)*size.width+Math.abs(horizontalCrop)*size.height},__getPosition:function(hAlign,vAlign,size,sizeNoMargins,positionRect,fitRect){// All the possible configurations.
// Ordered as top-left, top-right, bottom-left, bottom-right.
var positions=[{verticalAlign:"top",horizontalAlign:"left",top:positionRect.top+this.verticalOffset,left:positionRect.left+this.horizontalOffset},{verticalAlign:"top",horizontalAlign:"right",top:positionRect.top+this.verticalOffset,left:positionRect.right-size.width-this.horizontalOffset},{verticalAlign:"bottom",horizontalAlign:"left",top:positionRect.bottom-size.height-this.verticalOffset,left:positionRect.left+this.horizontalOffset},{verticalAlign:"bottom",horizontalAlign:"right",top:positionRect.bottom-size.height-this.verticalOffset,left:positionRect.right-size.width-this.horizontalOffset}];if(this.noOverlap){// Duplicate.
for(var i=0,l=positions.length,copy;i<l;i++){copy={};for(var key in positions[i]){copy[key]=positions[i][key]}positions.push(copy)}// Horizontal overlap only.
positions[0].top=positions[1].top+=positionRect.height;positions[2].top=positions[3].top-=positionRect.height;// Vertical overlap only.
positions[4].left=positions[6].left+=positionRect.width;positions[5].left=positions[7].left-=positionRect.width}// Consider auto as null for coding convenience.
vAlign="auto"===vAlign?null:vAlign;hAlign="auto"===hAlign?null:hAlign;if(!hAlign||"center"===hAlign){positions.push({verticalAlign:"top",horizontalAlign:"center",top:positionRect.top+this.verticalOffset+(this.noOverlap?positionRect.height:0),left:positionRect.left-sizeNoMargins.width/2+positionRect.width/2+this.horizontalOffset});positions.push({verticalAlign:"bottom",horizontalAlign:"center",top:positionRect.bottom-size.height-this.verticalOffset-(this.noOverlap?positionRect.height:0),left:positionRect.left-sizeNoMargins.width/2+positionRect.width/2+this.horizontalOffset})}if(!vAlign||"middle"===vAlign){positions.push({verticalAlign:"middle",horizontalAlign:"left",top:positionRect.top-sizeNoMargins.height/2+positionRect.height/2+this.verticalOffset,left:positionRect.left+this.horizontalOffset+(this.noOverlap?positionRect.width:0)});positions.push({verticalAlign:"middle",horizontalAlign:"right",top:positionRect.top-sizeNoMargins.height/2+positionRect.height/2+this.verticalOffset,left:positionRect.right-size.width-this.horizontalOffset-(this.noOverlap?positionRect.width:0)})}if("middle"===vAlign&&"center"===hAlign){positions.push({verticalAlign:"middle",horizontalAlign:"center",top:positionRect.top-sizeNoMargins.height/2+positionRect.height/2+this.verticalOffset,left:positionRect.left-sizeNoMargins.width/2+positionRect.width/2+this.horizontalOffset})}for(var position,i=0;i<positions.length;i++){var candidate=positions[i],vAlignOk=candidate.verticalAlign===vAlign,hAlignOk=candidate.horizontalAlign===hAlign;// If both vAlign and hAlign are defined, return exact match.
// For dynamicAlign and noOverlap we'll have more than one candidate, so
// we'll have to check the offscreenArea to make the best choice.
if(!this.dynamicAlign&&!this.noOverlap&&vAlignOk&&hAlignOk){position=candidate;break}// Align is ok if alignment preferences are respected. If no preferences,
// it is considered ok.
var alignOk=(!vAlign||vAlignOk)&&(!hAlign||hAlignOk);// Filter out elements that don't match the alignment (if defined).
// With dynamicAlign, we need to consider all the positions to find the
// one that minimizes the cropped area.
if(!this.dynamicAlign&&!alignOk){continue}candidate.offscreenArea=this.__getOffscreenArea(candidate,size,fitRect);// If not cropped and respects the align requirements, keep it.
// This allows to prefer positions overlapping horizontally over the
// ones overlapping vertically.
if(0===candidate.offscreenArea&&alignOk){position=candidate;break}position=position||candidate;var diff=candidate.offscreenArea-position.offscreenArea;// Check which crops less. If it crops equally, check if at least one
// align setting is ok.
if(0>diff||0===diff&&(vAlignOk||hAlignOk)){position=candidate}}return position}};_exports.IronFitBehavior=IronFitBehavior;var ironFitBehavior={IronFitBehavior:IronFitBehavior};_exports.$ironFitBehavior=ironFitBehavior;var p$2=Element.prototype,matches$1=p$2.matches||p$2.matchesSelector||p$2.mozMatchesSelector||p$2.msMatchesSelector||p$2.oMatchesSelector||p$2.webkitMatchesSelector;const IronFocusablesHelper={/**
   * Returns a sorted array of tabbable nodes, including the root node.
   * It searches the tabbable nodes in the light and shadow dom of the chidren,
   * sorting the result by tabindex.
   * @param {!Node} node
   * @return {!Array<!HTMLElement>}
   */getTabbableNodes:function(node){var result=[],needsSortByTabIndex=this._collectTabbableNodes(node,result);// If there is at least one element with tabindex > 0, we need to sort
// the final array by tabindex.
if(needsSortByTabIndex){return this._sortByTabIndex(result)}return result},/**
   * Returns if a element is focusable.
   * @param {!HTMLElement} element
   * @return {boolean}
   */isFocusable:function(element){// From http://stackoverflow.com/a/1600194/4228703:
// There isn't a definite list, it's up to the browser. The only
// standard we have is DOM Level 2 HTML
// https://www.w3.org/TR/DOM-Level-2-HTML/html.html, according to which the
// only elements that have a focus() method are HTMLInputElement,
// HTMLSelectElement, HTMLTextAreaElement and HTMLAnchorElement. This
// notably omits HTMLButtonElement and HTMLAreaElement. Referring to these
// tests with tabbables in different browsers
// http://allyjs.io/data-tables/focusable.html
// Elements that cannot be focused if they have [disabled] attribute.
if(matches$1.call(element,"input, select, textarea, button, object")){return matches$1.call(element,":not([disabled])")}// Elements that can be focused even if they have [disabled] attribute.
return matches$1.call(element,"a[href], area[href], iframe, [tabindex], [contentEditable]")},/**
   * Returns if a element is tabbable. To be tabbable, a element must be
   * focusable, visible, and with a tabindex !== -1.
   * @param {!HTMLElement} element
   * @return {boolean}
   */isTabbable:function(element){return this.isFocusable(element)&&matches$1.call(element,":not([tabindex=\"-1\"])")&&this._isVisible(element)},/**
   * Returns the normalized element tabindex. If not focusable, returns -1.
   * It checks for the attribute "tabindex" instead of the element property
   * `tabIndex` since browsers assign different values to it.
   * e.g. in Firefox `<div contenteditable>` has `tabIndex = -1`
   * @param {!HTMLElement} element
   * @return {!number}
   * @private
   */_normalizedTabIndex:function(element){if(this.isFocusable(element)){var tabIndex=element.getAttribute("tabindex")||0;return+tabIndex}return-1},/**
   * Searches for nodes that are tabbable and adds them to the `result` array.
   * Returns if the `result` array needs to be sorted by tabindex.
   * @param {!Node} node The starting point for the search; added to `result`
   * if tabbable.
   * @param {!Array<!HTMLElement>} result
   * @return {boolean}
   * @private
   */_collectTabbableNodes:function(node,result){// If not an element or not visible, no need to explore children.
if(node.nodeType!==Node.ELEMENT_NODE||!this._isVisible(node)){return!1}var element=/** @type {!HTMLElement} */node,tabIndex=this._normalizedTabIndex(element),needsSort=0<tabIndex;if(0<=tabIndex){result.push(element)}// In ShadowDOM v1, tab order is affected by the order of distrubution.
// E.g. getTabbableNodes(#root) in ShadowDOM v1 should return [#A, #B];
// in ShadowDOM v0 tab order is not affected by the distrubution order,
// in fact getTabbableNodes(#root) returns [#B, #A].
//  <div id="root">
//   <!-- shadow -->
//     <slot name="a">
//     <slot name="b">
//   <!-- /shadow -->
//   <input id="A" slot="a">
//   <input id="B" slot="b" tabindex="1">
//  </div>
// TODO(valdrin) support ShadowDOM v1 when upgrading to Polymer v2.0.
var children;if("content"===element.localName||"slot"===element.localName){children=dom(element).getDistributedNodes()}else{// Use shadow root if possible, will check for distributed nodes.
children=dom(element.root||element).children}for(var i=0;i<children.length;i++){// Ensure method is always invoked to collect tabbable children.
needsSort=this._collectTabbableNodes(children[i],result)||needsSort}return needsSort},/**
   * Returns false if the element has `visibility: hidden` or `display: none`
   * @param {!HTMLElement} element
   * @return {boolean}
   * @private
   */_isVisible:function(element){// Check inline style first to save a re-flow. If looks good, check also
// computed style.
var style=element.style;if("hidden"!==style.visibility&&"none"!==style.display){style=window.getComputedStyle(element);return"hidden"!==style.visibility&&"none"!==style.display}return!1},/**
   * Sorts an array of tabbable elements by tabindex. Returns a new array.
   * @param {!Array<!HTMLElement>} tabbables
   * @return {!Array<!HTMLElement>}
   * @private
   */_sortByTabIndex:function(tabbables){// Implement a merge sort as Array.prototype.sort does a non-stable sort
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort
var len=tabbables.length;if(2>len){return tabbables}var pivot=Math.ceil(len/2),left=this._sortByTabIndex(tabbables.slice(0,pivot)),right=this._sortByTabIndex(tabbables.slice(pivot));return this._mergeSortByTabIndex(left,right)},/**
   * Merge sort iterator, merges the two arrays into one, sorted by tab index.
   * @param {!Array<!HTMLElement>} left
   * @param {!Array<!HTMLElement>} right
   * @return {!Array<!HTMLElement>}
   * @private
   */_mergeSortByTabIndex:function(left,right){var result=[];while(0<left.length&&0<right.length){if(this._hasLowerTabOrder(left[0],right[0])){result.push(right.shift())}else{result.push(left.shift())}}return result.concat(left,right)},/**
   * Returns if element `a` has lower tab order compared to element `b`
   * (both elements are assumed to be focusable and tabbable).
   * Elements with tabindex = 0 have lower tab order compared to elements
   * with tabindex > 0.
   * If both have same tabindex, it returns false.
   * @param {!HTMLElement} a
   * @param {!HTMLElement} b
   * @return {boolean}
   * @private
   */_hasLowerTabOrder:function(a,b){// Normalize tabIndexes
// e.g. in Firefox `<div contenteditable>` has `tabIndex = -1`
var ati=Math.max(a.tabIndex,0),bti=Math.max(b.tabIndex,0);return 0===ati||0===bti?bti>ati:ati>bti}};_exports.IronFocusablesHelper=IronFocusablesHelper;var ironFocusablesHelper={IronFocusablesHelper:IronFocusablesHelper};_exports.$ironFocusablesHelper=ironFocusablesHelper;Polymer({_template:html`
    <style>
      :host {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: var(--iron-overlay-backdrop-background-color, #000);
        opacity: 0;
        transition: opacity 0.2s;
        pointer-events: none;
        @apply --iron-overlay-backdrop;
      }

      :host(.opened) {
        opacity: var(--iron-overlay-backdrop-opacity, 0.6);
        pointer-events: auto;
        @apply --iron-overlay-backdrop-opened;
      }
    </style>

    <slot></slot>
`,is:"iron-overlay-backdrop",properties:{/**
     * Returns true if the backdrop is opened.
     */opened:{reflectToAttribute:!0,type:Boolean,value:!1,observer:"_openedChanged"}},listeners:{transitionend:"_onTransitionend"},created:function(){// Used to cancel previous requestAnimationFrame calls when opened changes.
this.__openedRaf=null},attached:function(){this.opened&&this._openedChanged(this.opened)},/**
   * Appends the backdrop to document body if needed.
   */prepare:function(){if(this.opened&&!this.parentNode){dom(document.body).appendChild(this)}},/**
   * Shows the backdrop.
   */open:function(){this.opened=!0},/**
   * Hides the backdrop.
   */close:function(){this.opened=!1},/**
   * Removes the backdrop from document body if needed.
   */complete:function(){if(!this.opened&&this.parentNode===document.body){dom(this.parentNode).removeChild(this)}},_onTransitionend:function(event){if(event&&event.target===this){this.complete()}},/**
   * @param {boolean} opened
   * @private
   */_openedChanged:function(opened){if(opened){// Auto-attach.
this.prepare()}else{// Animation might be disabled via the mixin or opacity custom property.
// If it is disabled in other ways, it's up to the user to call complete.
var cs=window.getComputedStyle(this);if("0s"===cs.transitionDuration||0==cs.opacity){this.complete()}}if(!this.isAttached){return}// Always cancel previous requestAnimationFrame.
if(this.__openedRaf){window.cancelAnimationFrame(this.__openedRaf);this.__openedRaf=null}// Force relayout to ensure proper transitions.
this.scrollTop=this.scrollTop;this.__openedRaf=window.requestAnimationFrame(function(){this.__openedRaf=null;this.toggleClass("opened",this.opened)}.bind(this))}});const IronOverlayManagerClass=function(){/**
   * Used to keep track of the opened overlays.
   * @private {!Array<!Element>}
   */this._overlays=[];/**
                           * iframes have a default z-index of 100,
                           * so this default should be at least that.
                           * @private {number}
                           */this._minimumZ=101;/**
                         * Memoized backdrop element.
                         * @private {Element|null}
                         */this._backdropElement=null;// Enable document-wide tap recognizer.
// NOTE: Use useCapture=true to avoid accidentally prevention of the closing
// of an overlay via event.stopPropagation(). The only way to prevent
// closing of an overlay should be through its APIs.
// NOTE: enable tap on <html> to workaround Polymer/polymer#4459
// Pass no-op function because MSEdge 15 doesn't handle null as 2nd argument
// https://github.com/Microsoft/ChakraCore/issues/3863
add(document.documentElement,"tap",function(){});document.addEventListener("tap",this._onCaptureClick.bind(this),!0);document.addEventListener("focus",this._onCaptureFocus.bind(this),!0);document.addEventListener("keydown",this._onCaptureKeyDown.bind(this),!0)};_exports.IronOverlayManagerClass=IronOverlayManagerClass;IronOverlayManagerClass.prototype={constructor:IronOverlayManagerClass,/**
   * The shared backdrop element.
   * @return {!Element} backdropElement
   */get backdropElement(){if(!this._backdropElement){this._backdropElement=document.createElement("iron-overlay-backdrop")}return this._backdropElement},/**
   * The deepest active element.
   * @return {!Element} activeElement the active element
   */get deepActiveElement(){var active=document.activeElement;// document.activeElement can be null
// https://developer.mozilla.org/en-US/docs/Web/API/Document/activeElement
// In IE 11, it can also be an object when operating in iframes.
// In these cases, default it to document.body.
if(!active||!1===active instanceof Element){active=document.body}while(active.root&&dom(active.root).activeElement){active=dom(active.root).activeElement}return active},/**
   * Brings the overlay at the specified index to the front.
   * @param {number} i
   * @private
   */_bringOverlayAtIndexToFront:function(i){var overlay=this._overlays[i];if(!overlay){return}var lastI=this._overlays.length-1,currentOverlay=this._overlays[lastI];// Ensure always-on-top overlay stays on top.
if(currentOverlay&&this._shouldBeBehindOverlay(overlay,currentOverlay)){lastI--}// If already the top element, return.
if(i>=lastI){return}// Update z-index to be on top.
var minimumZ=Math.max(this.currentOverlayZ(),this._minimumZ);if(this._getZ(overlay)<=minimumZ){this._applyOverlayZ(overlay,minimumZ)}// Shift other overlays behind the new on top.
while(i<lastI){this._overlays[i]=this._overlays[i+1];i++}this._overlays[lastI]=overlay},/**
   * Adds the overlay and updates its z-index if it's opened, or removes it if
   * it's closed. Also updates the backdrop z-index.
   * @param {!Element} overlay
   */addOrRemoveOverlay:function(overlay){if(overlay.opened){this.addOverlay(overlay)}else{this.removeOverlay(overlay)}},/**
   * Tracks overlays for z-index and focus management.
   * Ensures the last added overlay with always-on-top remains on top.
   * @param {!Element} overlay
   */addOverlay:function(overlay){var i=this._overlays.indexOf(overlay);if(0<=i){this._bringOverlayAtIndexToFront(i);this.trackBackdrop();return}var insertionIndex=this._overlays.length,currentOverlay=this._overlays[insertionIndex-1],minimumZ=Math.max(this._getZ(currentOverlay),this._minimumZ),newZ=this._getZ(overlay);// Ensure always-on-top overlay stays on top.
if(currentOverlay&&this._shouldBeBehindOverlay(overlay,currentOverlay)){// This bumps the z-index of +2.
this._applyOverlayZ(currentOverlay,minimumZ);insertionIndex--;// Update minimumZ to match previous overlay's z-index.
var previousOverlay=this._overlays[insertionIndex-1];minimumZ=Math.max(this._getZ(previousOverlay),this._minimumZ)}// Update z-index and insert overlay.
if(newZ<=minimumZ){this._applyOverlayZ(overlay,minimumZ)}this._overlays.splice(insertionIndex,0,overlay);this.trackBackdrop()},/**
   * @param {!Element} overlay
   */removeOverlay:function(overlay){var i=this._overlays.indexOf(overlay);if(-1===i){return}this._overlays.splice(i,1);this.trackBackdrop()},/**
   * Returns the current overlay.
   * @return {!Element|undefined}
   */currentOverlay:function(){var i=this._overlays.length-1;return this._overlays[i]},/**
   * Returns the current overlay z-index.
   * @return {number}
   */currentOverlayZ:function(){return this._getZ(this.currentOverlay())},/**
   * Ensures that the minimum z-index of new overlays is at least `minimumZ`.
   * This does not effect the z-index of any existing overlays.
   * @param {number} minimumZ
   */ensureMinimumZ:function(minimumZ){this._minimumZ=Math.max(this._minimumZ,minimumZ)},focusOverlay:function(){var current=/** @type {?} */this.currentOverlay();if(current){current._applyFocus()}},/**
   * Updates the backdrop z-index.
   */trackBackdrop:function(){var overlay=this._overlayWithBackdrop();// Avoid creating the backdrop if there is no overlay with backdrop.
if(!overlay&&!this._backdropElement){return}this.backdropElement.style.zIndex=this._getZ(overlay)-1;this.backdropElement.opened=!!overlay;// Property observers are not fired until element is attached
// in Polymer 2.x, so we ensure element is attached if needed.
// https://github.com/Polymer/polymer/issues/4526
this.backdropElement.prepare()},/**
   * @return {!Array<!Element>}
   */getBackdrops:function(){for(var backdrops=[],i=0;i<this._overlays.length;i++){if(this._overlays[i].withBackdrop){backdrops.push(this._overlays[i])}}return backdrops},/**
   * Returns the z-index for the backdrop.
   * @return {number}
   */backdropZ:function(){return this._getZ(this._overlayWithBackdrop())-1},/**
   * Returns the top opened overlay that has a backdrop.
   * @return {!Element|undefined}
   * @private
   */_overlayWithBackdrop:function(){for(var i=this._overlays.length-1;0<=i;i--){if(this._overlays[i].withBackdrop){return this._overlays[i]}}},/**
   * Calculates the minimum z-index for the overlay.
   * @param {Element=} overlay
   * @private
   */_getZ:function(overlay){var z=this._minimumZ;if(overlay){var z1=+(overlay.style.zIndex||window.getComputedStyle(overlay).zIndex);// Check if is a number
// Number.isNaN not supported in IE 10+
if(z1===z1){z=z1}}return z},/**
   * @param {!Element} element
   * @param {number|string} z
   * @private
   */_setZ:function(element,z){element.style.zIndex=z},/**
   * @param {!Element} overlay
   * @param {number} aboveZ
   * @private
   */_applyOverlayZ:function(overlay,aboveZ){this._setZ(overlay,aboveZ+2)},/**
   * Returns the deepest overlay in the path.
   * @param {!Array<!Element>=} path
   * @return {!Element|undefined}
   * @suppress {missingProperties}
   * @private
   */_overlayInPath:function(path){path=path||[];for(var i=0;i<path.length;i++){if(path[i]._manager===this){return path[i]}}},/**
   * Ensures the click event is delegated to the right overlay.
   * @param {!Event} event
   * @private
   */_onCaptureClick:function(event){var i=this._overlays.length-1;if(-1===i)return;var path=/** @type {!Array<!EventTarget>} */dom(event).path,overlay;// Check if clicked outside of overlay.
while((overlay=/** @type {?} */this._overlays[i])&&this._overlayInPath(path)!==overlay){overlay._onCaptureClick(event);if(overlay.allowClickThrough){i--}else{break}}},/**
   * Ensures the focus event is delegated to the right overlay.
   * @param {!Event} event
   * @private
   */_onCaptureFocus:function(event){var overlay=/** @type {?} */this.currentOverlay();if(overlay){overlay._onCaptureFocus(event)}},/**
   * Ensures TAB and ESC keyboard events are delegated to the right overlay.
   * @param {!Event} event
   * @private
   */_onCaptureKeyDown:function(event){var overlay=/** @type {?} */this.currentOverlay();if(overlay){if(IronA11yKeysBehavior.keyboardEventMatchesKeys(event,"esc")){overlay._onCaptureEsc(event)}else if(IronA11yKeysBehavior.keyboardEventMatchesKeys(event,"tab")){overlay._onCaptureTab(event)}}},/**
   * Returns if the overlay1 should be behind overlay2.
   * @param {!Element} overlay1
   * @param {!Element} overlay2
   * @return {boolean}
   * @suppress {missingProperties}
   * @private
   */_shouldBeBehindOverlay:function(overlay1,overlay2){return!overlay1.alwaysOnTop&&overlay2.alwaysOnTop}};const IronOverlayManager=new IronOverlayManagerClass;_exports.IronOverlayManager=IronOverlayManager;var ironOverlayManager={IronOverlayManagerClass:IronOverlayManagerClass,IronOverlayManager:IronOverlayManager};_exports.$ironOverlayManager=ironOverlayManager;var lastTouchPosition={pageX:0,pageY:0},lastRootTarget=null,lastScrollableNodes=[],scrollEvents=[// Modern `wheel` event for mouse wheel scrolling:
"wheel",// Older, non-standard `mousewheel` event for some FF:
"mousewheel",// IE:
"DOMMouseScroll",// Touch enabled devices
"touchstart","touchmove"],_boundScrollHandler;/**
    * Used to avoid computing event.path and filter scrollable nodes (better perf).
    * @type {?EventTarget}
    */_exports._boundScrollHandler=_boundScrollHandler;var currentLockingElement;/**
                            * The IronScrollManager is intended to provide a central source
                            * of authority and control over which elements in a document are currently
                            * allowed to scroll.
                            *
                            */_exports.currentLockingElement=currentLockingElement;`TODO(modulizer): A namespace named Polymer.IronScrollManager was
declared here. The surrounding comments should be reviewed,
and this string can then be deleted`;/**
                                       * The current element that defines the DOM boundaries of the
                                       * scroll lock. This is always the most recently locking element.
                                       *
                                       * @return {!Node|undefined}
                                       */function elementIsScrollLocked(element){var lockingElement=currentLockingElement;if(lockingElement===void 0){return!1}var scrollLocked;if(_hasCachedLockedElement(element)){return!0}if(_hasCachedUnlockedElement(element)){return!1}scrollLocked=!!lockingElement&&lockingElement!==element&&!_composedTreeContains(lockingElement,element);if(scrollLocked){_lockedElementCache.push(element)}else{_unlockedElementCache.push(element)}return scrollLocked}/**
   * Push an element onto the current scroll lock stack. The most recently
   * pushed element and its children will be considered scrollable. All
   * other elements will not be scrollable.
   *
   * Scroll locking is implemented as a stack so that cases such as
   * dropdowns within dropdowns are handled well.
   *
   * @param {!HTMLElement} element The element that should lock scroll.
   */function pushScrollLock(element){// Prevent pushing the same element twice
if(0<=_lockingElements.indexOf(element)){return}if(0===_lockingElements.length){_lockScrollInteractions()}_lockingElements.push(element);_exports.currentLockingElement=currentLockingElement=_lockingElements[_lockingElements.length-1];_exports._lockedElementCache=_lockedElementCache=[];_exports._unlockedElementCache=_unlockedElementCache=[]}/**
   * Remove an element from the scroll lock stack. The element being
   * removed does not need to be the most recently pushed element. However,
   * the scroll lock constraints only change when the most recently pushed
   * element is removed.
   *
   * @param {!HTMLElement} element The element to remove from the scroll
   * lock stack.
   */function removeScrollLock(element){var index=_lockingElements.indexOf(element);if(-1===index){return}_lockingElements.splice(index,1);_exports.currentLockingElement=currentLockingElement=_lockingElements[_lockingElements.length-1];_exports._lockedElementCache=_lockedElementCache=[];_exports._unlockedElementCache=_unlockedElementCache=[];if(0===_lockingElements.length){_unlockScrollInteractions()}}const _lockingElements=[];_exports._lockingElements=_lockingElements;let _lockedElementCache=null;_exports._lockedElementCache=_lockedElementCache;let _unlockedElementCache=null;_exports._unlockedElementCache=_unlockedElementCache;function _hasCachedLockedElement(element){return-1<_lockedElementCache.indexOf(element)}function _hasCachedUnlockedElement(element){return-1<_unlockedElementCache.indexOf(element)}function _composedTreeContains(element,child){// NOTE(cdata): This method iterates over content elements and their
// corresponding distributed nodes to implement a contains-like method
// that pierces through the composed tree of the ShadowDOM. Results of
// this operation are cached (elsewhere) on a per-scroll-lock basis, to
// guard against potentially expensive lookups happening repeatedly as
// a user scrolls / touchmoves.
var contentElements,distributedNodes,contentIndex,nodeIndex;if(element.contains(child)){return!0}contentElements=dom(element).querySelectorAll("content,slot");for(contentIndex=0;contentIndex<contentElements.length;++contentIndex){distributedNodes=dom(contentElements[contentIndex]).getDistributedNodes();for(nodeIndex=0;nodeIndex<distributedNodes.length;++nodeIndex){// Polymer 2.x returns slot.assignedNodes which can contain text nodes.
if(distributedNodes[nodeIndex].nodeType!==Node.ELEMENT_NODE)continue;if(_composedTreeContains(distributedNodes[nodeIndex],child)){return!0}}}return!1}function _scrollInteractionHandler(event){// Avoid canceling an event with cancelable=false, e.g. scrolling is in
// progress and cannot be interrupted.
if(event.cancelable&&_shouldPreventScrolling(event)){event.preventDefault()}// If event has targetTouches (touch event), update last touch position.
if(event.targetTouches){var touch=event.targetTouches[0];lastTouchPosition.pageX=touch.pageX;lastTouchPosition.pageY=touch.pageY}}/**
   * @private
   */function _lockScrollInteractions(){_exports._boundScrollHandler=_boundScrollHandler=_boundScrollHandler||_scrollInteractionHandler.bind(void 0);for(var i=0,l=scrollEvents.length;i<l;i++){// NOTE: browsers that don't support objects as third arg will
// interpret it as boolean, hence useCapture = true in this case.
document.addEventListener(scrollEvents[i],_boundScrollHandler,{capture:!0,passive:!1})}}function _unlockScrollInteractions(){for(var i=0,l=scrollEvents.length;i<l;i++){// NOTE: browsers that don't support objects as third arg will
// interpret it as boolean, hence useCapture = true in this case.
document.removeEventListener(scrollEvents[i],_boundScrollHandler,{capture:!0,passive:!1})}}/**
   * Returns true if the event causes scroll outside the current locking
   * element, e.g. pointer/keyboard interactions, or scroll "leaking"
   * outside the locking element when it is already at its scroll boundaries.
   * @param {!Event} event
   * @return {boolean}
   * @private
   */function _shouldPreventScrolling(event){// Update if root target changed. For touch events, ensure we don't
// update during touchmove.
var target=dom(event).rootTarget;if("touchmove"!==event.type&&lastRootTarget!==target){lastRootTarget=target;lastScrollableNodes=_getScrollableNodes(dom(event).path)}// Prevent event if no scrollable nodes.
if(!lastScrollableNodes.length){return!0}// Don't prevent touchstart event inside the locking element when it has
// scrollable nodes.
if("touchstart"===event.type){return!1}// Get deltaX/Y.
var info=_getScrollInfo(event);// Prevent if there is no child that can scroll.
return!_getScrollingNode(lastScrollableNodes,info.deltaX,info.deltaY)}/**
   * Returns an array of scrollable nodes up to the current locking element,
   * which is included too if scrollable.
   * @param {!Array<!Node>} nodes
   * @return {!Array<!Node>} scrollables
   * @private
   */function _getScrollableNodes(nodes){// Loop from root target to locking element (included).
for(var scrollables=[],lockingIndex=nodes.indexOf(currentLockingElement),i=0;i<=lockingIndex;i++){// Skip non-Element nodes.
if(nodes[i].nodeType!==Node.ELEMENT_NODE){continue}var node=/** @type {!Element} */nodes[i],style=node.style;// Check inline style before checking computed style.
if("scroll"!==style.overflow&&"auto"!==style.overflow){style=window.getComputedStyle(node)}if("scroll"===style.overflow||"auto"===style.overflow){scrollables.push(node)}}return scrollables}/**
   * Returns the node that is scrolling. If there is no scrolling,
   * returns undefined.
   * @param {!Array<!Node>} nodes
   * @param {number} deltaX Scroll delta on the x-axis
   * @param {number} deltaY Scroll delta on the y-axis
   * @return {!Node|undefined}
   * @private
   */function _getScrollingNode(nodes,deltaX,deltaY){// No scroll.
if(!deltaX&&!deltaY){return}// Check only one axis according to where there is more scroll.
// Prefer vertical to horizontal.
for(var verticalScroll=Math.abs(deltaY)>=Math.abs(deltaX),i=0;i<nodes.length;i++){var node=nodes[i],canScroll=!1;if(verticalScroll){// delta < 0 is scroll up, delta > 0 is scroll down.
canScroll=0>deltaY?0<node.scrollTop:node.scrollTop<node.scrollHeight-node.clientHeight}else{// delta < 0 is scroll left, delta > 0 is scroll right.
canScroll=0>deltaX?0<node.scrollLeft:node.scrollLeft<node.scrollWidth-node.clientWidth}if(canScroll){return node}}}/**
   * Returns scroll `deltaX` and `deltaY`.
   * @param {!Event} event The scroll event
   * @return {{deltaX: number, deltaY: number}} Object containing the
   * x-axis scroll delta (positive: scroll right, negative: scroll left,
   * 0: no scroll), and the y-axis scroll delta (positive: scroll down,
   * negative: scroll up, 0: no scroll).
   * @private
   */function _getScrollInfo(event){var info={deltaX:event.deltaX,deltaY:event.deltaY};// Already available.
if("deltaX"in event){}// do nothing, values are already good.
// Safari has scroll info in `wheelDeltaX/Y`.
else if("wheelDeltaX"in event&&"wheelDeltaY"in event){info.deltaX=-event.wheelDeltaX;info.deltaY=-event.wheelDeltaY}// IE10 has only vertical scroll info in `wheelDelta`.
else if("wheelDelta"in event){info.deltaX=0;info.deltaY=-event.wheelDelta}// Firefox has scroll info in `detail` and `axis`.
else if("axis"in event){info.deltaX=1===event.axis?event.detail:0;info.deltaY=2===event.axis?event.detail:0}// On mobile devices, calculate scroll direction.
else if(event.targetTouches){var touch=event.targetTouches[0];// Touch moves from right to left => scrolling goes right.
info.deltaX=lastTouchPosition.pageX-touch.pageX;// Touch moves from down to up => scrolling goes down.
info.deltaY=lastTouchPosition.pageY-touch.pageY}return info}var ironScrollManager={get currentLockingElement(){return currentLockingElement},elementIsScrollLocked:elementIsScrollLocked,pushScrollLock:pushScrollLock,removeScrollLock:removeScrollLock,_lockingElements:_lockingElements,get _lockedElementCache(){return _lockedElementCache},get _unlockedElementCache(){return _unlockedElementCache},_hasCachedLockedElement:_hasCachedLockedElement,_hasCachedUnlockedElement:_hasCachedUnlockedElement,_composedTreeContains:_composedTreeContains,_scrollInteractionHandler:_scrollInteractionHandler,get _boundScrollHandler(){return _boundScrollHandler},_lockScrollInteractions:_lockScrollInteractions,_unlockScrollInteractions:_unlockScrollInteractions,_shouldPreventScrolling:_shouldPreventScrolling,_getScrollableNodes:_getScrollableNodes,_getScrollingNode:_getScrollingNode,_getScrollInfo:_getScrollInfo};_exports.$ironScrollManager=ironScrollManager;const IronOverlayBehaviorImpl={properties:{/**
     * True if the overlay is currently displayed.
     */opened:{observer:"_openedChanged",type:Boolean,value:!1,notify:!0},/**
     * True if the overlay was canceled when it was last closed.
     */canceled:{observer:"_canceledChanged",readOnly:!0,type:Boolean,value:!1},/**
     * Set to true to display a backdrop behind the overlay. It traps the focus
     * within the light DOM of the overlay.
     */withBackdrop:{observer:"_withBackdropChanged",type:Boolean},/**
     * Set to true to disable auto-focusing the overlay or child nodes with
     * the `autofocus` attribute` when the overlay is opened.
     */noAutoFocus:{type:Boolean,value:!1},/**
     * Set to true to disable canceling the overlay with the ESC key.
     */noCancelOnEscKey:{type:Boolean,value:!1},/**
     * Set to true to disable canceling the overlay by clicking outside it.
     */noCancelOnOutsideClick:{type:Boolean,value:!1},/**
     * Contains the reason(s) this overlay was last closed (see
     * `iron-overlay-closed`). `IronOverlayBehavior` provides the `canceled`
     * reason; implementers of the behavior can provide other reasons in
     * addition to `canceled`.
     */closingReason:{// was a getter before, but needs to be a property so other
// behaviors can override this.
type:Object},/**
     * Set to true to enable restoring of focus when overlay is closed.
     */restoreFocusOnClose:{type:Boolean,value:!1},/**
     * Set to true to allow clicks to go through overlays.
     * When the user clicks outside this overlay, the click may
     * close the overlay below.
     */allowClickThrough:{type:Boolean},/**
     * Set to true to keep overlay always on top.
     */alwaysOnTop:{type:Boolean},/**
     * Determines which action to perform when scroll outside an opened overlay
     * happens. Possible values: lock - blocks scrolling from happening, refit -
     * computes the new position on the overlay cancel - causes the overlay to
     * close
     */scrollAction:{type:String},/**
     * Shortcut to access to the overlay manager.
     * @private
     * @type {!IronOverlayManagerClass}
     */_manager:{type:Object,value:IronOverlayManager},/**
     * The node being focused.
     * @type {?Node}
     */_focusedChild:{type:Object}},listeners:{"iron-resize":"_onIronResize"},observers:["__updateScrollObservers(isAttached, opened, scrollAction)"],/**
   * The backdrop element.
   * @return {!Element}
   */get backdropElement(){return this._manager.backdropElement},/**
   * Returns the node to give focus to.
   * @return {!Node}
   */get _focusNode(){return this._focusedChild||dom(this).querySelector("[autofocus]")||this},/**
   * Array of nodes that can receive focus (overlay included), ordered by
   * `tabindex`. This is used to retrieve which is the first and last focusable
   * nodes in order to wrap the focus for overlays `with-backdrop`.
   *
   * If you know what is your content (specifically the first and last focusable
   * children), you can override this method to return only `[firstFocusable,
   * lastFocusable];`
   * @return {!Array<!Node>}
   * @protected
   */get _focusableNodes(){return IronFocusablesHelper.getTabbableNodes(this)},/**
   * @return {void}
   */ready:function(){// Used to skip calls to notifyResize and refit while the overlay is
// animating.
this.__isAnimating=!1;// with-backdrop needs tabindex to be set in order to trap the focus.
// If it is not set, IronOverlayBehavior will set it, and remove it if
// with-backdrop = false.
this.__shouldRemoveTabIndex=!1;// Used for wrapping the focus on TAB / Shift+TAB.
this.__firstFocusableNode=this.__lastFocusableNode=null;// Used by to keep track of the RAF callbacks.
this.__rafs={};// Focused node before overlay gets opened. Can be restored on close.
this.__restoreFocusNode=null;// Scroll info to be restored.
this.__scrollTop=this.__scrollLeft=null;this.__onCaptureScroll=this.__onCaptureScroll.bind(this);// Root nodes hosting the overlay, used to listen for scroll events on them.
this.__rootNodes=null;this._ensureSetup()},attached:function(){// Call _openedChanged here so that position can be computed correctly.
if(this.opened){this._openedChanged(this.opened)}this._observer=dom(this).observeNodes(this._onNodesChange)},detached:function(){dom(this).unobserveNodes(this._observer);this._observer=null;for(var cb in this.__rafs){if(null!==this.__rafs[cb]){cancelAnimationFrame(this.__rafs[cb])}}this.__rafs={};this._manager.removeOverlay(this);// We got detached while animating, ensure we show/hide the overlay
// and fire iron-overlay-opened/closed event!
if(this.__isAnimating){if(this.opened){this._finishRenderOpened()}else{// Restore the focus if necessary.
this._applyFocus();this._finishRenderClosed()}}},/**
   * Toggle the opened state of the overlay.
   */toggle:function(){this._setCanceled(!1);this.opened=!this.opened},/**
   * Open the overlay.
   */open:function(){this._setCanceled(!1);this.opened=!0},/**
   * Close the overlay.
   */close:function(){this._setCanceled(!1);this.opened=!1},/**
   * Cancels the overlay.
   * @param {Event=} event The original event
   */cancel:function(event){var cancelEvent=this.fire("iron-overlay-canceled",event,{cancelable:!0});if(cancelEvent.defaultPrevented){return}this._setCanceled(!0);this.opened=!1},/**
   * Invalidates the cached tabbable nodes. To be called when any of the
   * focusable content changes (e.g. a button is disabled).
   */invalidateTabbables:function(){this.__firstFocusableNode=this.__lastFocusableNode=null},_ensureSetup:function(){if(this._overlaySetup){return}this._overlaySetup=!0;this.style.outline="none";this.style.display="none"},/**
   * Called when `opened` changes.
   * @param {boolean=} opened
   * @protected
   */_openedChanged:function(opened){if(opened){this.removeAttribute("aria-hidden")}else{this.setAttribute("aria-hidden","true")}// Defer any animation-related code on attached
// (_openedChanged gets called again on attached).
if(!this.isAttached){return}this.__isAnimating=!0;// Deraf for non-blocking rendering.
this.__deraf("__openedChanged",this.__openedChanged)},_canceledChanged:function(){this.closingReason=this.closingReason||{};this.closingReason.canceled=this.canceled},_withBackdropChanged:function(){// If tabindex is already set, no need to override it.
if(this.withBackdrop&&!this.hasAttribute("tabindex")){this.setAttribute("tabindex","-1");this.__shouldRemoveTabIndex=!0}else if(this.__shouldRemoveTabIndex){this.removeAttribute("tabindex");this.__shouldRemoveTabIndex=!1}if(this.opened&&this.isAttached){this._manager.trackBackdrop()}},/**
   * tasks which must occur before opening; e.g. making the element visible.
   * @protected
   */_prepareRenderOpened:function(){// Store focused node.
this.__restoreFocusNode=this._manager.deepActiveElement;// Needed to calculate the size of the overlay so that transitions on its
// size will have the correct starting points.
this._preparePositioning();this.refit();this._finishPositioning();// Safari will apply the focus to the autofocus element when displayed
// for the first time, so we make sure to return the focus where it was.
if(this.noAutoFocus&&document.activeElement===this._focusNode){this._focusNode.blur();this.__restoreFocusNode.focus()}},/**
   * Tasks which cause the overlay to actually open; typically play an
   * animation.
   * @protected
   */_renderOpened:function(){this._finishRenderOpened()},/**
   * Tasks which cause the overlay to actually close; typically play an
   * animation.
   * @protected
   */_renderClosed:function(){this._finishRenderClosed()},/**
   * Tasks to be performed at the end of open action. Will fire
   * `iron-overlay-opened`.
   * @protected
   */_finishRenderOpened:function(){this.notifyResize();this.__isAnimating=!1;this.fire("iron-overlay-opened")},/**
   * Tasks to be performed at the end of close action. Will fire
   * `iron-overlay-closed`.
   * @protected
   */_finishRenderClosed:function(){// Hide the overlay.
this.style.display="none";// Reset z-index only at the end of the animation.
this.style.zIndex="";this.notifyResize();this.__isAnimating=!1;this.fire("iron-overlay-closed",this.closingReason)},_preparePositioning:function(){this.style.transition=this.style.webkitTransition="none";this.style.transform=this.style.webkitTransform="none";this.style.display=""},_finishPositioning:function(){// First, make it invisible & reactivate animations.
this.style.display="none";// Force reflow before re-enabling animations so that they don't start.
// Set scrollTop to itself so that Closure Compiler doesn't remove this.
this.scrollTop=this.scrollTop;this.style.transition=this.style.webkitTransition="";this.style.transform=this.style.webkitTransform="";// Now that animations are enabled, make it visible again
this.style.display="";// Force reflow, so that following animations are properly started.
// Set scrollTop to itself so that Closure Compiler doesn't remove this.
this.scrollTop=this.scrollTop},/**
   * Applies focus according to the opened state.
   * @protected
   */_applyFocus:function(){if(this.opened){if(!this.noAutoFocus){this._focusNode.focus()}}else{// Restore focus.
if(this.restoreFocusOnClose&&this.__restoreFocusNode){// If the activeElement is `<body>` or inside the overlay,
// we are allowed to restore the focus. In all the other
// cases focus might have been moved elsewhere by another
// component or by an user interaction (e.g. click on a
// button outside the overlay).
var activeElement=this._manager.deepActiveElement;if(activeElement===document.body||dom(this).deepContains(activeElement)){this.__restoreFocusNode.focus()}}this.__restoreFocusNode=null;this._focusNode.blur();this._focusedChild=null}},/**
   * Cancels (closes) the overlay. Call when click happens outside the overlay.
   * @param {!Event} event
   * @protected
   */_onCaptureClick:function(event){if(!this.noCancelOnOutsideClick){this.cancel(event)}},/**
   * Keeps track of the focused child. If withBackdrop, traps focus within
   * overlay.
   * @param {!Event} event
   * @protected
   */_onCaptureFocus:function(event){if(!this.withBackdrop){return}var path=dom(event).path;if(-1===path.indexOf(this)){event.stopPropagation();this._applyFocus()}else{this._focusedChild=path[0]}},/**
   * Handles the ESC key event and cancels (closes) the overlay.
   * @param {!Event} event
   * @protected
   */_onCaptureEsc:function(event){if(!this.noCancelOnEscKey){this.cancel(event)}},/**
   * Handles TAB key events to track focus changes.
   * Will wrap focus for overlays withBackdrop.
   * @param {!Event} event
   * @protected
   */_onCaptureTab:function(event){if(!this.withBackdrop){return}this.__ensureFirstLastFocusables();// TAB wraps from last to first focusable.
// Shift + TAB wraps from first to last focusable.
var shift=event.shiftKey,nodeToCheck=shift?this.__firstFocusableNode:this.__lastFocusableNode,nodeToSet=shift?this.__lastFocusableNode:this.__firstFocusableNode,shouldWrap=!1;if(nodeToCheck===nodeToSet){// If nodeToCheck is the same as nodeToSet, it means we have an overlay
// with 0 or 1 focusables; in either case we still need to trap the
// focus within the overlay.
shouldWrap=!0}else{// In dom=shadow, the manager will receive focus changes on the main
// root but not the ones within other shadow roots, so we can't rely on
// _focusedChild, but we should check the deepest active element.
var focusedNode=this._manager.deepActiveElement;// If the active element is not the nodeToCheck but the overlay itself,
// it means the focus is about to go outside the overlay, hence we
// should prevent that (e.g. user opens the overlay and hit Shift+TAB).
shouldWrap=focusedNode===nodeToCheck||focusedNode===this}if(shouldWrap){// When the overlay contains the last focusable element of the document
// and it's already focused, pressing TAB would move the focus outside
// the document (e.g. to the browser search bar). Similarly, when the
// overlay contains the first focusable element of the document and it's
// already focused, pressing Shift+TAB would move the focus outside the
// document (e.g. to the browser search bar).
// In both cases, we would not receive a focus event, but only a blur.
// In order to achieve focus wrapping, we prevent this TAB event and
// force the focus. This will also prevent the focus to temporarily move
// outside the overlay, which might cause scrolling.
event.preventDefault();this._focusedChild=nodeToSet;this._applyFocus()}},/**
   * Refits if the overlay is opened and not animating.
   * @protected
   */_onIronResize:function(){if(this.opened&&!this.__isAnimating){this.__deraf("refit",this.refit)}},/**
   * Will call notifyResize if overlay is opened.
   * Can be overridden in order to avoid multiple observers on the same node.
   * @protected
   */_onNodesChange:function(){if(this.opened&&!this.__isAnimating){// It might have added focusable nodes, so invalidate cached values.
this.invalidateTabbables();this.notifyResize()}},/**
   * Updates the references to the first and last focusable nodes.
   * @private
   */__ensureFirstLastFocusables:function(){var focusableNodes=this._focusableNodes;this.__firstFocusableNode=focusableNodes[0];this.__lastFocusableNode=focusableNodes[focusableNodes.length-1]},/**
   * Tasks executed when opened changes: prepare for the opening, move the
   * focus, update the manager, render opened/closed.
   * @private
   */__openedChanged:function(){if(this.opened){// Make overlay visible, then add it to the manager.
this._prepareRenderOpened();this._manager.addOverlay(this);// Move the focus to the child node with [autofocus].
this._applyFocus();this._renderOpened()}else{// Remove overlay, then restore the focus before actually closing.
this._manager.removeOverlay(this);this._applyFocus();this._renderClosed()}},/**
   * Debounces the execution of a callback to the next animation frame.
   * @param {!string} jobname
   * @param {!Function} callback Always bound to `this`
   * @private
   */__deraf:function(jobname,callback){var rafs=this.__rafs;if(null!==rafs[jobname]){cancelAnimationFrame(rafs[jobname])}rafs[jobname]=requestAnimationFrame(function nextAnimationFrame(){rafs[jobname]=null;callback.call(this)}.bind(this))},/**
   * @param {boolean} isAttached
   * @param {boolean} opened
   * @param {string=} scrollAction
   * @private
   */__updateScrollObservers:function(isAttached,opened,scrollAction){if(!isAttached||!opened||!this.__isValidScrollAction(scrollAction)){removeScrollLock(this);this.__removeScrollListeners()}else{if("lock"===scrollAction){this.__saveScrollPosition();pushScrollLock(this)}this.__addScrollListeners()}},/**
   * @private
   */__addScrollListeners:function(){if(!this.__rootNodes){this.__rootNodes=[];// Listen for scroll events in all shadowRoots hosting this overlay only
// when in native ShadowDOM.
if(useShadow){var node=this;while(node){if(node.nodeType===Node.DOCUMENT_FRAGMENT_NODE&&node.host){this.__rootNodes.push(node)}node=node.host||node.assignedSlot||node.parentNode}}this.__rootNodes.push(document)}this.__rootNodes.forEach(function(el){el.addEventListener("scroll",this.__onCaptureScroll,{capture:!0,passive:!0})},this)},/**
   * @private
   */__removeScrollListeners:function(){if(this.__rootNodes){this.__rootNodes.forEach(function(el){el.removeEventListener("scroll",this.__onCaptureScroll,{capture:!0,passive:!0})},this)}if(!this.isAttached){this.__rootNodes=null}},/**
   * @param {string=} scrollAction
   * @return {boolean}
   * @private
   */__isValidScrollAction:function(scrollAction){return"lock"===scrollAction||"refit"===scrollAction||"cancel"===scrollAction},/**
   * @private
   */__onCaptureScroll:function(event){if(this.__isAnimating){return}// Check if scroll outside the overlay.
if(0<=dom(event).path.indexOf(this)){return}switch(this.scrollAction){case"lock":// NOTE: scrolling might happen if a scroll event is not cancellable, or
// if user pressed keys that cause scrolling (they're not prevented in
// order not to break a11y features like navigate with arrow keys).
this.__restoreScrollPosition();break;case"refit":this.__deraf("refit",this.refit);break;case"cancel":this.cancel(event);break;}},/**
   * Memoizes the scroll position of the outside scrolling element.
   * @private
   */__saveScrollPosition:function(){if(document.scrollingElement){this.__scrollTop=document.scrollingElement.scrollTop;this.__scrollLeft=document.scrollingElement.scrollLeft}else{// Since we don't know if is the body or html, get max.
this.__scrollTop=Math.max(document.documentElement.scrollTop,document.body.scrollTop);this.__scrollLeft=Math.max(document.documentElement.scrollLeft,document.body.scrollLeft)}},/**
   * Resets the scroll position of the outside scrolling element.
   * @private
   */__restoreScrollPosition:function(){if(document.scrollingElement){document.scrollingElement.scrollTop=this.__scrollTop;document.scrollingElement.scrollLeft=this.__scrollLeft}else{// Since we don't know if is the body or html, set both.
document.documentElement.scrollTop=document.body.scrollTop=this.__scrollTop;document.documentElement.scrollLeft=document.body.scrollLeft=this.__scrollLeft}}};/**
     Use `Polymer.IronOverlayBehavior` to implement an element that can be hidden
     or shown, and displays on top of other content. It includes an optional
     backdrop, and can be used to implement a variety of UI controls including
     dialogs and drop downs. Multiple overlays may be displayed at once.
   
     See the [demo source
     code](https://github.com/PolymerElements/iron-overlay-behavior/blob/master/demo/simple-overlay.html)
     for an example.
   
     ### Closing and canceling
   
     An overlay may be hidden by closing or canceling. The difference between close
     and cancel is user intent. Closing generally implies that the user
     acknowledged the content on the overlay. By default, it will cancel whenever
     the user taps outside it or presses the escape key. This behavior is
     configurable with the `no-cancel-on-esc-key` and the
     `no-cancel-on-outside-click` properties. `close()` should be called explicitly
     by the implementer when the user interacts with a control in the overlay
     element. When the dialog is canceled, the overlay fires an
     'iron-overlay-canceled' event. Call `preventDefault` on this event to prevent
     the overlay from closing.
   
     ### Positioning
   
     By default the element is sized and positioned to fit and centered inside the
     window. You can position and size it manually using CSS. See
     `Polymer.IronFitBehavior`.
   
     ### Backdrop
   
     Set the `with-backdrop` attribute to display a backdrop behind the overlay.
     The backdrop is appended to `<body>` and is of type `<iron-overlay-backdrop>`.
     See its doc page for styling options.
   
     In addition, `with-backdrop` will wrap the focus within the content in the
     light DOM. Override the [`_focusableNodes`
     getter](#Polymer.IronOverlayBehavior:property-_focusableNodes) to achieve a
     different behavior.
   
     ### Limitations
   
     The element is styled to appear on top of other content by setting its
     `z-index` property. You must ensure no element has a stacking context with a
     higher `z-index` than its parent stacking context. You should place this
     element as a child of `<body>` whenever possible.
   
     @demo demo/index.html
     @polymerBehavior
    */_exports.IronOverlayBehaviorImpl=IronOverlayBehaviorImpl;const IronOverlayBehavior=[IronFitBehavior,IronResizableBehavior,IronOverlayBehaviorImpl];/**
                                                                                                       * Fired after the overlay opens.
                                                                                                       * @event iron-overlay-opened
                                                                                                       */ /**
                                                                                                           * Fired when the overlay is canceled, but before it is closed.
                                                                                                           * @event iron-overlay-canceled
                                                                                                           * @param {Event} event The closing of the overlay can be prevented
                                                                                                           * by calling `event.preventDefault()`. The `event.detail` is the original event
                                                                                                           * that originated the canceling (e.g. ESC keyboard event or click event outside
                                                                                                           * the overlay).
                                                                                                           */ /**
                                                                                                               * Fired after the overlay closes.
                                                                                                               * @event iron-overlay-closed
                                                                                                               * @param {Event} event The `event.detail` is the `closingReason` property
                                                                                                               * (contains `canceled`, whether the overlay was canceled).
                                                                                                               */_exports.IronOverlayBehavior=IronOverlayBehavior;var ironOverlayBehavior={IronOverlayBehaviorImpl:IronOverlayBehaviorImpl,IronOverlayBehavior:IronOverlayBehavior};_exports.$ironOverlayBehavior=ironOverlayBehavior;const NeonAnimatableBehavior={properties:{/**
     * Animation configuration. See README for more info.
     */animationConfig:{type:Object},/**
     * Convenience property for setting an 'entry' animation. Do not set
     * `animationConfig.entry` manually if using this. The animated node is set
     * to `this` if using this property.
     */entryAnimation:{observer:"_entryAnimationChanged",type:String},/**
     * Convenience property for setting an 'exit' animation. Do not set
     * `animationConfig.exit` manually if using this. The animated node is set
     * to `this` if using this property.
     */exitAnimation:{observer:"_exitAnimationChanged",type:String}},_entryAnimationChanged:function(){this.animationConfig=this.animationConfig||{};this.animationConfig.entry=[{name:this.entryAnimation,node:this}]},_exitAnimationChanged:function(){this.animationConfig=this.animationConfig||{};this.animationConfig.exit=[{name:this.exitAnimation,node:this}]},_copyProperties:function(config1,config2){// shallowly copy properties from config2 to config1
for(var property in config2){config1[property]=config2[property]}},_cloneConfig:function(config){var clone={isClone:!0};this._copyProperties(clone,config);return clone},_getAnimationConfigRecursive:function(type,map,allConfigs){if(!this.animationConfig){return}if(this.animationConfig.value&&"function"===typeof this.animationConfig.value){this._warn(this._logf("playAnimation","Please put 'animationConfig' inside of your components 'properties' object instead of outside of it."));return}// type is optional
var thisConfig;if(type){thisConfig=this.animationConfig[type]}else{thisConfig=this.animationConfig}if(!Array.isArray(thisConfig)){thisConfig=[thisConfig]}// iterate animations and recurse to process configurations from child nodes
if(thisConfig){for(var config,index=0;config=thisConfig[index];index++){if(config.animatable){config.animatable._getAnimationConfigRecursive(config.type||type,map,allConfigs)}else{if(config.id){var cachedConfig=map[config.id];if(cachedConfig){// merge configurations with the same id, making a clone lazily
if(!cachedConfig.isClone){map[config.id]=this._cloneConfig(cachedConfig);cachedConfig=map[config.id]}this._copyProperties(cachedConfig,config)}else{// put any configs with an id into a map
map[config.id]=config}}else{allConfigs.push(config)}}}}},/**
   * An element implementing `NeonAnimationRunnerBehavior` calls this
   * method to configure an animation with an optional type. Elements
   * implementing `NeonAnimatableBehavior` should define the property
   * `animationConfig`, which is either a configuration object or a map of
   * animation type to array of configuration objects.
   */getAnimationConfig:function(type){var map={},allConfigs=[];this._getAnimationConfigRecursive(type,map,allConfigs);// append the configurations saved in the map to the array
for(var key in map){allConfigs.push(map[key])}return allConfigs}};_exports.NeonAnimatableBehavior=NeonAnimatableBehavior;var neonAnimatableBehavior={NeonAnimatableBehavior:NeonAnimatableBehavior};_exports.$neonAnimatableBehavior=neonAnimatableBehavior;const NeonAnimationRunnerBehaviorImpl={_configureAnimations:function(configs){var results=[],resultsToPlay=[];if(0<configs.length){for(let config,index=0,neonAnimation;config=configs[index];index++){neonAnimation=document.createElement(config.name);// is this element actually a neon animation?
if(neonAnimation.isNeonAnimation){let result=null;// Closure compiler does not work well with a try / catch here.
// .configure needs to be explicitly defined
if(!neonAnimation.configure){/**
             * @param {Object} config
             * @return {AnimationEffectReadOnly}
             */neonAnimation.configure=function(config){return null}}result=neonAnimation.configure(config);resultsToPlay.push({result:result,config:config,neonAnimation:neonAnimation})}else{console.warn(this.is+":",config.name,"not found!")}}}for(var i=0;i<resultsToPlay.length;i++){let result=resultsToPlay[i].result,config=resultsToPlay[i].config,neonAnimation=resultsToPlay[i].neonAnimation;// configuration or play could fail if polyfills aren't loaded
try{// Check if we have an Effect rather than an Animation
if("function"!=typeof result.cancel){result=document.timeline.play(result)}}catch(e){result=null;console.warn("Couldnt play","(",config.name,").",e)}if(result){results.push({neonAnimation:neonAnimation,config:config,animation:result})}}return results},_shouldComplete:function(activeEntries){for(var finished=!0,i=0;i<activeEntries.length;i++){if("finished"!=activeEntries[i].animation.playState){finished=!1;break}}return finished},_complete:function(activeEntries){for(var i=0;i<activeEntries.length;i++){activeEntries[i].neonAnimation.complete(activeEntries[i].config)}for(var i=0;i<activeEntries.length;i++){activeEntries[i].animation.cancel()}},/**
   * Plays an animation with an optional `type`.
   * @param {string=} type
   * @param {!Object=} cookie
   */playAnimation:function(type,cookie){var configs=this.getAnimationConfig(type);if(!configs){return}this._active=this._active||{};if(this._active[type]){this._complete(this._active[type]);delete this._active[type]}var activeEntries=this._configureAnimations(configs);if(0==activeEntries.length){this.fire("neon-animation-finish",cookie,{bubbles:!1});return}this._active[type]=activeEntries;for(var i=0;i<activeEntries.length;i++){activeEntries[i].animation.onfinish=function(){if(this._shouldComplete(activeEntries)){this._complete(activeEntries);delete this._active[type];this.fire("neon-animation-finish",cookie,{bubbles:!1})}}.bind(this)}},/**
   * Cancels the currently running animations.
   */cancelAnimation:function(){for(var k in this._active){var entries=this._active[k];for(var j in entries){entries[j].animation.cancel()}}this._active={}}};/** @polymerBehavior */_exports.NeonAnimationRunnerBehaviorImpl=NeonAnimationRunnerBehaviorImpl;const NeonAnimationRunnerBehavior=[NeonAnimatableBehavior,NeonAnimationRunnerBehaviorImpl];_exports.NeonAnimationRunnerBehavior=NeonAnimationRunnerBehavior;var neonAnimationRunnerBehavior={NeonAnimationRunnerBehaviorImpl:NeonAnimationRunnerBehaviorImpl,NeonAnimationRunnerBehavior:NeonAnimationRunnerBehavior};_exports.$neonAnimationRunnerBehavior=neonAnimationRunnerBehavior;Polymer({_template:html`
    <style>
      :host {
        position: fixed;
      }

      #contentWrapper ::slotted(*) {
        overflow: auto;
      }

      #contentWrapper.animating ::slotted(*) {
        overflow: hidden;
        pointer-events: none;
      }
    </style>

    <div id="contentWrapper">
      <slot id="content" name="dropdown-content"></slot>
    </div>
`,is:"iron-dropdown",behaviors:[IronControlState,IronA11yKeysBehavior,IronOverlayBehavior,NeonAnimationRunnerBehavior],properties:{/**
     * The orientation against which to align the dropdown content
     * horizontally relative to the dropdown trigger.
     * Overridden from `Polymer.IronFitBehavior`.
     */horizontalAlign:{type:String,value:"left",reflectToAttribute:!0},/**
     * The orientation against which to align the dropdown content
     * vertically relative to the dropdown trigger.
     * Overridden from `Polymer.IronFitBehavior`.
     */verticalAlign:{type:String,value:"top",reflectToAttribute:!0},/**
     * An animation config. If provided, this will be used to animate the
     * opening of the dropdown. Pass an Array for multiple animations.
     * See `neon-animation` documentation for more animation configuration
     * details.
     */openAnimationConfig:{type:Object},/**
     * An animation config. If provided, this will be used to animate the
     * closing of the dropdown. Pass an Array for multiple animations.
     * See `neon-animation` documentation for more animation configuration
     * details.
     */closeAnimationConfig:{type:Object},/**
     * If provided, this will be the element that will be focused when
     * the dropdown opens.
     */focusTarget:{type:Object},/**
     * Set to true to disable animations when opening and closing the
     * dropdown.
     */noAnimations:{type:Boolean,value:!1},/**
     * By default, the dropdown will constrain scrolling on the page
     * to itself when opened.
     * Set to true in order to prevent scroll from being constrained
     * to the dropdown when it opens.
     * This property is a shortcut to set `scrollAction` to lock or refit.
     * Prefer directly setting the `scrollAction` property.
     */allowOutsideScroll:{type:Boolean,value:!1,observer:"_allowOutsideScrollChanged"}},listeners:{"neon-animation-finish":"_onNeonAnimationFinish"},observers:["_updateOverlayPosition(positionTarget, verticalAlign, horizontalAlign, verticalOffset, horizontalOffset)"],/**
   * The element that is contained by the dropdown, if any.
   */get containedElement(){// Polymer 2.x returns slot.assignedNodes which can contain text nodes.
for(var nodes=dom(this.$.content).getDistributedNodes(),i=0,l=nodes.length;i<l;i++){if(nodes[i].nodeType===Node.ELEMENT_NODE){return nodes[i]}}},ready:function(){// Ensure scrollAction is set.
if(!this.scrollAction){this.scrollAction=this.allowOutsideScroll?"refit":"lock"}this._readied=!0},attached:function(){if(!this.sizingTarget||this.sizingTarget===this){this.sizingTarget=this.containedElement||this}},detached:function(){this.cancelAnimation()},/**
   * Called when the value of `opened` changes.
   * Overridden from `IronOverlayBehavior`
   */_openedChanged:function(){if(this.opened&&this.disabled){this.cancel()}else{this.cancelAnimation();this._updateAnimationConfig();IronOverlayBehaviorImpl._openedChanged.apply(this,arguments)}},/**
   * Overridden from `IronOverlayBehavior`.
   */_renderOpened:function(){if(!this.noAnimations&&this.animationConfig.open){this.$.contentWrapper.classList.add("animating");this.playAnimation("open")}else{IronOverlayBehaviorImpl._renderOpened.apply(this,arguments)}},/**
   * Overridden from `IronOverlayBehavior`.
   */_renderClosed:function(){if(!this.noAnimations&&this.animationConfig.close){this.$.contentWrapper.classList.add("animating");this.playAnimation("close")}else{IronOverlayBehaviorImpl._renderClosed.apply(this,arguments)}},/**
   * Called when animation finishes on the dropdown (when opening or
   * closing). Responsible for "completing" the process of opening or
   * closing the dropdown by positioning it or setting its display to
   * none.
   */_onNeonAnimationFinish:function(){this.$.contentWrapper.classList.remove("animating");if(this.opened){this._finishRenderOpened()}else{this._finishRenderClosed()}},/**
   * Constructs the final animation config from different properties used
   * to configure specific parts of the opening and closing animations.
   */_updateAnimationConfig:function(){// Update the animation node to be the containedElement.
for(var animationNode=this.containedElement,animations=[].concat(this.openAnimationConfig||[]).concat(this.closeAnimationConfig||[]),i=0;i<animations.length;i++){animations[i].node=animationNode}this.animationConfig={open:this.openAnimationConfig,close:this.closeAnimationConfig}},/**
   * Updates the overlay position based on configured horizontal
   * and vertical alignment.
   */_updateOverlayPosition:function(){if(this.isAttached){// This triggers iron-resize, and iron-overlay-behavior will call refit if
// needed.
this.notifyResize()}},/**
   * Sets scrollAction according to the value of allowOutsideScroll.
   * Prefer setting directly scrollAction.
   */_allowOutsideScrollChanged:function(allowOutsideScroll){// Wait until initial values are all set.
if(!this._readied){return}if(!allowOutsideScroll){this.scrollAction="lock"}else if(!this.scrollAction||"lock"===this.scrollAction){this.scrollAction="refit"}},/**
   * Apply focus to focusTarget or containedElement
   */_applyFocus:function(){var focusTarget=this.focusTarget||this.containedElement;if(focusTarget&&this.opened&&!this.noAutoFocus){focusTarget.focus()}else{IronOverlayBehaviorImpl._applyFocus.apply(this,arguments)}}});const template$1=html`
/* Most common used flex styles*/
<dom-module id="iron-flex">
  <template>
    <style>
      .layout.horizontal,
      .layout.vertical {
        display: -ms-flexbox;
        display: -webkit-flex;
        display: flex;
      }

      .layout.inline {
        display: -ms-inline-flexbox;
        display: -webkit-inline-flex;
        display: inline-flex;
      }

      .layout.horizontal {
        -ms-flex-direction: row;
        -webkit-flex-direction: row;
        flex-direction: row;
      }

      .layout.vertical {
        -ms-flex-direction: column;
        -webkit-flex-direction: column;
        flex-direction: column;
      }

      .layout.wrap {
        -ms-flex-wrap: wrap;
        -webkit-flex-wrap: wrap;
        flex-wrap: wrap;
      }

      .layout.no-wrap {
        -ms-flex-wrap: nowrap;
        -webkit-flex-wrap: nowrap;
        flex-wrap: nowrap;
      }

      .layout.center,
      .layout.center-center {
        -ms-flex-align: center;
        -webkit-align-items: center;
        align-items: center;
      }

      .layout.center-justified,
      .layout.center-center {
        -ms-flex-pack: center;
        -webkit-justify-content: center;
        justify-content: center;
      }

      .flex {
        -ms-flex: 1 1 0.000000001px;
        -webkit-flex: 1;
        flex: 1;
        -webkit-flex-basis: 0.000000001px;
        flex-basis: 0.000000001px;
      }

      .flex-auto {
        -ms-flex: 1 1 auto;
        -webkit-flex: 1 1 auto;
        flex: 1 1 auto;
      }

      .flex-none {
        -ms-flex: none;
        -webkit-flex: none;
        flex: none;
      }
    </style>
  </template>
</dom-module>
/* Basic flexbox reverse styles */
<dom-module id="iron-flex-reverse">
  <template>
    <style>
      .layout.horizontal-reverse,
      .layout.vertical-reverse {
        display: -ms-flexbox;
        display: -webkit-flex;
        display: flex;
      }

      .layout.horizontal-reverse {
        -ms-flex-direction: row-reverse;
        -webkit-flex-direction: row-reverse;
        flex-direction: row-reverse;
      }

      .layout.vertical-reverse {
        -ms-flex-direction: column-reverse;
        -webkit-flex-direction: column-reverse;
        flex-direction: column-reverse;
      }

      .layout.wrap-reverse {
        -ms-flex-wrap: wrap-reverse;
        -webkit-flex-wrap: wrap-reverse;
        flex-wrap: wrap-reverse;
      }
    </style>
  </template>
</dom-module>
/* Flexbox alignment */
<dom-module id="iron-flex-alignment">
  <template>
    <style>
      /**
       * Alignment in cross axis.
       */
      .layout.start {
        -ms-flex-align: start;
        -webkit-align-items: flex-start;
        align-items: flex-start;
      }

      .layout.center,
      .layout.center-center {
        -ms-flex-align: center;
        -webkit-align-items: center;
        align-items: center;
      }

      .layout.end {
        -ms-flex-align: end;
        -webkit-align-items: flex-end;
        align-items: flex-end;
      }

      .layout.baseline {
        -ms-flex-align: baseline;
        -webkit-align-items: baseline;
        align-items: baseline;
      }

      /**
       * Alignment in main axis.
       */
      .layout.start-justified {
        -ms-flex-pack: start;
        -webkit-justify-content: flex-start;
        justify-content: flex-start;
      }

      .layout.center-justified,
      .layout.center-center {
        -ms-flex-pack: center;
        -webkit-justify-content: center;
        justify-content: center;
      }

      .layout.end-justified {
        -ms-flex-pack: end;
        -webkit-justify-content: flex-end;
        justify-content: flex-end;
      }

      .layout.around-justified {
        -ms-flex-pack: distribute;
        -webkit-justify-content: space-around;
        justify-content: space-around;
      }

      .layout.justified {
        -ms-flex-pack: justify;
        -webkit-justify-content: space-between;
        justify-content: space-between;
      }

      /**
       * Self alignment.
       */
      .self-start {
        -ms-align-self: flex-start;
        -webkit-align-self: flex-start;
        align-self: flex-start;
      }

      .self-center {
        -ms-align-self: center;
        -webkit-align-self: center;
        align-self: center;
      }

      .self-end {
        -ms-align-self: flex-end;
        -webkit-align-self: flex-end;
        align-self: flex-end;
      }

      .self-stretch {
        -ms-align-self: stretch;
        -webkit-align-self: stretch;
        align-self: stretch;
      }

      .self-baseline {
        -ms-align-self: baseline;
        -webkit-align-self: baseline;
        align-self: baseline;
      }

      /**
       * multi-line alignment in main axis.
       */
      .layout.start-aligned {
        -ms-flex-line-pack: start;  /* IE10 */
        -ms-align-content: flex-start;
        -webkit-align-content: flex-start;
        align-content: flex-start;
      }

      .layout.end-aligned {
        -ms-flex-line-pack: end;  /* IE10 */
        -ms-align-content: flex-end;
        -webkit-align-content: flex-end;
        align-content: flex-end;
      }

      .layout.center-aligned {
        -ms-flex-line-pack: center;  /* IE10 */
        -ms-align-content: center;
        -webkit-align-content: center;
        align-content: center;
      }

      .layout.between-aligned {
        -ms-flex-line-pack: justify;  /* IE10 */
        -ms-align-content: space-between;
        -webkit-align-content: space-between;
        align-content: space-between;
      }

      .layout.around-aligned {
        -ms-flex-line-pack: distribute;  /* IE10 */
        -ms-align-content: space-around;
        -webkit-align-content: space-around;
        align-content: space-around;
      }
    </style>
  </template>
</dom-module>
/* Non-flexbox positioning helper styles */
<dom-module id="iron-flex-factors">
  <template>
    <style>
      .flex,
      .flex-1 {
        -ms-flex: 1 1 0.000000001px;
        -webkit-flex: 1;
        flex: 1;
        -webkit-flex-basis: 0.000000001px;
        flex-basis: 0.000000001px;
      }

      .flex-2 {
        -ms-flex: 2;
        -webkit-flex: 2;
        flex: 2;
      }

      .flex-3 {
        -ms-flex: 3;
        -webkit-flex: 3;
        flex: 3;
      }

      .flex-4 {
        -ms-flex: 4;
        -webkit-flex: 4;
        flex: 4;
      }

      .flex-5 {
        -ms-flex: 5;
        -webkit-flex: 5;
        flex: 5;
      }

      .flex-6 {
        -ms-flex: 6;
        -webkit-flex: 6;
        flex: 6;
      }

      .flex-7 {
        -ms-flex: 7;
        -webkit-flex: 7;
        flex: 7;
      }

      .flex-8 {
        -ms-flex: 8;
        -webkit-flex: 8;
        flex: 8;
      }

      .flex-9 {
        -ms-flex: 9;
        -webkit-flex: 9;
        flex: 9;
      }

      .flex-10 {
        -ms-flex: 10;
        -webkit-flex: 10;
        flex: 10;
      }

      .flex-11 {
        -ms-flex: 11;
        -webkit-flex: 11;
        flex: 11;
      }

      .flex-12 {
        -ms-flex: 12;
        -webkit-flex: 12;
        flex: 12;
      }
    </style>
  </template>
</dom-module>
<dom-module id="iron-positioning">
  <template>
    <style>
      .block {
        display: block;
      }

      [hidden] {
        display: none !important;
      }

      .invisible {
        visibility: hidden !important;
      }

      .relative {
        position: relative;
      }

      .fit {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
      }

      body.fullbleed {
        margin: 0;
        height: 100vh;
      }

      .scroll {
        -webkit-overflow-scrolling: touch;
        overflow: auto;
      }

      /* fixed position */
      .fixed-bottom,
      .fixed-left,
      .fixed-right,
      .fixed-top {
        position: fixed;
      }

      .fixed-top {
        top: 0;
        left: 0;
        right: 0;
      }

      .fixed-right {
        top: 0;
        right: 0;
        bottom: 0;
      }

      .fixed-bottom {
        right: 0;
        bottom: 0;
        left: 0;
      }

      .fixed-left {
        top: 0;
        bottom: 0;
        left: 0;
      }
    </style>
  </template>
</dom-module>
`;template$1.setAttribute("style","display: none;");document.head.appendChild(template$1.content);Polymer({_template:html`
    <style>
      :host {
        @apply --layout-inline;
        @apply --layout-center-center;
        position: relative;

        vertical-align: middle;

        fill: var(--iron-icon-fill-color, currentcolor);
        stroke: var(--iron-icon-stroke-color, none);

        width: var(--iron-icon-width, 24px);
        height: var(--iron-icon-height, 24px);
        @apply --iron-icon;
      }

      :host([hidden]) {
        display: none;
      }
    </style>
`,is:"iron-icon",properties:{/**
     * The name of the icon to use. The name should be of the form:
     * `iconset_name:icon_name`.
     */icon:{type:String},/**
     * The name of the theme to used, if one is specified by the
     * iconset.
     */theme:{type:String},/**
     * If using iron-icon without an iconset, you can set the src to be
     * the URL of an individual icon image file. Note that this will take
     * precedence over a given icon attribute.
     */src:{type:String},/**
     * @type {!IronMeta}
     */_meta:{value:Base.create("iron-meta",{type:"iconset"})}},observers:["_updateIcon(_meta, isAttached)","_updateIcon(theme, isAttached)","_srcChanged(src, isAttached)","_iconChanged(icon, isAttached)"],_DEFAULT_ICONSET:"icons",_iconChanged:function(icon){var parts=(icon||"").split(":");this._iconName=parts.pop();this._iconsetName=parts.pop()||this._DEFAULT_ICONSET;this._updateIcon()},_srcChanged:function(src){this._updateIcon()},_usesIconset:function(){return this.icon||!this.src},/** @suppress {visibility} */_updateIcon:function(){if(this._usesIconset()){if(this._img&&this._img.parentNode){dom(this.root).removeChild(this._img)}if(""===this._iconName){if(this._iconset){this._iconset.removeIcon(this)}}else if(this._iconsetName&&this._meta){this._iconset=/** @type {?Polymer.Iconset} */this._meta.byKey(this._iconsetName);if(this._iconset){this._iconset.applyIcon(this,this._iconName,this.theme);this.unlisten(window,"iron-iconset-added","_updateIcon")}else{this.listen(window,"iron-iconset-added","_updateIcon")}}}else{if(this._iconset){this._iconset.removeIcon(this)}if(!this._img){this._img=document.createElement("img");this._img.style.width="100%";this._img.style.height="100%";this._img.draggable=!1}this._img.src=this.src;dom(this.root).appendChild(this._img)}}});Polymer({is:"iron-iconset-svg",properties:{/**
     * The name of the iconset.
     */name:{type:String,observer:"_nameChanged"},/**
     * The size of an individual icon. Note that icons must be square.
     */size:{type:Number,value:24},/**
     * Set to true to enable mirroring of icons where specified when they are
     * stamped. Icons that should be mirrored should be decorated with a
     * `mirror-in-rtl` attribute.
     *
     * NOTE: For performance reasons, direction will be resolved once per
     * document per iconset, so moving icons in and out of RTL subtrees will
     * not cause their mirrored state to change.
     */rtlMirroring:{type:Boolean,value:!1},/**
     * Set to true to measure RTL based on the dir attribute on the body or
     * html elements (measured on document.body or document.documentElement as
     * available).
     */useGlobalRtlAttribute:{type:Boolean,value:!1}},created:function(){this._meta=new IronMeta({type:"iconset",key:null,value:null})},attached:function(){this.style.display="none"},/**
   * Construct an array of all icon names in this iconset.
   *
   * @return {!Array} Array of icon names.
   */getIconNames:function(){this._icons=this._createIconMap();return Object.keys(this._icons).map(function(n){return this.name+":"+n},this)},/**
   * Applies an icon to the given element.
   *
   * An svg icon is prepended to the element's shadowRoot if it exists,
   * otherwise to the element itself.
   *
   * If RTL mirroring is enabled, and the icon is marked to be mirrored in
   * RTL, the element will be tested (once and only once ever for each
   * iconset) to determine the direction of the subtree the element is in.
   * This direction will apply to all future icon applications, although only
   * icons marked to be mirrored will be affected.
   *
   * @method applyIcon
   * @param {Element} element Element to which the icon is applied.
   * @param {string} iconName Name of the icon to apply.
   * @return {?Element} The svg element which renders the icon.
   */applyIcon:function(element,iconName){// Remove old svg element
this.removeIcon(element);// install new svg element
var svg=this._cloneIcon(iconName,this.rtlMirroring&&this._targetIsRTL(element));if(svg){// insert svg element into shadow root, if it exists
var pde=dom(element.root||element);pde.insertBefore(svg,pde.childNodes[0]);return element._svgIcon=svg}return null},/**
   * Remove an icon from the given element by undoing the changes effected
   * by `applyIcon`.
   *
   * @param {Element} element The element from which the icon is removed.
   */removeIcon:function(element){// Remove old svg element
if(element._svgIcon){dom(element.root||element).removeChild(element._svgIcon);element._svgIcon=null}},/**
   * Measures and memoizes the direction of the element. Note that this
   * measurement is only done once and the result is memoized for future
   * invocations.
   */_targetIsRTL:function(target){if(null==this.__targetIsRTL){if(this.useGlobalRtlAttribute){var globalElement=document.body&&document.body.hasAttribute("dir")?document.body:document.documentElement;this.__targetIsRTL="rtl"===globalElement.getAttribute("dir")}else{if(target&&target.nodeType!==Node.ELEMENT_NODE){target=target.host}this.__targetIsRTL=target&&"rtl"===window.getComputedStyle(target).direction}}return this.__targetIsRTL},/**
   *
   * When name is changed, register iconset metadata
   *
   */_nameChanged:function(){this._meta.value=null;this._meta.key=this.name;this._meta.value=this;this.async(function(){this.fire("iron-iconset-added",this,{node:window})})},/**
   * Create a map of child SVG elements by id.
   *
   * @return {!Object} Map of id's to SVG elements.
   */_createIconMap:function(){// Objects chained to Object.prototype (`{}`) have members. Specifically,
// on FF there is a `watch` method that confuses the icon map, so we
// need to use a null-based object here.
var icons=Object.create(null);dom(this).querySelectorAll("[id]").forEach(function(icon){icons[icon.id]=icon});return icons},/**
   * Produce installable clone of the SVG element matching `id` in this
   * iconset, or `undefined` if there is no matching element.
   *
   * @return {Element} Returns an installable clone of the SVG element
   * matching `id`.
   */_cloneIcon:function(id,mirrorAllowed){// create the icon map on-demand, since the iconset itself has no discrete
// signal to know when it's children are fully parsed
this._icons=this._icons||this._createIconMap();return this._prepareSvgClone(this._icons[id],this.size,mirrorAllowed)},/**
   * @param {Element} sourceSvg
   * @param {number} size
   * @param {Boolean} mirrorAllowed
   * @return {Element}
   */_prepareSvgClone:function(sourceSvg,size,mirrorAllowed){if(sourceSvg){var content=sourceSvg.cloneNode(!0),svg=document.createElementNS("http://www.w3.org/2000/svg","svg"),viewBox=content.getAttribute("viewBox")||"0 0 "+size+" "+size,cssText="pointer-events: none; display: block; width: 100%; height: 100%;";if(mirrorAllowed&&content.hasAttribute("mirror-in-rtl")){cssText+="-webkit-transform:scale(-1,1);transform:scale(-1,1);transform-origin:center;"}svg.setAttribute("viewBox",viewBox);svg.setAttribute("preserveAspectRatio","xMidYMid meet");svg.setAttribute("focusable","false");// TODO(dfreedm): `pointer-events: none` works around
// https://crbug.com/370136
// TODO(sjmiles): inline style may not be ideal, but avoids requiring a
// shadow-root
svg.style.cssText=cssText;svg.appendChild(content).removeAttribute("id");return svg}return null}});const template$2=html`<iron-iconset-svg name="icons" size="24">
<svg><defs>
<g id="3d-rotation"><path d="M7.52 21.48C4.25 19.94 1.91 16.76 1.55 13H.05C.56 19.16 5.71 24 12 24l.66-.03-3.81-3.81-1.33 1.32zm.89-6.52c-.19 0-.37-.03-.52-.08-.16-.06-.29-.13-.4-.24-.11-.1-.2-.22-.26-.37-.06-.14-.09-.3-.09-.47h-1.3c0 .36.07.68.21.95.14.27.33.5.56.69.24.18.51.32.82.41.3.1.62.15.96.15.37 0 .72-.05 1.03-.15.32-.1.6-.25.83-.44s.42-.43.55-.72c.13-.29.2-.61.2-.97 0-.19-.02-.38-.07-.56-.05-.18-.12-.35-.23-.51-.1-.16-.24-.3-.4-.43-.17-.13-.37-.23-.61-.31.2-.09.37-.2.52-.33.15-.13.27-.27.37-.42.1-.15.17-.3.22-.46.05-.16.07-.32.07-.48 0-.36-.06-.68-.18-.96-.12-.28-.29-.51-.51-.69-.2-.19-.47-.33-.77-.43C9.1 8.05 8.76 8 8.39 8c-.36 0-.69.05-1 .16-.3.11-.57.26-.79.45-.21.19-.38.41-.51.67-.12.26-.18.54-.18.85h1.3c0-.17.03-.32.09-.45s.14-.25.25-.34c.11-.09.23-.17.38-.22.15-.05.3-.08.48-.08.4 0 .7.1.89.31.19.2.29.49.29.86 0 .18-.03.34-.08.49-.05.15-.14.27-.25.37-.11.1-.25.18-.41.24-.16.06-.36.09-.58.09H7.5v1.03h.77c.22 0 .42.02.6.07s.33.13.45.23c.12.11.22.24.29.4.07.16.1.35.1.57 0 .41-.12.72-.35.93-.23.23-.55.33-.95.33zm8.55-5.92c-.32-.33-.7-.59-1.14-.77-.43-.18-.92-.27-1.46-.27H12v8h2.3c.55 0 1.06-.09 1.51-.27.45-.18.84-.43 1.16-.76.32-.33.57-.73.74-1.19.17-.47.26-.99.26-1.57v-.4c0-.58-.09-1.1-.26-1.57-.18-.47-.43-.87-.75-1.2zm-.39 3.16c0 .42-.05.79-.14 1.13-.1.33-.24.62-.43.85-.19.23-.43.41-.71.53-.29.12-.62.18-.99.18h-.91V9.12h.97c.72 0 1.27.23 1.64.69.38.46.57 1.12.57 1.99v.4zM12 0l-.66.03 3.81 3.81 1.33-1.33c3.27 1.55 5.61 4.72 5.96 8.48h1.5C23.44 4.84 18.29 0 12 0z"></path></g>
<g id="accessibility"><path d="M12 2c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2zm9 7h-6v13h-2v-6h-2v6H9V9H3V7h18v2z"></path></g>
<g id="accessible"><circle cx="12" cy="4" r="2"></circle><path d="M19 13v-2c-1.54.02-3.09-.75-4.07-1.83l-1.29-1.43c-.17-.19-.38-.34-.61-.45-.01 0-.01-.01-.02-.01H13c-.35-.2-.75-.3-1.19-.26C10.76 7.11 10 8.04 10 9.09V15c0 1.1.9 2 2 2h5v5h2v-5.5c0-1.1-.9-2-2-2h-3v-3.45c1.29 1.07 3.25 1.94 5 1.95zm-6.17 5c-.41 1.16-1.52 2-2.83 2-1.66 0-3-1.34-3-3 0-1.31.84-2.41 2-2.83V12.1c-2.28.46-4 2.48-4 4.9 0 2.76 2.24 5 5 5 2.42 0 4.44-1.72 4.9-4h-2.07z"></path></g>
<g id="account-balance"><path d="M4 10v7h3v-7H4zm6 0v7h3v-7h-3zM2 22h19v-3H2v3zm14-12v7h3v-7h-3zm-4.5-9L2 6v2h19V6l-9.5-5z"></path></g>
<g id="account-balance-wallet"><path d="M21 18v1c0 1.1-.9 2-2 2H5c-1.11 0-2-.9-2-2V5c0-1.1.89-2 2-2h14c1.1 0 2 .9 2 2v1h-9c-1.11 0-2 .9-2 2v8c0 1.1.89 2 2 2h9zm-9-2h10V8H12v8zm4-2.5c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"></path></g>
<g id="account-box"><path d="M3 5v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2H5c-1.11 0-2 .9-2 2zm12 4c0 1.66-1.34 3-3 3s-3-1.34-3-3 1.34-3 3-3 3 1.34 3 3zm-9 8c0-2 4-3.1 6-3.1s6 1.1 6 3.1v1H6v-1z"></path></g>
<g id="account-circle"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z"></path></g>
<g id="add"><path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"></path></g>
<g id="add-alert"><path d="M10.01 21.01c0 1.1.89 1.99 1.99 1.99s1.99-.89 1.99-1.99h-3.98zm8.87-4.19V11c0-3.25-2.25-5.97-5.29-6.69v-.72C13.59 2.71 12.88 2 12 2s-1.59.71-1.59 1.59v.72C7.37 5.03 5.12 7.75 5.12 11v5.82L3 18.94V20h18v-1.06l-2.12-2.12zM16 13.01h-3v3h-2v-3H8V11h3V8h2v3h3v2.01z"></path></g>
<g id="add-box"><path d="M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10h-4v4h-2v-4H7v-2h4V7h2v4h4v2z"></path></g>
<g id="add-circle"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z"></path></g>
<g id="add-circle-outline"><path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"></path></g>
<g id="add-shopping-cart"><path d="M11 9h2V6h3V4h-3V1h-2v3H8v2h3v3zm-4 9c-1.1 0-1.99.9-1.99 2S5.9 22 7 22s2-.9 2-2-.9-2-2-2zm10 0c-1.1 0-1.99.9-1.99 2s.89 2 1.99 2 2-.9 2-2-.9-2-2-2zm-9.83-3.25l.03-.12.9-1.63h7.45c.75 0 1.41-.41 1.75-1.03l3.86-7.01L19.42 4h-.01l-1.1 2-2.76 5H8.53l-.13-.27L6.16 6l-.95-2-.94-2H1v2h2l3.6 7.59-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h12v-2H7.42c-.13 0-.25-.11-.25-.25z"></path></g>
<g id="alarm"><path d="M22 5.72l-4.6-3.86-1.29 1.53 4.6 3.86L22 5.72zM7.88 3.39L6.6 1.86 2 5.71l1.29 1.53 4.59-3.85zM12.5 8H11v6l4.75 2.85.75-1.23-4-2.37V8zM12 4c-4.97 0-9 4.03-9 9s4.02 9 9 9c4.97 0 9-4.03 9-9s-4.03-9-9-9zm0 16c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z"></path></g>
<g id="alarm-add"><path d="M7.88 3.39L6.6 1.86 2 5.71l1.29 1.53 4.59-3.85zM22 5.72l-4.6-3.86-1.29 1.53 4.6 3.86L22 5.72zM12 4c-4.97 0-9 4.03-9 9s4.02 9 9 9c4.97 0 9-4.03 9-9s-4.03-9-9-9zm0 16c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7zm1-11h-2v3H8v2h3v3h2v-3h3v-2h-3V9z"></path></g>
<g id="alarm-off"><path d="M12 6c3.87 0 7 3.13 7 7 0 .84-.16 1.65-.43 2.4l1.52 1.52c.58-1.19.91-2.51.91-3.92 0-4.97-4.03-9-9-9-1.41 0-2.73.33-3.92.91L9.6 6.43C10.35 6.16 11.16 6 12 6zm10-.28l-4.6-3.86-1.29 1.53 4.6 3.86L22 5.72zM2.92 2.29L1.65 3.57 2.98 4.9l-1.11.93 1.42 1.42 1.11-.94.8.8C3.83 8.69 3 10.75 3 13c0 4.97 4.02 9 9 9 2.25 0 4.31-.83 5.89-2.2l2.2 2.2 1.27-1.27L3.89 3.27l-.97-.98zm13.55 16.1C15.26 19.39 13.7 20 12 20c-3.87 0-7-3.13-7-7 0-1.7.61-3.26 1.61-4.47l9.86 9.86zM8.02 3.28L6.6 1.86l-.86.71 1.42 1.42.86-.71z"></path></g>
<g id="alarm-on"><path d="M22 5.72l-4.6-3.86-1.29 1.53 4.6 3.86L22 5.72zM7.88 3.39L6.6 1.86 2 5.71l1.29 1.53 4.59-3.85zM12 4c-4.97 0-9 4.03-9 9s4.02 9 9 9c4.97 0 9-4.03 9-9s-4.03-9-9-9zm0 16c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7zm-1.46-5.47L8.41 12.4l-1.06 1.06 3.18 3.18 6-6-1.06-1.06-4.93 4.95z"></path></g>
<g id="all-out"><path d="M16.21 4.16l4 4v-4zm4 12l-4 4h4zm-12 4l-4-4v4zm-4-12l4-4h-4zm12.95-.95c-2.73-2.73-7.17-2.73-9.9 0s-2.73 7.17 0 9.9 7.17 2.73 9.9 0 2.73-7.16 0-9.9zm-1.1 8.8c-2.13 2.13-5.57 2.13-7.7 0s-2.13-5.57 0-7.7 5.57-2.13 7.7 0 2.13 5.57 0 7.7z"></path></g>
<g id="android"><path d="M6 18c0 .55.45 1 1 1h1v3.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5V19h2v3.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5V19h1c.55 0 1-.45 1-1V8H6v10zM3.5 8C2.67 8 2 8.67 2 9.5v7c0 .83.67 1.5 1.5 1.5S5 17.33 5 16.5v-7C5 8.67 4.33 8 3.5 8zm17 0c-.83 0-1.5.67-1.5 1.5v7c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5v-7c0-.83-.67-1.5-1.5-1.5zm-4.97-5.84l1.3-1.3c.2-.2.2-.51 0-.71-.2-.2-.51-.2-.71 0l-1.48 1.48C13.85 1.23 12.95 1 12 1c-.96 0-1.86.23-2.66.63L7.85.15c-.2-.2-.51-.2-.71 0-.2.2-.2.51 0 .71l1.31 1.31C6.97 3.26 6 5.01 6 7h12c0-1.99-.97-3.75-2.47-4.84zM10 5H9V4h1v1zm5 0h-1V4h1v1z"></path></g>
<g id="announcement"><path d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-7 9h-2V5h2v6zm0 4h-2v-2h2v2z"></path></g>
<g id="apps"><path d="M4 8h4V4H4v4zm6 12h4v-4h-4v4zm-6 0h4v-4H4v4zm0-6h4v-4H4v4zm6 0h4v-4h-4v4zm6-10v4h4V4h-4zm-6 4h4V4h-4v4zm6 6h4v-4h-4v4zm0 6h4v-4h-4v4z"></path></g>
<g id="archive"><path d="M20.54 5.23l-1.39-1.68C18.88 3.21 18.47 3 18 3H6c-.47 0-.88.21-1.16.55L3.46 5.23C3.17 5.57 3 6.02 3 6.5V19c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V6.5c0-.48-.17-.93-.46-1.27zM12 17.5L6.5 12H10v-2h4v2h3.5L12 17.5zM5.12 5l.81-1h12l.94 1H5.12z"></path></g>
<g id="arrow-back"><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"></path></g>
<g id="arrow-downward"><path d="M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"></path></g>
<g id="arrow-drop-down"><path d="M7 10l5 5 5-5z"></path></g>
<g id="arrow-drop-down-circle"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 12l-4-4h8l-4 4z"></path></g>
<g id="arrow-drop-up"><path d="M7 14l5-5 5 5z"></path></g>
<g id="arrow-forward"><path d="M12 4l-1.41 1.41L16.17 11H4v2h12.17l-5.58 5.59L12 20l8-8z"></path></g>
<g id="arrow-upward"><path d="M4 12l1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z"></path></g>
<g id="aspect-ratio"><path d="M19 12h-2v3h-3v2h5v-5zM7 9h3V7H5v5h2V9zm14-6H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16.01H3V4.99h18v14.02z"></path></g>
<g id="assessment"><path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path></g>
<g id="assignment"><path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm2 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"></path></g>
<g id="assignment-ind"><path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm0 4c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm6 12H6v-1.4c0-2 4-3.1 6-3.1s6 1.1 6 3.1V19z"></path></g>
<g id="assignment-late"><path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-6 15h-2v-2h2v2zm0-4h-2V8h2v6zm-1-9c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1z"></path></g>
<g id="assignment-return"><path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm4 12h-4v3l-5-5 5-5v3h4v4z"></path></g>
<g id="assignment-returned"><path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm0 15l-5-5h3V9h4v4h3l-5 5z"></path></g>
<g id="assignment-turned-in"><path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm-2 14l-4-4 1.41-1.41L10 14.17l6.59-6.59L18 9l-8 8z"></path></g>
<g id="attachment"><path d="M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5C8.12 15 7 13.88 7 12.5S8.12 10 9.5 10H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z"></path></g>
<g id="autorenew"><path d="M12 6v3l4-4-4-4v3c-4.42 0-8 3.58-8 8 0 1.57.46 3.03 1.24 4.26L6.7 14.8c-.45-.83-.7-1.79-.7-2.8 0-3.31 2.69-6 6-6zm6.76 1.74L17.3 9.2c.44.84.7 1.79.7 2.8 0 3.31-2.69 6-6 6v-3l-4 4 4 4v-3c4.42 0 8-3.58 8-8 0-1.57-.46-3.03-1.24-4.26z"></path></g>
<g id="backspace"><path d="M22 3H7c-.69 0-1.23.35-1.59.88L0 12l5.41 8.11c.36.53.9.89 1.59.89h15c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-3 12.59L17.59 17 14 13.41 10.41 17 9 15.59 12.59 12 9 8.41 10.41 7 14 10.59 17.59 7 19 8.41 15.41 12 19 15.59z"></path></g>
<g id="backup"><path d="M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM14 13v4h-4v-4H7l5-5 5 5h-3z"></path></g>
<g id="block"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM4 12c0-4.42 3.58-8 8-8 1.85 0 3.55.63 4.9 1.69L5.69 16.9C4.63 15.55 4 13.85 4 12zm8 8c-1.85 0-3.55-.63-4.9-1.69L18.31 7.1C19.37 8.45 20 10.15 20 12c0 4.42-3.58 8-8 8z"></path></g>
<g id="book"><path d="M18 2H6c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 4h5v8l-2.5-1.5L6 12V4z"></path></g>
<g id="bookmark"><path d="M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2z"></path></g>
<g id="bookmark-border"><path d="M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2zm0 15l-5-2.18L7 18V5h10v13z"></path></g>
<g id="bug-report"><path d="M20 8h-2.81c-.45-.78-1.07-1.45-1.82-1.96L17 4.41 15.59 3l-2.17 2.17C12.96 5.06 12.49 5 12 5c-.49 0-.96.06-1.41.17L8.41 3 7 4.41l1.62 1.63C7.88 6.55 7.26 7.22 6.81 8H4v2h2.09c-.05.33-.09.66-.09 1v1H4v2h2v1c0 .34.04.67.09 1H4v2h2.81c1.04 1.79 2.97 3 5.19 3s4.15-1.21 5.19-3H20v-2h-2.09c.05-.33.09-.66.09-1v-1h2v-2h-2v-1c0-.34-.04-.67-.09-1H20V8zm-6 8h-4v-2h4v2zm0-4h-4v-2h4v2z"></path></g>
<g id="build"><path d="M22.7 19l-9.1-9.1c.9-2.3.4-5-1.5-6.9-2-2-5-2.4-7.4-1.3L9 6 6 9 1.6 4.7C.4 7.1.9 10.1 2.9 12.1c1.9 1.9 4.6 2.4 6.9 1.5l9.1 9.1c.4.4 1 .4 1.4 0l2.3-2.3c.5-.4.5-1.1.1-1.4z"></path></g>
<g id="cached"><path d="M19 8l-4 4h3c0 3.31-2.69 6-6 6-1.01 0-1.97-.25-2.8-.7l-1.46 1.46C8.97 19.54 10.43 20 12 20c4.42 0 8-3.58 8-8h3l-4-4zM6 12c0-3.31 2.69-6 6-6 1.01 0 1.97.25 2.8.7l1.46-1.46C15.03 4.46 13.57 4 12 4c-4.42 0-8 3.58-8 8H1l4 4 4-4H6z"></path></g>
<g id="camera-enhance"><path d="M9 3L7.17 5H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2h-3.17L15 3H9zm3 15c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-1l1.25-2.75L16 13l-2.75-1.25L12 9l-1.25 2.75L8 13l2.75 1.25z"></path></g>
<g id="cancel"><path d="M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"></path></g>
<g id="card-giftcard"><path d="M20 6h-2.18c.11-.31.18-.65.18-1 0-1.66-1.34-3-3-3-1.05 0-1.96.54-2.5 1.35l-.5.67-.5-.68C10.96 2.54 10.05 2 9 2 7.34 2 6 3.34 6 5c0 .35.07.69.18 1H4c-1.11 0-1.99.89-1.99 2L2 19c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zm-5-2c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zM9 4c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm11 15H4v-2h16v2zm0-5H4V8h5.08L7 10.83 8.62 12 11 8.76l1-1.36 1 1.36L15.38 12 17 10.83 14.92 8H20v6z"></path></g>
<g id="card-membership"><path d="M20 2H4c-1.11 0-2 .89-2 2v11c0 1.11.89 2 2 2h4v5l4-2 4 2v-5h4c1.11 0 2-.89 2-2V4c0-1.11-.89-2-2-2zm0 13H4v-2h16v2zm0-5H4V4h16v6z"></path></g>
<g id="card-travel"><path d="M20 6h-3V4c0-1.11-.89-2-2-2H9c-1.11 0-2 .89-2 2v2H4c-1.11 0-2 .89-2 2v11c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zM9 4h6v2H9V4zm11 15H4v-2h16v2zm0-5H4V8h3v2h2V8h6v2h2V8h3v6z"></path></g>
<g id="change-history"><path d="M12 7.77L18.39 18H5.61L12 7.77M12 4L2 20h20L12 4z"></path></g>
<g id="check"><path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"></path></g>
<g id="check-box"><path d="M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"></path></g>
<g id="check-box-outline-blank"><path d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"></path></g>
<g id="check-circle"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"></path></g>
<g id="chevron-left"><path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"></path></g>
<g id="chevron-right"><path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"></path></g>
<g id="chrome-reader-mode"><path d="M13 12h7v1.5h-7zm0-2.5h7V11h-7zm0 5h7V16h-7zM21 4H3c-1.1 0-2 .9-2 2v13c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 15h-9V6h9v13z"></path></g>
<g id="class"><path d="M18 2H6c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 4h5v8l-2.5-1.5L6 12V4z"></path></g>
<g id="clear"><path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"></path></g>
<g id="close"><path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"></path></g>
<g id="cloud"><path d="M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96z"></path></g>
<g id="cloud-circle"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm4.5 14H8c-1.66 0-3-1.34-3-3s1.34-3 3-3l.14.01C8.58 8.28 10.13 7 12 7c2.21 0 4 1.79 4 4h.5c1.38 0 2.5 1.12 2.5 2.5S17.88 16 16.5 16z"></path></g>
<g id="cloud-done"><path d="M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM10 17l-3.5-3.5 1.41-1.41L10 14.17 15.18 9l1.41 1.41L10 17z"></path></g>
<g id="cloud-download"><path d="M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM17 13l-5 5-5-5h3V9h4v4h3z"></path></g>
<g id="cloud-off"><path d="M19.35 10.04C18.67 6.59 15.64 4 12 4c-1.48 0-2.85.43-4.01 1.17l1.46 1.46C10.21 6.23 11.08 6 12 6c3.04 0 5.5 2.46 5.5 5.5v.5H19c1.66 0 3 1.34 3 3 0 1.13-.64 2.11-1.56 2.62l1.45 1.45C23.16 18.16 24 16.68 24 15c0-2.64-2.05-4.78-4.65-4.96zM3 5.27l2.75 2.74C2.56 8.15 0 10.77 0 14c0 3.31 2.69 6 6 6h11.73l2 2L21 20.73 4.27 4 3 5.27zM7.73 10l8 8H6c-2.21 0-4-1.79-4-4s1.79-4 4-4h1.73z"></path></g>
<g id="cloud-queue"><path d="M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM19 18H6c-2.21 0-4-1.79-4-4s1.79-4 4-4h.71C7.37 7.69 9.48 6 12 6c3.04 0 5.5 2.46 5.5 5.5v.5H19c1.66 0 3 1.34 3 3s-1.34 3-3 3z"></path></g>
<g id="cloud-upload"><path d="M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM14 13v4h-4v-4H7l5-5 5 5h-3z"></path></g>
<g id="code"><path d="M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z"></path></g>
<g id="compare-arrows"><path d="M9.01 14H2v2h7.01v3L13 15l-3.99-4v3zm5.98-1v-3H22V8h-7.01V5L11 9l3.99 4z"></path></g>
<g id="content-copy"><path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z"></path></g>
<g id="content-cut"><path d="M9.64 7.64c.23-.5.36-1.05.36-1.64 0-2.21-1.79-4-4-4S2 3.79 2 6s1.79 4 4 4c.59 0 1.14-.13 1.64-.36L10 12l-2.36 2.36C7.14 14.13 6.59 14 6 14c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4c0-.59-.13-1.14-.36-1.64L12 14l7 7h3v-1L9.64 7.64zM6 8c-1.1 0-2-.89-2-2s.9-2 2-2 2 .89 2 2-.9 2-2 2zm0 12c-1.1 0-2-.89-2-2s.9-2 2-2 2 .89 2 2-.9 2-2 2zm6-7.5c-.28 0-.5-.22-.5-.5s.22-.5.5-.5.5.22.5.5-.22.5-.5.5zM19 3l-6 6 2 2 7-7V3z"></path></g>
<g id="content-paste"><path d="M19 2h-4.18C14.4.84 13.3 0 12 0c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm7 18H5V4h2v3h10V4h2v16z"></path></g>
<g id="copyright"><path d="M10.08 10.86c.05-.33.16-.62.3-.87s.34-.46.59-.62c.24-.15.54-.22.91-.23.23.01.44.05.63.13.2.09.38.21.52.36s.25.33.34.53.13.42.14.64h1.79c-.02-.47-.11-.9-.28-1.29s-.4-.73-.7-1.01-.66-.5-1.08-.66-.88-.23-1.39-.23c-.65 0-1.22.11-1.7.34s-.88.53-1.2.92-.56.84-.71 1.36S8 11.29 8 11.87v.27c0 .58.08 1.12.23 1.64s.39.97.71 1.35.72.69 1.2.91 1.05.34 1.7.34c.47 0 .91-.08 1.32-.23s.77-.36 1.08-.63.56-.58.74-.94.29-.74.3-1.15h-1.79c-.01.21-.06.4-.15.58s-.21.33-.36.46-.32.23-.52.3c-.19.07-.39.09-.6.1-.36-.01-.66-.08-.89-.23-.25-.16-.45-.37-.59-.62s-.25-.55-.3-.88-.08-.67-.08-1v-.27c0-.35.03-.68.08-1.01zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"></path></g>
<g id="create"><path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"></path></g>
<g id="create-new-folder"><path d="M20 6h-8l-2-2H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zm-1 8h-3v3h-2v-3h-3v-2h3V9h2v3h3v2z"></path></g>
<g id="credit-card"><path d="M20 4H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zm0 14H4v-6h16v6zm0-10H4V6h16v2z"></path></g>
<g id="dashboard"><path d="M3 13h8V3H3v10zm0 8h8v-6H3v6zm10 0h8V11h-8v10zm0-18v6h8V3h-8z"></path></g>
<g id="date-range"><path d="M9 11H7v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V9h14v11z"></path></g>
<g id="delete"><path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"></path></g>
<g id="delete-forever"><path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm2.46-7.12l1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4z"></path></g>
<g id="delete-sweep"><path d="M15 16h4v2h-4zm0-8h7v2h-7zm0 4h6v2h-6zM3 18c0 1.1.9 2 2 2h6c1.1 0 2-.9 2-2V8H3v10zM14 5h-3l-1-1H6L5 5H2v2h12z"></path></g>
<g id="description"><path d="M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm2 16H8v-2h8v2zm0-4H8v-2h8v2zm-3-5V3.5L18.5 9H13z"></path></g>
<g id="dns"><path d="M20 13H4c-.55 0-1 .45-1 1v6c0 .55.45 1 1 1h16c.55 0 1-.45 1-1v-6c0-.55-.45-1-1-1zM7 19c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zM20 3H4c-.55 0-1 .45-1 1v6c0 .55.45 1 1 1h16c.55 0 1-.45 1-1V4c0-.55-.45-1-1-1zM7 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z"></path></g>
<g id="done"><path d="M9 16.2L4.8 12l-1.4 1.4L9 19 21 7l-1.4-1.4L9 16.2z"></path></g>
<g id="done-all"><path d="M18 7l-1.41-1.41-6.34 6.34 1.41 1.41L18 7zm4.24-1.41L11.66 16.17 7.48 12l-1.41 1.41L11.66 19l12-12-1.42-1.41zM.41 13.41L6 19l1.41-1.41L1.83 12 .41 13.41z"></path></g>
<g id="donut-large"><path d="M11 5.08V2c-5 .5-9 4.81-9 10s4 9.5 9 10v-3.08c-3-.48-6-3.4-6-6.92s3-6.44 6-6.92zM18.97 11H22c-.47-5-4-8.53-9-9v3.08C16 5.51 18.54 8 18.97 11zM13 18.92V22c5-.47 8.53-4 9-9h-3.03c-.43 3-2.97 5.49-5.97 5.92z"></path></g>
<g id="donut-small"><path d="M11 9.16V2c-5 .5-9 4.79-9 10s4 9.5 9 10v-7.16c-1-.41-2-1.52-2-2.84s1-2.43 2-2.84zM14.86 11H22c-.48-4.75-4-8.53-9-9v7.16c1 .3 1.52.98 1.86 1.84zM13 14.84V22c5-.47 8.52-4.25 9-9h-7.14c-.34.86-.86 1.54-1.86 1.84z"></path></g>
<g id="drafts"><path d="M21.99 8c0-.72-.37-1.35-.94-1.7L12 1 2.95 6.3C2.38 6.65 2 7.28 2 8v10c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2l-.01-10zM12 13L3.74 7.84 12 3l8.26 4.84L12 13z"></path></g>
<g id="eject"><path d="M5 17h14v2H5zm7-12L5.33 15h13.34z"></path></g>
<g id="error"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"></path></g>
<g id="error-outline"><path d="M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"></path></g>
<g id="euro-symbol"><path d="M15 18.5c-2.51 0-4.68-1.42-5.76-3.5H15v-2H8.58c-.05-.33-.08-.66-.08-1s.03-.67.08-1H15V9H9.24C10.32 6.92 12.5 5.5 15 5.5c1.61 0 3.09.59 4.23 1.57L21 5.3C19.41 3.87 17.3 3 15 3c-3.92 0-7.24 2.51-8.48 6H3v2h3.06c-.04.33-.06.66-.06 1 0 .34.02.67.06 1H3v2h3.52c1.24 3.49 4.56 6 8.48 6 2.31 0 4.41-.87 6-2.3l-1.78-1.77c-1.13.98-2.6 1.57-4.22 1.57z"></path></g>
<g id="event"><path d="M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z"></path></g>
<g id="event-seat"><path d="M4 18v3h3v-3h10v3h3v-6H4zm15-8h3v3h-3zM2 10h3v3H2zm15 3H7V5c0-1.1.9-2 2-2h6c1.1 0 2 .9 2 2v8z"></path></g>
<g id="exit-to-app"><path d="M10.09 15.59L11.5 17l5-5-5-5-1.41 1.41L12.67 11H3v2h9.67l-2.58 2.59zM19 3H5c-1.11 0-2 .9-2 2v4h2V5h14v14H5v-4H3v4c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"></path></g>
<g id="expand-less"><path d="M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z"></path></g>
<g id="expand-more"><path d="M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"></path></g>
<g id="explore"><path d="M12 10.9c-.61 0-1.1.49-1.1 1.1s.49 1.1 1.1 1.1c.61 0 1.1-.49 1.1-1.1s-.49-1.1-1.1-1.1zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm2.19 12.19L6 18l3.81-8.19L18 6l-3.81 8.19z"></path></g>
<g id="extension"><path d="M20.5 11H19V7c0-1.1-.9-2-2-2h-4V3.5C13 2.12 11.88 1 10.5 1S8 2.12 8 3.5V5H4c-1.1 0-1.99.9-1.99 2v3.8H3.5c1.49 0 2.7 1.21 2.7 2.7s-1.21 2.7-2.7 2.7H2V20c0 1.1.9 2 2 2h3.8v-1.5c0-1.49 1.21-2.7 2.7-2.7 1.49 0 2.7 1.21 2.7 2.7V22H17c1.1 0 2-.9 2-2v-4h1.5c1.38 0 2.5-1.12 2.5-2.5S21.88 11 20.5 11z"></path></g>
<g id="face"><path d="M9 11.75c-.69 0-1.25.56-1.25 1.25s.56 1.25 1.25 1.25 1.25-.56 1.25-1.25-.56-1.25-1.25-1.25zm6 0c-.69 0-1.25.56-1.25 1.25s.56 1.25 1.25 1.25 1.25-.56 1.25-1.25-.56-1.25-1.25-1.25zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8 0-.29.02-.58.05-.86 2.36-1.05 4.23-2.98 5.21-5.37C11.07 8.33 14.05 10 17.42 10c.78 0 1.53-.09 2.25-.26.21.71.33 1.47.33 2.26 0 4.41-3.59 8-8 8z"></path></g>
<g id="favorite"><path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"></path></g>
<g id="favorite-border"><path d="M16.5 3c-1.74 0-3.41.81-4.5 2.09C10.91 3.81 9.24 3 7.5 3 4.42 3 2 5.42 2 8.5c0 3.78 3.4 6.86 8.55 11.54L12 21.35l1.45-1.32C18.6 15.36 22 12.28 22 8.5 22 5.42 19.58 3 16.5 3zm-4.4 15.55l-.1.1-.1-.1C7.14 14.24 4 11.39 4 8.5 4 6.5 5.5 5 7.5 5c1.54 0 3.04.99 3.57 2.36h1.87C13.46 5.99 14.96 5 16.5 5c2 0 3.5 1.5 3.5 3.5 0 2.89-3.14 5.74-7.9 10.05z"></path></g>
<g id="feedback"><path d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-7 12h-2v-2h2v2zm0-4h-2V6h2v4z"></path></g>
<g id="file-download"><path d="M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z"></path></g>
<g id="file-upload"><path d="M9 16h6v-6h4l-7-7-7 7h4zm-4 2h14v2H5z"></path></g>
<g id="filter-list"><path d="M10 18h4v-2h-4v2zM3 6v2h18V6H3zm3 7h12v-2H6v2z"></path></g>
<g id="find-in-page"><path d="M20 19.59V8l-6-6H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c.45 0 .85-.15 1.19-.4l-4.43-4.43c-.8.52-1.74.83-2.76.83-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5c0 1.02-.31 1.96-.83 2.75L20 19.59zM9 13c0 1.66 1.34 3 3 3s3-1.34 3-3-1.34-3-3-3-3 1.34-3 3z"></path></g>
<g id="find-replace"><path d="M11 6c1.38 0 2.63.56 3.54 1.46L12 10h6V4l-2.05 2.05C14.68 4.78 12.93 4 11 4c-3.53 0-6.43 2.61-6.92 6H6.1c.46-2.28 2.48-4 4.9-4zm5.64 9.14c.66-.9 1.12-1.97 1.28-3.14H15.9c-.46 2.28-2.48 4-4.9 4-1.38 0-2.63-.56-3.54-1.46L10 12H4v6l2.05-2.05C7.32 17.22 9.07 18 11 18c1.55 0 2.98-.51 4.14-1.36L20 21.49 21.49 20l-4.85-4.86z"></path></g>
<g id="fingerprint"><path d="M17.81 4.47c-.08 0-.16-.02-.23-.06C15.66 3.42 14 3 12.01 3c-1.98 0-3.86.47-5.57 1.41-.24.13-.54.04-.68-.2-.13-.24-.04-.55.2-.68C7.82 2.52 9.86 2 12.01 2c2.13 0 3.99.47 6.03 1.52.25.13.34.43.21.67-.09.18-.26.28-.44.28zM3.5 9.72c-.1 0-.2-.03-.29-.09-.23-.16-.28-.47-.12-.7.99-1.4 2.25-2.5 3.75-3.27C9.98 4.04 14 4.03 17.15 5.65c1.5.77 2.76 1.86 3.75 3.25.16.22.11.54-.12.7-.23.16-.54.11-.7-.12-.9-1.26-2.04-2.25-3.39-2.94-2.87-1.47-6.54-1.47-9.4.01-1.36.7-2.5 1.7-3.4 2.96-.08.14-.23.21-.39.21zm6.25 12.07c-.13 0-.26-.05-.35-.15-.87-.87-1.34-1.43-2.01-2.64-.69-1.23-1.05-2.73-1.05-4.34 0-2.97 2.54-5.39 5.66-5.39s5.66 2.42 5.66 5.39c0 .28-.22.5-.5.5s-.5-.22-.5-.5c0-2.42-2.09-4.39-4.66-4.39-2.57 0-4.66 1.97-4.66 4.39 0 1.44.32 2.77.93 3.85.64 1.15 1.08 1.64 1.85 2.42.19.2.19.51 0 .71-.11.1-.24.15-.37.15zm7.17-1.85c-1.19 0-2.24-.3-3.1-.89-1.49-1.01-2.38-2.65-2.38-4.39 0-.28.22-.5.5-.5s.5.22.5.5c0 1.41.72 2.74 1.94 3.56.71.48 1.54.71 2.54.71.24 0 .64-.03 1.04-.1.27-.05.53.13.58.41.05.27-.13.53-.41.58-.57.11-1.07.12-1.21.12zM14.91 22c-.04 0-.09-.01-.13-.02-1.59-.44-2.63-1.03-3.72-2.1-1.4-1.39-2.17-3.24-2.17-5.22 0-1.62 1.38-2.94 3.08-2.94 1.7 0 3.08 1.32 3.08 2.94 0 1.07.93 1.94 2.08 1.94s2.08-.87 2.08-1.94c0-3.77-3.25-6.83-7.25-6.83-2.84 0-5.44 1.58-6.61 4.03-.39.81-.59 1.76-.59 2.8 0 .78.07 2.01.67 3.61.1.26-.03.55-.29.64-.26.1-.55-.04-.64-.29-.49-1.31-.73-2.61-.73-3.96 0-1.2.23-2.29.68-3.24 1.33-2.79 4.28-4.6 7.51-4.6 4.55 0 8.25 3.51 8.25 7.83 0 1.62-1.38 2.94-3.08 2.94s-3.08-1.32-3.08-2.94c0-1.07-.93-1.94-2.08-1.94s-2.08.87-2.08 1.94c0 1.71.66 3.31 1.87 4.51.95.94 1.86 1.46 3.27 1.85.27.07.42.35.35.61-.05.23-.26.38-.47.38z"></path></g>
<g id="first-page"><path d="M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z"></path></g>
<g id="flag"><path d="M14.4 6L14 4H5v17h2v-7h5.6l.4 2h7V6z"></path></g>
<g id="flight-land"><path d="M2.5 19h19v2h-19zm7.18-5.73l4.35 1.16 5.31 1.42c.8.21 1.62-.26 1.84-1.06.21-.8-.26-1.62-1.06-1.84l-5.31-1.42-2.76-9.02L10.12 2v8.28L5.15 8.95l-.93-2.32-1.45-.39v5.17l1.6.43 5.31 1.43z"></path></g>
<g id="flight-takeoff"><path d="M2.5 19h19v2h-19zm19.57-9.36c-.21-.8-1.04-1.28-1.84-1.06L14.92 10l-6.9-6.43-1.93.51 4.14 7.17-4.97 1.33-1.97-1.54-1.45.39 1.82 3.16.77 1.33 1.6-.43 5.31-1.42 4.35-1.16L21 11.49c.81-.23 1.28-1.05 1.07-1.85z"></path></g>
<g id="flip-to-back"><path d="M9 7H7v2h2V7zm0 4H7v2h2v-2zm0-8c-1.11 0-2 .9-2 2h2V3zm4 12h-2v2h2v-2zm6-12v2h2c0-1.1-.9-2-2-2zm-6 0h-2v2h2V3zM9 17v-2H7c0 1.1.89 2 2 2zm10-4h2v-2h-2v2zm0-4h2V7h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zM5 7H3v12c0 1.1.89 2 2 2h12v-2H5V7zm10-2h2V3h-2v2zm0 12h2v-2h-2v2z"></path></g>
<g id="flip-to-front"><path d="M3 13h2v-2H3v2zm0 4h2v-2H3v2zm2 4v-2H3c0 1.1.89 2 2 2zM3 9h2V7H3v2zm12 12h2v-2h-2v2zm4-18H9c-1.11 0-2 .9-2 2v10c0 1.1.89 2 2 2h10c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 12H9V5h10v10zm-8 6h2v-2h-2v2zm-4 0h2v-2H7v2z"></path></g>
<g id="folder"><path d="M10 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2h-8l-2-2z"></path></g>
<g id="folder-open"><path d="M20 6h-8l-2-2H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm0 12H4V8h16v10z"></path></g>
<g id="folder-shared"><path d="M20 6h-8l-2-2H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm-5 3c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2zm4 8h-8v-1c0-1.33 2.67-2 4-2s4 .67 4 2v1z"></path></g>
<g id="font-download"><path d="M9.93 13.5h4.14L12 7.98zM20 2H4c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-4.05 16.5l-1.14-3H9.17l-1.12 3H5.96l5.11-13h1.86l5.11 13h-2.09z"></path></g>
<g id="forward"><path d="M12 8V4l8 8-8 8v-4H4V8z"></path></g>
<g id="fullscreen"><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"></path></g>
<g id="fullscreen-exit"><path d="M5 16h3v3h2v-5H5v2zm3-8H5v2h5V5H8v3zm6 11h2v-3h3v-2h-5v5zm2-11V5h-2v5h5V8h-3z"></path></g>
<g id="g-translate"><path d="M20 5h-9.12L10 2H4c-1.1 0-2 .9-2 2v13c0 1.1.9 2 2 2h7l1 3h8c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zM7.17 14.59c-2.25 0-4.09-1.83-4.09-4.09s1.83-4.09 4.09-4.09c1.04 0 1.99.37 2.74 1.07l.07.06-1.23 1.18-.06-.05c-.29-.27-.78-.59-1.52-.59-1.31 0-2.38 1.09-2.38 2.42s1.07 2.42 2.38 2.42c1.37 0 1.96-.87 2.12-1.46H7.08V9.91h3.95l.01.07c.04.21.05.4.05.61 0 2.35-1.61 4-3.92 4zm6.03-1.71c.33.6.74 1.18 1.19 1.7l-.54.53-.65-2.23zm.77-.76h-.99l-.31-1.04h3.99s-.34 1.31-1.56 2.74c-.52-.62-.89-1.23-1.13-1.7zM21 20c0 .55-.45 1-1 1h-7l2-2-.81-2.77.92-.92L17.79 18l.73-.73-2.71-2.68c.9-1.03 1.6-2.25 1.92-3.51H19v-1.04h-3.64V9h-1.04v1.04h-1.96L11.18 6H20c.55 0 1 .45 1 1v13z"></path></g>
<g id="gavel"><path d="M1 21h12v2H1zM5.245 8.07l2.83-2.827 14.14 14.142-2.828 2.828zM12.317 1l5.657 5.656-2.83 2.83-5.654-5.66zM3.825 9.485l5.657 5.657-2.828 2.828-5.657-5.657z"></path></g>
<g id="gesture"><path d="M4.59 6.89c.7-.71 1.4-1.35 1.71-1.22.5.2 0 1.03-.3 1.52-.25.42-2.86 3.89-2.86 6.31 0 1.28.48 2.34 1.34 2.98.75.56 1.74.73 2.64.46 1.07-.31 1.95-1.4 3.06-2.77 1.21-1.49 2.83-3.44 4.08-3.44 1.63 0 1.65 1.01 1.76 1.79-3.78.64-5.38 3.67-5.38 5.37 0 1.7 1.44 3.09 3.21 3.09 1.63 0 4.29-1.33 4.69-6.1H21v-2.5h-2.47c-.15-1.65-1.09-4.2-4.03-4.2-2.25 0-4.18 1.91-4.94 2.84-.58.73-2.06 2.48-2.29 2.72-.25.3-.68.84-1.11.84-.45 0-.72-.83-.36-1.92.35-1.09 1.4-2.86 1.85-3.52.78-1.14 1.3-1.92 1.3-3.28C8.95 3.69 7.31 3 6.44 3 5.12 3 3.97 4 3.72 4.25c-.36.36-.66.66-.88.93l1.75 1.71zm9.29 11.66c-.31 0-.74-.26-.74-.72 0-.6.73-2.2 2.87-2.76-.3 2.69-1.43 3.48-2.13 3.48z"></path></g>
<g id="get-app"><path d="M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z"></path></g>
<g id="gif"><path d="M11.5 9H13v6h-1.5zM9 9H6c-.6 0-1 .5-1 1v4c0 .5.4 1 1 1h3c.6 0 1-.5 1-1v-2H8.5v1.5h-2v-3H10V10c0-.5-.4-1-1-1zm10 1.5V9h-4.5v6H16v-2h2v-1.5h-2v-1z"></path></g>
<g id="grade"><path d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"></path></g>
<g id="group-work"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM8 17.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5zM9.5 8c0-1.38 1.12-2.5 2.5-2.5s2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5S9.5 9.38 9.5 8zm6.5 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z"></path></g>
<g id="help"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z"></path></g>
<g id="help-outline"><path d="M11 18h2v-2h-2v2zm1-16C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm0-14c-2.21 0-4 1.79-4 4h2c0-1.1.9-2 2-2s2 .9 2 2c0 2-3 1.75-3 5h2c0-2.25 3-2.5 3-5 0-2.21-1.79-4-4-4z"></path></g>
<g id="highlight-off"><path d="M14.59 8L12 10.59 9.41 8 8 9.41 10.59 12 8 14.59 9.41 16 12 13.41 14.59 16 16 14.59 13.41 12 16 9.41 14.59 8zM12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"></path></g>
<g id="history"><path d="M13 3c-4.97 0-9 4.03-9 9H1l3.89 3.89.07.14L9 12H6c0-3.87 3.13-7 7-7s7 3.13 7 7-3.13 7-7 7c-1.93 0-3.68-.79-4.94-2.06l-1.42 1.42C8.27 19.99 10.51 21 13 21c4.97 0 9-4.03 9-9s-4.03-9-9-9zm-1 5v5l4.28 2.54.72-1.21-3.5-2.08V8H12z"></path></g>
<g id="home"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"></path></g>
<g id="hourglass-empty"><path d="M6 2v6h.01L6 8.01 10 12l-4 4 .01.01H6V22h12v-5.99h-.01L18 16l-4-4 4-3.99-.01-.01H18V2H6zm10 14.5V20H8v-3.5l4-4 4 4zm-4-5l-4-4V4h8v3.5l-4 4z"></path></g>
<g id="hourglass-full"><path d="M6 2v6h.01L6 8.01 10 12l-4 4 .01.01H6V22h12v-5.99h-.01L18 16l-4-4 4-3.99-.01-.01H18V2H6z"></path></g>
<g id="http"><path d="M4.5 11h-2V9H1v6h1.5v-2.5h2V15H6V9H4.5v2zm2.5-.5h1.5V15H10v-4.5h1.5V9H7v1.5zm5.5 0H14V15h1.5v-4.5H17V9h-4.5v1.5zm9-1.5H18v6h1.5v-2h2c.8 0 1.5-.7 1.5-1.5v-1c0-.8-.7-1.5-1.5-1.5zm0 2.5h-2v-1h2v1z"></path></g>
<g id="https"><path d="M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z"></path></g>
<g id="important-devices"><path d="M23 11.01L18 11c-.55 0-1 .45-1 1v9c0 .55.45 1 1 1h5c.55 0 1-.45 1-1v-9c0-.55-.45-.99-1-.99zM23 20h-5v-7h5v7zM20 2H2C.89 2 0 2.89 0 4v12c0 1.1.89 2 2 2h7v2H7v2h8v-2h-2v-2h2v-2H2V4h18v5h2V4c0-1.11-.9-2-2-2zm-8.03 7L11 6l-.97 3H7l2.47 1.76-.94 2.91 2.47-1.8 2.47 1.8-.94-2.91L15 9h-3.03z"></path></g>
<g id="inbox"><path d="M19 3H4.99c-1.11 0-1.98.89-1.98 2L3 19c0 1.1.88 2 1.99 2H19c1.1 0 2-.9 2-2V5c0-1.11-.9-2-2-2zm0 12h-4c0 1.66-1.35 3-3 3s-3-1.34-3-3H4.99V5H19v10z"></path></g>
<g id="indeterminate-check-box"><path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"></path></g>
<g id="info"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"></path></g>
<g id="info-outline"><path d="M11 17h2v-6h-2v6zm1-15C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zM11 9h2V7h-2v2z"></path></g>
<g id="input"><path d="M21 3.01H3c-1.1 0-2 .9-2 2V9h2V4.99h18v14.03H3V15H1v4.01c0 1.1.9 1.98 2 1.98h18c1.1 0 2-.88 2-1.98v-14c0-1.11-.9-2-2-2zM11 16l4-4-4-4v3H1v2h10v3z"></path></g>
<g id="invert-colors"><path d="M17.66 7.93L12 2.27 6.34 7.93c-3.12 3.12-3.12 8.19 0 11.31C7.9 20.8 9.95 21.58 12 21.58c2.05 0 4.1-.78 5.66-2.34 3.12-3.12 3.12-8.19 0-11.31zM12 19.59c-1.6 0-3.11-.62-4.24-1.76C6.62 16.69 6 15.19 6 13.59s.62-3.11 1.76-4.24L12 5.1v14.49z"></path></g>
<g id="label"><path d="M17.63 5.84C17.27 5.33 16.67 5 16 5L5 5.01C3.9 5.01 3 5.9 3 7v10c0 1.1.9 1.99 2 1.99L16 19c.67 0 1.27-.33 1.63-.84L22 12l-4.37-6.16z"></path></g>
<g id="label-outline"><path d="M17.63 5.84C17.27 5.33 16.67 5 16 5L5 5.01C3.9 5.01 3 5.9 3 7v10c0 1.1.9 1.99 2 1.99L16 19c.67 0 1.27-.33 1.63-.84L22 12l-4.37-6.16zM16 17H5V7h11l3.55 5L16 17z"></path></g>
<g id="language"><path d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zm6.93 6h-2.95c-.32-1.25-.78-2.45-1.38-3.56 1.84.63 3.37 1.91 4.33 3.56zM12 4.04c.83 1.2 1.48 2.53 1.91 3.96h-3.82c.43-1.43 1.08-2.76 1.91-3.96zM4.26 14C4.1 13.36 4 12.69 4 12s.1-1.36.26-2h3.38c-.08.66-.14 1.32-.14 2 0 .68.06 1.34.14 2H4.26zm.82 2h2.95c.32 1.25.78 2.45 1.38 3.56-1.84-.63-3.37-1.9-4.33-3.56zm2.95-8H5.08c.96-1.66 2.49-2.93 4.33-3.56C8.81 5.55 8.35 6.75 8.03 8zM12 19.96c-.83-1.2-1.48-2.53-1.91-3.96h3.82c-.43 1.43-1.08 2.76-1.91 3.96zM14.34 14H9.66c-.09-.66-.16-1.32-.16-2 0-.68.07-1.35.16-2h4.68c.09.65.16 1.32.16 2 0 .68-.07 1.34-.16 2zm.25 5.56c.6-1.11 1.06-2.31 1.38-3.56h2.95c-.96 1.65-2.49 2.93-4.33 3.56zM16.36 14c.08-.66.14-1.32.14-2 0-.68-.06-1.34-.14-2h3.38c.16.64.26 1.31.26 2s-.1 1.36-.26 2h-3.38z"></path></g>
<g id="last-page"><path d="M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z"></path></g>
<g id="launch"><path d="M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z"></path></g>
<g id="lightbulb-outline"><path d="M9 21c0 .55.45 1 1 1h4c.55 0 1-.45 1-1v-1H9v1zm3-19C8.14 2 5 5.14 5 9c0 2.38 1.19 4.47 3 5.74V17c0 .55.45 1 1 1h6c.55 0 1-.45 1-1v-2.26c1.81-1.27 3-3.36 3-5.74 0-3.86-3.14-7-7-7zm2.85 11.1l-.85.6V16h-4v-2.3l-.85-.6C7.8 12.16 7 10.63 7 9c0-2.76 2.24-5 5-5s5 2.24 5 5c0 1.63-.8 3.16-2.15 4.1z"></path></g>
<g id="line-style"><path d="M3 16h5v-2H3v2zm6.5 0h5v-2h-5v2zm6.5 0h5v-2h-5v2zM3 20h2v-2H3v2zm4 0h2v-2H7v2zm4 0h2v-2h-2v2zm4 0h2v-2h-2v2zm4 0h2v-2h-2v2zM3 12h8v-2H3v2zm10 0h8v-2h-8v2zM3 4v4h18V4H3z"></path></g>
<g id="line-weight"><path d="M3 17h18v-2H3v2zm0 3h18v-1H3v1zm0-7h18v-3H3v3zm0-9v4h18V4H3z"></path></g>
<g id="link"><path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z"></path></g>
<g id="list"><path d="M3 13h2v-2H3v2zm0 4h2v-2H3v2zm0-8h2V7H3v2zm4 4h14v-2H7v2zm0 4h14v-2H7v2zM7 7v2h14V7H7z"></path></g>
<g id="lock"><path d="M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z"></path></g>
<g id="lock-open"><path d="M12 17c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm6-9h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6h1.9c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm0 12H6V10h12v10z"></path></g>
<g id="lock-outline"><path d="M12 17c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm6-9h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zM8.9 6c0-1.71 1.39-3.1 3.1-3.1s3.1 1.39 3.1 3.1v2H8.9V6zM18 20H6V10h12v10z"></path></g>
<g id="low-priority"><path d="M14 5h8v2h-8zm0 5.5h8v2h-8zm0 5.5h8v2h-8zM2 11.5C2 15.08 4.92 18 8.5 18H9v2l3-3-3-3v2h-.5C6.02 16 4 13.98 4 11.5S6.02 7 8.5 7H12V5H8.5C4.92 5 2 7.92 2 11.5z"></path></g>
<g id="loyalty"><path d="M21.41 11.58l-9-9C12.05 2.22 11.55 2 11 2H4c-1.1 0-2 .9-2 2v7c0 .55.22 1.05.59 1.42l9 9c.36.36.86.58 1.41.58.55 0 1.05-.22 1.41-.59l7-7c.37-.36.59-.86.59-1.41 0-.55-.23-1.06-.59-1.42zM5.5 7C4.67 7 4 6.33 4 5.5S4.67 4 5.5 4 7 4.67 7 5.5 6.33 7 5.5 7zm11.77 8.27L13 19.54l-4.27-4.27C8.28 14.81 8 14.19 8 13.5c0-1.38 1.12-2.5 2.5-2.5.69 0 1.32.28 1.77.74l.73.72.73-.73c.45-.45 1.08-.73 1.77-.73 1.38 0 2.5 1.12 2.5 2.5 0 .69-.28 1.32-.73 1.77z"></path></g>
<g id="mail"><path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"></path></g>
<g id="markunread"><path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"></path></g>
<g id="markunread-mailbox"><path d="M20 6H10v6H8V4h6V0H6v6H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2z"></path></g>
<g id="menu"><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"></path></g>
<g id="more-horiz"><path d="M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"></path></g>
<g id="more-vert"><path d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"></path></g>
<g id="motorcycle"><path d="M19.44 9.03L15.41 5H11v2h3.59l2 2H5c-2.8 0-5 2.2-5 5s2.2 5 5 5c2.46 0 4.45-1.69 4.9-4h1.65l2.77-2.77c-.21.54-.32 1.14-.32 1.77 0 2.8 2.2 5 5 5s5-2.2 5-5c0-2.65-1.97-4.77-4.56-4.97zM7.82 15C7.4 16.15 6.28 17 5 17c-1.63 0-3-1.37-3-3s1.37-3 3-3c1.28 0 2.4.85 2.82 2H5v2h2.82zM19 17c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3z"></path></g>
<g id="move-to-inbox"><path d="M19 3H4.99c-1.11 0-1.98.9-1.98 2L3 19c0 1.1.88 2 1.99 2H19c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 12h-4c0 1.66-1.35 3-3 3s-3-1.34-3-3H4.99V5H19v10zm-3-5h-2V7h-4v3H8l4 4 4-4z"></path></g>
<g id="next-week"><path d="M20 7h-4V5c0-.55-.22-1.05-.59-1.41C15.05 3.22 14.55 3 14 3h-4c-1.1 0-2 .9-2 2v2H4c-1.1 0-2 .9-2 2v11c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V9c0-1.1-.9-2-2-2zM10 5h4v2h-4V5zm1 13.5l-1-1 3-3-3-3 1-1 4 4-4 4z"></path></g>
<g id="note-add"><path d="M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm2 14h-3v3h-2v-3H8v-2h3v-3h2v3h3v2zm-3-7V3.5L18.5 9H13z"></path></g>
<g id="offline-pin"><path d="M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zm5 16H7v-2h10v2zm-6.7-4L7 10.7l1.4-1.4 1.9 1.9 5.3-5.3L17 7.3 10.3 14z"></path></g>
<g id="opacity"><path d="M17.66 8L12 2.35 6.34 8C4.78 9.56 4 11.64 4 13.64s.78 4.11 2.34 5.67 3.61 2.35 5.66 2.35 4.1-.79 5.66-2.35S20 15.64 20 13.64 19.22 9.56 17.66 8zM6 14c.01-2 .62-3.27 1.76-4.4L12 5.27l4.24 4.38C17.38 10.77 17.99 12 18 14H6z"></path></g>
<g id="open-in-browser"><path d="M19 4H5c-1.11 0-2 .9-2 2v12c0 1.1.89 2 2 2h4v-2H5V8h14v10h-4v2h4c1.1 0 2-.9 2-2V6c0-1.1-.89-2-2-2zm-7 6l-4 4h3v6h2v-6h3l-4-4z"></path></g>
<g id="open-in-new"><path d="M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z"></path></g>
<g id="open-with"><path d="M10 9h4V6h3l-5-5-5 5h3v3zm-1 1H6V7l-5 5 5 5v-3h3v-4zm14 2l-5-5v3h-3v4h3v3l5-5zm-9 3h-4v3H7l5 5 5-5h-3v-3z"></path></g>
<g id="pageview"><path d="M11.5 9C10.12 9 9 10.12 9 11.5s1.12 2.5 2.5 2.5 2.5-1.12 2.5-2.5S12.88 9 11.5 9zM20 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-3.21 14.21l-2.91-2.91c-.69.44-1.51.7-2.39.7C9.01 16 7 13.99 7 11.5S9.01 7 11.5 7 16 9.01 16 11.5c0 .88-.26 1.69-.7 2.39l2.91 2.9-1.42 1.42z"></path></g>
<g id="pan-tool"><path d="M23 5.5V20c0 2.2-1.8 4-4 4h-7.3c-1.08 0-2.1-.43-2.85-1.19L1 14.83s1.26-1.23 1.3-1.25c.22-.19.49-.29.79-.29.22 0 .42.06.6.16.04.01 4.31 2.46 4.31 2.46V4c0-.83.67-1.5 1.5-1.5S11 3.17 11 4v7h1V1.5c0-.83.67-1.5 1.5-1.5S15 .67 15 1.5V11h1V2.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V11h1V5.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5z"></path></g>
<g id="payment"><path d="M20 4H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zm0 14H4v-6h16v6zm0-10H4V6h16v2z"></path></g>
<g id="perm-camera-mic"><path d="M20 5h-3.17L15 3H9L7.17 5H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h7v-2.09c-2.83-.48-5-2.94-5-5.91h2c0 2.21 1.79 4 4 4s4-1.79 4-4h2c0 2.97-2.17 5.43-5 5.91V21h7c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm-6 8c0 1.1-.9 2-2 2s-2-.9-2-2V9c0-1.1.9-2 2-2s2 .9 2 2v4z"></path></g>
<g id="perm-contact-calendar"><path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm6 12H6v-1c0-2 4-3.1 6-3.1s6 1.1 6 3.1v1z"></path></g>
<g id="perm-data-setting"><path d="M18.99 11.5c.34 0 .67.03 1 .07L20 0 0 20h11.56c-.04-.33-.07-.66-.07-1 0-4.14 3.36-7.5 7.5-7.5zm3.71 7.99c.02-.16.04-.32.04-.49 0-.17-.01-.33-.04-.49l1.06-.83c.09-.08.12-.21.06-.32l-1-1.73c-.06-.11-.19-.15-.31-.11l-1.24.5c-.26-.2-.54-.37-.85-.49l-.19-1.32c-.01-.12-.12-.21-.24-.21h-2c-.12 0-.23.09-.25.21l-.19 1.32c-.3.13-.59.29-.85.49l-1.24-.5c-.11-.04-.24 0-.31.11l-1 1.73c-.06.11-.04.24.06.32l1.06.83c-.02.16-.03.32-.03.49 0 .17.01.33.03.49l-1.06.83c-.09.08-.12.21-.06.32l1 1.73c.06.11.19.15.31.11l1.24-.5c.26.2.54.37.85.49l.19 1.32c.02.12.12.21.25.21h2c.12 0 .23-.09.25-.21l.19-1.32c.3-.13.59-.29.84-.49l1.25.5c.11.04.24 0 .31-.11l1-1.73c.06-.11.03-.24-.06-.32l-1.07-.83zm-3.71 1.01c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"></path></g>
<g id="perm-device-information"><path d="M13 7h-2v2h2V7zm0 4h-2v6h2v-6zm4-9.99L7 1c-1.1 0-2 .9-2 2v18c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V3c0-1.1-.9-1.99-2-1.99zM17 19H7V5h10v14z"></path></g>
<g id="perm-identity"><path d="M12 5.9c1.16 0 2.1.94 2.1 2.1s-.94 2.1-2.1 2.1S9.9 9.16 9.9 8s.94-2.1 2.1-2.1m0 9c2.97 0 6.1 1.46 6.1 2.1v1.1H5.9V17c0-.64 3.13-2.1 6.1-2.1M12 4C9.79 4 8 5.79 8 8s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm0 9c-2.67 0-8 1.34-8 4v3h16v-3c0-2.66-5.33-4-8-4z"></path></g>
<g id="perm-media"><path d="M2 6H0v5h.01L0 20c0 1.1.9 2 2 2h18v-2H2V6zm20-2h-8l-2-2H6c-1.1 0-1.99.9-1.99 2L4 16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zM7 15l4.5-6 3.5 4.51 2.5-3.01L21 15H7z"></path></g>
<g id="perm-phone-msg"><path d="M20 15.5c-1.25 0-2.45-.2-3.57-.57-.35-.11-.74-.03-1.02.24l-2.2 2.2c-2.83-1.44-5.15-3.75-6.59-6.58l2.2-2.21c.28-.27.36-.66.25-1.01C8.7 6.45 8.5 5.25 8.5 4c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1 0 9.39 7.61 17 17 17 .55 0 1-.45 1-1v-3.5c0-.55-.45-1-1-1zM12 3v10l3-3h6V3h-9z"></path></g>
<g id="perm-scan-wifi"><path d="M12 3C6.95 3 3.15 4.85 0 7.23L12 22 24 7.25C20.85 4.87 17.05 3 12 3zm1 13h-2v-6h2v6zm-2-8V6h2v2h-2z"></path></g>
<g id="pets"><circle cx="4.5" cy="9.5" r="2.5"></circle><circle cx="9" cy="5.5" r="2.5"></circle><circle cx="15" cy="5.5" r="2.5"></circle><circle cx="19.5" cy="9.5" r="2.5"></circle><path d="M17.34 14.86c-.87-1.02-1.6-1.89-2.48-2.91-.46-.54-1.05-1.08-1.75-1.32-.11-.04-.22-.07-.33-.09-.25-.04-.52-.04-.78-.04s-.53 0-.79.05c-.11.02-.22.05-.33.09-.7.24-1.28.78-1.75 1.32-.87 1.02-1.6 1.89-2.48 2.91-1.31 1.31-2.92 2.76-2.62 4.79.29 1.02 1.02 2.03 2.33 2.32.73.15 3.06-.44 5.54-.44h.18c2.48 0 4.81.58 5.54.44 1.31-.29 2.04-1.31 2.33-2.32.31-2.04-1.3-3.49-2.61-4.8z"></path></g>
<g id="picture-in-picture"><path d="M19 7h-8v6h8V7zm2-4H3c-1.1 0-2 .9-2 2v14c0 1.1.9 1.98 2 1.98h18c1.1 0 2-.88 2-1.98V5c0-1.1-.9-2-2-2zm0 16.01H3V4.98h18v14.03z"></path></g>
<g id="picture-in-picture-alt"><path d="M19 11h-8v6h8v-6zm4 8V4.98C23 3.88 22.1 3 21 3H3c-1.1 0-2 .88-2 1.98V19c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2zm-2 .02H3V4.97h18v14.05z"></path></g>
<g id="play-for-work"><path d="M11 5v5.59H7.5l4.5 4.5 4.5-4.5H13V5h-2zm-5 9c0 3.31 2.69 6 6 6s6-2.69 6-6h-2c0 2.21-1.79 4-4 4s-4-1.79-4-4H6z"></path></g>
<g id="polymer"><path d="M19 4h-4L7.11 16.63 4.5 12 9 4H5L.5 12 5 20h4l7.89-12.63L19.5 12 15 20h4l4.5-8z"></path></g>
<g id="power-settings-new"><path d="M13 3h-2v10h2V3zm4.83 2.17l-1.42 1.42C17.99 7.86 19 9.81 19 12c0 3.87-3.13 7-7 7s-7-3.13-7-7c0-2.19 1.01-4.14 2.58-5.42L6.17 5.17C4.23 6.82 3 9.26 3 12c0 4.97 4.03 9 9 9s9-4.03 9-9c0-2.74-1.23-5.18-3.17-6.83z"></path></g>
<g id="pregnant-woman"><path d="M9 4c0-1.11.89-2 2-2s2 .89 2 2-.89 2-2 2-2-.89-2-2zm7 9c-.01-1.34-.83-2.51-2-3 0-1.66-1.34-3-3-3s-3 1.34-3 3v7h2v5h3v-5h3v-4z"></path></g>
<g id="print"><path d="M19 8H5c-1.66 0-3 1.34-3 3v6h4v4h12v-4h4v-6c0-1.66-1.34-3-3-3zm-3 11H8v-5h8v5zm3-7c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm-1-9H6v4h12V3z"></path></g>
<g id="query-builder"><path d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm.5-13H11v6l5.25 3.15.75-1.23-4.5-2.67z"></path></g>
<g id="question-answer"><path d="M21 6h-2v9H6v2c0 .55.45 1 1 1h11l4 4V7c0-.55-.45-1-1-1zm-4 6V3c0-.55-.45-1-1-1H3c-.55 0-1 .45-1 1v14l4-4h10c.55 0 1-.45 1-1z"></path></g>
<g id="radio-button-checked"><path d="M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zm0-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"></path></g>
<g id="radio-button-unchecked"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"></path></g>
<g id="receipt"><path d="M18 17H6v-2h12v2zm0-4H6v-2h12v2zm0-4H6V7h12v2zM3 22l1.5-1.5L6 22l1.5-1.5L9 22l1.5-1.5L12 22l1.5-1.5L15 22l1.5-1.5L18 22l1.5-1.5L21 22V2l-1.5 1.5L18 2l-1.5 1.5L15 2l-1.5 1.5L12 2l-1.5 1.5L9 2 7.5 3.5 6 2 4.5 3.5 3 2v20z"></path></g>
<g id="record-voice-over"><circle cx="9" cy="9" r="4"></circle><path d="M9 15c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4zm7.76-9.64l-1.68 1.69c.84 1.18.84 2.71 0 3.89l1.68 1.69c2.02-2.02 2.02-5.07 0-7.27zM20.07 2l-1.63 1.63c2.77 3.02 2.77 7.56 0 10.74L20.07 16c3.9-3.89 3.91-9.95 0-14z"></path></g>
<g id="redeem"><path d="M20 6h-2.18c.11-.31.18-.65.18-1 0-1.66-1.34-3-3-3-1.05 0-1.96.54-2.5 1.35l-.5.67-.5-.68C10.96 2.54 10.05 2 9 2 7.34 2 6 3.34 6 5c0 .35.07.69.18 1H4c-1.11 0-1.99.89-1.99 2L2 19c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zm-5-2c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zM9 4c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm11 15H4v-2h16v2zm0-5H4V8h5.08L7 10.83 8.62 12 11 8.76l1-1.36 1 1.36L15.38 12 17 10.83 14.92 8H20v6z"></path></g>
<g id="redo"><path d="M18.4 10.6C16.55 8.99 14.15 8 11.5 8c-4.65 0-8.58 3.03-9.96 7.22L3.9 16c1.05-3.19 4.05-5.5 7.6-5.5 1.95 0 3.73.72 5.12 1.88L13 16h9V7l-3.6 3.6z"></path></g>
<g id="refresh"><path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"></path></g>
<g id="remove"><path d="M19 13H5v-2h14v2z"></path></g>
<g id="remove-circle"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11H7v-2h10v2z"></path></g>
<g id="remove-circle-outline"><path d="M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"></path></g>
<g id="remove-shopping-cart"><path d="M22.73 22.73L2.77 2.77 2 2l-.73-.73L0 2.54l4.39 4.39 2.21 4.66-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h7.46l1.38 1.38c-.5.36-.83.95-.83 1.62 0 1.1.89 2 1.99 2 .67 0 1.26-.33 1.62-.84L21.46 24l1.27-1.27zM7.42 15c-.14 0-.25-.11-.25-.25l.03-.12.9-1.63h2.36l2 2H7.42zm8.13-2c.75 0 1.41-.41 1.75-1.03l3.58-6.49c.08-.14.12-.31.12-.48 0-.55-.45-1-1-1H6.54l9.01 9zM7 18c-1.1 0-1.99.9-1.99 2S5.9 22 7 22s2-.9 2-2-.9-2-2-2z"></path></g>
<g id="reorder"><path d="M3 15h18v-2H3v2zm0 4h18v-2H3v2zm0-8h18V9H3v2zm0-6v2h18V5H3z"></path></g>
<g id="reply"><path d="M10 9V5l-7 7 7 7v-4.1c5 0 8.5 1.6 11 5.1-1-5-4-10-11-11z"></path></g>
<g id="reply-all"><path d="M7 8V5l-7 7 7 7v-3l-4-4 4-4zm6 1V5l-7 7 7 7v-4.1c5 0 8.5 1.6 11 5.1-1-5-4-10-11-11z"></path></g>
<g id="report"><path d="M15.73 3H8.27L3 8.27v7.46L8.27 21h7.46L21 15.73V8.27L15.73 3zM12 17.3c-.72 0-1.3-.58-1.3-1.3 0-.72.58-1.3 1.3-1.3.72 0 1.3.58 1.3 1.3 0 .72-.58 1.3-1.3 1.3zm1-4.3h-2V7h2v6z"></path></g>
<g id="report-problem"><path d="M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"></path></g>
<g id="restore"><path d="M13 3c-4.97 0-9 4.03-9 9H1l3.89 3.89.07.14L9 12H6c0-3.87 3.13-7 7-7s7 3.13 7 7-3.13 7-7 7c-1.93 0-3.68-.79-4.94-2.06l-1.42 1.42C8.27 19.99 10.51 21 13 21c4.97 0 9-4.03 9-9s-4.03-9-9-9zm-1 5v5l4.28 2.54.72-1.21-3.5-2.08V8H12z"></path></g>
<g id="restore-page"><path d="M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm-2 16c-2.05 0-3.81-1.24-4.58-3h1.71c.63.9 1.68 1.5 2.87 1.5 1.93 0 3.5-1.57 3.5-3.5S13.93 9.5 12 9.5c-1.35 0-2.52.78-3.1 1.9l1.6 1.6h-4V9l1.3 1.3C8.69 8.92 10.23 8 12 8c2.76 0 5 2.24 5 5s-2.24 5-5 5z"></path></g>
<g id="room"><path d="M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z"></path></g>
<g id="rounded-corner"><path d="M19 19h2v2h-2v-2zm0-2h2v-2h-2v2zM3 13h2v-2H3v2zm0 4h2v-2H3v2zm0-8h2V7H3v2zm0-4h2V3H3v2zm4 0h2V3H7v2zm8 16h2v-2h-2v2zm-4 0h2v-2h-2v2zm4 0h2v-2h-2v2zm-8 0h2v-2H7v2zm-4 0h2v-2H3v2zM21 8c0-2.76-2.24-5-5-5h-5v2h5c1.65 0 3 1.35 3 3v5h2V8z"></path></g>
<g id="rowing"><path d="M8.5 14.5L4 19l1.5 1.5L9 17h2l-2.5-2.5zM15 1c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 20.01L18 24l-2.99-3.01V19.5l-7.1-7.09c-.31.05-.61.07-.91.07v-2.16c1.66.03 3.61-.87 4.67-2.04l1.4-1.55c.19-.21.43-.38.69-.5.29-.14.62-.23.96-.23h.03C15.99 6.01 17 7.02 17 8.26v5.75c0 .84-.35 1.61-.92 2.16l-3.58-3.58v-2.27c-.63.52-1.43 1.02-2.29 1.39L16.5 18H18l3 3.01z"></path></g>
<g id="save"><path d="M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z"></path></g>
<g id="schedule"><path d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm.5-13H11v6l5.25 3.15.75-1.23-4.5-2.67z"></path></g>
<g id="search"><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"></path></g>
<g id="select-all"><path d="M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2zM7 17h10V7H7v10zm2-8h6v6H9V9z"></path></g>
<g id="send"><path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"></path></g>
<g id="settings"><path d="M19.43 12.98c.04-.32.07-.64.07-.98s-.03-.66-.07-.98l2.11-1.65c.19-.15.24-.42.12-.64l-2-3.46c-.12-.22-.39-.3-.61-.22l-2.49 1c-.52-.4-1.08-.73-1.69-.98l-.38-2.65C14.46 2.18 14.25 2 14 2h-4c-.25 0-.46.18-.49.42l-.38 2.65c-.61.25-1.17.59-1.69.98l-2.49-1c-.23-.09-.49 0-.61.22l-2 3.46c-.13.22-.07.49.12.64l2.11 1.65c-.04.32-.07.65-.07.98s.03.66.07.98l-2.11 1.65c-.19.15-.24.42-.12.64l2 3.46c.12.22.39.3.61.22l2.49-1c.52.4 1.08.73 1.69.98l.38 2.65c.03.24.24.42.49.42h4c.25 0 .46-.18.49-.42l.38-2.65c.61-.25 1.17-.59 1.69-.98l2.49 1c.23.09.49 0 .61-.22l2-3.46c.12-.22.07-.49-.12-.64l-2.11-1.65zM12 15.5c-1.93 0-3.5-1.57-3.5-3.5s1.57-3.5 3.5-3.5 3.5 1.57 3.5 3.5-1.57 3.5-3.5 3.5z"></path></g>
<g id="settings-applications"><path d="M12 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm7-7H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-1.75 9c0 .23-.02.46-.05.68l1.48 1.16c.13.11.17.3.08.45l-1.4 2.42c-.09.15-.27.21-.43.15l-1.74-.7c-.36.28-.76.51-1.18.69l-.26 1.85c-.03.17-.18.3-.35.3h-2.8c-.17 0-.32-.13-.35-.29l-.26-1.85c-.43-.18-.82-.41-1.18-.69l-1.74.7c-.16.06-.34 0-.43-.15l-1.4-2.42c-.09-.15-.05-.34.08-.45l1.48-1.16c-.03-.23-.05-.46-.05-.69 0-.23.02-.46.05-.68l-1.48-1.16c-.13-.11-.17-.3-.08-.45l1.4-2.42c.09-.15.27-.21.43-.15l1.74.7c.36-.28.76-.51 1.18-.69l.26-1.85c.03-.17.18-.3.35-.3h2.8c.17 0 .32.13.35.29l.26 1.85c.43.18.82.41 1.18.69l1.74-.7c.16-.06.34 0 .43.15l1.4 2.42c.09.15.05.34-.08.45l-1.48 1.16c.03.23.05.46.05.69z"></path></g>
<g id="settings-backup-restore"><path d="M14 12c0-1.1-.9-2-2-2s-2 .9-2 2 .9 2 2 2 2-.9 2-2zm-2-9c-4.97 0-9 4.03-9 9H0l4 4 4-4H5c0-3.87 3.13-7 7-7s7 3.13 7 7-3.13 7-7 7c-1.51 0-2.91-.49-4.06-1.3l-1.42 1.44C8.04 20.3 9.94 21 12 21c4.97 0 9-4.03 9-9s-4.03-9-9-9z"></path></g>
<g id="settings-bluetooth"><path d="M11 24h2v-2h-2v2zm-4 0h2v-2H7v2zm8 0h2v-2h-2v2zm2.71-18.29L12 0h-1v7.59L6.41 3 5 4.41 10.59 10 5 15.59 6.41 17 11 12.41V20h1l5.71-5.71-4.3-4.29 4.3-4.29zM13 3.83l1.88 1.88L13 7.59V3.83zm1.88 10.46L13 16.17v-3.76l1.88 1.88z"></path></g>
<g id="settings-brightness"><path d="M21 3H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16.01H3V4.99h18v14.02zM8 16h2.5l1.5 1.5 1.5-1.5H16v-2.5l1.5-1.5-1.5-1.5V8h-2.5L12 6.5 10.5 8H8v2.5L6.5 12 8 13.5V16zm4-7c1.66 0 3 1.34 3 3s-1.34 3-3 3V9z"></path></g>
<g id="settings-cell"><path d="M7 24h2v-2H7v2zm4 0h2v-2h-2v2zm4 0h2v-2h-2v2zM16 .01L8 0C6.9 0 6 .9 6 2v16c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V2c0-1.1-.9-1.99-2-1.99zM16 16H8V4h8v12z"></path></g>
<g id="settings-ethernet"><path d="M7.77 6.76L6.23 5.48.82 12l5.41 6.52 1.54-1.28L3.42 12l4.35-5.24zM7 13h2v-2H7v2zm10-2h-2v2h2v-2zm-6 2h2v-2h-2v2zm6.77-7.52l-1.54 1.28L20.58 12l-4.35 5.24 1.54 1.28L23.18 12l-5.41-6.52z"></path></g>
<g id="settings-input-antenna"><path d="M12 5c-3.87 0-7 3.13-7 7h2c0-2.76 2.24-5 5-5s5 2.24 5 5h2c0-3.87-3.13-7-7-7zm1 9.29c.88-.39 1.5-1.26 1.5-2.29 0-1.38-1.12-2.5-2.5-2.5S9.5 10.62 9.5 12c0 1.02.62 1.9 1.5 2.29v3.3L7.59 21 9 22.41l3-3 3 3L16.41 21 13 17.59v-3.3zM12 1C5.93 1 1 5.93 1 12h2c0-4.97 4.03-9 9-9s9 4.03 9 9h2c0-6.07-4.93-11-11-11z"></path></g>
<g id="settings-input-component"><path d="M5 2c0-.55-.45-1-1-1s-1 .45-1 1v4H1v6h6V6H5V2zm4 14c0 1.3.84 2.4 2 2.82V23h2v-4.18c1.16-.41 2-1.51 2-2.82v-2H9v2zm-8 0c0 1.3.84 2.4 2 2.82V23h2v-4.18C6.16 18.4 7 17.3 7 16v-2H1v2zM21 6V2c0-.55-.45-1-1-1s-1 .45-1 1v4h-2v6h6V6h-2zm-8-4c0-.55-.45-1-1-1s-1 .45-1 1v4H9v6h6V6h-2V2zm4 14c0 1.3.84 2.4 2 2.82V23h2v-4.18c1.16-.41 2-1.51 2-2.82v-2h-6v2z"></path></g>
<g id="settings-input-composite"><path d="M5 2c0-.55-.45-1-1-1s-1 .45-1 1v4H1v6h6V6H5V2zm4 14c0 1.3.84 2.4 2 2.82V23h2v-4.18c1.16-.41 2-1.51 2-2.82v-2H9v2zm-8 0c0 1.3.84 2.4 2 2.82V23h2v-4.18C6.16 18.4 7 17.3 7 16v-2H1v2zM21 6V2c0-.55-.45-1-1-1s-1 .45-1 1v4h-2v6h6V6h-2zm-8-4c0-.55-.45-1-1-1s-1 .45-1 1v4H9v6h6V6h-2V2zm4 14c0 1.3.84 2.4 2 2.82V23h2v-4.18c1.16-.41 2-1.51 2-2.82v-2h-6v2z"></path></g>
<g id="settings-input-hdmi"><path d="M18 7V4c0-1.1-.9-2-2-2H8c-1.1 0-2 .9-2 2v3H5v6l3 6v3h8v-3l3-6V7h-1zM8 4h8v3h-2V5h-1v2h-2V5h-1v2H8V4z"></path></g>
<g id="settings-input-svideo"><path d="M8 11.5c0-.83-.67-1.5-1.5-1.5S5 10.67 5 11.5 5.67 13 6.5 13 8 12.33 8 11.5zm7-5c0-.83-.67-1.5-1.5-1.5h-3C9.67 5 9 5.67 9 6.5S9.67 8 10.5 8h3c.83 0 1.5-.67 1.5-1.5zM8.5 15c-.83 0-1.5.67-1.5 1.5S7.67 18 8.5 18s1.5-.67 1.5-1.5S9.33 15 8.5 15zM12 1C5.93 1 1 5.93 1 12s4.93 11 11 11 11-4.93 11-11S18.07 1 12 1zm0 20c-4.96 0-9-4.04-9-9s4.04-9 9-9 9 4.04 9 9-4.04 9-9 9zm5.5-11c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5zm-2 5c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5z"></path></g>
<g id="settings-overscan"><path d="M12.01 5.5L10 8h4l-1.99-2.5zM18 10v4l2.5-1.99L18 10zM6 10l-2.5 2.01L6 14v-4zm8 6h-4l2.01 2.5L14 16zm7-13H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16.01H3V4.99h18v14.02z"></path></g>
<g id="settings-phone"><path d="M13 9h-2v2h2V9zm4 0h-2v2h2V9zm3 6.5c-1.25 0-2.45-.2-3.57-.57-.35-.11-.74-.03-1.02.24l-2.2 2.2c-2.83-1.44-5.15-3.75-6.59-6.58l2.2-2.21c.28-.27.36-.66.25-1.01C8.7 6.45 8.5 5.25 8.5 4c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1 0 9.39 7.61 17 17 17 .55 0 1-.45 1-1v-3.5c0-.55-.45-1-1-1zM19 9v2h2V9h-2z"></path></g>
<g id="settings-power"><path d="M7 24h2v-2H7v2zm4 0h2v-2h-2v2zm2-22h-2v10h2V2zm3.56 2.44l-1.45 1.45C16.84 6.94 18 8.83 18 11c0 3.31-2.69 6-6 6s-6-2.69-6-6c0-2.17 1.16-4.06 2.88-5.12L7.44 4.44C5.36 5.88 4 8.28 4 11c0 4.42 3.58 8 8 8s8-3.58 8-8c0-2.72-1.36-5.12-3.44-6.56zM15 24h2v-2h-2v2z"></path></g>
<g id="settings-remote"><path d="M15 9H9c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h6c.55 0 1-.45 1-1V10c0-.55-.45-1-1-1zm-3 6c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zM7.05 6.05l1.41 1.41C9.37 6.56 10.62 6 12 6s2.63.56 3.54 1.46l1.41-1.41C15.68 4.78 13.93 4 12 4s-3.68.78-4.95 2.05zM12 0C8.96 0 6.21 1.23 4.22 3.22l1.41 1.41C7.26 3.01 9.51 2 12 2s4.74 1.01 6.36 2.64l1.41-1.41C17.79 1.23 15.04 0 12 0z"></path></g>
<g id="settings-voice"><path d="M7 24h2v-2H7v2zm5-11c1.66 0 2.99-1.34 2.99-3L15 4c0-1.66-1.34-3-3-3S9 2.34 9 4v6c0 1.66 1.34 3 3 3zm-1 11h2v-2h-2v2zm4 0h2v-2h-2v2zm4-14h-1.7c0 3-2.54 5.1-5.3 5.1S6.7 13 6.7 10H5c0 3.41 2.72 6.23 6 6.72V20h2v-3.28c3.28-.49 6-3.31 6-6.72z"></path></g>
<g id="shop"><path d="M16 6V4c0-1.11-.89-2-2-2h-4c-1.11 0-2 .89-2 2v2H2v13c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6h-6zm-6-2h4v2h-4V4zM9 18V9l7.5 4L9 18z"></path></g>
<g id="shop-two"><path d="M3 9H1v11c0 1.11.89 2 2 2h14c1.11 0 2-.89 2-2H3V9zm15-4V3c0-1.11-.89-2-2-2h-4c-1.11 0-2 .89-2 2v2H5v11c0 1.11.89 2 2 2h14c1.11 0 2-.89 2-2V5h-5zm-6-2h4v2h-4V3zm0 12V8l5.5 3-5.5 4z"></path></g>
<g id="shopping-basket"><path d="M17.21 9l-4.38-6.56c-.19-.28-.51-.42-.83-.42-.32 0-.64.14-.83.43L6.79 9H2c-.55 0-1 .45-1 1 0 .09.01.18.04.27l2.54 9.27c.23.84 1 1.46 1.92 1.46h13c.92 0 1.69-.62 1.93-1.46l2.54-9.27L23 10c0-.55-.45-1-1-1h-4.79zM9 9l3-4.4L15 9H9zm3 8c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z"></path></g>
<g id="shopping-cart"><path d="M7 18c-1.1 0-1.99.9-1.99 2S5.9 22 7 22s2-.9 2-2-.9-2-2-2zM1 2v2h2l3.6 7.59-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h12v-2H7.42c-.14 0-.25-.11-.25-.25l.03-.12.9-1.63h7.45c.75 0 1.41-.41 1.75-1.03l3.58-6.49c.08-.14.12-.31.12-.48 0-.55-.45-1-1-1H5.21l-.94-2H1zm16 16c-1.1 0-1.99.9-1.99 2s.89 2 1.99 2 2-.9 2-2-.9-2-2-2z"></path></g>
<g id="sort"><path d="M3 18h6v-2H3v2zM3 6v2h18V6H3zm0 7h12v-2H3v2z"></path></g>
<g id="speaker-notes"><path d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM8 14H6v-2h2v2zm0-3H6V9h2v2zm0-3H6V6h2v2zm7 6h-5v-2h5v2zm3-3h-8V9h8v2zm0-3h-8V6h8v2z"></path></g>
<g id="speaker-notes-off"><path d="M10.54 11l-.54-.54L7.54 8 6 6.46 2.38 2.84 1.27 1.73 0 3l2.01 2.01L2 22l4-4h9l5.73 5.73L22 22.46 17.54 18l-7-7zM8 14H6v-2h2v2zm-2-3V9l2 2H6zm14-9H4.08L10 7.92V6h8v2h-7.92l1 1H18v2h-4.92l6.99 6.99C21.14 17.95 22 17.08 22 16V4c0-1.1-.9-2-2-2z"></path></g>
<g id="spellcheck"><path d="M12.45 16h2.09L9.43 3H7.57L2.46 16h2.09l1.12-3h5.64l1.14 3zm-6.02-5L8.5 5.48 10.57 11H6.43zm15.16.59l-8.09 8.09L9.83 16l-1.41 1.41 5.09 5.09L23 13l-1.41-1.41z"></path></g>
<g id="star"><path d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"></path></g>
<g id="star-border"><path d="M22 9.24l-7.19-.62L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27 18.18 21l-1.63-7.03L22 9.24zM12 15.4l-3.76 2.27 1-4.28-3.32-2.88 4.38-.38L12 6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z"></path></g>
<g id="star-half"><path d="M22 9.24l-7.19-.62L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27 18.18 21l-1.63-7.03L22 9.24zM12 15.4V6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z"></path></g>
<g id="stars"><path d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zm4.24 16L12 15.45 7.77 18l1.12-4.81-3.73-3.23 4.92-.42L12 5l1.92 4.53 4.92.42-3.73 3.23L16.23 18z"></path></g>
<g id="store"><path d="M20 4H4v2h16V4zm1 10v-2l-1-5H4l-1 5v2h1v6h10v-6h4v6h2v-6h1zm-9 4H6v-4h6v4z"></path></g>
<g id="subdirectory-arrow-left"><path d="M11 9l1.42 1.42L8.83 14H18V4h2v12H8.83l3.59 3.58L11 21l-6-6 6-6z"></path></g>
<g id="subdirectory-arrow-right"><path d="M19 15l-6 6-1.42-1.42L15.17 16H4V4h2v10h9.17l-3.59-3.58L13 9l6 6z"></path></g>
<g id="subject"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></g>
<g id="supervisor-account"><path d="M16.5 12c1.38 0 2.49-1.12 2.49-2.5S17.88 7 16.5 7C15.12 7 14 8.12 14 9.5s1.12 2.5 2.5 2.5zM9 11c1.66 0 2.99-1.34 2.99-3S10.66 5 9 5C7.34 5 6 6.34 6 8s1.34 3 3 3zm7.5 3c-1.83 0-5.5.92-5.5 2.75V19h11v-2.25c0-1.83-3.67-2.75-5.5-2.75zM9 13c-2.33 0-7 1.17-7 3.5V19h7v-2.25c0-.85.33-2.34 2.37-3.47C10.5 13.1 9.66 13 9 13z"></path></g>
<g id="swap-horiz"><path d="M6.99 11L3 15l3.99 4v-3H14v-2H6.99v-3zM21 9l-3.99-4v3H10v2h7.01v3L21 9z"></path></g>
<g id="swap-vert"><path d="M16 17.01V10h-2v7.01h-3L15 21l4-3.99h-3zM9 3L5 6.99h3V14h2V6.99h3L9 3z"></path></g>
<g id="swap-vertical-circle"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM6.5 9L10 5.5 13.5 9H11v4H9V9H6.5zm11 6L14 18.5 10.5 15H13v-4h2v4h2.5z"></path></g>
<g id="system-update-alt"><path d="M12 16.5l4-4h-3v-9h-2v9H8l4 4zm9-13h-6v1.99h6v14.03H3V5.49h6V3.5H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2v-14c0-1.1-.9-2-2-2z"></path></g>
<g id="tab"><path d="M21 3H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H3V5h10v4h8v10z"></path></g>
<g id="tab-unselected"><path d="M1 9h2V7H1v2zm0 4h2v-2H1v2zm0-8h2V3c-1.1 0-2 .9-2 2zm8 16h2v-2H9v2zm-8-4h2v-2H1v2zm2 4v-2H1c0 1.1.9 2 2 2zM21 3h-8v6h10V5c0-1.1-.9-2-2-2zm0 14h2v-2h-2v2zM9 5h2V3H9v2zM5 21h2v-2H5v2zM5 5h2V3H5v2zm16 16c1.1 0 2-.9 2-2h-2v2zm0-8h2v-2h-2v2zm-8 8h2v-2h-2v2zm4 0h2v-2h-2v2z"></path></g>
<g id="text-format"><path d="M5 17v2h14v-2H5zm4.5-4.2h5l.9 2.2h2.1L12.75 4h-1.5L6.5 15h2.1l.9-2.2zM12 5.98L13.87 11h-3.74L12 5.98z"></path></g>
<g id="theaters"><path d="M18 3v2h-2V3H8v2H6V3H4v18h2v-2h2v2h8v-2h2v2h2V3h-2zM8 17H6v-2h2v2zm0-4H6v-2h2v2zm0-4H6V7h2v2zm10 8h-2v-2h2v2zm0-4h-2v-2h2v2zm0-4h-2V7h2v2z"></path></g>
<g id="thumb-down"><path d="M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v1.91l.01.01L1 14c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z"></path></g>
<g id="thumb-up"><path d="M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-1.91l-.01-.01L23 10z"></path></g>
<g id="thumbs-up-down"><path d="M12 6c0-.55-.45-1-1-1H5.82l.66-3.18.02-.23c0-.31-.13-.59-.33-.8L5.38 0 .44 4.94C.17 5.21 0 5.59 0 6v6.5c0 .83.67 1.5 1.5 1.5h6.75c.62 0 1.15-.38 1.38-.91l2.26-5.29c.07-.17.11-.36.11-.55V6zm10.5 4h-6.75c-.62 0-1.15.38-1.38.91l-2.26 5.29c-.07.17-.11.36-.11.55V18c0 .55.45 1 1 1h5.18l-.66 3.18-.02.24c0 .31.13.59.33.8l.79.78 4.94-4.94c.27-.27.44-.65.44-1.06v-6.5c0-.83-.67-1.5-1.5-1.5z"></path></g>
<g id="timeline"><path d="M23 8c0 1.1-.9 2-2 2-.18 0-.35-.02-.51-.07l-3.56 3.55c.05.16.07.34.07.52 0 1.1-.9 2-2 2s-2-.9-2-2c0-.18.02-.36.07-.52l-2.55-2.55c-.16.05-.34.07-.52.07s-.36-.02-.52-.07l-4.55 4.56c.05.16.07.33.07.51 0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2c.18 0 .35.02.51.07l4.56-4.55C8.02 9.36 8 9.18 8 9c0-1.1.9-2 2-2s2 .9 2 2c0 .18-.02.36-.07.52l2.55 2.55c.16-.05.34-.07.52-.07s.36.02.52.07l3.55-3.56C19.02 8.35 19 8.18 19 8c0-1.1.9-2 2-2s2 .9 2 2z"></path></g>
<g id="toc"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z"></path></g>
<g id="today"><path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"></path></g>
<g id="toll"><path d="M15 4c-4.42 0-8 3.58-8 8s3.58 8 8 8 8-3.58 8-8-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.69 6-6 6zM3 12c0-2.61 1.67-4.83 4-5.65V4.26C3.55 5.15 1 8.27 1 12s2.55 6.85 6 7.74v-2.09c-2.33-.82-4-3.04-4-5.65z"></path></g>
<g id="touch-app"><path d="M9 11.24V7.5C9 6.12 10.12 5 11.5 5S14 6.12 14 7.5v3.74c1.21-.81 2-2.18 2-3.74C16 5.01 13.99 3 11.5 3S7 5.01 7 7.5c0 1.56.79 2.93 2 3.74zm9.84 4.63l-4.54-2.26c-.17-.07-.35-.11-.54-.11H13v-6c0-.83-.67-1.5-1.5-1.5S10 6.67 10 7.5v10.74l-3.43-.72c-.08-.01-.15-.03-.24-.03-.31 0-.59.13-.79.33l-.79.8 4.94 4.94c.27.27.65.44 1.06.44h6.79c.75 0 1.33-.55 1.44-1.28l.75-5.27c.01-.07.02-.14.02-.2 0-.62-.38-1.16-.91-1.38z"></path></g>
<g id="track-changes"><path d="M19.07 4.93l-1.41 1.41C19.1 7.79 20 9.79 20 12c0 4.42-3.58 8-8 8s-8-3.58-8-8c0-4.08 3.05-7.44 7-7.93v2.02C8.16 6.57 6 9.03 6 12c0 3.31 2.69 6 6 6s6-2.69 6-6c0-1.66-.67-3.16-1.76-4.24l-1.41 1.41C15.55 9.9 16 10.9 16 12c0 2.21-1.79 4-4 4s-4-1.79-4-4c0-1.86 1.28-3.41 3-3.86v2.14c-.6.35-1 .98-1 1.72 0 1.1.9 2 2 2s2-.9 2-2c0-.74-.4-1.38-1-1.72V2h-1C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10c0-2.76-1.12-5.26-2.93-7.07z"></path></g>
<g id="translate"><path d="M12.87 15.07l-2.54-2.51.03-.03c1.74-1.94 2.98-4.17 3.71-6.53H17V4h-7V2H8v2H1v1.99h11.17C11.5 7.92 10.44 9.75 9 11.35 8.07 10.32 7.3 9.19 6.69 8h-2c.73 1.63 1.73 3.17 2.98 4.56l-5.09 5.02L4 19l5-5 3.11 3.11.76-2.04zM18.5 10h-2L12 22h2l1.12-3h4.75L21 22h2l-4.5-12zm-2.62 7l1.62-4.33L19.12 17h-3.24z"></path></g>
<g id="trending-down"><path d="M16 18l2.29-2.29-4.88-4.88-4 4L2 7.41 3.41 6l6 6 4-4 6.3 6.29L22 12v6z"></path></g>
<g id="trending-flat"><path d="M22 12l-4-4v3H3v2h15v3z"></path></g>
<g id="trending-up"><path d="M16 6l2.29 2.29-4.88 4.88-4-4L2 16.59 3.41 18l6-6 4 4 6.3-6.29L22 12V6z"></path></g>
<g id="turned-in"><path d="M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2z"></path></g>
<g id="turned-in-not"><path d="M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2zm0 15l-5-2.18L7 18V5h10v13z"></path></g>
<g id="unarchive"><path d="M20.55 5.22l-1.39-1.68C18.88 3.21 18.47 3 18 3H6c-.47 0-.88.21-1.15.55L3.46 5.22C3.17 5.57 3 6.01 3 6.5V19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6.5c0-.49-.17-.93-.45-1.28zM12 9.5l5.5 5.5H14v2h-4v-2H6.5L12 9.5zM5.12 5l.82-1h12l.93 1H5.12z"></path></g>
<g id="undo"><path d="M12.5 8c-2.65 0-5.05.99-6.9 2.6L2 7v9h9l-3.62-3.62c1.39-1.16 3.16-1.88 5.12-1.88 3.54 0 6.55 2.31 7.6 5.5l2.37-.78C21.08 11.03 17.15 8 12.5 8z"></path></g>
<g id="unfold-less"><path d="M7.41 18.59L8.83 20 12 16.83 15.17 20l1.41-1.41L12 14l-4.59 4.59zm9.18-13.18L15.17 4 12 7.17 8.83 4 7.41 5.41 12 10l4.59-4.59z"></path></g>
<g id="unfold-more"><path d="M12 5.83L15.17 9l1.41-1.41L12 3 7.41 7.59 8.83 9 12 5.83zm0 12.34L8.83 15l-1.41 1.41L12 21l4.59-4.59L15.17 15 12 18.17z"></path></g>
<g id="update"><path d="M21 10.12h-6.78l2.74-2.82c-2.73-2.7-7.15-2.8-9.88-.1-2.73 2.71-2.73 7.08 0 9.79 2.73 2.71 7.15 2.71 9.88 0C18.32 15.65 19 14.08 19 12.1h2c0 1.98-.88 4.55-2.64 6.29-3.51 3.48-9.21 3.48-12.72 0-3.5-3.47-3.53-9.11-.02-12.58 3.51-3.47 9.14-3.47 12.65 0L21 3v7.12zM12.5 8v4.25l3.5 2.08-.72 1.21L11 13V8h1.5z"></path></g>
<g id="verified-user"><path d="M12 1L3 5v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V5l-9-4zm-2 16l-4-4 1.41-1.41L10 14.17l6.59-6.59L18 9l-8 8z"></path></g>
<g id="view-agenda"><path d="M20 13H3c-.55 0-1 .45-1 1v6c0 .55.45 1 1 1h17c.55 0 1-.45 1-1v-6c0-.55-.45-1-1-1zm0-10H3c-.55 0-1 .45-1 1v6c0 .55.45 1 1 1h17c.55 0 1-.45 1-1V4c0-.55-.45-1-1-1z"></path></g>
<g id="view-array"><path d="M4 18h3V5H4v13zM18 5v13h3V5h-3zM8 18h9V5H8v13z"></path></g>
<g id="view-carousel"><path d="M7 19h10V4H7v15zm-5-2h4V6H2v11zM18 6v11h4V6h-4z"></path></g>
<g id="view-column"><path d="M10 18h5V5h-5v13zm-6 0h5V5H4v13zM16 5v13h5V5h-5z"></path></g>
<g id="view-day"><path d="M2 21h19v-3H2v3zM20 8H3c-.55 0-1 .45-1 1v6c0 .55.45 1 1 1h17c.55 0 1-.45 1-1V9c0-.55-.45-1-1-1zM2 3v3h19V3H2z"></path></g>
<g id="view-headline"><path d="M4 15h16v-2H4v2zm0 4h16v-2H4v2zm0-8h16V9H4v2zm0-6v2h16V5H4z"></path></g>
<g id="view-list"><path d="M4 14h4v-4H4v4zm0 5h4v-4H4v4zM4 9h4V5H4v4zm5 5h12v-4H9v4zm0 5h12v-4H9v4zM9 5v4h12V5H9z"></path></g>
<g id="view-module"><path d="M4 11h5V5H4v6zm0 7h5v-6H4v6zm6 0h5v-6h-5v6zm6 0h5v-6h-5v6zm-6-7h5V5h-5v6zm6-6v6h5V5h-5z"></path></g>
<g id="view-quilt"><path d="M10 18h5v-6h-5v6zm-6 0h5V5H4v13zm12 0h5v-6h-5v6zM10 5v6h11V5H10z"></path></g>
<g id="view-stream"><path d="M4 18h17v-6H4v6zM4 5v6h17V5H4z"></path></g>
<g id="view-week"><path d="M6 5H3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1zm14 0h-3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1zm-7 0h-3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1z"></path></g>
<g id="visibility"><path d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"></path></g>
<g id="visibility-off"><path d="M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z"></path></g>
<g id="warning"><path d="M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"></path></g>
<g id="watch-later"><path d="M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zm4.2 14.2L11 13V7h1.5v5.2l4.5 2.7-.8 1.3z"></path></g>
<g id="weekend"><path d="M21 10c-1.1 0-2 .9-2 2v3H5v-3c0-1.1-.9-2-2-2s-2 .9-2 2v5c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2v-5c0-1.1-.9-2-2-2zm-3-5H6c-1.1 0-2 .9-2 2v2.15c1.16.41 2 1.51 2 2.82V14h12v-2.03c0-1.3.84-2.4 2-2.82V7c0-1.1-.9-2-2-2z"></path></g>
<g id="work"><path d="M20 6h-4V4c0-1.11-.89-2-2-2h-4c-1.11 0-2 .89-2 2v2H4c-1.11 0-1.99.89-1.99 2L2 19c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zm-6 0h-4V4h4v2z"></path></g>
<g id="youtube-searched-for"><path d="M17.01 14h-.8l-.27-.27c.98-1.14 1.57-2.61 1.57-4.23 0-3.59-2.91-6.5-6.5-6.5s-6.5 3-6.5 6.5H2l3.84 4 4.16-4H6.51C6.51 7 8.53 5 11.01 5s4.5 2.01 4.5 4.5c0 2.48-2.02 4.5-4.5 4.5-.65 0-1.26-.14-1.82-.38L7.71 15.1c.97.57 2.09.9 3.3.9 1.61 0 3.08-.59 4.22-1.57l.27.27v.79l5.01 4.99L22 19l-4.99-5z"></path></g>
<g id="zoom-in"><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14zm2.5-4h-2v2H9v-2H7V9h2V7h1v2h2v1z"></path></g>
<g id="zoom-out"><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14zM7 9h5v1H7z"></path></g>
</defs></svg>
</iron-iconset-svg>`;document.head.appendChild(template$2.content);Polymer({_template:html`
    <style>
      :host {
        display: inline-block;
        overflow: hidden;
        position: relative;
      }

      #baseURIAnchor {
        display: none;
      }

      #sizedImgDiv {
        position: absolute;
        top: 0px;
        right: 0px;
        bottom: 0px;
        left: 0px;

        display: none;
      }

      #img {
        display: block;
        width: var(--iron-image-width, auto);
        height: var(--iron-image-height, auto);
      }

      :host([sizing]) #sizedImgDiv {
        display: block;
      }

      :host([sizing]) #img {
        display: none;
      }

      #placeholder {
        position: absolute;
        top: 0px;
        right: 0px;
        bottom: 0px;
        left: 0px;

        background-color: inherit;
        opacity: 1;

        @apply --iron-image-placeholder;
      }

      #placeholder.faded-out {
        transition: opacity 0.5s linear;
        opacity: 0;
      }
    </style>

    <a id="baseURIAnchor" href="#"></a>
    <div id="sizedImgDiv" role="img" hidden$="[[_computeImgDivHidden(sizing)]]" aria-hidden$="[[_computeImgDivARIAHidden(alt)]]" aria-label$="[[_computeImgDivARIALabel(alt, src)]]"></div>
    <img id="img" alt$="[[alt]]" hidden$="[[_computeImgHidden(sizing)]]" crossorigin$="[[crossorigin]]" on-load="_imgOnLoad" on-error="_imgOnError">
    <div id="placeholder" hidden$="[[_computePlaceholderHidden(preload, fade, loading, loaded)]]" class$="[[_computePlaceholderClassName(preload, fade, loading, loaded)]]"></div>
`,is:"iron-image",properties:{/**
     * The URL of an image.
     */src:{type:String,value:""},/**
     * A short text alternative for the image.
     */alt:{type:String,value:null},/**
     * CORS enabled images support:
     * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image
     */crossorigin:{type:String,value:null},/**
     * When true, the image is prevented from loading and any placeholder is
     * shown.  This may be useful when a binding to the src property is known to
     * be invalid, to prevent 404 requests.
     */preventLoad:{type:Boolean,value:!1},/**
     * Sets a sizing option for the image.  Valid values are `contain` (full
     * aspect ratio of the image is contained within the element and
     * letterboxed) or `cover` (image is cropped in order to fully cover the
     * bounds of the element), or `null` (default: image takes natural size).
     */sizing:{type:String,value:null,reflectToAttribute:!0},/**
     * When a sizing option is used (`cover` or `contain`), this determines
     * how the image is aligned within the element bounds.
     */position:{type:String,value:"center"},/**
     * When `true`, any change to the `src` property will cause the
     * `placeholder` image to be shown until the new image has loaded.
     */preload:{type:Boolean,value:!1},/**
     * This image will be used as a background/placeholder until the src image
     * has loaded.  Use of a data-URI for placeholder is encouraged for instant
     * rendering.
     */placeholder:{type:String,value:null,observer:"_placeholderChanged"},/**
     * When `preload` is true, setting `fade` to true will cause the image to
     * fade into place.
     */fade:{type:Boolean,value:!1},/**
     * Read-only value that is true when the image is loaded.
     */loaded:{notify:!0,readOnly:!0,type:Boolean,value:!1},/**
     * Read-only value that tracks the loading state of the image when the
     * `preload` option is used.
     */loading:{notify:!0,readOnly:!0,type:Boolean,value:!1},/**
     * Read-only value that indicates that the last set `src` failed to load.
     */error:{notify:!0,readOnly:!0,type:Boolean,value:!1},/**
     * Can be used to set the width of image (e.g. via binding); size may also
     * be set via CSS.
     */width:{observer:"_widthChanged",type:Number,value:null},/**
     * Can be used to set the height of image (e.g. via binding); size may also
     * be set via CSS.
     *
     * @attribute height
     * @type number
     * @default null
     */height:{observer:"_heightChanged",type:Number,value:null}},observers:["_transformChanged(sizing, position)","_loadStateObserver(src, preventLoad)"],created:function(){this._resolvedSrc=""},_imgOnLoad:function(){if(this.$.img.src!==this._resolveSrc(this.src)){return}this._setLoading(!1);this._setLoaded(!0);this._setError(!1)},_imgOnError:function(){if(this.$.img.src!==this._resolveSrc(this.src)){return}this.$.img.removeAttribute("src");this.$.sizedImgDiv.style.backgroundImage="";this._setLoading(!1);this._setLoaded(!1);this._setError(!0)},_computePlaceholderHidden:function(){return!this.preload||!this.fade&&!this.loading&&this.loaded},_computePlaceholderClassName:function(){return this.preload&&this.fade&&!this.loading&&this.loaded?"faded-out":""},_computeImgDivHidden:function(){return!this.sizing},_computeImgDivARIAHidden:function(){return""===this.alt?"true":void 0},_computeImgDivARIALabel:function(){if(null!==this.alt){return this.alt}// Polymer.ResolveUrl.resolveUrl will resolve '' relative to a URL x to
// that URL x, but '' is the default for src.
if(""===this.src){return""}// NOTE: Use of `URL` was removed here because IE11 doesn't support
// constructing it. If this ends up being problematic, we should
// consider reverting and adding the URL polyfill as a dev dependency.
var resolved=this._resolveSrc(this.src);// Remove query parts, get file name.
return resolved.replace(/[?|#].*/g,"").split("/").pop()},_computeImgHidden:function(){return!!this.sizing},_widthChanged:function(){this.style.width=isNaN(this.width)?this.width:this.width+"px"},_heightChanged:function(){this.style.height=isNaN(this.height)?this.height:this.height+"px"},_loadStateObserver:function(src,preventLoad){var newResolvedSrc=this._resolveSrc(src);if(newResolvedSrc===this._resolvedSrc){return}this._resolvedSrc="";this.$.img.removeAttribute("src");this.$.sizedImgDiv.style.backgroundImage="";if(""===src||preventLoad){this._setLoading(!1);this._setLoaded(!1);this._setError(!1)}else{this._resolvedSrc=newResolvedSrc;this.$.img.src=this._resolvedSrc;this.$.sizedImgDiv.style.backgroundImage="url(\""+this._resolvedSrc+"\")";this._setLoading(!0);this._setLoaded(!1);this._setError(!1)}},_placeholderChanged:function(){this.$.placeholder.style.backgroundImage=this.placeholder?"url(\""+this.placeholder+"\")":""},_transformChanged:function(){var sizedImgDivStyle=this.$.sizedImgDiv.style,placeholderStyle=this.$.placeholder.style;sizedImgDivStyle.backgroundSize=placeholderStyle.backgroundSize=this.sizing;sizedImgDivStyle.backgroundPosition=placeholderStyle.backgroundPosition=this.sizing?this.position:"";sizedImgDivStyle.backgroundRepeat=placeholderStyle.backgroundRepeat=this.sizing?"no-repeat":""},_resolveSrc:function(testSrc){var resolved=resolveUrl(testSrc,this.$.baseURIAnchor.href);// NOTE: Use of `URL` was removed here because IE11 doesn't support
// constructing it. If this ends up being problematic, we should
// consider reverting and adding the URL polyfill as a dev dependency.
if(2<=resolved.length&&"/"===resolved[0]&&"/"!==resolved[1]){// In IE location.origin might not work
// https://connect.microsoft.com/IE/feedback/details/1763802/location-origin-is-undefined-in-ie-11-on-windows-10-but-works-on-windows-7
resolved=(location.origin||location.protocol+"//"+location.host)+resolved}return resolved}});Polymer({_template:html`
    <style>
      :host {
        display: inline-block;
      }
    </style>
    <slot id="content"></slot>
`,is:"iron-input",behaviors:[IronValidatableBehavior],/**
   * Fired whenever `validate()` is called.
   *
   * @event iron-input-validate
   */properties:{/**
     * Use this property instead of `value` for two-way data binding, or to
     * set a default value for the input. **Do not** use the distributed
     * input's `value` property to set a default value.
     */bindValue:{type:String,value:""},/**
     * Computed property that echoes `bindValue` (mostly used for Polymer 1.0
     * backcompatibility, if you were one-way binding to the Polymer 1.0
     * `input is="iron-input"` value attribute).
     */value:{type:String,computed:"_computeValue(bindValue)"},/**
     * Regex-like list of characters allowed as input; all characters not in the
     * list will be rejected. The recommended format should be a list of allowed
     * characters, for example, `[a-zA-Z0-9.+-!;:]`.
     *
     * This pattern represents the allowed characters for the field; as the user
     * inputs text, each individual character will be checked against the
     * pattern (rather than checking the entire value as a whole). If a
     * character is not a match, it will be rejected.
     *
     * Pasted input will have each character checked individually; if any
     * character doesn't match `allowedPattern`, the entire pasted string will
     * be rejected.
     *
     * Note: if you were using `iron-input` in 1.0, you were also required to
     * set `prevent-invalid-input`. This is no longer needed as of Polymer 2.0,
     * and will be set automatically for you if an `allowedPattern` is provided.
     *
     */allowedPattern:{type:String},/**
     * Set to true to auto-validate the input value as you type.
     */autoValidate:{type:Boolean,value:!1},/**
     * The native input element.
     */_inputElement:Object},observers:["_bindValueChanged(bindValue, _inputElement)"],listeners:{input:"_onInput",keypress:"_onKeypress"},created:function(){IronA11yAnnouncer.requestAvailability();this._previousValidInput="";this._patternAlreadyChecked=!1},attached:function(){// If the input is added at a later time, update the internal reference.
this._observer=dom(this).observeNodes(function(info){this._initSlottedInput()}.bind(this))},detached:function(){if(this._observer){dom(this).unobserveNodes(this._observer);this._observer=null}},/**
   * Returns the distributed input element.
   */get inputElement(){return this._inputElement},_initSlottedInput:function(){this._inputElement=this.getEffectiveChildren()[0];if(this.inputElement&&this.inputElement.value){this.bindValue=this.inputElement.value}this.fire("iron-input-ready")},get _patternRegExp(){var pattern;if(this.allowedPattern){pattern=new RegExp(this.allowedPattern)}else{switch(this.inputElement.type){case"number":pattern=/[0-9.,e-]/;break;}}return pattern},/**
   * @suppress {checkTypes}
   */_bindValueChanged:function(bindValue,inputElement){// The observer could have run before attached() when we have actually
// initialized this property.
if(!inputElement){return}if(bindValue===void 0){inputElement.value=null}else if(bindValue!==inputElement.value){this.inputElement.value=bindValue}if(this.autoValidate){this.validate()}// manually notify because we don't want to notify until after setting value
this.fire("bind-value-changed",{value:bindValue})},_onInput:function(){// Need to validate each of the characters pasted if they haven't
// been validated inside `_onKeypress` already.
if(this.allowedPattern&&!this._patternAlreadyChecked){var valid=this._checkPatternValidity();if(!valid){this._announceInvalidCharacter("Invalid string of characters not entered.");this.inputElement.value=this._previousValidInput}}this.bindValue=this._previousValidInput=this.inputElement.value;this._patternAlreadyChecked=!1},_isPrintable:function(event){// What a control/printable character is varies wildly based on the browser.
// - most control characters (arrows, backspace) do not send a `keypress`
// event
//   in Chrome, but the *do* on Firefox
// - in Firefox, when they do send a `keypress` event, control chars have
//   a charCode = 0, keyCode = xx (for ex. 40 for down arrow)
// - printable characters always send a keypress event.
// - in Firefox, printable chars always have a keyCode = 0. In Chrome, the
// keyCode
//   always matches the charCode.
// None of this makes any sense.
// For these keys, ASCII code == browser keycode.
var anyNonPrintable=8==event.keyCode||// backspace
9==event.keyCode||// tab
13==event.keyCode||// enter
27==event.keyCode,mozNonPrintable=19==event.keyCode||// pause
20==event.keyCode||// caps lock
45==event.keyCode||// insert
46==event.keyCode||// delete
144==event.keyCode||// num lock
145==event.keyCode||// scroll lock
32<event.keyCode&&41>event.keyCode||// page up/down, end, home, arrows
111<event.keyCode&&124>event.keyCode;// escape
// For these keys, make sure it's a browser keycode and not an ASCII code.
// fn keys
return!anyNonPrintable&&!(0==event.charCode&&mozNonPrintable)},_onKeypress:function(event){if(!this.allowedPattern&&"number"!==this.inputElement.type){return}var regexp=this._patternRegExp;if(!regexp){return}// Handle special keys and backspace
if(event.metaKey||event.ctrlKey||event.altKey){return}// Check the pattern either here or in `_onInput`, but not in both.
this._patternAlreadyChecked=!0;var thisChar=String.fromCharCode(event.charCode);if(this._isPrintable(event)&&!regexp.test(thisChar)){event.preventDefault();this._announceInvalidCharacter("Invalid character "+thisChar+" not entered.")}},_checkPatternValidity:function(){var regexp=this._patternRegExp;if(!regexp){return!0}for(var i=0;i<this.inputElement.value.length;i++){if(!regexp.test(this.inputElement.value[i])){return!1}}return!0},/**
   * Returns true if `value` is valid. The validator provided in `validator`
   * will be used first, then any constraints.
   * @return {boolean} True if the value is valid.
   */validate:function(){if(!this.inputElement){this.invalid=!1;return!0}// Use the nested input's native validity.
var valid=this.inputElement.checkValidity();// Only do extra checking if the browser thought this was valid.
if(valid){// Empty, required input is invalid
if(this.required&&""===this.bindValue){valid=!1}else if(this.hasValidator()){valid=IronValidatableBehavior.validate.call(this,this.bindValue)}}this.invalid=!valid;this.fire("iron-input-validate");return valid},_announceInvalidCharacter:function(message){this.fire("iron-announce",{text:message})},_computeValue:function(bindValue){return bindValue}});class IronSelection{/**
   * @param {!Function} selectCallback
   * @suppress {missingProvide}
   */constructor(selectCallback){this.selection=[];this.selectCallback=selectCallback}/**
     * Retrieves the selected item(s).
     *
     * @returns Returns the selected item(s). If the multi property is true,
     * `get` will return an array, otherwise it will return
     * the selected item or undefined if there is no selection.
     */get(){return this.multi?this.selection.slice():this.selection[0]}/**
     * Clears all the selection except the ones indicated.
     *
     * @param {Array} excludes items to be excluded.
     */clear(excludes){this.selection.slice().forEach(function(item){if(!excludes||0>excludes.indexOf(item)){this.setItemSelected(item,!1)}},this)}/**
     * Indicates if a given item is selected.
     *
     * @param {*} item The item whose selection state should be checked.
     * @return {boolean} Returns true if `item` is selected.
     */isSelected(item){return 0<=this.selection.indexOf(item)}/**
     * Sets the selection state for a given item to either selected or deselected.
     *
     * @param {*} item The item to select.
     * @param {boolean} isSelected True for selected, false for deselected.
     */setItemSelected(item,isSelected){if(null!=item){if(isSelected!==this.isSelected(item)){// proceed to update selection only if requested state differs from
// current
if(isSelected){this.selection.push(item)}else{var i=this.selection.indexOf(item);if(0<=i){this.selection.splice(i,1)}}if(this.selectCallback){this.selectCallback(item,isSelected)}}}}/**
     * Sets the selection state for a given item. If the `multi` property
     * is true, then the selected state of `item` will be toggled; otherwise
     * the `item` will be selected.
     *
     * @param {*} item The item to select.
     */select(item){if(this.multi){this.toggle(item)}else if(this.get()!==item){this.setItemSelected(this.get(),!1);this.setItemSelected(item,!0)}}/**
     * Toggles the selection state for `item`.
     *
     * @param {*} item The item to toggle.
     */toggle(item){this.setItemSelected(item,!this.isSelected(item))}}_exports.IronSelection=IronSelection;;var ironSelection={IronSelection:IronSelection};_exports.$ironSelection=ironSelection;const IronSelectableBehavior={/**
   * Fired when iron-selector is activated (selected or deselected).
   * It is fired before the selected items are changed.
   * Cancel the event to abort selection.
   *
   * @event iron-activate
   */ /**
       * Fired when an item is selected
       *
       * @event iron-select
       */ /**
           * Fired when an item is deselected
           *
           * @event iron-deselect
           */ /**
               * Fired when the list of selectable items changes (e.g., items are
               * added or removed). The detail of the event is a mutation record that
               * describes what changed.
               *
               * @event iron-items-changed
               */properties:{/**
     * If you want to use an attribute value or property of an element for
     * `selected` instead of the index, set this to the name of the attribute
     * or property. Hyphenated values are converted to camel case when used to
     * look up the property of a selectable element. Camel cased values are
     * *not* converted to hyphenated values for attribute lookup. It's
     * recommended that you provide the hyphenated form of the name so that
     * selection works in both cases. (Use `attr-or-property-name` instead of
     * `attrOrPropertyName`.)
     */attrForSelected:{type:String,value:null},/**
     * Gets or sets the selected element. The default is to use the index of the
     * item.
     * @type {string|number}
     */selected:{type:String,notify:!0},/**
     * Returns the currently selected item.
     *
     * @type {?Object}
     */selectedItem:{type:Object,readOnly:!0,notify:!0},/**
     * The event that fires from items when they are selected. Selectable
     * will listen for this event from items and update the selection state.
     * Set to empty string to listen to no events.
     */activateEvent:{type:String,value:"tap",observer:"_activateEventChanged"},/**
     * This is a CSS selector string.  If this is set, only items that match the
     * CSS selector are selectable.
     */selectable:String,/**
     * The class to set on elements when selected.
     */selectedClass:{type:String,value:"iron-selected"},/**
     * The attribute to set on elements when selected.
     */selectedAttribute:{type:String,value:null},/**
     * Default fallback if the selection based on selected with
     * `attrForSelected` is not found.
     */fallbackSelection:{type:String,value:null},/**
     * The list of items from which a selection can be made.
     */items:{type:Array,readOnly:!0,notify:!0,value:function(){return[]}},/**
     * The set of excluded elements where the key is the `localName`
     * of the element that will be ignored from the item list.
     *
     * @default {template: 1}
     */_excludedLocalNames:{type:Object,value:function(){return{template:1,"dom-bind":1,"dom-if":1,"dom-repeat":1}}}},observers:["_updateAttrForSelected(attrForSelected)","_updateSelected(selected)","_checkFallback(fallbackSelection)"],created:function(){this._bindFilterItem=this._filterItem.bind(this);this._selection=new IronSelection(this._applySelection.bind(this))},attached:function(){this._observer=this._observeItems(this);this._addListener(this.activateEvent)},detached:function(){if(this._observer){dom(this).unobserveNodes(this._observer)}this._removeListener(this.activateEvent)},/**
   * Returns the index of the given item.
   *
   * @method indexOf
   * @param {Object} item
   * @returns Returns the index of the item
   */indexOf:function(item){return this.items?this.items.indexOf(item):-1},/**
   * Selects the given value.
   *
   * @method select
   * @param {string|number} value the value to select.
   */select:function(value){this.selected=value},/**
   * Selects the previous item.
   *
   * @method selectPrevious
   */selectPrevious:function(){var length=this.items.length,index=length-1;if(this.selected!==void 0){index=(+this._valueToIndex(this.selected)-1+length)%length}this.selected=this._indexToValue(index)},/**
   * Selects the next item.
   *
   * @method selectNext
   */selectNext:function(){var index=0;if(this.selected!==void 0){index=(+this._valueToIndex(this.selected)+1)%this.items.length}this.selected=this._indexToValue(index)},/**
   * Selects the item at the given index.
   *
   * @method selectIndex
   */selectIndex:function(index){this.select(this._indexToValue(index))},/**
   * Force a synchronous update of the `items` property.
   *
   * NOTE: Consider listening for the `iron-items-changed` event to respond to
   * updates to the set of selectable items after updates to the DOM list and
   * selection state have been made.
   *
   * WARNING: If you are using this method, you should probably consider an
   * alternate approach. Synchronously querying for items is potentially
   * slow for many use cases. The `items` property will update asynchronously
   * on its own to reflect selectable items in the DOM.
   */forceSynchronousItemUpdate:function(){if(this._observer&&"function"===typeof this._observer.flush){// NOTE(bicknellr): `dom.flush` above is no longer sufficient to trigger
// `observeNodes` callbacks. Polymer 2.x returns an object from
// `observeNodes` with a `flush` that synchronously gives the callback any
// pending MutationRecords (retrieved with `takeRecords`). Any case where
// ShadyDOM flushes were expected to synchronously trigger item updates
// will now require calling `forceSynchronousItemUpdate`.
this._observer.flush()}else{this._updateItems()}},// UNUSED, FOR API COMPATIBILITY
get _shouldUpdateSelection(){return null!=this.selected},_checkFallback:function(){this._updateSelected()},_addListener:function(eventName){this.listen(this,eventName,"_activateHandler")},_removeListener:function(eventName){this.unlisten(this,eventName,"_activateHandler")},_activateEventChanged:function(eventName,old){this._removeListener(old);this._addListener(eventName)},_updateItems:function(){var nodes=dom(this).queryDistributedElements(this.selectable||"*");nodes=Array.prototype.filter.call(nodes,this._bindFilterItem);this._setItems(nodes)},_updateAttrForSelected:function(){if(this.selectedItem){this.selected=this._valueForItem(this.selectedItem)}},_updateSelected:function(){this._selectSelected(this.selected)},_selectSelected:function(selected){if(!this.items){return}var item=this._valueToItem(this.selected);if(item){this._selection.select(item)}else{this._selection.clear()}// Check for items, since this array is populated only when attached
// Since Number(0) is falsy, explicitly check for undefined
if(this.fallbackSelection&&this.items.length&&this._selection.get()===void 0){this.selected=this.fallbackSelection}},_filterItem:function(node){return!this._excludedLocalNames[node.localName]},_valueToItem:function(value){return null==value?null:this.items[this._valueToIndex(value)]},_valueToIndex:function(value){if(this.attrForSelected){for(var i=0,item;item=this.items[i];i++){if(this._valueForItem(item)==value){return i}}}else{return+value}},_indexToValue:function(index){if(this.attrForSelected){var item=this.items[index];if(item){return this._valueForItem(item)}}else{return index}},_valueForItem:function(item){if(!item){return null}if(!this.attrForSelected){var i=this.indexOf(item);return-1===i?null:i}var propValue=item[dashToCamelCase(this.attrForSelected)];return propValue!=void 0?propValue:item.getAttribute(this.attrForSelected)},_applySelection:function(item,isSelected){if(this.selectedClass){this.toggleClass(this.selectedClass,isSelected,item)}if(this.selectedAttribute){this.toggleAttribute(this.selectedAttribute,isSelected,item)}this._selectionChange();this.fire("iron-"+(isSelected?"select":"deselect"),{item:item})},_selectionChange:function(){this._setSelectedItem(this._selection.get())},// observe items change under the given node.
_observeItems:function(node){return dom(node).observeNodes(function(mutation){this._updateItems();this._updateSelected();// Let other interested parties know about the change so that
// we don't have to recreate mutation observers everywhere.
this.fire("iron-items-changed",mutation,{bubbles:!1,cancelable:!1})})},_activateHandler:function(e){var t=e.target,items=this.items;while(t&&t!=this){var i=items.indexOf(t);if(0<=i){var value=this._indexToValue(i);this._itemActivate(value,t);return}t=t.parentNode}},_itemActivate:function(value,item){if(!this.fire("iron-activate",{selected:value,item:item},{cancelable:!0}).defaultPrevented){this.select(value)}}};_exports.IronSelectableBehavior=IronSelectableBehavior;var ironSelectable={IronSelectableBehavior:IronSelectableBehavior};_exports.$ironSelectable=ironSelectable;const IronMultiSelectableBehaviorImpl={properties:{/**
     * If true, multiple selections are allowed.
     */multi:{type:Boolean,value:!1,observer:"multiChanged"},/**
     * Gets or sets the selected elements. This is used instead of `selected`
     * when `multi` is true.
     */selectedValues:{type:Array,notify:!0,value:function(){return[]}},/**
     * Returns an array of currently selected items.
     */selectedItems:{type:Array,readOnly:!0,notify:!0,value:function(){return[]}}},observers:["_updateSelected(selectedValues.splices)"],/**
   * Selects the given value. If the `multi` property is true, then the selected
   * state of the `value` will be toggled; otherwise the `value` will be
   * selected.
   *
   * @method select
   * @param {string|number} value the value to select.
   */select:function(value){if(this.multi){this._toggleSelected(value)}else{this.selected=value}},multiChanged:function(multi){this._selection.multi=multi;this._updateSelected()},// UNUSED, FOR API COMPATIBILITY
get _shouldUpdateSelection(){return null!=this.selected||null!=this.selectedValues&&this.selectedValues.length},_updateAttrForSelected:function(){if(!this.multi){IronSelectableBehavior._updateAttrForSelected.apply(this)}else if(this.selectedItems&&0<this.selectedItems.length){this.selectedValues=this.selectedItems.map(function(selectedItem){return this._indexToValue(this.indexOf(selectedItem))},this).filter(function(unfilteredValue){return null!=unfilteredValue},this)}},_updateSelected:function(){if(this.multi){this._selectMulti(this.selectedValues)}else{this._selectSelected(this.selected)}},_selectMulti:function(values){values=values||[];var selectedItems=(this._valuesToItems(values)||[]).filter(function(item){return null!==item&&item!==void 0});// clear all but the current selected items
this._selection.clear(selectedItems);// select only those not selected yet
for(var i=0;i<selectedItems.length;i++){this._selection.setItemSelected(selectedItems[i],!0)}// Check for items, since this array is populated only when attached
if(this.fallbackSelection&&!this._selection.get().length){var fallback=this._valueToItem(this.fallbackSelection);if(fallback){this.select(this.fallbackSelection)}}},_selectionChange:function(){var s=this._selection.get();if(this.multi){this._setSelectedItems(s);this._setSelectedItem(s.length?s[0]:null)}else{if(null!==s&&s!==void 0){this._setSelectedItems([s]);this._setSelectedItem(s)}else{this._setSelectedItems([]);this._setSelectedItem(null)}}},_toggleSelected:function(value){var i=this.selectedValues.indexOf(value),unselected=0>i;if(unselected){this.push("selectedValues",value)}else{this.splice("selectedValues",i,1)}},_valuesToItems:function(values){return null==values?null:values.map(function(value){return this._valueToItem(value)},this)}};/** @polymerBehavior */_exports.IronMultiSelectableBehaviorImpl=IronMultiSelectableBehaviorImpl;const IronMultiSelectableBehavior=[IronSelectableBehavior,IronMultiSelectableBehaviorImpl];_exports.IronMultiSelectableBehavior=IronMultiSelectableBehavior;var ironMultiSelectable={IronMultiSelectableBehaviorImpl:IronMultiSelectableBehaviorImpl,IronMultiSelectableBehavior:IronMultiSelectableBehavior};_exports.$ironMultiSelectable=ironMultiSelectable;const IronMenuBehaviorImpl={properties:{/**
     * Returns the currently focused item.
     * @type {?Object}
     */focusedItem:{observer:"_focusedItemChanged",readOnly:!0,type:Object},/**
     * The attribute to use on menu items to look up the item title. Typing the
     * first letter of an item when the menu is open focuses that item. If
     * unset, `textContent` will be used.
     */attrForItemTitle:{type:String},/**
     * @type {boolean}
     */disabled:{type:Boolean,value:!1,observer:"_disabledChanged"}},/**
   * The list of keys has been taken from
   * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState
   * @private
   */_MODIFIER_KEYS:["Alt","AltGraph","CapsLock","Control","Fn","FnLock","Hyper","Meta","NumLock","OS","ScrollLock","Shift","Super","Symbol","SymbolLock"],/** @private */_SEARCH_RESET_TIMEOUT_MS:1e3,/** @private */_previousTabIndex:0,hostAttributes:{role:"menu"},observers:["_updateMultiselectable(multi)"],listeners:{focus:"_onFocus",keydown:"_onKeydown","iron-items-changed":"_onIronItemsChanged"},/**
   * @type {!Object}
   */keyBindings:{up:"_onUpKey",down:"_onDownKey",esc:"_onEscKey","shift+tab:keydown":"_onShiftTabDown"},attached:function(){this._resetTabindices()},/**
   * Selects the given value. If the `multi` property is true, then the selected
   * state of the `value` will be toggled; otherwise the `value` will be
   * selected.
   *
   * @param {string|number} value the value to select.
   */select:function(value){// Cancel automatically focusing a default item if the menu received focus
// through a user action selecting a particular item.
if(this._defaultFocusAsync){this.cancelAsync(this._defaultFocusAsync);this._defaultFocusAsync=null}var item=this._valueToItem(value);if(item&&item.hasAttribute("disabled"))return;this._setFocusedItem(item);IronMultiSelectableBehaviorImpl.select.apply(this,arguments)},/**
   * Resets all tabindex attributes to the appropriate value based on the
   * current selection state. The appropriate value is `0` (focusable) for
   * the default selected item, and `-1` (not keyboard focusable) for all
   * other items. Also sets the correct initial values for aria-selected
   * attribute, true for default selected item and false for others.
   */_resetTabindices:function(){var firstSelectedItem=this.multi?this.selectedItems&&this.selectedItems[0]:this.selectedItem;this.items.forEach(function(item){item.setAttribute("tabindex",item===firstSelectedItem?"0":"-1");item.setAttribute("aria-selected",this._selection.isSelected(item))},this)},/**
   * Sets appropriate ARIA based on whether or not the menu is meant to be
   * multi-selectable.
   *
   * @param {boolean} multi True if the menu should be multi-selectable.
   */_updateMultiselectable:function(multi){if(multi){this.setAttribute("aria-multiselectable","true")}else{this.removeAttribute("aria-multiselectable")}},/**
   * Given a KeyboardEvent, this method will focus the appropriate item in the
   * menu (if there is a relevant item, and it is possible to focus it).
   *
   * @param {KeyboardEvent} event A KeyboardEvent.
   */_focusWithKeyboardEvent:function(event){// Make sure that the key pressed is not a modifier key.
// getModifierState is not being used, as it is not available in Safari
// earlier than 10.0.2 (https://trac.webkit.org/changeset/206725/webkit)
if(-1!==this._MODIFIER_KEYS.indexOf(event.key))return;this.cancelDebouncer("_clearSearchText");var searchText=this._searchText||"",key=event.key&&1==event.key.length?event.key:String.fromCharCode(event.keyCode);searchText+=key.toLocaleLowerCase();for(var searchLength=searchText.length,i=0,item;item=this.items[i];i++){if(item.hasAttribute("disabled")){continue}var attr=this.attrForItemTitle||"textContent",title=(item[attr]||item.getAttribute(attr)||"").trim();if(title.length<searchLength){continue}if(title.slice(0,searchLength).toLocaleLowerCase()==searchText){this._setFocusedItem(item);break}}this._searchText=searchText;this.debounce("_clearSearchText",this._clearSearchText,this._SEARCH_RESET_TIMEOUT_MS)},_clearSearchText:function(){this._searchText=""},/**
   * Focuses the previous item (relative to the currently focused item) in the
   * menu, disabled items will be skipped.
   * Loop until length + 1 to handle case of single item in menu.
   */_focusPrevious:function(){for(var length=this.items.length,curFocusIndex=+this.indexOf(this.focusedItem),i=1,item;i<length+1;i++){item=this.items[(curFocusIndex-i+length)%length];if(!item.hasAttribute("disabled")){var owner=dom(item).getOwnerRoot()||document;this._setFocusedItem(item);// Focus might not have worked, if the element was hidden or not
// focusable. In that case, try again.
if(dom(owner).activeElement==item){return}}}},/**
   * Focuses the next item (relative to the currently focused item) in the
   * menu, disabled items will be skipped.
   * Loop until length + 1 to handle case of single item in menu.
   */_focusNext:function(){for(var length=this.items.length,curFocusIndex=+this.indexOf(this.focusedItem),i=1,item;i<length+1;i++){item=this.items[(curFocusIndex+i)%length];if(!item.hasAttribute("disabled")){var owner=dom(item).getOwnerRoot()||document;this._setFocusedItem(item);// Focus might not have worked, if the element was hidden or not
// focusable. In that case, try again.
if(dom(owner).activeElement==item){return}}}},/**
   * Mutates items in the menu based on provided selection details, so that
   * all items correctly reflect selection state.
   *
   * @param {Element} item An item in the menu.
   * @param {boolean} isSelected True if the item should be shown in a
   * selected state, otherwise false.
   */_applySelection:function(item,isSelected){if(isSelected){item.setAttribute("aria-selected","true")}else{item.setAttribute("aria-selected","false")}IronSelectableBehavior._applySelection.apply(this,arguments)},/**
   * Discretely updates tabindex values among menu items as the focused item
   * changes.
   *
   * @param {Element} focusedItem The element that is currently focused.
   * @param {?Element} old The last element that was considered focused, if
   * applicable.
   */_focusedItemChanged:function(focusedItem,old){old&&old.setAttribute("tabindex","-1");if(focusedItem&&!focusedItem.hasAttribute("disabled")&&!this.disabled){focusedItem.setAttribute("tabindex","0");focusedItem.focus()}},/**
   * A handler that responds to mutation changes related to the list of items
   * in the menu.
   *
   * @param {CustomEvent} event An event containing mutation records as its
   * detail.
   */_onIronItemsChanged:function(event){if(event.detail.addedNodes.length){this._resetTabindices()}},/**
   * Handler that is called when a shift+tab keypress is detected by the menu.
   *
   * @param {CustomEvent} event A key combination event.
   */_onShiftTabDown:function(event){var oldTabIndex=this.getAttribute("tabindex");IronMenuBehaviorImpl._shiftTabPressed=!0;this._setFocusedItem(null);this.setAttribute("tabindex","-1");this.async(function(){this.setAttribute("tabindex",oldTabIndex);IronMenuBehaviorImpl._shiftTabPressed=!1;// NOTE(cdata): polymer/polymer#1305
},1)},/**
   * Handler that is called when the menu receives focus.
   *
   * @param {FocusEvent} event A focus event.
   */_onFocus:function(event){if(IronMenuBehaviorImpl._shiftTabPressed){// do not focus the menu itself
return}// Do not focus the selected tab if the deepest target is part of the
// menu element's local DOM and is focusable.
var rootTarget=/** @type {?HTMLElement} */dom(event).rootTarget;if(rootTarget!==this&&"undefined"!==typeof rootTarget.tabIndex&&!this.isLightDescendant(rootTarget)){return}// clear the cached focus item
this._defaultFocusAsync=this.async(function(){// focus the selected item when the menu receives focus, or the first item
// if no item is selected
var firstSelectedItem=this.multi?this.selectedItems&&this.selectedItems[0]:this.selectedItem;this._setFocusedItem(null);if(firstSelectedItem){this._setFocusedItem(firstSelectedItem)}else if(this.items[0]){// We find the first none-disabled item (if one exists)
this._focusNext()}})},/**
   * Handler that is called when the up key is pressed.
   *
   * @param {CustomEvent} event A key combination event.
   */_onUpKey:function(event){// up and down arrows moves the focus
this._focusPrevious();event.detail.keyboardEvent.preventDefault()},/**
   * Handler that is called when the down key is pressed.
   *
   * @param {CustomEvent} event A key combination event.
   */_onDownKey:function(event){this._focusNext();event.detail.keyboardEvent.preventDefault()},/**
   * Handler that is called when the esc key is pressed.
   *
   * @param {CustomEvent} event A key combination event.
   */_onEscKey:function(event){var focusedItem=this.focusedItem;if(focusedItem){focusedItem.blur()}},/**
   * Handler that is called when a keydown event is detected.
   *
   * @param {KeyboardEvent} event A keyboard event.
   */_onKeydown:function(event){if(!this.keyboardEventMatchesKeys(event,"up down esc")){// all other keys focus the menu item starting with that character
this._focusWithKeyboardEvent(event)}event.stopPropagation()},// override _activateHandler
_activateHandler:function(event){IronSelectableBehavior._activateHandler.call(this,event);event.stopPropagation()},/**
   * Updates this element's tab index when it's enabled/disabled.
   * @param {boolean} disabled
   */_disabledChanged:function(disabled){if(disabled){this._previousTabIndex=this.hasAttribute("tabindex")?this.tabIndex:0;this.removeAttribute("tabindex");// No tabindex means not tab-able or select-able.
}else if(!this.hasAttribute("tabindex")){this.setAttribute("tabindex",this._previousTabIndex)}}};_exports.IronMenuBehaviorImpl=IronMenuBehaviorImpl;IronMenuBehaviorImpl._shiftTabPressed=!1;/** @polymerBehavior */const IronMenuBehavior=[IronMultiSelectableBehavior,IronA11yKeysBehavior,IronMenuBehaviorImpl];_exports.IronMenuBehavior=IronMenuBehavior;var ironMenuBehavior={IronMenuBehaviorImpl:IronMenuBehaviorImpl,IronMenuBehavior:IronMenuBehavior};_exports.$ironMenuBehavior=ironMenuBehavior;const IronMenubarBehaviorImpl={hostAttributes:{role:"menubar"},/**
   * @type {!Object}
   */keyBindings:{left:"_onLeftKey",right:"_onRightKey"},_onUpKey:function(event){this.focusedItem.click();event.detail.keyboardEvent.preventDefault()},_onDownKey:function(event){this.focusedItem.click();event.detail.keyboardEvent.preventDefault()},get _isRTL(){return"rtl"===window.getComputedStyle(this).direction},_onLeftKey:function(event){if(this._isRTL){this._focusNext()}else{this._focusPrevious()}event.detail.keyboardEvent.preventDefault()},_onRightKey:function(event){if(this._isRTL){this._focusPrevious()}else{this._focusNext()}event.detail.keyboardEvent.preventDefault()},_onKeydown:function(event){if(this.keyboardEventMatchesKeys(event,"up down left right esc")){return}// all other keys focus the menu item starting with that character
this._focusWithKeyboardEvent(event)}};/** @polymerBehavior */_exports.IronMenubarBehaviorImpl=IronMenubarBehaviorImpl;const IronMenubarBehavior=[IronMenuBehavior,IronMenubarBehaviorImpl];_exports.IronMenubarBehavior=IronMenubarBehavior;var ironMenubarBehavior={IronMenubarBehaviorImpl:IronMenubarBehaviorImpl,IronMenubarBehavior:IronMenubarBehavior};_exports.$ironMenubarBehavior=ironMenubarBehavior;const IronRangeBehavior={properties:{/**
     * The number that represents the current value.
     */value:{type:Number,value:0,notify:!0,reflectToAttribute:!0},/**
     * The number that indicates the minimum value of the range.
     */min:{type:Number,value:0,notify:!0},/**
     * The number that indicates the maximum value of the range.
     */max:{type:Number,value:100,notify:!0},/**
     * Specifies the value granularity of the range's value.
     */step:{type:Number,value:1,notify:!0},/**
     * Returns the ratio of the value.
     */ratio:{type:Number,value:0,readOnly:!0,notify:!0}},observers:["_update(value, min, max, step)"],_calcRatio:function(value){return(this._clampValue(value)-this.min)/(this.max-this.min)},_clampValue:function(value){return Math.min(this.max,Math.max(this.min,this._calcStep(value)))},_calcStep:function(value){// polymer/issues/2493
value=parseFloat(value);if(!this.step){return value}var numSteps=Math.round((value-this.min)/this.step);if(1>this.step){/**
       * For small values of this.step, if we calculate the step using
       * `Math.round(value / step) * step` we may hit a precision point issue
       * eg. 0.1 * 0.2 =  0.020000000000000004
       * http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html
       *
       * as a work around we can divide by the reciprocal of `step`
       */return numSteps/(1/this.step)+this.min}else{return numSteps*this.step+this.min}},_validateValue:function(){var v=this._clampValue(this.value);this.value=this.oldValue=isNaN(v)?this.oldValue:v;return this.value!==v},_update:function(){this._validateValue();this._setRatio(100*this._calcRatio(this.value))}};_exports.IronRangeBehavior=IronRangeBehavior;var ironRangeBehavior={IronRangeBehavior:IronRangeBehavior};/**
    * marked - a markdown parser
    * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)
    * https://github.com/markedjs/marked
    */_exports.$ironRangeBehavior=ironRangeBehavior;;(function(root){'use strict';/**
                 * Block-Level Grammar
                 */var block={newline:/^\n+/,code:/^( {4}[^\n]+\n*)+/,fences:noop,hr:/^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\* *){3,})(?:\n+|$)/,heading:/^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/,nptable:noop,blockquote:/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,list:/^( *)(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,html:/^ *(?:comment *(?:\n|\s*$)|closed *(?:\n{2,}|\s*$)|closing *(?:\n{2,}|\s*$))/,def:/^ {0,3}\[(label)\]: *\n? *<?([^\s>]+)>?(?:(?: +\n? *| *\n *)(title))? *(?:\n+|$)/,table:noop,lheading:/^([^\n]+)\n *(=|-){2,} *(?:\n+|$)/,paragraph:/^([^\n]+(?:\n?(?!hr|heading|lheading| {0,3}>|tag)[^\n]+)+)/,text:/^[^\n]+/,_label:/(?:\\[\[\]]|[^\[\]])+/,_title:/(?:"(?:\\"|[^"]|"[^"\n]*")*"|'\n?(?:[^'\n]+\n?)*'|\([^()]*\))/};block.def=edit(block.def).replace("label",block._label).replace("title",block._title).getRegex();block.bullet=/(?:[*+-]|\d+\.)/;block.item=/^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/;block.item=edit(block.item,"gm").replace(/bull/g,block.bullet).getRegex();block.list=edit(block.list).replace(/bull/g,block.bullet).replace("hr","\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def","\\n+(?="+block.def.source+")").getRegex();block._tag="(?!(?:"+"a|em|strong|small|s|cite|q|dfn|abbr|data|time|code"+"|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo"+"|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b";block.html=edit(block.html).replace("comment",/<!--[\s\S]*?-->/).replace("closed",/<(tag)[\s\S]+?<\/\1>/).replace("closing",/<tag(?:"[^"]*"|'[^']*'|\s[^'"\/>\s]*)*?\/?>/).replace(/tag/g,block._tag).getRegex();block.paragraph=edit(block.paragraph).replace("hr",block.hr).replace("heading",block.heading).replace("lheading",block.lheading).replace("tag","<"+block._tag).getRegex();block.blockquote=edit(block.blockquote).replace("paragraph",block.paragraph).getRegex();/**
                                                                                               * Normal Block Grammar
                                                                                               */block.normal=merge({},block);/**
                                    * GFM Block Grammar
                                    */block.gfm=merge({},block.normal,{fences:/^ *(`{3,}|~{3,})[ \.]*(\S+)? *\n([\s\S]*?)\n? *\1 *(?:\n+|$)/,paragraph:/^/,heading:/^ *(#{1,6}) +([^\n]+?) *#* *(?:\n+|$)/});block.gfm.paragraph=edit(block.paragraph).replace("(?!","(?!"+block.gfm.fences.source.replace("\\1","\\2")+"|"+block.list.source.replace("\\1","\\3")+"|").getRegex();/**
                                                                                                                                                                                       * GFM + Tables Block Grammar
                                                                                                                                                                                       */block.tables=merge({},block.gfm,{nptable:/^ *(\S.*\|.*)\n *([-:]+ *\|[-| :]*)\n((?:.*\|.*(?:\n|$))*)\n*/,table:/^ *\|(.+)\n *\|( *[-:]+[-| :]*)\n((?: *\|.*(?:\n|$))*)\n*/});/**
       * Block Lexer
       */function Lexer(options){this.tokens=[];this.tokens.links={};this.options=options||marked.defaults;this.rules=block.normal;if(this.options.gfm){if(this.options.tables){this.rules=block.tables}else{this.rules=block.gfm}}}/**
     * Expose Block Rules
     */Lexer.rules=block;/**
                        * Static Lex Method
                        */Lexer.lex=function(src,options){var lexer=new Lexer(options);return lexer.lex(src)};/**
      * Preprocessing
      */Lexer.prototype.lex=function(src){src=src.replace(/\r\n|\r/g,"\n").replace(/\t/g,"    ").replace(/\u00a0/g," ").replace(/\u2424/g,"\n");return this.token(src,!0)};/**
      * Lexing
      */Lexer.prototype.token=function(src,top){src=src.replace(/^ +$/gm,"");var next,loose,cap,bull,b,item,space,i,tag,l,isordered;while(src){// newline
if(cap=this.rules.newline.exec(src)){src=src.substring(cap[0].length);if(1<cap[0].length){this.tokens.push({type:"space"})}}// code
if(cap=this.rules.code.exec(src)){src=src.substring(cap[0].length);cap=cap[0].replace(/^ {4}/gm,"");this.tokens.push({type:"code",text:!this.options.pedantic?cap.replace(/\n+$/,""):cap});continue}// fences (gfm)
if(cap=this.rules.fences.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"code",lang:cap[2],text:cap[3]||""});continue}// heading
if(cap=this.rules.heading.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"heading",depth:cap[1].length,text:cap[2]});continue}// table no leading pipe (gfm)
if(top&&(cap=this.rules.nptable.exec(src))){src=src.substring(cap[0].length);item={type:"table",header:cap[1].replace(/^ *| *\| *$/g,"").split(/ *\| */),align:cap[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:cap[3].replace(/\n$/,"").split("\n")};for(i=0;i<item.align.length;i++){if(/^ *-+: *$/.test(item.align[i])){item.align[i]="right"}else if(/^ *:-+: *$/.test(item.align[i])){item.align[i]="center"}else if(/^ *:-+ *$/.test(item.align[i])){item.align[i]="left"}else{item.align[i]=null}}for(i=0;i<item.cells.length;i++){item.cells[i]=item.cells[i].split(/ *\| */)}this.tokens.push(item);continue}// hr
if(cap=this.rules.hr.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"hr"});continue}// blockquote
if(cap=this.rules.blockquote.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"blockquote_start"});cap=cap[0].replace(/^ *> ?/gm,"");// Pass `top` to keep the current
// "toplevel" state. This is exactly
// how markdown.pl works.
this.token(cap,top);this.tokens.push({type:"blockquote_end"});continue}// list
if(cap=this.rules.list.exec(src)){src=src.substring(cap[0].length);bull=cap[2];isordered=1<bull.length;this.tokens.push({type:"list_start",ordered:isordered,start:isordered?+bull:""});// Get each top-level item.
cap=cap[0].match(this.rules.item);next=!1;l=cap.length;i=0;for(;i<l;i++){item=cap[i];// Remove the list item's bullet
// so it is seen as the next token.
space=item.length;item=item.replace(/^ *([*+-]|\d+\.) +/,"");// Outdent whatever the
// list item contains. Hacky.
if(~item.indexOf("\n ")){space-=item.length;item=!this.options.pedantic?item.replace(new RegExp("^ {1,"+space+"}","gm"),""):item.replace(/^ {1,4}/gm,"")}// Determine whether the next list item belongs here.
// Backpedal if it does not belong in this list.
if(this.options.smartLists&&i!==l-1){b=block.bullet.exec(cap[i+1])[0];if(bull!==b&&!(1<bull.length&&1<b.length)){src=cap.slice(i+1).join("\n")+src;i=l-1}}// Determine whether item is loose or not.
// Use: /(^|\n)(?! )[^\n]+\n\n(?!\s*$)/
// for discount behavior.
loose=next||/\n\n(?!\s*$)/.test(item);if(i!==l-1){next="\n"===item.charAt(item.length-1);if(!loose)loose=next}this.tokens.push({type:loose?"loose_item_start":"list_item_start"});// Recurse.
this.token(item,!1);this.tokens.push({type:"list_item_end"})}this.tokens.push({type:"list_end"});continue}// html
if(cap=this.rules.html.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:this.options.sanitize?"paragraph":"html",pre:!this.options.sanitizer&&("pre"===cap[1]||"script"===cap[1]||"style"===cap[1]),text:cap[0]});continue}// def
if(top&&(cap=this.rules.def.exec(src))){src=src.substring(cap[0].length);if(cap[3])cap[3]=cap[3].substring(1,cap[3].length-1);tag=cap[1].toLowerCase();if(!this.tokens.links[tag]){this.tokens.links[tag]={href:cap[2],title:cap[3]}}continue}// table (gfm)
if(top&&(cap=this.rules.table.exec(src))){src=src.substring(cap[0].length);item={type:"table",header:cap[1].replace(/^ *| *\| *$/g,"").split(/ *\| */),align:cap[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:cap[3].replace(/(?: *\| *)?\n$/,"").split("\n")};for(i=0;i<item.align.length;i++){if(/^ *-+: *$/.test(item.align[i])){item.align[i]="right"}else if(/^ *:-+: *$/.test(item.align[i])){item.align[i]="center"}else if(/^ *:-+ *$/.test(item.align[i])){item.align[i]="left"}else{item.align[i]=null}}for(i=0;i<item.cells.length;i++){item.cells[i]=item.cells[i].replace(/^ *\| *| *\| *$/g,"").split(/ *\| */)}this.tokens.push(item);continue}// lheading
if(cap=this.rules.lheading.exec(src)){src=src.substring(cap[0].length);this.tokens.push({type:"heading",depth:"="===cap[2]?1:2,text:cap[1]});continue}// top-level paragraph
if(top&&(cap=this.rules.paragraph.exec(src))){src=src.substring(cap[0].length);this.tokens.push({type:"paragraph",text:"\n"===cap[1].charAt(cap[1].length-1)?cap[1].slice(0,-1):cap[1]});continue}// text
if(cap=this.rules.text.exec(src)){// Top-level should never reach here.
src=src.substring(cap[0].length);this.tokens.push({type:"text",text:cap[0]});continue}if(src){throw new Error("Infinite loop on byte: "+src.charCodeAt(0))}}return this.tokens};/**
      * Inline-Level Grammar
      */var inline={escape:/^\\([\\`*{}\[\]()#+\-.!_>])/,autolink:/^<(scheme:[^\s\x00-\x1f<>]*|email)>/,url:noop,tag:/^<!--[\s\S]*?-->|^<\/?[a-zA-Z0-9\-]+(?:"[^"]*"|'[^']*'|\s[^<'">\/\s]*)*?\/?>/,link:/^!?\[(inside)\]\(href\)/,reflink:/^!?\[(inside)\]\s*\[([^\]]*)\]/,nolink:/^!?\[((?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]])*)\]/,strong:/^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,em:/^_([^\s_](?:[^_]|__)+?[^\s_])_\b|^\*((?:\*\*|[^*])+?)\*(?!\*)/,code:/^(`+)\s*([\s\S]*?[^`]?)\s*\1(?!`)/,br:/^ {2,}\n(?!\s*$)/,del:noop,text:/^[\s\S]+?(?=[\\<!\[`*]|\b_| {2,}\n|$)/,_scheme:/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/,_email:/[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/};inline.autolink=edit(inline.autolink).replace("scheme",inline._scheme).replace("email",inline._email).getRegex();inline._inside=/(?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]]|\](?=[^\[]*\]))*/;inline._href=/\s*<?([\s\S]*?)>?(?:\s+['"]([\s\S]*?)['"])?\s*/;inline.link=edit(inline.link).replace("inside",inline._inside).replace("href",inline._href).getRegex();inline.reflink=edit(inline.reflink).replace("inside",inline._inside).getRegex();/**
                                                                                       * Normal Inline Grammar
                                                                                       */inline.normal=merge({},inline);/**
                                      * Pedantic Inline Grammar
                                      */inline.pedantic=merge({},inline.normal,{strong:/^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,em:/^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/});/**
       * GFM Inline Grammar
       */inline.gfm=merge({},inline.normal,{escape:edit(inline.escape).replace("])","~|])").getRegex(),url:edit(/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/).replace("email",inline._email).getRegex(),_backpedal:/(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,del:/^~~(?=\S)([\s\S]*?\S)~~/,text:edit(inline.text).replace("]|","~]|").replace("|","|https?://|ftp://|www\\.|[a-zA-Z0-9.!#$%&'*+/=?^_`{\\|}~-]+@|").getRegex()});/**
       * GFM + Line Breaks Inline Grammar
       */inline.breaks=merge({},inline.gfm,{br:edit(inline.br).replace("{2,}","*").getRegex(),text:edit(inline.gfm.text).replace("{2,}","*").getRegex()});/**
       * Inline Lexer & Compiler
       */function InlineLexer(links,options){this.options=options||marked.defaults;this.links=links;this.rules=inline.normal;this.renderer=this.options.renderer||new Renderer;this.renderer.options=this.options;if(!this.links){throw new Error("Tokens array requires a `links` property.")}if(this.options.gfm){if(this.options.breaks){this.rules=inline.breaks}else{this.rules=inline.gfm}}else if(this.options.pedantic){this.rules=inline.pedantic}}/**
     * Expose Inline Rules
     */InlineLexer.rules=inline;/**
                               * Static Lexing/Compiling Method
                               */InlineLexer.output=function(src,links,options){var inline=new InlineLexer(links,options);return inline.output(src)};/**
      * Lexing/Compiling
      */InlineLexer.prototype.output=function(src){var out="",link,text,href,cap;while(src){// escape
if(cap=this.rules.escape.exec(src)){src=src.substring(cap[0].length);out+=cap[1];continue}// autolink
if(cap=this.rules.autolink.exec(src)){src=src.substring(cap[0].length);if("@"===cap[2]){text=escape(this.mangle(cap[1]));href="mailto:"+text}else{text=escape(cap[1]);href=text}out+=this.renderer.link(href,null,text);continue}// url (gfm)
if(!this.inLink&&(cap=this.rules.url.exec(src))){cap[0]=this.rules._backpedal.exec(cap[0])[0];src=src.substring(cap[0].length);if("@"===cap[2]){text=escape(cap[0]);href="mailto:"+text}else{text=escape(cap[0]);if("www."===cap[1]){href="http://"+text}else{href=text}}out+=this.renderer.link(href,null,text);continue}// tag
if(cap=this.rules.tag.exec(src)){if(!this.inLink&&/^<a /i.test(cap[0])){this.inLink=!0}else if(this.inLink&&/^<\/a>/i.test(cap[0])){this.inLink=!1}src=src.substring(cap[0].length);out+=this.options.sanitize?this.options.sanitizer?this.options.sanitizer(cap[0]):escape(cap[0]):cap[0];continue}// link
if(cap=this.rules.link.exec(src)){src=src.substring(cap[0].length);this.inLink=!0;out+=this.outputLink(cap,{href:cap[2],title:cap[3]});this.inLink=!1;continue}// reflink, nolink
if((cap=this.rules.reflink.exec(src))||(cap=this.rules.nolink.exec(src))){src=src.substring(cap[0].length);link=(cap[2]||cap[1]).replace(/\s+/g," ");link=this.links[link.toLowerCase()];if(!link||!link.href){out+=cap[0].charAt(0);src=cap[0].substring(1)+src;continue}this.inLink=!0;out+=this.outputLink(cap,link);this.inLink=!1;continue}// strong
if(cap=this.rules.strong.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.strong(this.output(cap[2]||cap[1]));continue}// em
if(cap=this.rules.em.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.em(this.output(cap[2]||cap[1]));continue}// code
if(cap=this.rules.code.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.codespan(escape(cap[2].trim(),!0));continue}// br
if(cap=this.rules.br.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.br();continue}// del (gfm)
if(cap=this.rules.del.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.del(this.output(cap[1]));continue}// text
if(cap=this.rules.text.exec(src)){src=src.substring(cap[0].length);out+=this.renderer.text(escape(this.smartypants(cap[0])));continue}if(src){throw new Error("Infinite loop on byte: "+src.charCodeAt(0))}}return out};/**
      * Compile Link
      */InlineLexer.prototype.outputLink=function(cap,link){var href=escape(link.href),title=link.title?escape(link.title):null;return"!"!==cap[0].charAt(0)?this.renderer.link(href,title,this.output(cap[1])):this.renderer.image(href,title,escape(cap[1]))};/**
      * Smartypants Transformations
      */InlineLexer.prototype.smartypants=function(text){if(!this.options.smartypants)return text;return text// em-dashes
.replace(/---/g,"\u2014")// en-dashes
.replace(/--/g,"\u2013")// opening singles
.replace(/(^|[-\u2014/(\[{"\s])'/g,"$1\u2018")// closing singles & apostrophes
.replace(/'/g,"\u2019")// opening doubles
.replace(/(^|[-\u2014/(\[{\u2018\s])"/g,"$1\u201C")// closing doubles
.replace(/"/g,"\u201D")// ellipses
.replace(/\.{3}/g,"\u2026")};/**
      * Mangle Links
      */InlineLexer.prototype.mangle=function(text){if(!this.options.mangle)return text;var out="",l=text.length,i=0,ch;for(;i<l;i++){ch=text.charCodeAt(i);if(.5<Math.random()){ch="x"+ch.toString(16)}out+="&#"+ch+";"}return out};/**
      * Renderer
      */function Renderer(options){this.options=options||{}}Renderer.prototype.code=function(code,lang,escaped){if(this.options.highlight){var out=this.options.highlight(code,lang);if(null!=out&&out!==code){escaped=!0;code=out}}if(!lang){return"<pre><code>"+(escaped?code:escape(code,!0))+"\n</code></pre>"}return"<pre><code class=\""+this.options.langPrefix+escape(lang,!0)+"\">"+(escaped?code:escape(code,!0))+"\n</code></pre>\n"};Renderer.prototype.blockquote=function(quote){return"<blockquote>\n"+quote+"</blockquote>\n"};Renderer.prototype.html=function(html){return html};Renderer.prototype.heading=function(text,level,raw){return"<h"+level+" id=\""+this.options.headerPrefix+raw.toLowerCase().replace(/[^\w]+/g,"-")+"\">"+text+"</h"+level+">\n"};Renderer.prototype.hr=function(){return this.options.xhtml?"<hr/>\n":"<hr>\n"};Renderer.prototype.list=function(body,ordered,start){var type=ordered?"ol":"ul",startatt=ordered&&1!==start?" start=\""+start+"\"":"";return"<"+type+startatt+">\n"+body+"</"+type+">\n"};Renderer.prototype.listitem=function(text){return"<li>"+text+"</li>\n"};Renderer.prototype.paragraph=function(text){return"<p>"+text+"</p>\n"};Renderer.prototype.table=function(header,body){return"<table>\n"+"<thead>\n"+header+"</thead>\n"+"<tbody>\n"+body+"</tbody>\n"+"</table>\n"};Renderer.prototype.tablerow=function(content){return"<tr>\n"+content+"</tr>\n"};Renderer.prototype.tablecell=function(content,flags){var type=flags.header?"th":"td",tag=flags.align?"<"+type+" style=\"text-align:"+flags.align+"\">":"<"+type+">";return tag+content+"</"+type+">\n"};// span level renderer
Renderer.prototype.strong=function(text){return"<strong>"+text+"</strong>"};Renderer.prototype.em=function(text){return"<em>"+text+"</em>"};Renderer.prototype.codespan=function(text){return"<code>"+text+"</code>"};Renderer.prototype.br=function(){return this.options.xhtml?"<br/>":"<br>"};Renderer.prototype.del=function(text){return"<del>"+text+"</del>"};Renderer.prototype.link=function(href,title,text){if(this.options.sanitize){try{var prot=decodeURIComponent(unescape(href)).replace(/[^\w:]/g,"").toLowerCase()}catch(e){return text}if(0===prot.indexOf("javascript:")||0===prot.indexOf("vbscript:")||0===prot.indexOf("data:")){return text}}if(this.options.baseUrl&&!originIndependentUrl.test(href)){href=resolveUrl(this.options.baseUrl,href)}var out="<a href=\""+href+"\"";if(title){out+=" title=\""+title+"\""}out+=">"+text+"</a>";return out};Renderer.prototype.image=function(href,title,text){if(this.options.baseUrl&&!originIndependentUrl.test(href)){href=resolveUrl(this.options.baseUrl,href)}var out="<img src=\""+href+"\" alt=\""+text+"\"";if(title){out+=" title=\""+title+"\""}out+=this.options.xhtml?"/>":">";return out};Renderer.prototype.text=function(text){return text};/**
      * TextRenderer
      * returns only the textual part of the token
      */function TextRenderer(){}// no need for block level renderers
TextRenderer.prototype.strong=TextRenderer.prototype.em=TextRenderer.prototype.codespan=TextRenderer.prototype.del=TextRenderer.prototype.text=function(text){return text};TextRenderer.prototype.link=TextRenderer.prototype.image=function(href,title,text){return""+text};TextRenderer.prototype.br=function(){return""};/**
      * Parsing & Compiling
      */function Parser(options){this.tokens=[];this.token=null;this.options=options||marked.defaults;this.options.renderer=this.options.renderer||new Renderer;this.renderer=this.options.renderer;this.renderer.options=this.options}/**
     * Static Parse Method
     */Parser.parse=function(src,options){var parser=new Parser(options);return parser.parse(src)};/**
      * Parse Loop
      */Parser.prototype.parse=function(src){this.inline=new InlineLexer(src.links,this.options);// use an InlineLexer with a TextRenderer to extract pure text
this.inlineText=new InlineLexer(src.links,merge({},this.options,{renderer:new TextRenderer}));this.tokens=src.reverse();var out="";while(this.next()){out+=this.tok()}return out};/**
      * Next Token
      */Parser.prototype.next=function(){return this.token=this.tokens.pop()};/**
      * Preview Next Token
      */Parser.prototype.peek=function(){return this.tokens[this.tokens.length-1]||0};/**
      * Parse Text Tokens
      */Parser.prototype.parseText=function(){var body=this.token.text;while("text"===this.peek().type){body+="\n"+this.next().text}return this.inline.output(body)};/**
      * Parse Current Token
      */Parser.prototype.tok=function(){switch(this.token.type){case"space":{return""}case"hr":{return this.renderer.hr()}case"heading":{return this.renderer.heading(this.inline.output(this.token.text),this.token.depth,unescape(this.inlineText.output(this.token.text)))}case"code":{return this.renderer.code(this.token.text,this.token.lang,this.token.escaped)}case"table":{var header="",body="",i,row,cell,j;// header
cell="";for(i=0;i<this.token.header.length;i++){cell+=this.renderer.tablecell(this.inline.output(this.token.header[i]),{header:!0,align:this.token.align[i]})}header+=this.renderer.tablerow(cell);for(i=0;i<this.token.cells.length;i++){row=this.token.cells[i];cell="";for(j=0;j<row.length;j++){cell+=this.renderer.tablecell(this.inline.output(row[j]),{header:!1,align:this.token.align[j]})}body+=this.renderer.tablerow(cell)}return this.renderer.table(header,body)}case"blockquote_start":{body="";while("blockquote_end"!==this.next().type){body+=this.tok()}return this.renderer.blockquote(body)}case"list_start":{body="";var ordered=this.token.ordered,start=this.token.start;while("list_end"!==this.next().type){body+=this.tok()}return this.renderer.list(body,ordered,start)}case"list_item_start":{body="";while("list_item_end"!==this.next().type){body+="text"===this.token.type?this.parseText():this.tok()}return this.renderer.listitem(body)}case"loose_item_start":{body="";while("list_item_end"!==this.next().type){body+=this.tok()}return this.renderer.listitem(body)}case"html":{var html=!this.token.pre&&!this.options.pedantic?this.inline.output(this.token.text):this.token.text;return this.renderer.html(html)}case"paragraph":{return this.renderer.paragraph(this.inline.output(this.token.text))}case"text":{return this.renderer.paragraph(this.parseText())}}};/**
      * Helpers
      */function escape(html,encode){return html.replace(!encode?/&(?!#?\w+;)/g:/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;")}function unescape(html){// explicitly match decimal, hex, and named HTML entities
return html.replace(/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig,function(_,n){n=n.toLowerCase();if("colon"===n)return":";if("#"===n.charAt(0)){return"x"===n.charAt(1)?String.fromCharCode(parseInt(n.substring(2),16)):String.fromCharCode(+n.substring(1))}return""})}function edit(regex,opt){regex=regex.source;opt=opt||"";return{replace:function(name,val){val=val.source||val;val=val.replace(/(^|[^\[])\^/g,"$1");regex=regex.replace(name,val);return this},getRegex:function(){return new RegExp(regex,opt)}}}function resolveUrl(base,href){if(!baseUrls[" "+base]){// we can ignore everything in base after the last slash of its path component,
// but we might need to add _that_
// https://tools.ietf.org/html/rfc3986#section-3
if(/^[^:]+:\/*[^/]*$/.test(base)){baseUrls[" "+base]=base+"/"}else{baseUrls[" "+base]=base.replace(/[^/]*$/,"")}}base=baseUrls[" "+base];if("//"===href.slice(0,2)){return base.replace(/:[\s\S]*/,":")+href}else if("/"===href.charAt(0)){return base.replace(/(:\/*[^/]*)[\s\S]*/,"$1")+href}else{return base+href}}var baseUrls={},originIndependentUrl=/^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;function noop(){}noop.exec=noop;function merge(obj){var i=1,target,key;for(;i<arguments.length;i++){target=arguments[i];for(key in target){if(Object.prototype.hasOwnProperty.call(target,key)){obj[key]=target[key]}}}return obj}/**
     * Marked
     */function marked(src,opt,callback){// throw error in case of non string input
if("undefined"===typeof src||null===src){throw new Error("marked(): input parameter is undefined or null")}if("string"!==typeof src){throw new Error("marked(): input parameter is of type "+Object.prototype.toString.call(src)+", string expected")}if(callback||"function"===typeof opt){if(!callback){callback=opt;opt=null}opt=merge({},marked.defaults,opt||{});var highlight=opt.highlight,tokens,pending,i=0;try{tokens=Lexer.lex(src,opt)}catch(e){return callback(e)}pending=tokens.length;var done=function(err){if(err){opt.highlight=highlight;return callback(err)}var out;try{out=Parser.parse(tokens,opt)}catch(e){err=e}opt.highlight=highlight;return err?callback(err):callback(null,out)};if(!highlight||3>highlight.length){return done()}delete opt.highlight;if(!pending)return done();for(;i<tokens.length;i++){(function(token){if("code"!==token.type){return--pending||done()}return highlight(token.text,token.lang,function(err,code){if(err)return done(err);if(null==code||code===token.text){return--pending||done()}token.text=code;token.escaped=!0;--pending||done()})})(tokens[i])}return}try{if(opt)opt=merge({},marked.defaults,opt);return Parser.parse(Lexer.lex(src,opt),opt)}catch(e){e.message+="\nPlease report this to https://github.com/markedjs/marked.";if((opt||marked.defaults).silent){return"<p>An error occurred:</p><pre>"+escape(e.message+"",!0)+"</pre>"}throw e}}/**
     * Options
     */marked.options=marked.setOptions=function(opt){merge(marked.defaults,opt);return marked};marked.defaults={gfm:!0,tables:!0,breaks:!1,pedantic:!1,sanitize:!1,sanitizer:null,mangle:!0,smartLists:!1,silent:!1,highlight:null,langPrefix:"lang-",smartypants:!1,headerPrefix:"",renderer:new Renderer,xhtml:!1,baseUrl:null};/**
      * Expose
      */marked.Parser=Parser;marked.parser=Parser.parse;marked.Renderer=Renderer;marked.TextRenderer=TextRenderer;marked.Lexer=Lexer;marked.lexer=Lexer.lex;marked.InlineLexer=InlineLexer;marked.inlineLexer=InlineLexer.output;marked.parse=marked;if("undefined"!==typeof module&&"object"===typeof exports){module.exports=marked}else if("function"===typeof define&&define.amd){define(function(){return marked})}else{root.marked=marked}})(void 0||("undefined"!==typeof window?window:global));var marked$1={};if(!window.marked){// For webpack support for the Polymer 3 version created by the Polymer
// Modulizer More info:
// https://github.com/PolymerElements/marked-element/issues/81
window.marked=marked$1}Polymer({_template:html`
    <style>
      :host {
        display: block;
      }
    </style>
    <slot name="markdown-html">
      <div id="content"></div>
    </slot>
  `,is:"marked-element",properties:{/**
     * The markdown source that should be rendered by this element.
     */markdown:{type:String,value:null},/**
     * Enable GFM line breaks (regular newlines instead of two spaces for
     * breaks)
     */breaks:{type:Boolean,value:!1},/**
     * Conform to obscure parts of markdown.pl as much as possible. Don't fix
     * any of the original markdown bugs or poor behavior.
     */pedantic:{type:Boolean,value:!1},/**
     * Function used to customize a renderer based on the [API specified in the
     * Marked
     * library](https://github.com/chjj/marked#overriding-renderer-methods).
     * It takes one argument: a marked renderer object, which is mutated by the
     * function.
     */renderer:{type:Function,value:null},/**
     * Sanitize the output. Ignore any HTML that has been input.
     */sanitize:{type:Boolean,value:!1},/**
     * Function used to customize a sanitize behavior.
     * It takes one argument: element String without text Contents.
     *
     * e.g. `<div>` `<a href="/">` `</p>'.
     * Note: To enable this function, must set `sanitize` to true.
     * WARNING: If you are using this option to untrusted text, you must to
     * prevent XSS Attacks.
     */sanitizer:{type:Function,value:null},/**
     * If true, disables the default sanitization of any markdown received by
     * a request and allows fetched unsanitized markdown
     *
     * e.g. fetching markdown via `src` that has HTML.
     * Note: this value overrides `sanitize` if a request is made.
     */disableRemoteSanitization:{type:Boolean,value:!1},/**
     * Use "smart" typographic punctuation for things like quotes and dashes.
     */smartypants:{type:Boolean,value:!1},/**
     * Callback function invoked by Marked after HTML has been rendered.
     * It must take two arguments: err and text and must return the resulting
     * text.
     */callback:{type:Function,value:null},/**
     * A reference to the XMLHttpRequest instance used to generate the
     * network request.
     *
     * @type {XMLHttpRequest}
     */xhr:{type:Object,notify:!0,readOnly:!0}},observers:["render(markdown, breaks, pedantic, renderer, sanitize, sanitizer, smartypants, callback)"],ready:function(){if(this.markdown){return}// Use the Markdown from the first `<script>` descendant whose MIME type
// starts with "text/markdown". Script elements beyond the first are
// ignored.
this._markdownElement=dom(this).querySelector("[type=\"text/markdown\"]");if(!this._markdownElement){return}if(this._markdownElement.src){this._request(this._markdownElement.src)}if(""!==this._markdownElement.textContent.trim()){this.markdown=this._unindent(this._markdownElement.textContent)}var observer=new MutationObserver(this._onScriptAttributeChanged.bind(this));observer.observe(this._markdownElement,{attributes:!0})},/**
   * Renders `markdown` to HTML when the element is attached.
   *
   * This serves a dual purpose:
   *
   *  * Prevents unnecessary work (no need to render when not visible).
   *
   *  * `attached` fires top-down, so we can give ancestors a chance to
   *    register listeners for the `syntax-highlight` event _before_ we render
   *    any markdown.
   *
   */attached:function(){this._attached=!0;this._outputElement=this.outputElement;this.render()},detached:function(){this._attached=!1},/**
   * Unindents the markdown source that will be rendered.
   *
   * @param {string} text
   * @return {string}
   */unindent:function(text){return this._unindent(text)},get outputElement(){var child=dom(this).queryDistributedElements("[slot=\"markdown-html\"]")[0];return child||this.$.content},/**
   * The `marked-render-complete` event is fired once Markdown to HTML
   * conversion has finished, and the DOM has been populated via the resulting
   * HTML.
   *
   * @event marked-render-complete
   */ /**
       * Renders `markdown` into this element's DOM.
       *
       * This is automatically called whenever the `markdown` property is changed.
       *
       * The only case where you should be calling this is if you are providing
       * markdown via `<script type="text/markdown">` after this element has been
       * constructed (or updating that markdown).
       */render:function(){if(!this._attached){return};if(!this.markdown){dom(this._outputElement).innerHTML="";return}var renderer=new marked.Renderer;if(this.renderer){this.renderer(renderer)}var opts={renderer:renderer,highlight:this._highlight.bind(this),breaks:this.breaks,sanitize:this.sanitize,sanitizer:this.sanitizer,pedantic:this.pedantic,smartypants:this.smartypants};dom(this._outputElement).innerHTML=marked(this.markdown,opts,this.callback);this.fire("marked-render-complete",{},{composed:!0})},/**
   * Fired when the content is being processed and before it is rendered.
   * Provides an opportunity to highlight code blocks based on the programming
   * language used. This is also known as syntax highlighting. One example would
   * be to use a prebuilt syntax highlighting library, e.g with
   * [highlightjs](https://highlightjs.org/).
   *
   * @param {string} code
   * @param {string} lang
   * @return {string}
   * @event syntax-highlight
   */_highlight:function(code,lang){var event=this.fire("syntax-highlight",{code:code,lang:lang},{composed:!0});return event.detail.code||code},/**
   * @param {string} text
   * @return {string}
   */_unindent:function(text){if(!text)return text;var lines=text.replace(/\t/g,"  ").split("\n"),indent=lines.reduce(function(prev,line){if(/^\s*$/.test(line))return prev;// Completely ignore blank lines.
var lineIndent=line.match(/^(\s*)/)[0].length;if(null===prev)return lineIndent;return lineIndent<prev?lineIndent:prev},null);return lines.map(function(l){return l.substr(indent)}).join("\n")},/**
   * Fired when the XHR finishes loading
   *
   * @param {string} url
   * @event marked-loadend
   */_request:function(url){this._setXhr(new XMLHttpRequest);var xhr=this.xhr;if(0<xhr.readyState){return null}xhr.addEventListener("error",this._handleError.bind(this));xhr.addEventListener("loadend",function(e){var status=this.xhr.status||0;// Note: if we are using the file:// protocol, the status code will be 0
// for all outcomes (successful or otherwise).
if(0===status||200<=status&&300>status){this.sanitize=!this.disableRemoteSanitization;this.markdown=e.target.response}else{this._handleError(e)}this.fire("marked-loadend",e)}.bind(this));xhr.open("GET",url);xhr.setRequestHeader("Accept","text/markdown");xhr.send()},/**
   * Fired when an error is received while fetching remote markdown content.
   *
   * @param {!Event} e
   * @event marked-request-error
   */_handleError:function(e){var evt=this.fire("marked-request-error",e,{cancelable:!0});if(!evt.defaultPrevented){this.markdown="Failed loading markdown source"}},/**
   * @param {!Array<!MutationRecord>} mutation
   */_onScriptAttributeChanged:function(mutation){if("src"!==mutation[0].attributeName){return}this._request(this._markdownElement.src)}});const NeonAnimationBehavior={properties:{/**
     * Defines the animation timing.
     */animationTiming:{type:Object,value:function(){return{duration:500,easing:"cubic-bezier(0.4, 0, 0.2, 1)",fill:"both"}}}},/**
   * Can be used to determine that elements implement this behavior.
   */isNeonAnimation:!0,/**
   * Do any animation configuration here.
   */ // configure: function(config) {
// },
created:function(){if(!document.body.animate){console.warn("No web animations detected. This element will not"+" function without a web animations polyfill.")}},/**
   * Returns the animation timing by mixing in properties from `config` to the
   * defaults defined by the animation.
   */timingFromConfig:function(config){if(config.timing){for(var property in config.timing){this.animationTiming[property]=config.timing[property]}}return this.animationTiming},/**
   * Sets `transform` and `transformOrigin` properties along with the prefixed
   * versions.
   */setPrefixedProperty:function(node,property,value){for(var map={transform:["webkitTransform"],transformOrigin:["mozTransformOrigin","webkitTransformOrigin"]},prefixes=map[property],prefix,index=0;prefix=prefixes[index];index++){node.style[prefix]=value}node.style[property]=value},/**
   * Called when the animation finishes.
   */complete:function(config){}};_exports.NeonAnimationBehavior=NeonAnimationBehavior;var neonAnimationBehavior={NeonAnimationBehavior:NeonAnimationBehavior};_exports.$neonAnimationBehavior=neonAnimationBehavior;Polymer({is:"fade-in-animation",behaviors:[NeonAnimationBehavior],configure:function(config){var node=config.node;this._effect=new KeyframeEffect(node,[{opacity:"0"},{opacity:"1"}],this.timingFromConfig(config));return this._effect}});Polymer({is:"fade-out-animation",behaviors:[NeonAnimationBehavior],configure:function(config){var node=config.node;this._effect=new KeyframeEffect(node,[{opacity:"1"},{opacity:"0"}],this.timingFromConfig(config));return this._effect}});var Utility={distance:function(x1,y1,x2,y2){var xDelta=x1-x2,yDelta=y1-y2;return Math.sqrt(xDelta*xDelta+yDelta*yDelta)},now:window.performance&&window.performance.now?window.performance.now.bind(window.performance):Date.now};/**
    * @param {HTMLElement} element
    * @constructor
    */function ElementMetrics(element){this.element=element;this.width=this.boundingRect.width;this.height=this.boundingRect.height;this.size=Math.max(this.width,this.height)}ElementMetrics.prototype={get boundingRect(){return this.element.getBoundingClientRect()},furthestCornerDistanceFrom:function(x,y){var topLeft=Utility.distance(x,y,0,0),topRight=Utility.distance(x,y,this.width,0),bottomLeft=Utility.distance(x,y,0,this.height),bottomRight=Utility.distance(x,y,this.width,this.height);return Math.max(topLeft,topRight,bottomLeft,bottomRight)}};/**
    * @param {HTMLElement} element
    * @constructor
    */function Ripple(element){this.element=element;this.color=window.getComputedStyle(element).color;this.wave=document.createElement("div");this.waveContainer=document.createElement("div");this.wave.style.backgroundColor=this.color;this.wave.classList.add("wave");this.waveContainer.classList.add("wave-container");dom(this.waveContainer).appendChild(this.wave);this.resetInteractionState()}Ripple.MAX_RADIUS=300;Ripple.prototype={get recenters(){return this.element.recenters},get center(){return this.element.center},get mouseDownElapsed(){var elapsed;if(!this.mouseDownStart){return 0}elapsed=Utility.now()-this.mouseDownStart;if(this.mouseUpStart){elapsed-=this.mouseUpElapsed}return elapsed},get mouseUpElapsed(){return this.mouseUpStart?Utility.now()-this.mouseUpStart:0},get mouseDownElapsedSeconds(){return this.mouseDownElapsed/1e3},get mouseUpElapsedSeconds(){return this.mouseUpElapsed/1e3},get mouseInteractionSeconds(){return this.mouseDownElapsedSeconds+this.mouseUpElapsedSeconds},get initialOpacity(){return this.element.initialOpacity},get opacityDecayVelocity(){return this.element.opacityDecayVelocity},get radius(){var width2=this.containerMetrics.width*this.containerMetrics.width,height2=this.containerMetrics.height*this.containerMetrics.height,waveRadius=1.1*Math.min(Math.sqrt(width2+height2),Ripple.MAX_RADIUS)+5,duration=1.1-.2*(waveRadius/Ripple.MAX_RADIUS),timeNow=this.mouseInteractionSeconds/duration,size=waveRadius*(1-Math.pow(80,-timeNow));return Math.abs(size)},get opacity(){if(!this.mouseUpStart){return this.initialOpacity}return Math.max(0,this.initialOpacity-this.mouseUpElapsedSeconds*this.opacityDecayVelocity)},get outerOpacity(){// Linear increase in background opacity, capped at the opacity
// of the wavefront (waveOpacity).
var outerOpacity=.3*this.mouseUpElapsedSeconds,waveOpacity=this.opacity;return Math.max(0,Math.min(outerOpacity,waveOpacity))},get isOpacityFullyDecayed(){return .01>this.opacity&&this.radius>=Math.min(this.maxRadius,Ripple.MAX_RADIUS)},get isRestingAtMaxRadius(){return this.opacity>=this.initialOpacity&&this.radius>=Math.min(this.maxRadius,Ripple.MAX_RADIUS)},get isAnimationComplete(){return this.mouseUpStart?this.isOpacityFullyDecayed:this.isRestingAtMaxRadius},get translationFraction(){return Math.min(1,2*(this.radius/this.containerMetrics.size)/Math.sqrt(2))},get xNow(){if(this.xEnd){return this.xStart+this.translationFraction*(this.xEnd-this.xStart)}return this.xStart},get yNow(){if(this.yEnd){return this.yStart+this.translationFraction*(this.yEnd-this.yStart)}return this.yStart},get isMouseDown(){return this.mouseDownStart&&!this.mouseUpStart},resetInteractionState:function(){this.maxRadius=0;this.mouseDownStart=0;this.mouseUpStart=0;this.xStart=0;this.yStart=0;this.xEnd=0;this.yEnd=0;this.slideDistance=0;this.containerMetrics=new ElementMetrics(this.element)},draw:function(){var scale,dx,dy;this.wave.style.opacity=this.opacity;scale=this.radius/(this.containerMetrics.size/2);dx=this.xNow-this.containerMetrics.width/2;dy=this.yNow-this.containerMetrics.height/2;// 2d transform for safari because of border-radius and overflow:hidden
// clipping bug. https://bugs.webkit.org/show_bug.cgi?id=98538
this.waveContainer.style.webkitTransform="translate("+dx+"px, "+dy+"px)";this.waveContainer.style.transform="translate3d("+dx+"px, "+dy+"px, 0)";this.wave.style.webkitTransform="scale("+scale+","+scale+")";this.wave.style.transform="scale3d("+scale+","+scale+",1)"},/** @param {Event=} event */downAction:function(event){var xCenter=this.containerMetrics.width/2,yCenter=this.containerMetrics.height/2;this.resetInteractionState();this.mouseDownStart=Utility.now();if(this.center){this.xStart=xCenter;this.yStart=yCenter;this.slideDistance=Utility.distance(this.xStart,this.yStart,this.xEnd,this.yEnd)}else{this.xStart=event?event.detail.x-this.containerMetrics.boundingRect.left:this.containerMetrics.width/2;this.yStart=event?event.detail.y-this.containerMetrics.boundingRect.top:this.containerMetrics.height/2}if(this.recenters){this.xEnd=xCenter;this.yEnd=yCenter;this.slideDistance=Utility.distance(this.xStart,this.yStart,this.xEnd,this.yEnd)}this.maxRadius=this.containerMetrics.furthestCornerDistanceFrom(this.xStart,this.yStart);this.waveContainer.style.top=(this.containerMetrics.height-this.containerMetrics.size)/2+"px";this.waveContainer.style.left=(this.containerMetrics.width-this.containerMetrics.size)/2+"px";this.waveContainer.style.width=this.containerMetrics.size+"px";this.waveContainer.style.height=this.containerMetrics.size+"px"},/** @param {Event=} event */upAction:function(event){if(!this.isMouseDown){return}this.mouseUpStart=Utility.now()},remove:function(){dom(this.waveContainer.parentNode).removeChild(this.waveContainer)}};/**
   Material design: [Surface
   reaction](https://www.google.com/design/spec/animation/responsive-interaction.html#responsive-interaction-surface-reaction)
   
   `paper-ripple` provides a visual effect that other paper elements can
   use to simulate a rippling effect emanating from the point of contact.  The
   effect can be visualized as a concentric circle with motion.
   
   Example:
   
       <div style="position:relative">
         <paper-ripple></paper-ripple>
       </div>
   
   Note, it's important that the parent container of the ripple be relative
   position, otherwise the ripple will emanate outside of the desired container.
   
   `paper-ripple` listens to "mousedown" and "mouseup" events so it would display
   ripple effect when touches on it.  You can also defeat the default behavior and
   manually route the down and up actions to the ripple element.  Note that it is
   important if you call `downAction()` you will have to make sure to call
   `upAction()` so that `paper-ripple` would end the animation loop.
   
   Example:
   
       <paper-ripple id="ripple" style="pointer-events: none;"></paper-ripple>
       ...
       downAction: function(e) {
         this.$.ripple.downAction(e.detail);
       },
       upAction: function(e) {
         this.$.ripple.upAction();
       }
   
   Styling ripple effect:
   
     Use CSS color property to style the ripple:
   
       paper-ripple {
         color: #4285f4;
       }
   
     Note that CSS color property is inherited so it is not required to set it on
     the `paper-ripple` element directly.
   
   By default, the ripple is centered on the point of contact.  Apply the
   `recenters` attribute to have the ripple grow toward the center of its
   container.
   
       <paper-ripple recenters></paper-ripple>
   
   You can also  center the ripple inside its container from the start.
   
       <paper-ripple center></paper-ripple>
   
   Apply `circle` class to make the rippling effect within a circle.
   
       <paper-ripple class="circle"></paper-ripple>
   
   @group Paper Elements
   @element paper-ripple
   @hero hero.svg
   @demo demo/index.html
   */Polymer({_template:html`
    <style>
      :host {
        display: block;
        position: absolute;
        border-radius: inherit;
        overflow: hidden;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;

        /* See PolymerElements/paper-behaviors/issues/34. On non-Chrome browsers,
         * creating a node (with a position:absolute) in the middle of an event
         * handler "interrupts" that event handler (which happens when the
         * ripple is created on demand) */
        pointer-events: none;
      }

      :host([animating]) {
        /* This resolves a rendering issue in Chrome (as of 40) where the
           ripple is not properly clipped by its parent (which may have
           rounded corners). See: http://jsbin.com/temexa/4

           Note: We only apply this style conditionally. Otherwise, the browser
           will create a new compositing layer for every ripple element on the
           page, and that would be bad. */
        -webkit-transform: translate(0, 0);
        transform: translate3d(0, 0, 0);
      }

      #background,
      #waves,
      .wave-container,
      .wave {
        pointer-events: none;
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
      }

      #background,
      .wave {
        opacity: 0;
      }

      #waves,
      .wave {
        overflow: hidden;
      }

      .wave-container,
      .wave {
        border-radius: 50%;
      }

      :host(.circle) #background,
      :host(.circle) #waves {
        border-radius: 50%;
      }

      :host(.circle) .wave-container {
        overflow: hidden;
      }
    </style>

    <div id="background"></div>
    <div id="waves"></div>
`,is:"paper-ripple",behaviors:[IronA11yKeysBehavior],properties:{/**
     * The initial opacity set on the wave.
     *
     * @attribute initialOpacity
     * @type number
     * @default 0.25
     */initialOpacity:{type:Number,value:.25},/**
     * How fast (opacity per second) the wave fades out.
     *
     * @attribute opacityDecayVelocity
     * @type number
     * @default 0.8
     */opacityDecayVelocity:{type:Number,value:.8},/**
     * If true, ripples will exhibit a gravitational pull towards
     * the center of their container as they fade away.
     *
     * @attribute recenters
     * @type boolean
     * @default false
     */recenters:{type:Boolean,value:!1},/**
     * If true, ripples will center inside its container
     *
     * @attribute recenters
     * @type boolean
     * @default false
     */center:{type:Boolean,value:!1},/**
     * A list of the visual ripples.
     *
     * @attribute ripples
     * @type Array
     * @default []
     */ripples:{type:Array,value:function(){return[]}},/**
     * True when there are visible ripples animating within the
     * element.
     */animating:{type:Boolean,readOnly:!0,reflectToAttribute:!0,value:!1},/**
     * If true, the ripple will remain in the "down" state until `holdDown`
     * is set to false again.
     */holdDown:{type:Boolean,value:!1,observer:"_holdDownChanged"},/**
     * If true, the ripple will not generate a ripple effect
     * via pointer interaction.
     * Calling ripple's imperative api like `simulatedRipple` will
     * still generate the ripple effect.
     */noink:{type:Boolean,value:!1},_animating:{type:Boolean},_boundAnimate:{type:Function,value:function(){return this.animate.bind(this)}}},get target(){return this.keyEventTarget},/**
   * @type {!Object}
   */keyBindings:{"enter:keydown":"_onEnterKeydown","space:keydown":"_onSpaceKeydown","space:keyup":"_onSpaceKeyup"},attached:function(){// Set up a11yKeysBehavior to listen to key events on the target,
// so that space and enter activate the ripple even if the target doesn't
// handle key events. The key handlers deal with `noink` themselves.
if(11==this.parentNode.nodeType){// DOCUMENT_FRAGMENT_NODE
this.keyEventTarget=dom(this).getOwnerRoot().host}else{this.keyEventTarget=this.parentNode}var keyEventTarget=/** @type {!EventTarget} */this.keyEventTarget;this.listen(keyEventTarget,"up","uiUpAction");this.listen(keyEventTarget,"down","uiDownAction")},detached:function(){this.unlisten(this.keyEventTarget,"up","uiUpAction");this.unlisten(this.keyEventTarget,"down","uiDownAction");this.keyEventTarget=null},get shouldKeepAnimating(){for(var index=0;index<this.ripples.length;++index){if(!this.ripples[index].isAnimationComplete){return!0}}return!1},simulatedRipple:function(){this.downAction(null);// Please see polymer/polymer#1305
this.async(function(){this.upAction()},1)},/**
   * Provokes a ripple down effect via a UI event,
   * respecting the `noink` property.
   * @param {Event=} event
   */uiDownAction:function(event){if(!this.noink){this.downAction(event)}},/**
   * Provokes a ripple down effect via a UI event,
   * *not* respecting the `noink` property.
   * @param {Event=} event
   */downAction:function(event){if(this.holdDown&&0<this.ripples.length){return}var ripple=this.addRipple();ripple.downAction(event);if(!this._animating){this._animating=!0;this.animate()}},/**
   * Provokes a ripple up effect via a UI event,
   * respecting the `noink` property.
   * @param {Event=} event
   */uiUpAction:function(event){if(!this.noink){this.upAction(event)}},/**
   * Provokes a ripple up effect via a UI event,
   * *not* respecting the `noink` property.
   * @param {Event=} event
   */upAction:function(event){if(this.holdDown){return}this.ripples.forEach(function(ripple){ripple.upAction(event)});this._animating=!0;this.animate()},onAnimationComplete:function(){this._animating=!1;this.$.background.style.backgroundColor=null;this.fire("transitionend")},addRipple:function(){var ripple=new Ripple(this);dom(this.$.waves).appendChild(ripple.waveContainer);this.$.background.style.backgroundColor=ripple.color;this.ripples.push(ripple);this._setAnimating(!0);return ripple},removeRipple:function(ripple){var rippleIndex=this.ripples.indexOf(ripple);if(0>rippleIndex){return}this.ripples.splice(rippleIndex,1);ripple.remove();if(!this.ripples.length){this._setAnimating(!1)}},/**
   * Deprecated. Please use animateRipple() instead.
   *
   * This method name conflicts with Element#animate().
   * https://developer.mozilla.org/en-US/docs/Web/API/Element/animate.
   *
   * @suppress {checkTypes}
   */animate:function(){if(!this._animating){return}var index,ripple;for(index=0;index<this.ripples.length;++index){ripple=this.ripples[index];ripple.draw();this.$.background.style.opacity=ripple.outerOpacity;if(ripple.isOpacityFullyDecayed&&!ripple.isRestingAtMaxRadius){this.removeRipple(ripple)}}if(!this.shouldKeepAnimating&&0===this.ripples.length){this.onAnimationComplete()}else{window.requestAnimationFrame(this._boundAnimate)}},/**
   * An alias for animate() whose name does not conflict with the platform
   * Element.animate() method.
   */animateRipple:function(){return this.animate()},_onEnterKeydown:function(){this.uiDownAction();this.async(this.uiUpAction,1)},_onSpaceKeydown:function(){this.uiDownAction()},_onSpaceKeyup:function(){this.uiUpAction()},// note: holdDown does not respect noink since it can be a focus based
// effect.
_holdDownChanged:function(newVal,oldVal){if(oldVal===void 0){return}if(newVal){this.downAction()}else{this.upAction()}}/**
    Fired when the animation finishes.
    This is useful if you want to wait until
    the ripple animation finishes to perform some action.
     @event transitionend
    @param {{node: Object}} detail Contains the animated node.
    */});const PaperRippleBehavior={properties:{/**
     * If true, the element will not produce a ripple effect when interacted
     * with via the pointer.
     */noink:{type:Boolean,observer:"_noinkChanged"},/**
     * @type {Element|undefined}
     */_rippleContainer:{type:Object}},/**
   * Ensures a `<paper-ripple>` element is available when the element is
   * focused.
   */_buttonStateChanged:function(){if(this.focused){this.ensureRipple()}},/**
   * In addition to the functionality provided in `IronButtonState`, ensures
   * a ripple effect is created when the element is in a `pressed` state.
   */_downHandler:function(event){IronButtonStateImpl._downHandler.call(this,event);if(this.pressed){this.ensureRipple(event)}},/**
   * Ensures this element contains a ripple effect. For startup efficiency
   * the ripple effect is dynamically on demand when needed.
   * @param {!Event=} optTriggeringEvent (optional) event that triggered the
   * ripple.
   */ensureRipple:function(optTriggeringEvent){if(!this.hasRipple()){this._ripple=this._createRipple();this._ripple.noink=this.noink;var rippleContainer=this._rippleContainer||this.root;if(rippleContainer){dom(rippleContainer).appendChild(this._ripple)}if(optTriggeringEvent){// Check if the event happened inside of the ripple container
// Fall back to host instead of the root because distributed text
// nodes are not valid event targets
var domContainer=dom(this._rippleContainer||this),target=dom(optTriggeringEvent).rootTarget;if(domContainer.deepContains(/** @type {Node} */target)){this._ripple.uiDownAction(optTriggeringEvent)}}}},/**
   * Returns the `<paper-ripple>` element used by this element to create
   * ripple effects. The element's ripple is created on demand, when
   * necessary, and calling this method will force the
   * ripple to be created.
   */getRipple:function(){this.ensureRipple();return this._ripple},/**
   * Returns true if this element currently contains a ripple effect.
   * @return {boolean}
   */hasRipple:function(){return!!this._ripple},/**
   * Create the element's ripple effect via creating a `<paper-ripple>`.
   * Override this method to customize the ripple element.
   * @return {!PaperRippleElement} Returns a `<paper-ripple>` element.
   */_createRipple:function(){var element=/** @type {!PaperRippleElement} */document.createElement("paper-ripple");return element},_noinkChanged:function(noink){if(this.hasRipple()){this._ripple.noink=noink}}};_exports.PaperRippleBehavior=PaperRippleBehavior;var paperRippleBehavior={PaperRippleBehavior:PaperRippleBehavior};_exports.$paperRippleBehavior=paperRippleBehavior;const PaperButtonBehaviorImpl={properties:{/**
     * The z-depth of this element, from 0-5. Setting to 0 will remove the
     * shadow, and each increasing number greater than 0 will be "deeper"
     * than the last.
     *
     * @attribute elevation
     * @type number
     * @default 1
     */elevation:{type:Number,reflectToAttribute:!0,readOnly:!0}},observers:["_calculateElevation(focused, disabled, active, pressed, receivedFocusFromKeyboard)","_computeKeyboardClass(receivedFocusFromKeyboard)"],hostAttributes:{role:"button",tabindex:"0",animated:!0},_calculateElevation:function(){var e=1;if(this.disabled){e=0}else if(this.active||this.pressed){e=4}else if(this.receivedFocusFromKeyboard){e=3}this._setElevation(e)},_computeKeyboardClass:function(receivedFocusFromKeyboard){this.toggleClass("keyboard-focus",receivedFocusFromKeyboard)},/**
   * In addition to `IronButtonState` behavior, when space key goes down,
   * create a ripple down effect.
   *
   * @param {!KeyboardEvent} event .
   */_spaceKeyDownHandler:function(event){IronButtonStateImpl._spaceKeyDownHandler.call(this,event);// Ensure that there is at most one ripple when the space key is held down.
if(this.hasRipple()&&1>this.getRipple().ripples.length){this._ripple.uiDownAction()}},/**
   * In addition to `IronButtonState` behavior, when space key goes up,
   * create a ripple up effect.
   *
   * @param {!KeyboardEvent} event .
   */_spaceKeyUpHandler:function(event){IronButtonStateImpl._spaceKeyUpHandler.call(this,event);if(this.hasRipple()){this._ripple.uiUpAction()}}};/** @polymerBehavior */_exports.PaperButtonBehaviorImpl=PaperButtonBehaviorImpl;const PaperButtonBehavior=[IronButtonState,IronControlState,PaperRippleBehavior,PaperButtonBehaviorImpl];_exports.PaperButtonBehavior=PaperButtonBehavior;var paperButtonBehavior={PaperButtonBehaviorImpl:PaperButtonBehaviorImpl,PaperButtonBehavior:PaperButtonBehavior};_exports.$paperButtonBehavior=paperButtonBehavior;const PaperInkyFocusBehaviorImpl={observers:["_focusedChanged(receivedFocusFromKeyboard)"],_focusedChanged:function(receivedFocusFromKeyboard){if(receivedFocusFromKeyboard){this.ensureRipple()}if(this.hasRipple()){this._ripple.holdDown=receivedFocusFromKeyboard}},_createRipple:function(){var ripple=PaperRippleBehavior._createRipple();ripple.id="ink";ripple.setAttribute("center","");ripple.classList.add("circle");return ripple}};/** @polymerBehavior */_exports.PaperInkyFocusBehaviorImpl=PaperInkyFocusBehaviorImpl;const PaperInkyFocusBehavior=[IronButtonState,IronControlState,PaperRippleBehavior,PaperInkyFocusBehaviorImpl];_exports.PaperInkyFocusBehavior=PaperInkyFocusBehavior;var paperInkyFocusBehavior={PaperInkyFocusBehaviorImpl:PaperInkyFocusBehaviorImpl,PaperInkyFocusBehavior:PaperInkyFocusBehavior};_exports.$paperInkyFocusBehavior=paperInkyFocusBehavior;const PaperCheckedElementBehaviorImpl={/**
   * Synchronizes the element's checked state with its ripple effect.
   */_checkedChanged:function(){IronCheckedElementBehaviorImpl._checkedChanged.call(this);if(this.hasRipple()){if(this.checked){this._ripple.setAttribute("checked","")}else{this._ripple.removeAttribute("checked")}}},/**
   * Synchronizes the element's `active` and `checked` state.
   */_buttonStateChanged:function(){PaperRippleBehavior._buttonStateChanged.call(this);if(this.disabled){return}if(this.isAttached){this.checked=this.active}}};/** @polymerBehavior */_exports.PaperCheckedElementBehaviorImpl=PaperCheckedElementBehaviorImpl;const PaperCheckedElementBehavior=[PaperInkyFocusBehavior,IronCheckedElementBehavior,PaperCheckedElementBehaviorImpl];_exports.PaperCheckedElementBehavior=PaperCheckedElementBehavior;var paperCheckedElementBehavior={PaperCheckedElementBehaviorImpl:PaperCheckedElementBehaviorImpl,PaperCheckedElementBehavior:PaperCheckedElementBehavior};_exports.$paperCheckedElementBehavior=paperCheckedElementBehavior;const template$3=html`
<custom-style>
  <style is="custom-style">
    html {

      --shadow-transition: {
        transition: box-shadow 0.28s cubic-bezier(0.4, 0, 0.2, 1);
      };

      --shadow-none: {
        box-shadow: none;
      };

      /* from http://codepen.io/shyndman/pen/c5394ddf2e8b2a5c9185904b57421cdb */

      --shadow-elevation-2dp: {
        box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),
                    0 1px 5px 0 rgba(0, 0, 0, 0.12),
                    0 3px 1px -2px rgba(0, 0, 0, 0.2);
      };

      --shadow-elevation-3dp: {
        box-shadow: 0 3px 4px 0 rgba(0, 0, 0, 0.14),
                    0 1px 8px 0 rgba(0, 0, 0, 0.12),
                    0 3px 3px -2px rgba(0, 0, 0, 0.4);
      };

      --shadow-elevation-4dp: {
        box-shadow: 0 4px 5px 0 rgba(0, 0, 0, 0.14),
                    0 1px 10px 0 rgba(0, 0, 0, 0.12),
                    0 2px 4px -1px rgba(0, 0, 0, 0.4);
      };

      --shadow-elevation-6dp: {
        box-shadow: 0 6px 10px 0 rgba(0, 0, 0, 0.14),
                    0 1px 18px 0 rgba(0, 0, 0, 0.12),
                    0 3px 5px -1px rgba(0, 0, 0, 0.4);
      };

      --shadow-elevation-8dp: {
        box-shadow: 0 8px 10px 1px rgba(0, 0, 0, 0.14),
                    0 3px 14px 2px rgba(0, 0, 0, 0.12),
                    0 5px 5px -3px rgba(0, 0, 0, 0.4);
      };

      --shadow-elevation-12dp: {
        box-shadow: 0 12px 16px 1px rgba(0, 0, 0, 0.14),
                    0 4px 22px 3px rgba(0, 0, 0, 0.12),
                    0 6px 7px -4px rgba(0, 0, 0, 0.4);
      };

      --shadow-elevation-16dp: {
        box-shadow: 0 16px 24px 2px rgba(0, 0, 0, 0.14),
                    0  6px 30px 5px rgba(0, 0, 0, 0.12),
                    0  8px 10px -5px rgba(0, 0, 0, 0.4);
      };

      --shadow-elevation-24dp: {
        box-shadow: 0 24px 38px 3px rgba(0, 0, 0, 0.14),
                    0 9px 46px 8px rgba(0, 0, 0, 0.12),
                    0 11px 15px -7px rgba(0, 0, 0, 0.4);
      };
    }
  </style>
</custom-style>`;template$3.setAttribute("style","display: none;");document.head.appendChild(template$3.content);const template$4=html`
<dom-module id="paper-material-styles">
  <template>
    <style>
      html {
        --paper-material: {
          display: block;
          position: relative;
        };
        --paper-material-elevation-1: {
          @apply --shadow-elevation-2dp;
        };
        --paper-material-elevation-2: {
          @apply --shadow-elevation-4dp;
        };
        --paper-material-elevation-3: {
          @apply --shadow-elevation-6dp;
        };
        --paper-material-elevation-4: {
          @apply --shadow-elevation-8dp;
        };
        --paper-material-elevation-5: {
          @apply --shadow-elevation-16dp;
        };
      }
      .paper-material {
        @apply --paper-material;
      }
      .paper-material[elevation="1"] {
        @apply --paper-material-elevation-1;
      }
      .paper-material[elevation="2"] {
        @apply --paper-material-elevation-2;
      }
      .paper-material[elevation="3"] {
        @apply --paper-material-elevation-3;
      }
      .paper-material[elevation="4"] {
        @apply --paper-material-elevation-4;
      }
      .paper-material[elevation="5"] {
        @apply --paper-material-elevation-5;
      }

      /* Duplicate the styles because of https://github.com/webcomponents/shadycss/issues/193 */
      :host {
        --paper-material: {
          display: block;
          position: relative;
        };
        --paper-material-elevation-1: {
          @apply --shadow-elevation-2dp;
        };
        --paper-material-elevation-2: {
          @apply --shadow-elevation-4dp;
        };
        --paper-material-elevation-3: {
          @apply --shadow-elevation-6dp;
        };
        --paper-material-elevation-4: {
          @apply --shadow-elevation-8dp;
        };
        --paper-material-elevation-5: {
          @apply --shadow-elevation-16dp;
        };
      }
      :host(.paper-material) {
        @apply --paper-material;
      }
      :host(.paper-material[elevation="1"]) {
        @apply --paper-material-elevation-1;
      }
      :host(.paper-material[elevation="2"]) {
        @apply --paper-material-elevation-2;
      }
      :host(.paper-material[elevation="3"]) {
        @apply --paper-material-elevation-3;
      }
      :host(.paper-material[elevation="4"]) {
        @apply --paper-material-elevation-4;
      }
      :host(.paper-material[elevation="5"]) {
        @apply --paper-material-elevation-5;
      }
    </style>
  </template>
</dom-module>`;template$4.setAttribute("style","display: none;");document.head.appendChild(template$4.content);const template$5=html`
  <style include="paper-material-styles">
    /* Need to specify the same specificity as the styles imported from paper-material. */
    :host {
      @apply --layout-inline;
      @apply --layout-center-center;
      position: relative;
      box-sizing: border-box;
      min-width: 5.14em;
      margin: 0 0.29em;
      background: transparent;
      -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
      -webkit-tap-highlight-color: transparent;
      font: inherit;
      text-transform: uppercase;
      outline-width: 0;
      border-radius: 3px;
      -moz-user-select: none;
      -ms-user-select: none;
      -webkit-user-select: none;
      user-select: none;
      cursor: pointer;
      z-index: 0;
      padding: 0.7em 0.57em;

      @apply --paper-font-common-base;
      @apply --paper-button;
    }

    :host([elevation="1"]) {
      @apply --paper-material-elevation-1;
    }

    :host([elevation="2"]) {
      @apply --paper-material-elevation-2;
    }

    :host([elevation="3"]) {
      @apply --paper-material-elevation-3;
    }

    :host([elevation="4"]) {
      @apply --paper-material-elevation-4;
    }

    :host([elevation="5"]) {
      @apply --paper-material-elevation-5;
    }

    :host([hidden]) {
      display: none !important;
    }

    :host([raised].keyboard-focus) {
      font-weight: bold;
      @apply --paper-button-raised-keyboard-focus;
    }

    :host(:not([raised]).keyboard-focus) {
      font-weight: bold;
      @apply --paper-button-flat-keyboard-focus;
    }

    :host([disabled]) {
      background: none;
      color: #a8a8a8;
      cursor: auto;
      pointer-events: none;

      @apply --paper-button-disabled;
    }

    :host([disabled][raised]) {
      background: #eaeaea;
    }


    :host([animated]) {
      @apply --shadow-transition;
    }

    paper-ripple {
      color: var(--paper-button-ink-color);
    }
  </style>

  <slot></slot>`;template$5.setAttribute("strip-whitespace","");/**
                                                 Material design:
                                                 [Buttons](https://www.google.com/design/spec/components/buttons.html)
                                                                                               `paper-button` is a button. When the user touches the button, a ripple effect
                                                 emanates from the point of contact. It may be flat or raised. A raised button is
                                                 styled with a shadow.
                                                                                               Example:
                                                                                                   <paper-button>Flat button</paper-button>
                                                   <paper-button raised>Raised button</paper-button>
                                                   <paper-button noink>No ripple effect</paper-button>
                                                   <paper-button toggles>Toggle-able button</paper-button>
                                                                                               A button that has `toggles` true will remain `active` after being clicked (and
                                                 will have an `active` attribute set). For more information, see the
                                                 `IronButtonState` behavior.
                                                                                               You may use custom DOM in the button body to create a variety of buttons. For
                                                 example, to create a button with an icon and some text:
                                                                                                   <paper-button>
                                                     <iron-icon icon="favorite"></iron-icon>
                                                     custom button content
                                                   </paper-button>
                                                                                               To use `paper-button` as a link, wrap it in an anchor tag. Since `paper-button`
                                                 will already receive focus, you may want to prevent the anchor tag from
                                                 receiving focus as well by setting its tabindex to -1.
                                                                                                   <a href="https://www.polymer-project.org/" tabindex="-1">
                                                     <paper-button raised>Polymer Project</paper-button>
                                                   </a>
                                                                                               ### Styling
                                                                                               Style the button with CSS as you would a normal DOM element.
                                                                                                   paper-button.fancy {
                                                     background: green;
                                                     color: yellow;
                                                   }
                                                                                                   paper-button.fancy:hover {
                                                     background: lime;
                                                   }
                                                                                                   paper-button[disabled],
                                                   paper-button[toggles][active] {
                                                     background: red;
                                                   }
                                                                                               By default, the ripple is the same color as the foreground at 25% opacity. You
                                                 may customize the color using the `--paper-button-ink-color` custom property.
                                                                                               The following custom properties and mixins are also available for styling:
                                                                                               Custom property | Description | Default
                                                 ----------------|-------------|----------
                                                 `--paper-button-ink-color` | Background color of the ripple | `Based on the button's color`
                                                 `--paper-button` | Mixin applied to the button | `{}`
                                                 `--paper-button-disabled` | Mixin applied to the disabled button. Note that you can also use the `paper-button[disabled]` selector | `{}`
                                                 `--paper-button-flat-keyboard-focus` | Mixin applied to a flat button after it's been focused using the keyboard | `{}`
                                                 `--paper-button-raised-keyboard-focus` | Mixin applied to a raised button after it's been focused using the keyboard | `{}`
                                                                                               @demo demo/index.html
                                                 */Polymer({_template:template$5,is:"paper-button",behaviors:[PaperButtonBehavior],properties:{/**
     * If true, the button should be styled with a shadow.
     */raised:{type:Boolean,reflectToAttribute:!0,value:!1,observer:"_calculateElevation"}},_calculateElevation:function(){if(!this.raised){this._setElevation(0)}else{PaperButtonBehaviorImpl._calculateElevation.apply(this)}}/**
    Fired when the animation finishes.
    This is useful if you want to wait until
    the ripple animation finishes to perform some action.
     @event transitionend
    Event param: {{node: Object}} detail Contains the animated node.
    */});const template$6=html`
<custom-style>
  <style is="custom-style">
    html {

      /* Material Design color palette for Google products */

      --google-red-100: #f4c7c3;
      --google-red-300: #e67c73;
      --google-red-500: #db4437;
      --google-red-700: #c53929;

      --google-blue-100: #c6dafc;
      --google-blue-300: #7baaf7;
      --google-blue-500: #4285f4;
      --google-blue-700: #3367d6;

      --google-green-100: #b7e1cd;
      --google-green-300: #57bb8a;
      --google-green-500: #0f9d58;
      --google-green-700: #0b8043;

      --google-yellow-100: #fce8b2;
      --google-yellow-300: #f7cb4d;
      --google-yellow-500: #f4b400;
      --google-yellow-700: #f09300;

      --google-grey-100: #f5f5f5;
      --google-grey-300: #e0e0e0;
      --google-grey-500: #9e9e9e;
      --google-grey-700: #616161;

      /* Material Design color palette from online spec document */

      --paper-red-50: #ffebee;
      --paper-red-100: #ffcdd2;
      --paper-red-200: #ef9a9a;
      --paper-red-300: #e57373;
      --paper-red-400: #ef5350;
      --paper-red-500: #f44336;
      --paper-red-600: #e53935;
      --paper-red-700: #d32f2f;
      --paper-red-800: #c62828;
      --paper-red-900: #b71c1c;
      --paper-red-a100: #ff8a80;
      --paper-red-a200: #ff5252;
      --paper-red-a400: #ff1744;
      --paper-red-a700: #d50000;

      --paper-pink-50: #fce4ec;
      --paper-pink-100: #f8bbd0;
      --paper-pink-200: #f48fb1;
      --paper-pink-300: #f06292;
      --paper-pink-400: #ec407a;
      --paper-pink-500: #e91e63;
      --paper-pink-600: #d81b60;
      --paper-pink-700: #c2185b;
      --paper-pink-800: #ad1457;
      --paper-pink-900: #880e4f;
      --paper-pink-a100: #ff80ab;
      --paper-pink-a200: #ff4081;
      --paper-pink-a400: #f50057;
      --paper-pink-a700: #c51162;

      --paper-purple-50: #f3e5f5;
      --paper-purple-100: #e1bee7;
      --paper-purple-200: #ce93d8;
      --paper-purple-300: #ba68c8;
      --paper-purple-400: #ab47bc;
      --paper-purple-500: #9c27b0;
      --paper-purple-600: #8e24aa;
      --paper-purple-700: #7b1fa2;
      --paper-purple-800: #6a1b9a;
      --paper-purple-900: #4a148c;
      --paper-purple-a100: #ea80fc;
      --paper-purple-a200: #e040fb;
      --paper-purple-a400: #d500f9;
      --paper-purple-a700: #aa00ff;

      --paper-deep-purple-50: #ede7f6;
      --paper-deep-purple-100: #d1c4e9;
      --paper-deep-purple-200: #b39ddb;
      --paper-deep-purple-300: #9575cd;
      --paper-deep-purple-400: #7e57c2;
      --paper-deep-purple-500: #673ab7;
      --paper-deep-purple-600: #5e35b1;
      --paper-deep-purple-700: #512da8;
      --paper-deep-purple-800: #4527a0;
      --paper-deep-purple-900: #311b92;
      --paper-deep-purple-a100: #b388ff;
      --paper-deep-purple-a200: #7c4dff;
      --paper-deep-purple-a400: #651fff;
      --paper-deep-purple-a700: #6200ea;

      --paper-indigo-50: #e8eaf6;
      --paper-indigo-100: #c5cae9;
      --paper-indigo-200: #9fa8da;
      --paper-indigo-300: #7986cb;
      --paper-indigo-400: #5c6bc0;
      --paper-indigo-500: #3f51b5;
      --paper-indigo-600: #3949ab;
      --paper-indigo-700: #303f9f;
      --paper-indigo-800: #283593;
      --paper-indigo-900: #1a237e;
      --paper-indigo-a100: #8c9eff;
      --paper-indigo-a200: #536dfe;
      --paper-indigo-a400: #3d5afe;
      --paper-indigo-a700: #304ffe;

      --paper-blue-50: #e3f2fd;
      --paper-blue-100: #bbdefb;
      --paper-blue-200: #90caf9;
      --paper-blue-300: #64b5f6;
      --paper-blue-400: #42a5f5;
      --paper-blue-500: #2196f3;
      --paper-blue-600: #1e88e5;
      --paper-blue-700: #1976d2;
      --paper-blue-800: #1565c0;
      --paper-blue-900: #0d47a1;
      --paper-blue-a100: #82b1ff;
      --paper-blue-a200: #448aff;
      --paper-blue-a400: #2979ff;
      --paper-blue-a700: #2962ff;

      --paper-light-blue-50: #e1f5fe;
      --paper-light-blue-100: #b3e5fc;
      --paper-light-blue-200: #81d4fa;
      --paper-light-blue-300: #4fc3f7;
      --paper-light-blue-400: #29b6f6;
      --paper-light-blue-500: #03a9f4;
      --paper-light-blue-600: #039be5;
      --paper-light-blue-700: #0288d1;
      --paper-light-blue-800: #0277bd;
      --paper-light-blue-900: #01579b;
      --paper-light-blue-a100: #80d8ff;
      --paper-light-blue-a200: #40c4ff;
      --paper-light-blue-a400: #00b0ff;
      --paper-light-blue-a700: #0091ea;

      --paper-cyan-50: #e0f7fa;
      --paper-cyan-100: #b2ebf2;
      --paper-cyan-200: #80deea;
      --paper-cyan-300: #4dd0e1;
      --paper-cyan-400: #26c6da;
      --paper-cyan-500: #00bcd4;
      --paper-cyan-600: #00acc1;
      --paper-cyan-700: #0097a7;
      --paper-cyan-800: #00838f;
      --paper-cyan-900: #006064;
      --paper-cyan-a100: #84ffff;
      --paper-cyan-a200: #18ffff;
      --paper-cyan-a400: #00e5ff;
      --paper-cyan-a700: #00b8d4;

      --paper-teal-50: #e0f2f1;
      --paper-teal-100: #b2dfdb;
      --paper-teal-200: #80cbc4;
      --paper-teal-300: #4db6ac;
      --paper-teal-400: #26a69a;
      --paper-teal-500: #009688;
      --paper-teal-600: #00897b;
      --paper-teal-700: #00796b;
      --paper-teal-800: #00695c;
      --paper-teal-900: #004d40;
      --paper-teal-a100: #a7ffeb;
      --paper-teal-a200: #64ffda;
      --paper-teal-a400: #1de9b6;
      --paper-teal-a700: #00bfa5;

      --paper-green-50: #e8f5e9;
      --paper-green-100: #c8e6c9;
      --paper-green-200: #a5d6a7;
      --paper-green-300: #81c784;
      --paper-green-400: #66bb6a;
      --paper-green-500: #4caf50;
      --paper-green-600: #43a047;
      --paper-green-700: #388e3c;
      --paper-green-800: #2e7d32;
      --paper-green-900: #1b5e20;
      --paper-green-a100: #b9f6ca;
      --paper-green-a200: #69f0ae;
      --paper-green-a400: #00e676;
      --paper-green-a700: #00c853;

      --paper-light-green-50: #f1f8e9;
      --paper-light-green-100: #dcedc8;
      --paper-light-green-200: #c5e1a5;
      --paper-light-green-300: #aed581;
      --paper-light-green-400: #9ccc65;
      --paper-light-green-500: #8bc34a;
      --paper-light-green-600: #7cb342;
      --paper-light-green-700: #689f38;
      --paper-light-green-800: #558b2f;
      --paper-light-green-900: #33691e;
      --paper-light-green-a100: #ccff90;
      --paper-light-green-a200: #b2ff59;
      --paper-light-green-a400: #76ff03;
      --paper-light-green-a700: #64dd17;

      --paper-lime-50: #f9fbe7;
      --paper-lime-100: #f0f4c3;
      --paper-lime-200: #e6ee9c;
      --paper-lime-300: #dce775;
      --paper-lime-400: #d4e157;
      --paper-lime-500: #cddc39;
      --paper-lime-600: #c0ca33;
      --paper-lime-700: #afb42b;
      --paper-lime-800: #9e9d24;
      --paper-lime-900: #827717;
      --paper-lime-a100: #f4ff81;
      --paper-lime-a200: #eeff41;
      --paper-lime-a400: #c6ff00;
      --paper-lime-a700: #aeea00;

      --paper-yellow-50: #fffde7;
      --paper-yellow-100: #fff9c4;
      --paper-yellow-200: #fff59d;
      --paper-yellow-300: #fff176;
      --paper-yellow-400: #ffee58;
      --paper-yellow-500: #ffeb3b;
      --paper-yellow-600: #fdd835;
      --paper-yellow-700: #fbc02d;
      --paper-yellow-800: #f9a825;
      --paper-yellow-900: #f57f17;
      --paper-yellow-a100: #ffff8d;
      --paper-yellow-a200: #ffff00;
      --paper-yellow-a400: #ffea00;
      --paper-yellow-a700: #ffd600;

      --paper-amber-50: #fff8e1;
      --paper-amber-100: #ffecb3;
      --paper-amber-200: #ffe082;
      --paper-amber-300: #ffd54f;
      --paper-amber-400: #ffca28;
      --paper-amber-500: #ffc107;
      --paper-amber-600: #ffb300;
      --paper-amber-700: #ffa000;
      --paper-amber-800: #ff8f00;
      --paper-amber-900: #ff6f00;
      --paper-amber-a100: #ffe57f;
      --paper-amber-a200: #ffd740;
      --paper-amber-a400: #ffc400;
      --paper-amber-a700: #ffab00;

      --paper-orange-50: #fff3e0;
      --paper-orange-100: #ffe0b2;
      --paper-orange-200: #ffcc80;
      --paper-orange-300: #ffb74d;
      --paper-orange-400: #ffa726;
      --paper-orange-500: #ff9800;
      --paper-orange-600: #fb8c00;
      --paper-orange-700: #f57c00;
      --paper-orange-800: #ef6c00;
      --paper-orange-900: #e65100;
      --paper-orange-a100: #ffd180;
      --paper-orange-a200: #ffab40;
      --paper-orange-a400: #ff9100;
      --paper-orange-a700: #ff6500;

      --paper-deep-orange-50: #fbe9e7;
      --paper-deep-orange-100: #ffccbc;
      --paper-deep-orange-200: #ffab91;
      --paper-deep-orange-300: #ff8a65;
      --paper-deep-orange-400: #ff7043;
      --paper-deep-orange-500: #ff5722;
      --paper-deep-orange-600: #f4511e;
      --paper-deep-orange-700: #e64a19;
      --paper-deep-orange-800: #d84315;
      --paper-deep-orange-900: #bf360c;
      --paper-deep-orange-a100: #ff9e80;
      --paper-deep-orange-a200: #ff6e40;
      --paper-deep-orange-a400: #ff3d00;
      --paper-deep-orange-a700: #dd2c00;

      --paper-brown-50: #efebe9;
      --paper-brown-100: #d7ccc8;
      --paper-brown-200: #bcaaa4;
      --paper-brown-300: #a1887f;
      --paper-brown-400: #8d6e63;
      --paper-brown-500: #795548;
      --paper-brown-600: #6d4c41;
      --paper-brown-700: #5d4037;
      --paper-brown-800: #4e342e;
      --paper-brown-900: #3e2723;

      --paper-grey-50: #fafafa;
      --paper-grey-100: #f5f5f5;
      --paper-grey-200: #eeeeee;
      --paper-grey-300: #e0e0e0;
      --paper-grey-400: #bdbdbd;
      --paper-grey-500: #9e9e9e;
      --paper-grey-600: #757575;
      --paper-grey-700: #616161;
      --paper-grey-800: #424242;
      --paper-grey-900: #212121;

      --paper-blue-grey-50: #eceff1;
      --paper-blue-grey-100: #cfd8dc;
      --paper-blue-grey-200: #b0bec5;
      --paper-blue-grey-300: #90a4ae;
      --paper-blue-grey-400: #78909c;
      --paper-blue-grey-500: #607d8b;
      --paper-blue-grey-600: #546e7a;
      --paper-blue-grey-700: #455a64;
      --paper-blue-grey-800: #37474f;
      --paper-blue-grey-900: #263238;

      /* opacity for dark text on a light background */
      --dark-divider-opacity: 0.12;
      --dark-disabled-opacity: 0.38; /* or hint text or icon */
      --dark-secondary-opacity: 0.54;
      --dark-primary-opacity: 0.87;

      /* opacity for light text on a dark background */
      --light-divider-opacity: 0.12;
      --light-disabled-opacity: 0.3; /* or hint text or icon */
      --light-secondary-opacity: 0.7;
      --light-primary-opacity: 1.0;

    }

  </style>
</custom-style>
`;template$6.setAttribute("style","display: none;");document.head.appendChild(template$6.content);const template$7=html`
<custom-style>
  <style is="custom-style">
    html {
      /*
       * You can use these generic variables in your elements for easy theming.
       * For example, if all your elements use \`--primary-text-color\` as its main
       * color, then switching from a light to a dark theme is just a matter of
       * changing the value of \`--primary-text-color\` in your application.
       */
      --primary-text-color: var(--light-theme-text-color);
      --primary-background-color: var(--light-theme-background-color);
      --secondary-text-color: var(--light-theme-secondary-color);
      --disabled-text-color: var(--light-theme-disabled-color);
      --divider-color: var(--light-theme-divider-color);
      --error-color: var(--paper-deep-orange-a700);

      /*
       * Primary and accent colors. Also see color.js for more colors.
       */
      --primary-color: var(--paper-indigo-500);
      --light-primary-color: var(--paper-indigo-100);
      --dark-primary-color: var(--paper-indigo-700);

      --accent-color: var(--paper-pink-a200);
      --light-accent-color: var(--paper-pink-a100);
      --dark-accent-color: var(--paper-pink-a400);


      /*
       * Material Design Light background theme
       */
      --light-theme-background-color: #ffffff;
      --light-theme-base-color: #000000;
      --light-theme-text-color: var(--paper-grey-900);
      --light-theme-secondary-color: #737373;  /* for secondary text and icons */
      --light-theme-disabled-color: #9b9b9b;  /* disabled/hint text */
      --light-theme-divider-color: #dbdbdb;

      /*
       * Material Design Dark background theme
       */
      --dark-theme-background-color: var(--paper-grey-900);
      --dark-theme-base-color: #ffffff;
      --dark-theme-text-color: #ffffff;
      --dark-theme-secondary-color: #bcbcbc;  /* for secondary text and icons */
      --dark-theme-disabled-color: #646464;  /* disabled/hint text */
      --dark-theme-divider-color: #3c3c3c;

      /*
       * Deprecated values because of their confusing names.
       */
      --text-primary-color: var(--dark-theme-text-color);
      --default-primary-color: var(--primary-color);
    }
  </style>
</custom-style>`;template$7.setAttribute("style","display: none;");document.head.appendChild(template$7.content);Polymer({_template:html`
    <style include="paper-material-styles">
      :host {
        display: inline-block;
        position: relative;
        box-sizing: border-box;
        background-color: var(--paper-card-background-color, var(--primary-background-color));
        border-radius: 2px;

        @apply --paper-font-common-base;
        @apply --paper-card;
      }

      /* IE 10 support for HTML5 hidden attr */
      :host([hidden]), [hidden] {
        display: none !important;
      }

      .header {
        position: relative;
        border-top-left-radius: inherit;
        border-top-right-radius: inherit;
        overflow: hidden;

        @apply --paper-card-header;
      }

      .header iron-image {
        display: block;
        width: 100%;
        --iron-image-width: 100%;
        pointer-events: none;

        @apply --paper-card-header-image;
      }

      .header .title-text {
        padding: 16px;
        font-size: 24px;
        font-weight: 400;
        color: var(--paper-card-header-color, #000);

        @apply --paper-card-header-text;
      }

      .header .title-text.over-image {
        position: absolute;
        bottom: 0px;

        @apply --paper-card-header-image-text;
      }

      :host ::slotted(.card-content) {
        padding: 16px;
        position:relative;

        @apply --paper-card-content;
      }

      :host ::slotted(.card-actions) {
        border-top: 1px solid #e8e8e8;
        padding: 5px 16px;
        position:relative;

        @apply --paper-card-actions;
      }

      :host([elevation="1"]) {
        @apply --paper-material-elevation-1;
      }

      :host([elevation="2"]) {
        @apply --paper-material-elevation-2;
      }

      :host([elevation="3"]) {
        @apply --paper-material-elevation-3;
      }

      :host([elevation="4"]) {
        @apply --paper-material-elevation-4;
      }

      :host([elevation="5"]) {
        @apply --paper-material-elevation-5;
      }
    </style>

    <div class="header">
      <iron-image hidden\$="[[!image]]" aria-hidden\$="[[_isHidden(image)]]" src="[[image]]" alt="[[alt]]" placeholder="[[placeholderImage]]" preload="[[preloadImage]]" fade="[[fadeImage]]"></iron-image>
      <div hidden\$="[[!heading]]" class\$="title-text [[_computeHeadingClass(image)]]">[[heading]]</div>
    </div>

    <slot></slot>
`,is:"paper-card",properties:{/**
     * The title of the card.
     */heading:{type:String,value:"",observer:"_headingChanged"},/**
     * The url of the title image of the card.
     */image:{type:String,value:""},/**
     * The text alternative of the card's title image.
     */alt:{type:String},/**
     * When `true`, any change to the image url property will cause the
     * `placeholder` image to be shown until the image is fully rendered.
     */preloadImage:{type:Boolean,value:!1},/**
     * When `preloadImage` is true, setting `fadeImage` to true will cause the
     * image to fade into place.
     */fadeImage:{type:Boolean,value:!1},/**
     * This image will be used as a background/placeholder until the src image
     * has loaded. Use of a data-URI for placeholder is encouraged for instant
     * rendering.
     */placeholderImage:{type:String,value:null},/**
     * The z-depth of the card, from 0-5.
     */elevation:{type:Number,value:1,reflectToAttribute:!0},/**
     * Set this to true to animate the card shadow when setting a new
     * `z` value.
     */animatedShadow:{type:Boolean,value:!1},/**
     * Read-only property used to pass down the `animatedShadow` value to
     * the underlying paper-material style (since they have different names).
     */animated:{type:Boolean,reflectToAttribute:!0,readOnly:!0,computed:"_computeAnimated(animatedShadow)"}},/**
   * Format function for aria-hidden. Use the ! operator results in the
   * empty string when given a falsy value.
   */_isHidden:function(image){return image?"false":"true"},_headingChanged:function(heading){var currentHeading=this.getAttribute("heading"),currentLabel=this.getAttribute("aria-label");if("string"!==typeof currentLabel||currentLabel===currentHeading){this.setAttribute("aria-label",heading)}},_computeHeadingClass:function(image){return image?" over-image":""},_computeAnimated:function(animatedShadow){return animatedShadow}});const PaperDialogBehaviorImpl={hostAttributes:{role:"dialog",tabindex:"-1"},properties:{/**
     * If `modal` is true, this implies `no-cancel-on-outside-click`,
     * `no-cancel-on-esc-key` and `with-backdrop`.
     */modal:{type:Boolean,value:!1},__readied:{type:Boolean,value:!1}},observers:["_modalChanged(modal, __readied)"],listeners:{tap:"_onDialogClick"},/**
   * @return {void}
   */ready:function(){// Only now these properties can be read.
this.__prevNoCancelOnOutsideClick=this.noCancelOnOutsideClick;this.__prevNoCancelOnEscKey=this.noCancelOnEscKey;this.__prevWithBackdrop=this.withBackdrop;this.__readied=!0},_modalChanged:function(modal,readied){// modal implies noCancelOnOutsideClick, noCancelOnEscKey and withBackdrop.
// We need to wait for the element to be ready before we can read the
// properties values.
if(!readied){return}if(modal){this.__prevNoCancelOnOutsideClick=this.noCancelOnOutsideClick;this.__prevNoCancelOnEscKey=this.noCancelOnEscKey;this.__prevWithBackdrop=this.withBackdrop;this.noCancelOnOutsideClick=!0;this.noCancelOnEscKey=!0;this.withBackdrop=!0}else{// If the value was changed to false, let it false.
this.noCancelOnOutsideClick=this.noCancelOnOutsideClick&&this.__prevNoCancelOnOutsideClick;this.noCancelOnEscKey=this.noCancelOnEscKey&&this.__prevNoCancelOnEscKey;this.withBackdrop=this.withBackdrop&&this.__prevWithBackdrop}},_updateClosingReasonConfirmed:function(confirmed){this.closingReason=this.closingReason||{};this.closingReason.confirmed=confirmed},/**
   * Will dismiss the dialog if user clicked on an element with dialog-dismiss
   * or dialog-confirm attribute.
   */_onDialogClick:function(event){// Search for the element with dialog-confirm or dialog-dismiss,
// from the root target until this (excluded).
for(var path=dom(event).path,i=0,l=path.indexOf(this),target;i<l;i++){target=path[i];if(target.hasAttribute&&(target.hasAttribute("dialog-dismiss")||target.hasAttribute("dialog-confirm"))){this._updateClosingReasonConfirmed(target.hasAttribute("dialog-confirm"));this.close();event.stopPropagation();break}}}};/** @polymerBehavior */_exports.PaperDialogBehaviorImpl=PaperDialogBehaviorImpl;const PaperDialogBehavior=[IronOverlayBehavior,PaperDialogBehaviorImpl];_exports.PaperDialogBehavior=PaperDialogBehavior;var paperDialogBehavior={PaperDialogBehaviorImpl:PaperDialogBehaviorImpl,PaperDialogBehavior:PaperDialogBehavior};_exports.$paperDialogBehavior=paperDialogBehavior;const template$8=html`<custom-style>
  <style is="custom-style">
    html {

      /* Shared Styles */
      --paper-font-common-base: {
        font-family: 'Roboto', 'Noto', sans-serif;
        -webkit-font-smoothing: antialiased;
      };

      --paper-font-common-code: {
        font-family: 'Roboto Mono', 'Consolas', 'Menlo', monospace;
        -webkit-font-smoothing: antialiased;
      };

      --paper-font-common-expensive-kerning: {
        text-rendering: optimizeLegibility;
      };

      --paper-font-common-nowrap: {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
      };

      /* Material Font Styles */

      --paper-font-display4: {
        @apply --paper-font-common-base;
        @apply --paper-font-common-nowrap;

        font-size: 112px;
        font-weight: 300;
        letter-spacing: -.044em;
        line-height: 120px;
      };

      --paper-font-display3: {
        @apply --paper-font-common-base;
        @apply --paper-font-common-nowrap;

        font-size: 56px;
        font-weight: 400;
        letter-spacing: -.026em;
        line-height: 60px;
      };

      --paper-font-display2: {
        @apply --paper-font-common-base;

        font-size: 45px;
        font-weight: 400;
        letter-spacing: -.018em;
        line-height: 48px;
      };

      --paper-font-display1: {
        @apply --paper-font-common-base;

        font-size: 34px;
        font-weight: 400;
        letter-spacing: -.01em;
        line-height: 40px;
      };

      --paper-font-headline: {
        @apply --paper-font-common-base;

        font-size: 24px;
        font-weight: 400;
        letter-spacing: -.012em;
        line-height: 32px;
      };

      --paper-font-title: {
        @apply --paper-font-common-base;
        @apply --paper-font-common-nowrap;

        font-size: 20px;
        font-weight: 500;
        line-height: 28px;
      };

      --paper-font-subhead: {
        @apply --paper-font-common-base;

        font-size: 16px;
        font-weight: 400;
        line-height: 24px;
      };

      --paper-font-body2: {
        @apply --paper-font-common-base;

        font-size: 14px;
        font-weight: 500;
        line-height: 24px;
      };

      --paper-font-body1: {
        @apply --paper-font-common-base;

        font-size: 14px;
        font-weight: 400;
        line-height: 20px;
      };

      --paper-font-caption: {
        @apply --paper-font-common-base;
        @apply --paper-font-common-nowrap;

        font-size: 12px;
        font-weight: 400;
        letter-spacing: 0.011em;
        line-height: 20px;
      };

      --paper-font-menu: {
        @apply --paper-font-common-base;
        @apply --paper-font-common-nowrap;

        font-size: 13px;
        font-weight: 500;
        line-height: 24px;
      };

      --paper-font-button: {
        @apply --paper-font-common-base;
        @apply --paper-font-common-nowrap;

        font-size: 14px;
        font-weight: 500;
        letter-spacing: 0.018em;
        line-height: 24px;
        text-transform: uppercase;
      };

      --paper-font-code2: {
        @apply --paper-font-common-code;

        font-size: 14px;
        font-weight: 700;
        line-height: 20px;
      };

      --paper-font-code1: {
        @apply --paper-font-common-code;

        font-size: 14px;
        font-weight: 500;
        line-height: 20px;
      };

    }

  </style>
</custom-style>`;template$8.setAttribute("style","display: none;");document.head.appendChild(template$8.content);const $_documentContainer$1=document.createElement("template");$_documentContainer$1.setAttribute("style","display: none;");$_documentContainer$1.innerHTML=`<dom-module id="paper-dialog-shared-styles">
  <template>
    <style>
      :host {
        display: block;
        margin: 24px 40px;

        background: var(--paper-dialog-background-color, var(--primary-background-color));
        color: var(--paper-dialog-color, var(--primary-text-color));

        @apply --paper-font-body1;
        @apply --shadow-elevation-16dp;
        @apply --paper-dialog;
      }

      :host > ::slotted(*) {
        margin-top: 20px;
        padding: 0 24px;
      }

      :host > ::slotted(.no-padding) {
        padding: 0;
      }

      
      :host > ::slotted(*:first-child) {
        margin-top: 24px;
      }

      :host > ::slotted(*:last-child) {
        margin-bottom: 24px;
      }

      /* In 1.x, this selector was \`:host > ::content h2\`. In 2.x <slot> allows
      to select direct children only, which increases the weight of this
      selector, so we have to re-define first-child/last-child margins below. */
      :host > ::slotted(h2) {
        position: relative;
        margin: 0;

        @apply --paper-font-title;
        @apply --paper-dialog-title;
      }

      /* Apply mixin again, in case it sets margin-top. */
      :host > ::slotted(h2:first-child) {
        margin-top: 24px;
        @apply --paper-dialog-title;
      }

      /* Apply mixin again, in case it sets margin-bottom. */
      :host > ::slotted(h2:last-child) {
        margin-bottom: 24px;
        @apply --paper-dialog-title;
      }

      :host > ::slotted(.paper-dialog-buttons),
      :host > ::slotted(.buttons) {
        position: relative;
        padding: 8px 8px 8px 24px;
        margin: 0;

        color: var(--paper-dialog-button-color, var(--primary-color));

        @apply --layout-horizontal;
        @apply --layout-end-justified;
      }
    </style>
  </template>
</dom-module>`;document.head.appendChild($_documentContainer$1.content);Polymer({_template:html`
    <style>

      :host {
        display: block;
        @apply --layout-relative;
      }

      :host(.is-scrolled:not(:first-child))::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 1px;
        background: var(--divider-color);
      }

      :host(.can-scroll:not(.scrolled-to-bottom):not(:last-child))::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        height: 1px;
        background: var(--divider-color);
      }

      .scrollable {
        padding: 0 24px;

        @apply --layout-scroll;
        @apply --paper-dialog-scrollable;
      }

      .fit {
        @apply --layout-fit;
      }
    </style>

    <div id="scrollable" class="scrollable" on-scroll="updateScrollState">
      <slot></slot>
    </div>
`,is:"paper-dialog-scrollable",properties:{/**
     * The dialog element that implements `Polymer.PaperDialogBehavior`
     * containing this element.
     * @type {?Node}
     */dialogElement:{type:Object}},/**
   * Returns the scrolling element.
   */get scrollTarget(){return this.$.scrollable},ready:function(){this._ensureTarget();this.classList.add("no-padding")},attached:function(){this._ensureTarget();requestAnimationFrame(this.updateScrollState.bind(this))},updateScrollState:function(){this.toggleClass("is-scrolled",0<this.scrollTarget.scrollTop);this.toggleClass("can-scroll",this.scrollTarget.offsetHeight<this.scrollTarget.scrollHeight);this.toggleClass("scrolled-to-bottom",this.scrollTarget.scrollTop+this.scrollTarget.offsetHeight>=this.scrollTarget.scrollHeight)},_ensureTarget:function(){// Read parentElement instead of parentNode in order to skip shadowRoots.
this.dialogElement=this.dialogElement||this.parentElement;// Check if dialog implements paper-dialog-behavior. If not, fit
// scrollTarget to host.
if(this.dialogElement&&this.dialogElement.behaviors&&0<=this.dialogElement.behaviors.indexOf(PaperDialogBehaviorImpl)){this.dialogElement.sizingTarget=this.scrollTarget;this.scrollTarget.classList.remove("fit")}else if(this.dialogElement){this.scrollTarget.classList.add("fit")}}});Polymer({_template:html`
    <style include="paper-dialog-shared-styles"></style>
    <slot></slot>
`,is:"paper-dialog",behaviors:[PaperDialogBehavior,NeonAnimationRunnerBehavior],listeners:{"neon-animation-finish":"_onNeonAnimationFinish"},_renderOpened:function(){this.cancelAnimation();this.playAnimation("entry")},_renderClosed:function(){this.cancelAnimation();this.playAnimation("exit")},_onNeonAnimationFinish:function(){if(this.opened){this._finishRenderOpened()}else{this._finishRenderClosed()}}});const $_documentContainer$2=document.createElement("template");$_documentContainer$2.setAttribute("style","display: none;");$_documentContainer$2.innerHTML=`<iron-iconset-svg name="paper-dropdown-menu" size="24">
<svg><defs>
<g id="arrow-drop-down"><path d="M7 10l5 5 5-5z"></path></g>
</defs></svg>
</iron-iconset-svg>`;document.head.appendChild($_documentContainer$2.content);const $_documentContainer$3=document.createElement("template");$_documentContainer$3.setAttribute("style","display: none;");$_documentContainer$3.innerHTML=`<dom-module id="paper-dropdown-menu-shared-styles">
  <template>
    <style>
      :host {
        display: inline-block;
        position: relative;
        text-align: left;

        /* NOTE(cdata): Both values are needed, since some phones require the
         * value to be \`transparent\`.
         */
        -webkit-tap-highlight-color: rgba(0,0,0,0);
        -webkit-tap-highlight-color: transparent;

        --paper-input-container-input: {
          overflow: hidden;
          white-space: nowrap;
          text-overflow: ellipsis;
          max-width: 100%;
          box-sizing: border-box;
          cursor: pointer;
        };

        @apply --paper-dropdown-menu;
      }

      :host([disabled]) {
        @apply --paper-dropdown-menu-disabled;
      }

      :host([noink]) paper-ripple {
        display: none;
      }

      :host([no-label-float]) paper-ripple {
        top: 8px;
      }

      paper-ripple {
        top: 12px;
        left: 0px;
        bottom: 8px;
        right: 0px;

        @apply --paper-dropdown-menu-ripple;
      }

      paper-menu-button {
        display: block;
        padding: 0;

        @apply --paper-dropdown-menu-button;
      }

      paper-input {
        @apply --paper-dropdown-menu-input;
      }

      iron-icon {
        color: var(--disabled-text-color);

        @apply --paper-dropdown-menu-icon;
      }
    </style>
  </template>
</dom-module>`;document.head.appendChild($_documentContainer$3.content);const PaperInputAddonBehavior={attached:function(){this.fire("addon-attached")},/**
   * The function called by `<paper-input-container>` when the input value or
   * validity changes.
   * @param {{
   *   invalid: boolean,
   *   inputElement: (Element|undefined),
   *   value: (string|undefined)
   * }} state -
   *     inputElement: The input element.
   *     value: The input value.
   *     invalid: True if the input value is invalid.
   */update:function(state){}};_exports.PaperInputAddonBehavior=PaperInputAddonBehavior;var paperInputAddonBehavior={PaperInputAddonBehavior:PaperInputAddonBehavior};_exports.$paperInputAddonBehavior=paperInputAddonBehavior;Polymer({_template:html`
    <style>
      :host {
        display: inline-block;
        float: right;

        @apply --paper-font-caption;
        @apply --paper-input-char-counter;
      }

      :host([hidden]) {
        display: none !important;
      }

      :host(:dir(rtl)) {
        float: left;
      }
    </style>

    <span>[[_charCounterStr]]</span>
`,is:"paper-input-char-counter",behaviors:[PaperInputAddonBehavior],properties:{_charCounterStr:{type:String,value:"0"}},/**
   * This overrides the update function in PaperInputAddonBehavior.
   * @param {{
   *   inputElement: (Element|undefined),
   *   value: (string|undefined),
   *   invalid: boolean
   * }} state -
   *     inputElement: The input element.
   *     value: The input value.
   *     invalid: True if the input value is invalid.
   */update:function(state){if(!state.inputElement){return}state.value=state.value||"";var counter=state.value.toString().length.toString();if(state.inputElement.hasAttribute("maxlength")){counter+="/"+state.inputElement.getAttribute("maxlength")}this._charCounterStr=counter}});const template$9=html`
<custom-style>
  <style is="custom-style">
    html {
      --paper-input-container-shared-input-style: {
        position: relative; /* to make a stacking context */
        outline: none;
        box-shadow: none;
        padding: 0;
        margin: 0;
        width: 100%;
        max-width: 100%;
        background: transparent;
        border: none;
        color: var(--paper-input-container-input-color, var(--primary-text-color));
        -webkit-appearance: none;
        text-align: inherit;
        vertical-align: var(--paper-input-container-input-align, bottom);

        @apply --paper-font-subhead;
      };
    }
  </style>
</custom-style>
`;template$9.setAttribute("style","display: none;");document.head.appendChild(template$9.content);/*
                                               `<paper-input-container>` is a container for a `<label>`, an `<iron-input>` or
                                               `<textarea>` and optional add-on elements such as an error message or character
                                               counter, used to implement Material Design text fields.
                                                                                           For example:
                                                                                               <paper-input-container>
                                                   <label slot="label">Your name</label>
                                                   <iron-input slot="input">
                                                     <input>
                                                   </iron-input>
                                                   // In Polymer 1.0, you would use `<input is="iron-input" slot="input">`
                                               instead of the above.
                                                 </paper-input-container>
                                                                                           You can style the nested `<input>` however you want; if you want it to look like
                                               a Material Design input, you can style it with the
                                               --paper-input-container-shared-input-style mixin.
                                                                                           Do not wrap `<paper-input-container>` around elements that already include it,
                                               such as `<paper-input>`. Doing so may cause events to bounce infinitely between
                                               the container and its contained element.
                                                                                           ### Listening for input changes
                                                                                           By default, it listens for changes on the `bind-value` attribute on its children
                                               nodes and perform tasks such as auto-validating and label styling when the
                                               `bind-value` changes. You can configure the attribute it listens to with the
                                               `attr-for-value` attribute.
                                                                                           ### Using a custom input element
                                                                                           You can use a custom input element in a `<paper-input-container>`, for example
                                               to implement a compound input field like a social security number input. The
                                               custom input element should have the `paper-input-input` class, have a
                                               `notify:true` value property and optionally implements
                                               `Polymer.IronValidatableBehavior` if it is validatable.
                                                                                               <paper-input-container attr-for-value="ssn-value">
                                                   <label slot="label">Social security number</label>
                                                   <ssn-input slot="input" class="paper-input-input"></ssn-input>
                                                 </paper-input-container>
                                                                                           
                                               If you're using a `<paper-input-container>` imperatively, it's important to make
                                               sure that you attach its children (the `iron-input` and the optional `label`)
                                               before you attach the `<paper-input-container>` itself, so that it can be set up
                                               correctly.
                                                                                           ### Validation
                                                                                           If the `auto-validate` attribute is set, the input container will validate the
                                               input and update the container styling when the input value changes.
                                                                                           ### Add-ons
                                                                                           Add-ons are child elements of a `<paper-input-container>` with the `add-on`
                                               attribute and implements the `Polymer.PaperInputAddonBehavior` behavior. They
                                               are notified when the input value or validity changes, and may implement
                                               functionality such as error messages or character counters. They appear at the
                                               bottom of the input.
                                                                                           ### Prefixes and suffixes
                                               These are child elements of a `<paper-input-container>` with the `prefix`
                                               or `suffix` attribute, and are displayed inline with the input, before or after.
                                                                                               <paper-input-container>
                                                   <div slot="prefix">$</div>
                                                   <label slot="label">Total</label>
                                                   <iron-input slot="input">
                                                     <input>
                                                   </iron-input>
                                                   // In Polymer 1.0, you would use `<input is="iron-input" slot="input">`
                                               instead of the above. <paper-icon-button slot="suffix"
                                               icon="clear"></paper-icon-button>
                                                 </paper-input-container>
                                                                                           ### Styling
                                                                                           The following custom properties and mixins are available for styling:
                                                                                           Custom property | Description | Default
                                               ----------------|-------------|----------
                                               `--paper-input-container-color` | Label and underline color when the input is not focused | `--secondary-text-color`
                                               `--paper-input-container-focus-color` | Label and underline color when the input is focused | `--primary-color`
                                               `--paper-input-container-invalid-color` | Label and underline color when the input is is invalid | `--error-color`
                                               `--paper-input-container-input-color` | Input foreground color | `--primary-text-color`
                                               `--paper-input-container` | Mixin applied to the container | `{}`
                                               `--paper-input-container-disabled` | Mixin applied to the container when it's disabled | `{}`
                                               `--paper-input-container-label` | Mixin applied to the label | `{}`
                                               `--paper-input-container-label-focus` | Mixin applied to the label when the input is focused | `{}`
                                               `--paper-input-container-label-floating` | Mixin applied to the label when floating | `{}`
                                               `--paper-input-container-input` | Mixin applied to the input | `{}`
                                               `--paper-input-container-input-align` | The vertical-align property of the input | `bottom`
                                               `--paper-input-container-input-disabled` | Mixin applied to the input when the component is disabled | `{}`
                                               `--paper-input-container-input-focus` | Mixin applied to the input when focused | `{}`
                                               `--paper-input-container-input-invalid` | Mixin applied to the input when invalid | `{}`
                                               `--paper-input-container-input-webkit-spinner` | Mixin applied to the webkit spinner | `{}`
                                               `--paper-input-container-input-webkit-clear` | Mixin applied to the webkit clear button | `{}`
                                               `--paper-input-container-input-webkit-calendar-picker-indicator` | Mixin applied to the webkit calendar picker indicator | `{}`
                                               `--paper-input-container-ms-clear` | Mixin applied to the Internet Explorer clear button | `{}`
                                               `--paper-input-container-underline` | Mixin applied to the underline | `{}`
                                               `--paper-input-container-underline-focus` | Mixin applied to the underline when the input is focused | `{}`
                                               `--paper-input-container-underline-disabled` | Mixin applied to the underline when the input is disabled | `{}`
                                               `--paper-input-prefix` | Mixin applied to the input prefix | `{}`
                                               `--paper-input-suffix` | Mixin applied to the input suffix | `{}`
                                                                                           This element is `display:block` by default, but you can set the `inline`
                                               attribute to make it `display:inline-block`.
                                               */Polymer({_template:html`
    <style>
      :host {
        display: block;
        padding: 8px 0;
        @apply --paper-input-container;
      }

      :host([inline]) {
        display: inline-block;
      }

      :host([disabled]) {
        pointer-events: none;
        opacity: 0.33;

        @apply --paper-input-container-disabled;
      }

      :host([hidden]) {
        display: none !important;
      }

      [hidden] {
        display: none !important;
      }

      .floated-label-placeholder {
        @apply --paper-font-caption;
      }

      .underline {
        height: 2px;
        position: relative;
      }

      .focused-line {
        @apply --layout-fit;
        border-bottom: 2px solid var(--paper-input-container-focus-color, var(--primary-color));

        -webkit-transform-origin: center center;
        transform-origin: center center;
        -webkit-transform: scale3d(0,1,1);
        transform: scale3d(0,1,1);

        @apply --paper-input-container-underline-focus;
      }

      .underline.is-highlighted .focused-line {
        -webkit-transform: none;
        transform: none;
        -webkit-transition: -webkit-transform 0.25s;
        transition: transform 0.25s;

        @apply --paper-transition-easing;
      }

      .underline.is-invalid .focused-line {
        border-color: var(--paper-input-container-invalid-color, var(--error-color));
        -webkit-transform: none;
        transform: none;
        -webkit-transition: -webkit-transform 0.25s;
        transition: transform 0.25s;

        @apply --paper-transition-easing;
      }

      .unfocused-line {
        @apply --layout-fit;
        border-bottom: 1px solid var(--paper-input-container-color, var(--secondary-text-color));
        @apply --paper-input-container-underline;
      }

      :host([disabled]) .unfocused-line {
        border-bottom: 1px dashed;
        border-color: var(--paper-input-container-color, var(--secondary-text-color));
        @apply --paper-input-container-underline-disabled;
      }

      .input-wrapper {
        @apply --layout-horizontal;
        @apply --layout-center;
        position: relative;
      }

      .input-content {
        @apply --layout-flex-auto;
        @apply --layout-relative;
        max-width: 100%;
      }

      .input-content ::slotted(label),
      .input-content ::slotted(.paper-input-label) {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        font: inherit;
        color: var(--paper-input-container-color, var(--secondary-text-color));
        -webkit-transition: -webkit-transform 0.25s, width 0.25s;
        transition: transform 0.25s, width 0.25s;
        -webkit-transform-origin: left top;
        transform-origin: left top;
        /* Fix for safari not focusing 0-height date/time inputs with -webkit-apperance: none; */
        min-height: 1px;

        @apply --paper-font-common-nowrap;
        @apply --paper-font-subhead;
        @apply --paper-input-container-label;
        @apply --paper-transition-easing;
      }

      .input-content.label-is-floating ::slotted(label),
      .input-content.label-is-floating ::slotted(.paper-input-label) {
        -webkit-transform: translateY(-75%) scale(0.75);
        transform: translateY(-75%) scale(0.75);

        /* Since we scale to 75/100 of the size, we actually have 100/75 of the
        original space now available */
        width: 133%;

        @apply --paper-input-container-label-floating;
      }

      :host(:dir(rtl)) .input-content.label-is-floating ::slotted(label),
      :host(:dir(rtl)) .input-content.label-is-floating ::slotted(.paper-input-label) {
        right: 0;
        left: auto;
        -webkit-transform-origin: right top;
        transform-origin: right top;
      }

      .input-content.label-is-highlighted ::slotted(label),
      .input-content.label-is-highlighted ::slotted(.paper-input-label) {
        color: var(--paper-input-container-focus-color, var(--primary-color));

        @apply --paper-input-container-label-focus;
      }

      .input-content.is-invalid ::slotted(label),
      .input-content.is-invalid ::slotted(.paper-input-label) {
        color: var(--paper-input-container-invalid-color, var(--error-color));
      }

      .input-content.label-is-hidden ::slotted(label),
      .input-content.label-is-hidden ::slotted(.paper-input-label) {
        visibility: hidden;
      }

      .input-content ::slotted(input),
      .input-content ::slotted(iron-input),
      .input-content ::slotted(textarea),
      .input-content ::slotted(iron-autogrow-textarea),
      .input-content ::slotted(.paper-input-input) {
        @apply --paper-input-container-shared-input-style;
        /* The apply shim doesn't apply the nested color custom property,
          so we have to re-apply it here. */
        color: var(--paper-input-container-input-color, var(--primary-text-color));
        @apply --paper-input-container-input;
      }

      .input-content ::slotted(input)::-webkit-outer-spin-button,
      .input-content ::slotted(input)::-webkit-inner-spin-button {
        @apply --paper-input-container-input-webkit-spinner;
      }

      .input-content.focused ::slotted(input),
      .input-content.focused ::slotted(iron-input),
      .input-content.focused ::slotted(textarea),
      .input-content.focused ::slotted(iron-autogrow-textarea),
      .input-content.focused ::slotted(.paper-input-input) {
        @apply --paper-input-container-input-focus;
      }

      .input-content.is-invalid ::slotted(input),
      .input-content.is-invalid ::slotted(iron-input),
      .input-content.is-invalid ::slotted(textarea),
      .input-content.is-invalid ::slotted(iron-autogrow-textarea),
      .input-content.is-invalid ::slotted(.paper-input-input) {
        @apply --paper-input-container-input-invalid;
      }

      .prefix ::slotted(*) {
        display: inline-block;
        @apply --paper-font-subhead;
        @apply --layout-flex-none;
        @apply --paper-input-prefix;
      }

      .suffix ::slotted(*) {
        display: inline-block;
        @apply --paper-font-subhead;
        @apply --layout-flex-none;

        @apply --paper-input-suffix;
      }

      /* Firefox sets a min-width on the input, which can cause layout issues */
      .input-content ::slotted(input) {
        min-width: 0;
      }

      .input-content ::slotted(textarea) {
        resize: none;
      }

      .add-on-content {
        position: relative;
      }

      .add-on-content.is-invalid ::slotted(*) {
        color: var(--paper-input-container-invalid-color, var(--error-color));
      }

      .add-on-content.is-highlighted ::slotted(*) {
        color: var(--paper-input-container-focus-color, var(--primary-color));
      }
    </style>

    <div class="floated-label-placeholder" aria-hidden="true" hidden="[[noLabelFloat]]">&nbsp;</div>

    <div class="input-wrapper">
      <span class="prefix"><slot name="prefix"></slot></span>

      <div class$="[[_computeInputContentClass(noLabelFloat,alwaysFloatLabel,focused,invalid,_inputHasContent)]]" id="labelAndInputContainer">
        <slot name="label"></slot>
        <slot name="input"></slot>
      </div>

      <span class="suffix"><slot name="suffix"></slot></span>
    </div>

    <div class$="[[_computeUnderlineClass(focused,invalid)]]">
      <div class="unfocused-line"></div>
      <div class="focused-line"></div>
    </div>

    <div class$="[[_computeAddOnContentClass(focused,invalid)]]">
      <slot name="add-on"></slot>
    </div>
`,is:"paper-input-container",properties:{/**
     * Set to true to disable the floating label. The label disappears when the
     * input value is not null.
     */noLabelFloat:{type:Boolean,value:!1},/**
     * Set to true to always float the floating label.
     */alwaysFloatLabel:{type:Boolean,value:!1},/**
     * The attribute to listen for value changes on.
     */attrForValue:{type:String,value:"bind-value"},/**
     * Set to true to auto-validate the input value when it changes.
     */autoValidate:{type:Boolean,value:!1},/**
     * True if the input is invalid. This property is set automatically when the
     * input value changes if auto-validating, or when the `iron-input-validate`
     * event is heard from a child.
     */invalid:{observer:"_invalidChanged",type:Boolean,value:!1},/**
     * True if the input has focus.
     */focused:{readOnly:!0,type:Boolean,value:!1,notify:!0},_addons:{type:Array// do not set a default value here intentionally - it will be initialized
// lazily when a distributed child is attached, which may occur before
// configuration for this element in polyfill.
},_inputHasContent:{type:Boolean,value:!1},_inputSelector:{type:String,value:"input,iron-input,textarea,.paper-input-input"},_boundOnFocus:{type:Function,value:function(){return this._onFocus.bind(this)}},_boundOnBlur:{type:Function,value:function(){return this._onBlur.bind(this)}},_boundOnInput:{type:Function,value:function(){return this._onInput.bind(this)}},_boundValueChanged:{type:Function,value:function(){return this._onValueChanged.bind(this)}}},listeners:{"addon-attached":"_onAddonAttached","iron-input-validate":"_onIronInputValidate"},get _valueChangedEvent(){return this.attrForValue+"-changed"},get _propertyForValue(){return dashToCamelCase(this.attrForValue)},get _inputElement(){return dom(this).querySelector(this._inputSelector)},get _inputElementValue(){return this._inputElement[this._propertyForValue]||this._inputElement.value},ready:function(){// Paper-input treats a value of undefined differently at startup than
// the rest of the time (specifically: it does not validate it at startup,
// but it does after that. We need to track whether the first time we
// encounter the value is basically this first time, so that we can validate
// it correctly the rest of the time. See
// https://github.com/PolymerElements/paper-input/issues/605
this.__isFirstValueUpdate=!0;if(!this._addons){this._addons=[]}this.addEventListener("focus",this._boundOnFocus,!0);this.addEventListener("blur",this._boundOnBlur,!0)},attached:function(){if(this.attrForValue){this._inputElement.addEventListener(this._valueChangedEvent,this._boundValueChanged)}else{this.addEventListener("input",this._onInput)}// Only validate when attached if the input already has a value.
if(this._inputElementValue&&""!=this._inputElementValue){this._handleValueAndAutoValidate(this._inputElement)}else{this._handleValue(this._inputElement)}},/** @private */_onAddonAttached:function(event){if(!this._addons){this._addons=[]}var target=event.target;if(-1===this._addons.indexOf(target)){this._addons.push(target);if(this.isAttached){this._handleValue(this._inputElement)}}},/** @private */_onFocus:function(){this._setFocused(!0)},/** @private */_onBlur:function(){this._setFocused(!1);this._handleValueAndAutoValidate(this._inputElement)},/** @private */_onInput:function(event){this._handleValueAndAutoValidate(event.target)},/** @private */_onValueChanged:function(event){var input=event.target;// Paper-input treats a value of undefined differently at startup than
// the rest of the time (specifically: it does not validate it at startup,
// but it does after that. If this is in fact the bootup case, ignore
// validation, just this once.
if(this.__isFirstValueUpdate){this.__isFirstValueUpdate=!1;if(input.value===void 0||""===input.value){return}}this._handleValueAndAutoValidate(event.target)},/** @private */_handleValue:function(inputElement){var value=this._inputElementValue;// type="number" hack needed because this.value is empty until it's valid
if(value||0===value||"number"===inputElement.type&&!inputElement.checkValidity()){this._inputHasContent=!0}else{this._inputHasContent=!1}this.updateAddons({inputElement:inputElement,value:value,invalid:this.invalid})},/** @private */_handleValueAndAutoValidate:function(inputElement){if(this.autoValidate&&inputElement){var valid;if(inputElement.validate){valid=inputElement.validate(this._inputElementValue)}else{valid=inputElement.checkValidity()}this.invalid=!valid}// Call this last to notify the add-ons.
this._handleValue(inputElement)},/** @private */_onIronInputValidate:function(event){this.invalid=this._inputElement.invalid},/** @private */_invalidChanged:function(){if(this._addons){this.updateAddons({invalid:this.invalid})}},/**
   * Call this to update the state of add-ons.
   * @param {Object} state Add-on state.
   */updateAddons:function(state){for(var addon,index=0;addon=this._addons[index];index++){addon.update(state)}},/** @private */_computeInputContentClass:function(noLabelFloat,alwaysFloatLabel,focused,invalid,_inputHasContent){var cls="input-content";if(!noLabelFloat){var label=this.querySelector("label");if(alwaysFloatLabel||_inputHasContent){cls+=" label-is-floating";// If the label is floating, ignore any offsets that may have been
// applied from a prefix element.
this.$.labelAndInputContainer.style.position="static";if(invalid){cls+=" is-invalid"}else if(focused){cls+=" label-is-highlighted"}}else{// When the label is not floating, it should overlap the input element.
if(label){this.$.labelAndInputContainer.style.position="relative"}if(invalid){cls+=" is-invalid"}}}else{if(_inputHasContent){cls+=" label-is-hidden"}if(invalid){cls+=" is-invalid"}}if(focused){cls+=" focused"}return cls},/** @private */_computeUnderlineClass:function(focused,invalid){var cls="underline";if(invalid){cls+=" is-invalid"}else if(focused){cls+=" is-highlighted"}return cls},/** @private */_computeAddOnContentClass:function(focused,invalid){var cls="add-on-content";if(invalid){cls+=" is-invalid"}else if(focused){cls+=" is-highlighted"}return cls}});Polymer({_template:html`
    <style>
      :host {
        display: inline-block;
        visibility: hidden;

        color: var(--paper-input-container-invalid-color, var(--error-color));

        @apply --paper-font-caption;
        @apply --paper-input-error;
        position: absolute;
        left:0;
        right:0;
      }

      :host([invalid]) {
        visibility: visible;
      }

      #a11yWrapper {
        visibility: hidden;
      }

      :host([invalid]) #a11yWrapper {
        visibility: visible;
      }
    </style>

    <!--
    If the paper-input-error element is directly referenced by an
    \`aria-describedby\` attribute, such as when used as a paper-input add-on,
    then applying \`visibility: hidden;\` to the paper-input-error element itself
    does not hide the error.

    For more information, see:
    https://www.w3.org/TR/accname-1.1/#mapping_additional_nd_description
    -->
    <div id="a11yWrapper">
      <slot></slot>
    </div>
`,is:"paper-input-error",behaviors:[PaperInputAddonBehavior],properties:{/**
     * True if the error is showing.
     */invalid:{readOnly:!0,reflectToAttribute:!0,type:Boolean}},/**
   * This overrides the update function in PaperInputAddonBehavior.
   * @param {{
   *   inputElement: (Element|undefined),
   *   value: (string|undefined),
   *   invalid: boolean
   * }} state -
   *     inputElement: The input element.
   *     value: The input value.
   *     invalid: True if the input value is invalid.
   */update:function(state){this._setInvalid(state.invalid)}});// aria-labelledby) and add-ons.
const PaperInputHelper={};_exports.PaperInputHelper=PaperInputHelper;PaperInputHelper.NextLabelID=1;PaperInputHelper.NextAddonID=1;PaperInputHelper.NextInputID=1;/**
                                   * Use `PaperInputBehavior` to implement inputs with `<paper-input-container>`.
                                   * This behavior is implemented by `<paper-input>`. It exposes a number of
                                   * properties from `<paper-input-container>` and `<input is="iron-input">` and
                                   * they should be bound in your template.
                                   *
                                   * The input element can be accessed by the `inputElement` property if you need
                                   * to access properties or methods that are not exposed.
                                   * @polymerBehavior PaperInputBehavior
                                   */const PaperInputBehaviorImpl={properties:{/**
     * Fired when the input changes due to user interaction.
     *
     * @event change
     */ /**
         * The label for this input. If you're using PaperInputBehavior to
         * implement your own paper-input-like element, bind this to
         * `<label>`'s content and `hidden` property, e.g.
         * `<label hidden$="[[!label]]">[[label]]</label>` in your `template`
         */label:{type:String},/**
     * The value for this input. If you're using PaperInputBehavior to
     * implement your own paper-input-like element, bind this to
     * the `<iron-input>`'s `bindValue`
     * property, or the value property of your input that is `notify:true`.
     * @type {*}
     */value:{notify:!0,type:String},/**
     * Set to true to disable this input. If you're using PaperInputBehavior to
     * implement your own paper-input-like element, bind this to
     * both the `<paper-input-container>`'s and the input's `disabled` property.
     */disabled:{type:Boolean,value:!1},/**
     * Returns true if the value is invalid. If you're using PaperInputBehavior
     * to implement your own paper-input-like element, bind this to both the
     * `<paper-input-container>`'s and the input's `invalid` property.
     *
     * If `autoValidate` is true, the `invalid` attribute is managed
     * automatically, which can clobber attempts to manage it manually.
     */invalid:{type:Boolean,value:!1,notify:!0},/**
     * Set this to specify the pattern allowed by `preventInvalidInput`. If
     * you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `allowedPattern`
     * property.
     */allowedPattern:{type:String},/**
     * The type of the input. The supported types are the
     * [native input's
     * types](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_<input>_types).
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the (Polymer 1) `<input is="iron-input">`'s or
     * (Polymer 2)
     * `<iron-input>`'s `type` property.
     */type:{type:String},/**
     * The datalist of the input (if any). This should match the id of an
     * existing `<datalist>`. If you're using PaperInputBehavior to implement
     * your own paper-input-like element, bind this to the `<input
     * is="iron-input">`'s `list` property.
     */list:{type:String},/**
     * A pattern to validate the `input` with. If you're using
     * PaperInputBehavior to implement your own paper-input-like element, bind
     * this to the `<input is="iron-input">`'s `pattern` property.
     */pattern:{type:String},/**
     * Set to true to mark the input as required. If you're using
     * PaperInputBehavior to implement your own paper-input-like element, bind
     * this to the `<input is="iron-input">`'s `required` property.
     */required:{type:Boolean,value:!1},/**
     * The error message to display when the input is invalid. If you're using
     * PaperInputBehavior to implement your own paper-input-like element,
     * bind this to the `<paper-input-error>`'s content, if using.
     */errorMessage:{type:String},/**
     * Set to true to show a character counter.
     */charCounter:{type:Boolean,value:!1},/**
     * Set to true to disable the floating label. If you're using
     * PaperInputBehavior to implement your own paper-input-like element, bind
     * this to the `<paper-input-container>`'s `noLabelFloat` property.
     */noLabelFloat:{type:Boolean,value:!1},/**
     * Set to true to always float the label. If you're using PaperInputBehavior
     * to implement your own paper-input-like element, bind this to the
     * `<paper-input-container>`'s `alwaysFloatLabel` property.
     */alwaysFloatLabel:{type:Boolean,value:!1},/**
     * Set to true to auto-validate the input value. If you're using
     * PaperInputBehavior to implement your own paper-input-like element, bind
     * this to the `<paper-input-container>`'s `autoValidate` property.
     */autoValidate:{type:Boolean,value:!1},/**
     * Name of the validator to use. If you're using PaperInputBehavior to
     * implement your own paper-input-like element, bind this to
     * the `<input is="iron-input">`'s `validator` property.
     */validator:{type:String},// HTMLInputElement attributes for binding if needed
/**
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `autocomplete`
     * property.
     */autocomplete:{type:String,value:"off"},/**
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `autofocus`
     * property.
     */autofocus:{type:Boolean,observer:"_autofocusChanged"},/**
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `inputmode`
     * property.
     */inputmode:{type:String},/**
     * The minimum length of the input value.
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `minlength`
     * property.
     */minlength:{type:Number},/**
     * The maximum length of the input value.
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `maxlength`
     * property.
     */maxlength:{type:Number},/**
     * The minimum (numeric or date-time) input value.
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `min` property.
     */min:{type:String},/**
     * The maximum (numeric or date-time) input value.
     * Can be a String (e.g. `"2000-01-01"`) or a Number (e.g. `2`).
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `max` property.
     */max:{type:String},/**
     * Limits the numeric or date-time increments.
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `step` property.
     */step:{type:String},/**
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `name` property.
     */name:{type:String},/**
     * A placeholder string in addition to the label. If this is set, the label
     * will always float.
     */placeholder:{type:String,// need to set a default so _computeAlwaysFloatLabel is run
value:""},/**
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `readonly`
     * property.
     */readonly:{type:Boolean,value:!1},/**
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `size` property.
     */size:{type:Number},// Nonstandard attributes for binding if needed
/**
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `autocapitalize`
     * property.
     *
     * @type {string}
     */autocapitalize:{type:String,value:"none"},/**
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `autocorrect`
     * property.
     */autocorrect:{type:String,value:"off"},/**
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `autosave`
     * property, used with type=search.
     */autosave:{type:String},/**
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `results` property,
     * used with type=search.
     */results:{type:Number},/**
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the `<input is="iron-input">`'s `accept` property,
     * used with type=file.
     */accept:{type:String},/**
     * If you're using PaperInputBehavior to implement your own paper-input-like
     * element, bind this to the`<input is="iron-input">`'s `multiple` property,
     * used with type=file.
     */multiple:{type:Boolean},/** @private */_ariaDescribedBy:{type:String,value:""},/** @private */_ariaLabelledBy:{type:String,value:""},/** @private */_inputId:{type:String,value:""}},listeners:{"addon-attached":"_onAddonAttached"},/**
   * @type {!Object}
   */keyBindings:{"shift+tab:keydown":"_onShiftTabDown"},/** @private */hostAttributes:{tabindex:0},/**
   * Returns a reference to the input element.
   * @return {!HTMLElement}
   */get inputElement(){// Chrome generates audit errors if an <input type="password"> has a
// duplicate ID, which is almost always true in Shady DOM. Generate
// a unique ID instead.
if(!this.$){this.$={}}if(!this.$.input){this._generateInputId();this.$.input=this.$$("#"+this._inputId)}return this.$.input},/**
   * Returns a reference to the focusable element.
   * @return {!HTMLElement}
   */get _focusableElement(){return this.inputElement},created:function(){// These types have some default placeholder text; overlapping
// the label on top of it looks terrible. Auto-float the label in this case.
this._typesThatHaveText=["date","datetime","datetime-local","month","time","week","file"]},attached:function(){this._updateAriaLabelledBy();// In the 2.0 version of the element, this is handled in `onIronInputReady`,
// i.e. after the native input has finished distributing. In the 1.0
// version, the input is in the shadow tree, so it's already available.
if(!PolymerElement&&this.inputElement&&-1!==this._typesThatHaveText.indexOf(this.inputElement.type)){this.alwaysFloatLabel=!0}},_appendStringWithSpace:function(str,more){if(str){str=str+" "+more}else{str=more}return str},_onAddonAttached:function(event){var target=dom(event).rootTarget;if(target.id){this._ariaDescribedBy=this._appendStringWithSpace(this._ariaDescribedBy,target.id)}else{var id="paper-input-add-on-"+PaperInputHelper.NextAddonID++;target.id=id;this._ariaDescribedBy=this._appendStringWithSpace(this._ariaDescribedBy,id)}},/**
   * Validates the input element and sets an error style if needed.
   *
   * @return {boolean}
   */validate:function(){return this.inputElement.validate()},/**
   * Forward focus to inputElement. Overriden from IronControlState.
   */_focusBlurHandler:function(event){IronControlState._focusBlurHandler.call(this,event);// Forward the focus to the nested input.
if(this.focused&&!this._shiftTabPressed&&this._focusableElement){this._focusableElement.focus()}},/**
   * Handler that is called when a shift+tab keypress is detected by the menu.
   *
   * @param {CustomEvent} event A key combination event.
   */_onShiftTabDown:function(event){var oldTabIndex=this.getAttribute("tabindex");this._shiftTabPressed=!0;this.setAttribute("tabindex","-1");this.async(function(){this.setAttribute("tabindex",oldTabIndex);this._shiftTabPressed=!1},1)},/**
   * If `autoValidate` is true, then validates the element.
   */_handleAutoValidate:function(){if(this.autoValidate)this.validate()},/**
   * Restores the cursor to its original position after updating the value.
   * @param {string} newValue The value that should be saved.
   */updateValueAndPreserveCaret:function(newValue){// Not all elements might have selection, and even if they have the
// right properties, accessing them might throw an exception (like for
// <input type=number>)
try{var start=this.inputElement.selectionStart;this.value=newValue;// The cursor automatically jumps to the end after re-setting the value,
// so restore it to its original position.
this.inputElement.selectionStart=start;this.inputElement.selectionEnd=start}catch(e){// Just set the value and give up on the caret.
this.value=newValue}},_computeAlwaysFloatLabel:function(alwaysFloatLabel,placeholder){return placeholder||alwaysFloatLabel},_updateAriaLabelledBy:function(){var label=dom(this.root).querySelector("label");if(!label){this._ariaLabelledBy="";return}var labelledBy;if(label.id){labelledBy=label.id}else{labelledBy="paper-input-label-"+PaperInputHelper.NextLabelID++;label.id=labelledBy}this._ariaLabelledBy=labelledBy},_generateInputId:function(){if(!this._inputId||""===this._inputId){this._inputId="input-"+PaperInputHelper.NextInputID++}},_onChange:function(event){// In the Shadow DOM, the `change` event is not leaked into the
// ancestor tree, so we must do this manually.
// See
// https://w3c.github.io/webcomponents/spec/shadow/#events-that-are-not-leaked-into-ancestor-trees.
if(this.shadowRoot){this.fire(event.type,{sourceEvent:event},{node:this,bubbles:event.bubbles,cancelable:event.cancelable})}},_autofocusChanged:function(){// Firefox doesn't respect the autofocus attribute if it's applied after
// the page is loaded (Chrome/WebKit do respect it), preventing an
// autofocus attribute specified in markup from taking effect when the
// element is upgraded. As a workaround, if the autofocus property is set,
// and the focus hasn't already been moved elsewhere, we take focus.
if(this.autofocus&&this._focusableElement){// In IE 11, the default document.activeElement can be the page's
// outermost html element, but there are also cases (under the
// polyfill?) in which the activeElement is not a real HTMLElement, but
// just a plain object. We identify the latter case as having no valid
// activeElement.
var activeElement=document.activeElement,isActiveElementValid=activeElement instanceof HTMLElement,isSomeElementActive=isActiveElementValid&&activeElement!==document.body&&activeElement!==document.documentElement;/* IE 11 */if(!isSomeElementActive){// No specific element has taken the focus yet, so we can take it.
this._focusableElement.focus()}}}};/** @polymerBehavior */_exports.PaperInputBehaviorImpl=PaperInputBehaviorImpl;const PaperInputBehavior=[IronControlState,IronA11yKeysBehavior,PaperInputBehaviorImpl];_exports.PaperInputBehavior=PaperInputBehavior;var paperInputBehavior={PaperInputHelper:PaperInputHelper,PaperInputBehaviorImpl:PaperInputBehaviorImpl,PaperInputBehavior:PaperInputBehavior};_exports.$paperInputBehavior=paperInputBehavior;Polymer({is:"paper-input",_template:html`
    <style>
      :host {
        display: block;
      }

      :host([focused]) {
        outline: none;
      }

      :host([hidden]) {
        display: none !important;
      }

      input {
        /* Firefox sets a min-width on the input, which can cause layout issues */
        min-width: 0;
      }

      /* In 1.x, the <input> is distributed to paper-input-container, which styles it.
      In 2.x the <iron-input> is distributed to paper-input-container, which styles
      it, but in order for this to work correctly, we need to reset some
      of the native input's properties to inherit (from the iron-input) */
      iron-input > input {
        @apply --paper-input-container-shared-input-style;
        font-family: inherit;
        font-weight: inherit;
        font-size: inherit;
        letter-spacing: inherit;
        word-spacing: inherit;
        line-height: inherit;
        text-shadow: inherit;
        color: inherit;
        cursor: inherit;
      }

      input:disabled {
        @apply --paper-input-container-input-disabled;
      }

      input::-webkit-outer-spin-button,
      input::-webkit-inner-spin-button {
        @apply --paper-input-container-input-webkit-spinner;
      }

      input::-webkit-clear-button {
        @apply --paper-input-container-input-webkit-clear;
      }

      input::-webkit-calendar-picker-indicator {
        @apply --paper-input-container-input-webkit-calendar-picker-indicator;
      }

      input::-webkit-input-placeholder {
        color: var(--paper-input-container-color, var(--secondary-text-color));
      }

      input:-moz-placeholder {
        color: var(--paper-input-container-color, var(--secondary-text-color));
      }

      input::-moz-placeholder {
        color: var(--paper-input-container-color, var(--secondary-text-color));
      }

      input::-ms-clear {
        @apply --paper-input-container-ms-clear;
      }

      input::-ms-reveal {
        @apply --paper-input-container-ms-reveal;
      }

      input:-ms-input-placeholder {
        color: var(--paper-input-container-color, var(--secondary-text-color));
      }

      label {
        pointer-events: none;
      }
    </style>

    <paper-input-container id="container" no-label-float="[[noLabelFloat]]" always-float-label="[[_computeAlwaysFloatLabel(alwaysFloatLabel,placeholder)]]" auto-validate$="[[autoValidate]]" disabled$="[[disabled]]" invalid="[[invalid]]">

      <slot name="prefix" slot="prefix"></slot>

      <label hidden$="[[!label]]" aria-hidden="true" for$="[[_inputId]]" slot="label">[[label]]</label>

      <!-- Need to bind maxlength so that the paper-input-char-counter works correctly -->
      <iron-input bind-value="{{value}}" slot="input" class="input-element" id$="[[_inputId]]" maxlength$="[[maxlength]]" allowed-pattern="[[allowedPattern]]" invalid="{{invalid}}" validator="[[validator]]">
        <input aria-labelledby$="[[_ariaLabelledBy]]" aria-describedby$="[[_ariaDescribedBy]]" disabled$="[[disabled]]" title$="[[title]]" type$="[[type]]" pattern$="[[pattern]]" required$="[[required]]" autocomplete$="[[autocomplete]]" autofocus$="[[autofocus]]" inputmode$="[[inputmode]]" minlength$="[[minlength]]" maxlength$="[[maxlength]]" min$="[[min]]" max$="[[max]]" step$="[[step]]" name$="[[name]]" placeholder$="[[placeholder]]" readonly$="[[readonly]]" list$="[[list]]" size$="[[size]]" autocapitalize$="[[autocapitalize]]" autocorrect$="[[autocorrect]]" on-change="_onChange" tabindex$="[[tabIndex]]" autosave$="[[autosave]]" results$="[[results]]" accept$="[[accept]]" multiple$="[[multiple]]">
      </iron-input>

      <slot name="suffix" slot="suffix"></slot>

      <template is="dom-if" if="[[errorMessage]]">
        <paper-input-error aria-live="assertive" slot="add-on">[[errorMessage]]</paper-input-error>
      </template>

      <template is="dom-if" if="[[charCounter]]">
        <paper-input-char-counter slot="add-on"></paper-input-char-counter>
      </template>

    </paper-input-container>
  `,behaviors:[PaperInputBehavior,IronFormElementBehavior],properties:{value:{// Required for the correct TypeScript type-generation
type:String}},/**
   * Returns a reference to the focusable element. Overridden from
   * PaperInputBehavior to correctly focus the native input.
   *
   * @return {!HTMLElement}
   */get _focusableElement(){return this.inputElement._inputElement},// Note: This event is only available in the 1.0 version of this element.
// In 2.0, the functionality of `_onIronInputReady` is done in
// PaperInputBehavior::attached.
listeners:{"iron-input-ready":"_onIronInputReady"},_onIronInputReady:function(){// Even though this is only used in the next line, save this for
// backwards compatibility, since the native input had this ID until 2.0.5.
if(!this.$.nativeInput){this.$.nativeInput=this.$$("input")}if(this.inputElement&&-1!==this._typesThatHaveText.indexOf(this.$.nativeInput.type)){this.alwaysFloatLabel=!0}// Only validate when attached if the input already has a value.
if(!!this.inputElement.bindValue){this.$.container._handleValueAndAutoValidate(this.inputElement)}}});Polymer({is:"paper-menu-grow-height-animation",behaviors:[NeonAnimationBehavior],configure:function(config){var node=config.node,rect=node.getBoundingClientRect(),height=rect.height;this._effect=new KeyframeEffect(node,[{height:height/2+"px"},{height:height+"px"}],this.timingFromConfig(config));return this._effect}});Polymer({is:"paper-menu-grow-width-animation",behaviors:[NeonAnimationBehavior],configure:function(config){var node=config.node,rect=node.getBoundingClientRect(),width=rect.width;this._effect=new KeyframeEffect(node,[{width:width/2+"px"},{width:width+"px"}],this.timingFromConfig(config));return this._effect}});Polymer({is:"paper-menu-shrink-width-animation",behaviors:[NeonAnimationBehavior],configure:function(config){var node=config.node,rect=node.getBoundingClientRect(),width=rect.width;this._effect=new KeyframeEffect(node,[{width:width+"px"},{width:width-width/20+"px"}],this.timingFromConfig(config));return this._effect}});Polymer({is:"paper-menu-shrink-height-animation",behaviors:[NeonAnimationBehavior],configure:function(config){var node=config.node,rect=node.getBoundingClientRect(),height=rect.height;this.setPrefixedProperty(node,"transformOrigin","0 0");this._effect=new KeyframeEffect(node,[{height:height+"px",transform:"translateY(0)"},{height:height/2+"px",transform:"translateY(-20px)"}],this.timingFromConfig(config));return this._effect}});var config={ANIMATION_CUBIC_BEZIER:"cubic-bezier(.3,.95,.5,1)",MAX_ANIMATION_TIME_MS:400};/**
   Material design: [Dropdown
   buttons](https://www.google.com/design/spec/components/buttons.html#buttons-dropdown-buttons)
   
   `paper-menu-button` allows one to compose a designated "trigger" element with
   another element that represents "content", to create a dropdown menu that
   displays the "content" when the "trigger" is clicked.
   
   The child element assigned to the `dropdown-trigger` slot will be used as the
   "trigger" element. The child element assigned to the `dropdown-content` slot
   will be used as the "content" element.
   
   The `paper-menu-button` is sensitive to its content's `iron-select` events. If
   the "content" element triggers an `iron-select` event, the `paper-menu-button`
   will close automatically.
   
   Example:
   
       <paper-menu-button>
         <paper-icon-button icon="menu"
   slot="dropdown-trigger"></paper-icon-button> <paper-listbox
   slot="dropdown-content"> <paper-item>Share</paper-item>
           <paper-item>Settings</paper-item>
           <paper-item>Help</paper-item>
         </paper-listbox>
       </paper-menu-button>
   
   ### Styling
   
   The following custom properties and mixins are also available for styling:
   
   Custom property | Description | Default
   ----------------|-------------|----------
   `--paper-menu-button-dropdown-background` | Background color of the paper-menu-button dropdown | `--primary-background-color`
   `--paper-menu-button` | Mixin applied to the paper-menu-button | `{}`
   `--paper-menu-button-disabled` | Mixin applied to the paper-menu-button when disabled | `{}`
   `--paper-menu-button-dropdown` | Mixin applied to the paper-menu-button dropdown | `{}`
   `--paper-menu-button-content` | Mixin applied to the paper-menu-button content | `{}`
   
   @hero hero.svg
   @demo demo/index.html
   */const PaperMenuButton=Polymer({_template:html`
    <style>
      :host {
        display: inline-block;
        position: relative;
        padding: 8px;
        outline: none;

        @apply --paper-menu-button;
      }

      :host([disabled]) {
        cursor: auto;
        color: var(--disabled-text-color);

        @apply --paper-menu-button-disabled;
      }

      iron-dropdown {
        @apply --paper-menu-button-dropdown;
      }

      .dropdown-content {
        @apply --shadow-elevation-2dp;

        position: relative;
        border-radius: 2px;
        background-color: var(--paper-menu-button-dropdown-background, var(--primary-background-color));

        @apply --paper-menu-button-content;
      }

      :host([vertical-align="top"]) .dropdown-content {
        margin-bottom: 20px;
        margin-top: -10px;
        top: 10px;
      }

      :host([vertical-align="bottom"]) .dropdown-content {
        bottom: 10px;
        margin-bottom: -10px;
        margin-top: 20px;
      }

      #trigger {
        cursor: pointer;
      }
    </style>

    <div id="trigger" on-tap="toggle">
      <slot name="dropdown-trigger"></slot>
    </div>

    <iron-dropdown id="dropdown" opened="{{opened}}" horizontal-align="[[horizontalAlign]]" vertical-align="[[verticalAlign]]" dynamic-align="[[dynamicAlign]]" horizontal-offset="[[horizontalOffset]]" vertical-offset="[[verticalOffset]]" no-overlap="[[noOverlap]]" open-animation-config="[[openAnimationConfig]]" close-animation-config="[[closeAnimationConfig]]" no-animations="[[noAnimations]]" focus-target="[[_dropdownContent]]" allow-outside-scroll="[[allowOutsideScroll]]" restore-focus-on-close="[[restoreFocusOnClose]]" on-iron-overlay-canceled="__onIronOverlayCanceled">
      <div slot="dropdown-content" class="dropdown-content">
        <slot id="content" name="dropdown-content"></slot>
      </div>
    </iron-dropdown>
`,is:"paper-menu-button",/**
   * Fired when the dropdown opens.
   *
   * @event paper-dropdown-open
   */ /**
       * Fired when the dropdown closes.
       *
       * @event paper-dropdown-close
       */behaviors:[IronA11yKeysBehavior,IronControlState],properties:{/**
     * True if the content is currently displayed.
     */opened:{type:Boolean,value:!1,notify:!0,observer:"_openedChanged"},/**
     * The orientation against which to align the menu dropdown
     * horizontally relative to the dropdown trigger.
     */horizontalAlign:{type:String,value:"left",reflectToAttribute:!0},/**
     * The orientation against which to align the menu dropdown
     * vertically relative to the dropdown trigger.
     */verticalAlign:{type:String,value:"top",reflectToAttribute:!0},/**
     * If true, the `horizontalAlign` and `verticalAlign` properties will
     * be considered preferences instead of strict requirements when
     * positioning the dropdown and may be changed if doing so reduces
     * the area of the dropdown falling outside of `fitInto`.
     */dynamicAlign:{type:Boolean},/**
     * A pixel value that will be added to the position calculated for the
     * given `horizontalAlign`. Use a negative value to offset to the
     * left, or a positive value to offset to the right.
     */horizontalOffset:{type:Number,value:0,notify:!0},/**
     * A pixel value that will be added to the position calculated for the
     * given `verticalAlign`. Use a negative value to offset towards the
     * top, or a positive value to offset towards the bottom.
     */verticalOffset:{type:Number,value:0,notify:!0},/**
     * If true, the dropdown will be positioned so that it doesn't overlap
     * the button.
     */noOverlap:{type:Boolean},/**
     * Set to true to disable animations when opening and closing the
     * dropdown.
     */noAnimations:{type:Boolean,value:!1},/**
     * Set to true to disable automatically closing the dropdown after
     * a selection has been made.
     */ignoreSelect:{type:Boolean,value:!1},/**
     * Set to true to enable automatically closing the dropdown after an
     * item has been activated, even if the selection did not change.
     */closeOnActivate:{type:Boolean,value:!1},/**
     * An animation config. If provided, this will be used to animate the
     * opening of the dropdown.
     */openAnimationConfig:{type:Object,value:function(){return[{name:"fade-in-animation",timing:{delay:100,duration:200}},{name:"paper-menu-grow-width-animation",timing:{delay:100,duration:150,easing:config.ANIMATION_CUBIC_BEZIER}},{name:"paper-menu-grow-height-animation",timing:{delay:100,duration:275,easing:config.ANIMATION_CUBIC_BEZIER}}]}},/**
     * An animation config. If provided, this will be used to animate the
     * closing of the dropdown.
     */closeAnimationConfig:{type:Object,value:function(){return[{name:"fade-out-animation",timing:{duration:150}},{name:"paper-menu-shrink-width-animation",timing:{delay:100,duration:50,easing:config.ANIMATION_CUBIC_BEZIER}},{name:"paper-menu-shrink-height-animation",timing:{duration:200,easing:"ease-in"}}]}},/**
     * By default, the dropdown will constrain scrolling on the page
     * to itself when opened.
     * Set to true in order to prevent scroll from being constrained
     * to the dropdown when it opens.
     */allowOutsideScroll:{type:Boolean,value:!1},/**
     * Whether focus should be restored to the button when the menu closes.
     */restoreFocusOnClose:{type:Boolean,value:!0},/**
     * This is the element intended to be bound as the focus target
     * for the `iron-dropdown` contained by `paper-menu-button`.
     */_dropdownContent:{type:Object}},hostAttributes:{role:"group","aria-haspopup":"true"},listeners:{"iron-activate":"_onIronActivate","iron-select":"_onIronSelect"},/**
   * The content element that is contained by the menu button, if any.
   */get contentElement(){// Polymer 2.x returns slot.assignedNodes which can contain text nodes.
for(var nodes=dom(this.$.content).getDistributedNodes(),i=0,l=nodes.length;i<l;i++){if(nodes[i].nodeType===Node.ELEMENT_NODE){return nodes[i]}}},/**
   * Toggles the dropdown content between opened and closed.
   */toggle:function(){if(this.opened){this.close()}else{this.open()}},/**
   * Make the dropdown content appear as an overlay positioned relative
   * to the dropdown trigger.
   */open:function(){if(this.disabled){return}this.$.dropdown.open()},/**
   * Hide the dropdown content.
   */close:function(){this.$.dropdown.close()},/**
   * When an `iron-select` event is received, the dropdown should
   * automatically close on the assumption that a value has been chosen.
   *
   * @param {CustomEvent} event A CustomEvent instance with type
   * set to `"iron-select"`.
   */_onIronSelect:function(event){if(!this.ignoreSelect){this.close()}},/**
   * Closes the dropdown when an `iron-activate` event is received if
   * `closeOnActivate` is true.
   *
   * @param {CustomEvent} event A CustomEvent of type 'iron-activate'.
   */_onIronActivate:function(event){if(this.closeOnActivate){this.close()}},/**
   * When the dropdown opens, the `paper-menu-button` fires `paper-open`.
   * When the dropdown closes, the `paper-menu-button` fires `paper-close`.
   *
   * @param {boolean} opened True if the dropdown is opened, otherwise false.
   * @param {boolean} oldOpened The previous value of `opened`.
   */_openedChanged:function(opened,oldOpened){if(opened){// TODO(cdata): Update this when we can measure changes in distributed
// children in an idiomatic way.
// We poke this property in case the element has changed. This will
// cause the focus target for the `iron-dropdown` to be updated as
// necessary:
this._dropdownContent=this.contentElement;this.fire("paper-dropdown-open")}else if(null!=oldOpened){this.fire("paper-dropdown-close")}},/**
   * If the dropdown is open when disabled becomes true, close the
   * dropdown.
   *
   * @param {boolean} disabled True if disabled, otherwise false.
   */_disabledChanged:function(disabled){IronControlState._disabledChanged.apply(this,arguments);if(disabled&&this.opened){this.close()}},__onIronOverlayCanceled:function(event){var uiEvent=event.detail,trigger=this.$.trigger,path=dom(uiEvent).path;if(-1<path.indexOf(trigger)){event.preventDefault()}}});_exports.PaperMenuButton=PaperMenuButton;Object.keys(config).forEach(function(key){PaperMenuButton[key]=config[key]});var paperMenuButton={PaperMenuButton:PaperMenuButton};_exports.$paperMenuButton=paperMenuButton;Polymer({_template:html`
    <style include="paper-dropdown-menu-shared-styles"></style>

    <!-- this div fulfills an a11y requirement for combobox, do not remove -->
    <span role="button"></span>
    <paper-menu-button id="menuButton" vertical-align="[[verticalAlign]]" horizontal-align="[[horizontalAlign]]" dynamic-align="[[dynamicAlign]]" vertical-offset="[[_computeMenuVerticalOffset(noLabelFloat, verticalOffset)]]" disabled="[[disabled]]" no-animations="[[noAnimations]]" on-iron-select="_onIronSelect" on-iron-deselect="_onIronDeselect" opened="{{opened}}" close-on-activate allow-outside-scroll="[[allowOutsideScroll]]" restore-focus-on-close="[[restoreFocusOnClose]]">
      <!-- support hybrid mode: user might be using paper-menu-button 1.x which distributes via <content> -->
      <div class="dropdown-trigger" slot="dropdown-trigger">
        <paper-ripple></paper-ripple>
        <!-- paper-input has type="text" for a11y, do not remove -->
        <paper-input type="text" invalid="[[invalid]]" readonly disabled="[[disabled]]" value="[[value]]" placeholder="[[placeholder]]" error-message="[[errorMessage]]" always-float-label="[[alwaysFloatLabel]]" no-label-float="[[noLabelFloat]]" label="[[label]]">
          <!-- support hybrid mode: user might be using paper-input 1.x which distributes via <content> -->
          <iron-icon icon="paper-dropdown-menu:arrow-drop-down" suffix slot="suffix"></iron-icon>
        </paper-input>
      </div>
      <slot id="content" name="dropdown-content" slot="dropdown-content"></slot>
    </paper-menu-button>
`,is:"paper-dropdown-menu",behaviors:[IronButtonState,IronControlState,IronFormElementBehavior,IronValidatableBehavior],properties:{/**
     * The derived "label" of the currently selected item. This value
     * is the `label` property on the selected item if set, or else the
     * trimmed text content of the selected item.
     */selectedItemLabel:{type:String,notify:!0,readOnly:!0},/**
     * The last selected item. An item is selected if the dropdown menu has
     * a child with slot `dropdown-content`, and that child triggers an
     * `iron-select` event with the selected `item` in the `detail`.
     *
     * @type {?Object}
     */selectedItem:{type:Object,notify:!0,readOnly:!0},/**
     * The value for this element that will be used when submitting in
     * a form. It reflects the value of `selectedItemLabel`. If set directly,
     * it will not update the `selectedItemLabel` value.
     */value:{type:String,notify:!0},/**
     * The label for the dropdown.
     */label:{type:String},/**
     * The placeholder for the dropdown.
     */placeholder:{type:String},/**
     * The error message to display when invalid.
     */errorMessage:{type:String},/**
     * True if the dropdown is open. Otherwise, false.
     */opened:{type:Boolean,notify:!0,value:!1,observer:"_openedChanged"},/**
     * By default, the dropdown will constrain scrolling on the page
     * to itself when opened.
     * Set to true in order to prevent scroll from being constrained
     * to the dropdown when it opens.
     */allowOutsideScroll:{type:Boolean,value:!1},/**
     * Set to true to disable the floating label. Bind this to the
     * `<paper-input-container>`'s `noLabelFloat` property.
     */noLabelFloat:{type:Boolean,value:!1,reflectToAttribute:!0},/**
     * Set to true to always float the label. Bind this to the
     * `<paper-input-container>`'s `alwaysFloatLabel` property.
     */alwaysFloatLabel:{type:Boolean,value:!1},/**
     * Set to true to disable animations when opening and closing the
     * dropdown.
     */noAnimations:{type:Boolean,value:!1},/**
     * The orientation against which to align the menu dropdown
     * horizontally relative to the dropdown trigger.
     */horizontalAlign:{type:String,value:"right"},/**
     * The orientation against which to align the menu dropdown
     * vertically relative to the dropdown trigger.
     */verticalAlign:{type:String,value:"top"},/**
     * Overrides the vertical offset computed in
     * _computeMenuVerticalOffset.
     */verticalOffset:Number,/**
     * If true, the `horizontalAlign` and `verticalAlign` properties will
     * be considered preferences instead of strict requirements when
     * positioning the dropdown and may be changed if doing so reduces
     * the area of the dropdown falling outside of `fitInto`.
     */dynamicAlign:{type:Boolean},/**
     * Whether focus should be restored to the dropdown when the menu closes.
     */restoreFocusOnClose:{type:Boolean,value:!0}},listeners:{tap:"_onTap"},/**
   * @type {!Object}
   */keyBindings:{"up down":"open",esc:"close"},hostAttributes:{role:"combobox","aria-autocomplete":"none","aria-haspopup":"true"},observers:["_selectedItemChanged(selectedItem)"],attached:function(){// NOTE(cdata): Due to timing, a preselected value in a `IronSelectable`
// child will cause an `iron-select` event to fire while the element is
// still in a `DocumentFragment`. This has the effect of causing
// handlers not to fire. So, we double check this value on attached:
var contentElement=this.contentElement;if(contentElement&&contentElement.selectedItem){this._setSelectedItem(contentElement.selectedItem)}},/**
   * The content element that is contained by the dropdown menu, if any.
   */get contentElement(){// Polymer 2.x returns slot.assignedNodes which can contain text nodes.
for(var nodes=dom(this.$.content).getDistributedNodes(),i=0,l=nodes.length;i<l;i++){if(nodes[i].nodeType===Node.ELEMENT_NODE){return nodes[i]}}},/**
   * Show the dropdown content.
   */open:function(){this.$.menuButton.open()},/**
   * Hide the dropdown content.
   */close:function(){this.$.menuButton.close()},/**
   * A handler that is called when `iron-select` is fired.
   *
   * @param {CustomEvent} event An `iron-select` event.
   */_onIronSelect:function(event){this._setSelectedItem(event.detail.item)},/**
   * A handler that is called when `iron-deselect` is fired.
   *
   * @param {CustomEvent} event An `iron-deselect` event.
   */_onIronDeselect:function(event){this._setSelectedItem(null)},/**
   * A handler that is called when the dropdown is tapped.
   *
   * @param {CustomEvent} event A tap event.
   */_onTap:function(event){if(findOriginalTarget(event)===this){this.open()}},/**
   * Compute the label for the dropdown given a selected item.
   *
   * @param {Element} selectedItem A selected Element item, with an
   * optional `label` property.
   */_selectedItemChanged:function(selectedItem){var value="";if(!selectedItem){value=""}else{value=selectedItem.label||selectedItem.getAttribute("label")||selectedItem.textContent.trim()}this.value=value;this._setSelectedItemLabel(value)},/**
   * Compute the vertical offset of the menu based on the value of
   * `noLabelFloat`.
   *
   * @param {boolean} noLabelFloat True if the label should not float
   * @param {number=} opt_verticalOffset Optional offset from the user
   * above the input, otherwise false.
   */_computeMenuVerticalOffset:function(noLabelFloat,opt_verticalOffset){// Override offset if it's passed from the user.
if(opt_verticalOffset){return opt_verticalOffset}// NOTE(cdata): These numbers are somewhat magical because they are
// derived from the metrics of elements internal to `paper-input`'s
// template. The metrics will change depending on whether or not the
// input has a floating label.
return noLabelFloat?-4:8},/**
   * Returns false if the element is required and does not have a selection,
   * and true otherwise.
   * @param {*=} _value Ignored.
   * @return {boolean} true if `required` is false, or if `required` is true
   * and the element has a valid selection.
   */_getValidity:function(_value){return this.disabled||!this.required||this.required&&!!this.value},_openedChanged:function(){var openState=this.opened?"true":"false",e=this.contentElement;if(e){e.setAttribute("aria-expanded",openState)}}});Polymer({is:"paper-icon-button",_template:html`
    <style>
      :host {
        display: inline-block;
        position: relative;
        padding: 8px;
        outline: none;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        cursor: pointer;
        z-index: 0;
        line-height: 1;

        width: 40px;
        height: 40px;

        /*
          NOTE: Both values are needed, since some phones require the value to
          be \`transparent\`.
        */
        -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
        -webkit-tap-highlight-color: transparent;

        /* Because of polymer/2558, this style has lower specificity than * */
        box-sizing: border-box !important;

        @apply --paper-icon-button;
      }

      :host #ink {
        color: var(--paper-icon-button-ink-color, var(--primary-text-color));
        opacity: 0.6;
      }

      :host([disabled]) {
        color: var(--paper-icon-button-disabled-text, var(--disabled-text-color));
        pointer-events: none;
        cursor: auto;

        @apply --paper-icon-button-disabled;
      }

      :host([hidden]) {
        display: none !important;
      }

      :host(:hover) {
        @apply --paper-icon-button-hover;
      }

      iron-icon {
        --iron-icon-width: 100%;
        --iron-icon-height: 100%;
      }
    </style>

    <iron-icon id="icon" src="[[src]]" icon="[[icon]]"
               alt$="[[alt]]"></iron-icon>
  `,hostAttributes:{role:"button",tabindex:"0"},behaviors:[PaperInkyFocusBehavior],registered:function(){this._template.setAttribute("strip-whitespace","")},properties:{/**
     * The URL of an image for the icon. If the src property is specified,
     * the icon property should not be.
     */src:{type:String},/**
     * Specifies the icon name or index in the set of icons available in
     * the icon's icon set. If the icon property is specified,
     * the src property should not be.
     */icon:{type:String},/**
     * Specifies the alternate text for the button, for accessibility.
     */alt:{type:String,observer:"_altChanged"}},_altChanged:function(newValue,oldValue){var label=this.getAttribute("aria-label");// Don't stomp over a user-set aria-label.
if(!label||oldValue==label){this.setAttribute("aria-label",newValue)}}});Polymer({_template:html`
    <style>
      :host {
        display: block;
      }

      :host([hidden]) {
        display: none !important;
      }

      label {
        pointer-events: none;
      }
    </style>

    <paper-input-container no-label-float$="[[noLabelFloat]]" always-float-label="[[_computeAlwaysFloatLabel(alwaysFloatLabel,placeholder)]]" auto-validate$="[[autoValidate]]" disabled$="[[disabled]]" invalid="[[invalid]]">

      <label hidden$="[[!label]]" aria-hidden="true" for$="[[_inputId]]" slot="label">[[label]]</label>

      <iron-autogrow-textarea class="paper-input-input" slot="input" id$="[[_inputId]]" aria-labelledby$="[[_ariaLabelledBy]]" aria-describedby$="[[_ariaDescribedBy]]" bind-value="{{value}}" invalid="{{invalid}}" validator$="[[validator]]" disabled$="[[disabled]]" autocomplete$="[[autocomplete]]" autofocus$="[[autofocus]]" inputmode$="[[inputmode]]" name$="[[name]]" placeholder$="[[placeholder]]" readonly$="[[readonly]]" required$="[[required]]" minlength$="[[minlength]]" maxlength$="[[maxlength]]" autocapitalize$="[[autocapitalize]]" rows$="[[rows]]" max-rows$="[[maxRows]]" on-change="_onChange"></iron-autogrow-textarea>

      <template is="dom-if" if="[[errorMessage]]">
        <paper-input-error aria-live="assertive" slot="add-on">[[errorMessage]]</paper-input-error>
      </template>

      <template is="dom-if" if="[[charCounter]]">
        <paper-input-char-counter slot="add-on"></paper-input-char-counter>
      </template>

    </paper-input-container>
`,is:"paper-textarea",behaviors:[PaperInputBehavior,IronFormElementBehavior],properties:{_ariaLabelledBy:{observer:"_ariaLabelledByChanged",type:String},_ariaDescribedBy:{observer:"_ariaDescribedByChanged",type:String},value:{// Required for the correct TypeScript type-generation
type:String},/**
     * The initial number of rows.
     *
     * @attribute rows
     * @type {number}
     * @default 1
     */rows:{type:Number,value:1},/**
     * The maximum number of rows this element can grow to until it
     * scrolls. 0 means no maximum.
     *
     * @attribute maxRows
     * @type {number}
     * @default 0
     */maxRows:{type:Number,value:0}},/**
   * @return {number}
   */get selectionStart(){return this.$.input.textarea.selectionStart},set selectionStart(start){this.$.input.textarea.selectionStart=start},/**
   * @return {number}
   */get selectionEnd(){return this.$.input.textarea.selectionEnd},set selectionEnd(end){this.$.input.textarea.selectionEnd=end},_ariaLabelledByChanged:function(ariaLabelledBy){this._focusableElement.setAttribute("aria-labelledby",ariaLabelledBy)},_ariaDescribedByChanged:function(ariaDescribedBy){this._focusableElement.setAttribute("aria-describedby",ariaDescribedBy)},get _focusableElement(){return this.inputElement.textarea}});const PaperItemBehaviorImpl={hostAttributes:{role:"option",tabindex:"0"}};/** @polymerBehavior */_exports.PaperItemBehaviorImpl=PaperItemBehaviorImpl;const PaperItemBehavior=[IronButtonState,IronControlState,PaperItemBehaviorImpl];_exports.PaperItemBehavior=PaperItemBehavior;var paperItemBehavior={PaperItemBehaviorImpl:PaperItemBehaviorImpl,PaperItemBehavior:PaperItemBehavior};_exports.$paperItemBehavior=paperItemBehavior;const $_documentContainer$4=document.createElement("template");$_documentContainer$4.setAttribute("style","display: none;");$_documentContainer$4.innerHTML=`<dom-module id="paper-item-shared-styles">
  <template>
    <style>
      :host, .paper-item {
        display: block;
        position: relative;
        min-height: var(--paper-item-min-height, 48px);
        padding: 0px 16px;
      }

      .paper-item {
        @apply --paper-font-subhead;
        border:none;
        outline: none;
        background: white;
        width: 100%;
        text-align: left;
      }

      :host([hidden]), .paper-item[hidden] {
        display: none !important;
      }

      :host(.iron-selected), .paper-item.iron-selected {
        font-weight: var(--paper-item-selected-weight, bold);

        @apply --paper-item-selected;
      }

      :host([disabled]), .paper-item[disabled] {
        color: var(--paper-item-disabled-color, var(--disabled-text-color));

        @apply --paper-item-disabled;
      }

      :host(:focus), .paper-item:focus {
        position: relative;
        outline: 0;

        @apply --paper-item-focused;
      }

      :host(:focus):before, .paper-item:focus:before {
        @apply --layout-fit;

        background: currentColor;
        content: '';
        opacity: var(--dark-divider-opacity);
        pointer-events: none;

        @apply --paper-item-focused-before;
      }
    </style>
  </template>
</dom-module>`;document.head.appendChild($_documentContainer$4.content);Polymer({_template:html`
    <style include="paper-item-shared-styles">
      :host {
        @apply --layout-horizontal;
        @apply --layout-center;
        @apply --paper-font-subhead;

        @apply --paper-item;
      }
    </style>
    <slot></slot>
`,is:"paper-item",behaviors:[PaperItemBehavior]});Polymer({_template:html`
    <style>
      :host {
        display: block;
        padding: 8px 0;

        background: var(--paper-listbox-background-color, var(--primary-background-color));
        color: var(--paper-listbox-color, var(--primary-text-color));

        @apply --paper-listbox;
      }
    </style>

    <slot></slot>
`,is:"paper-listbox",behaviors:[IronMenuBehavior],/** @private */hostAttributes:{role:"listbox"}});Polymer({_template:html`
    <style>
      :host {
        display: block;
        width: 200px;
        position: relative;
        overflow: hidden;
      }

      :host([hidden]), [hidden] {
        display: none !important;
      }

      #progressContainer {
        @apply --paper-progress-container;
        position: relative;
      }

      #progressContainer,
      /* the stripe for the indeterminate animation*/
      .indeterminate::after {
        height: var(--paper-progress-height, 4px);
      }

      #primaryProgress,
      #secondaryProgress,
      .indeterminate::after {
        @apply --layout-fit;
      }

      #progressContainer,
      .indeterminate::after {
        background: var(--paper-progress-container-color, var(--google-grey-300));
      }

      :host(.transiting) #primaryProgress,
      :host(.transiting) #secondaryProgress {
        -webkit-transition-property: -webkit-transform;
        transition-property: transform;

        /* Duration */
        -webkit-transition-duration: var(--paper-progress-transition-duration, 0.08s);
        transition-duration: var(--paper-progress-transition-duration, 0.08s);

        /* Timing function */
        -webkit-transition-timing-function: var(--paper-progress-transition-timing-function, ease);
        transition-timing-function: var(--paper-progress-transition-timing-function, ease);

        /* Delay */
        -webkit-transition-delay: var(--paper-progress-transition-delay, 0s);
        transition-delay: var(--paper-progress-transition-delay, 0s);
      }

      #primaryProgress,
      #secondaryProgress {
        @apply --layout-fit;
        -webkit-transform-origin: left center;
        transform-origin: left center;
        -webkit-transform: scaleX(0);
        transform: scaleX(0);
        will-change: transform;
      }

      #primaryProgress {
        background: var(--paper-progress-active-color, var(--google-green-500));
      }

      #secondaryProgress {
        background: var(--paper-progress-secondary-color, var(--google-green-100));
      }

      :host([disabled]) #primaryProgress {
        background: var(--paper-progress-disabled-active-color, var(--google-grey-500));
      }

      :host([disabled]) #secondaryProgress {
        background: var(--paper-progress-disabled-secondary-color, var(--google-grey-300));
      }

      :host(:not([disabled])) #primaryProgress.indeterminate {
        -webkit-transform-origin: right center;
        transform-origin: right center;
        -webkit-animation: indeterminate-bar var(--paper-progress-indeterminate-cycle-duration, 2s) linear infinite;
        animation: indeterminate-bar var(--paper-progress-indeterminate-cycle-duration, 2s) linear infinite;
      }

      :host(:not([disabled])) #primaryProgress.indeterminate::after {
        content: "";
        -webkit-transform-origin: center center;
        transform-origin: center center;

        -webkit-animation: indeterminate-splitter var(--paper-progress-indeterminate-cycle-duration, 2s) linear infinite;
        animation: indeterminate-splitter var(--paper-progress-indeterminate-cycle-duration, 2s) linear infinite;
      }

      @-webkit-keyframes indeterminate-bar {
        0% {
          -webkit-transform: scaleX(1) translateX(-100%);
        }
        50% {
          -webkit-transform: scaleX(1) translateX(0%);
        }
        75% {
          -webkit-transform: scaleX(1) translateX(0%);
          -webkit-animation-timing-function: cubic-bezier(.28,.62,.37,.91);
        }
        100% {
          -webkit-transform: scaleX(0) translateX(0%);
        }
      }

      @-webkit-keyframes indeterminate-splitter {
        0% {
          -webkit-transform: scaleX(.75) translateX(-125%);
        }
        30% {
          -webkit-transform: scaleX(.75) translateX(-125%);
          -webkit-animation-timing-function: cubic-bezier(.42,0,.6,.8);
        }
        90% {
          -webkit-transform: scaleX(.75) translateX(125%);
        }
        100% {
          -webkit-transform: scaleX(.75) translateX(125%);
        }
      }

      @keyframes indeterminate-bar {
        0% {
          transform: scaleX(1) translateX(-100%);
        }
        50% {
          transform: scaleX(1) translateX(0%);
        }
        75% {
          transform: scaleX(1) translateX(0%);
          animation-timing-function: cubic-bezier(.28,.62,.37,.91);
        }
        100% {
          transform: scaleX(0) translateX(0%);
        }
      }

      @keyframes indeterminate-splitter {
        0% {
          transform: scaleX(.75) translateX(-125%);
        }
        30% {
          transform: scaleX(.75) translateX(-125%);
          animation-timing-function: cubic-bezier(.42,0,.6,.8);
        }
        90% {
          transform: scaleX(.75) translateX(125%);
        }
        100% {
          transform: scaleX(.75) translateX(125%);
        }
      }
    </style>

    <div id="progressContainer">
      <div id="secondaryProgress" hidden\$="[[_hideSecondaryProgress(secondaryRatio)]]"></div>
      <div id="primaryProgress"></div>
    </div>
`,is:"paper-progress",behaviors:[IronRangeBehavior],properties:{/**
     * The number that represents the current secondary progress.
     */secondaryProgress:{type:Number,value:0},/**
     * The secondary ratio
     */secondaryRatio:{type:Number,value:0,readOnly:!0},/**
     * Use an indeterminate progress indicator.
     */indeterminate:{type:Boolean,value:!1,observer:"_toggleIndeterminate"},/**
     * True if the progress is disabled.
     */disabled:{type:Boolean,value:!1,reflectToAttribute:!0,observer:"_disabledChanged"}},observers:["_progressChanged(secondaryProgress, value, min, max, indeterminate)"],hostAttributes:{role:"progressbar"},_toggleIndeterminate:function(indeterminate){// If we use attribute/class binding, the animation sometimes doesn't
// translate properly on Safari 7.1. So instead, we toggle the class here in
// the update method.
this.toggleClass("indeterminate",indeterminate,this.$.primaryProgress)},_transformProgress:function(progress,ratio){var transform="scaleX("+ratio/100+")";progress.style.transform=progress.style.webkitTransform=transform},_mainRatioChanged:function(ratio){this._transformProgress(this.$.primaryProgress,ratio)},_progressChanged:function(secondaryProgress,value,min,max,indeterminate){secondaryProgress=this._clampValue(secondaryProgress);value=this._clampValue(value);var secondaryRatio=100*this._calcRatio(secondaryProgress),mainRatio=100*this._calcRatio(value);this._setSecondaryRatio(secondaryRatio);this._transformProgress(this.$.secondaryProgress,secondaryRatio);this._transformProgress(this.$.primaryProgress,mainRatio);this.secondaryProgress=secondaryProgress;if(indeterminate){this.removeAttribute("aria-valuenow")}else{this.setAttribute("aria-valuenow",value)}this.setAttribute("aria-valuemin",min);this.setAttribute("aria-valuemax",max)},_disabledChanged:function(disabled){this.setAttribute("aria-disabled",disabled?"true":"false")},_hideSecondaryProgress:function(secondaryRatio){return 0===secondaryRatio}});const template$a=html`
<style>
  :host {
    display: inline-block;
    line-height: 0;
    white-space: nowrap;
    cursor: pointer;
    @apply --paper-font-common-base;
    --calculated-paper-radio-button-size: var(--paper-radio-button-size, 16px);
    /* -1px is a sentinel for the default and is replace in \`attached\`. */
    --calculated-paper-radio-button-ink-size: var(--paper-radio-button-ink-size, -1px);
  }

  :host(:focus) {
    outline: none;
  }

  #radioContainer {
    @apply --layout-inline;
    @apply --layout-center-center;
    position: relative;
    width: var(--calculated-paper-radio-button-size);
    height: var(--calculated-paper-radio-button-size);
    vertical-align: middle;

    @apply --paper-radio-button-radio-container;
  }

  #ink {
    position: absolute;
    top: 50%;
    left: 50%;
    right: auto;
    width: var(--calculated-paper-radio-button-ink-size);
    height: var(--calculated-paper-radio-button-ink-size);
    color: var(--paper-radio-button-unchecked-ink-color, var(--primary-text-color));
    opacity: 0.6;
    pointer-events: none;
    -webkit-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
  }

  #ink[checked] {
    color: var(--paper-radio-button-checked-ink-color, var(--primary-color));
  }

  #offRadio, #onRadio {
    position: absolute;
    box-sizing: border-box;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 50%;
  }

  #offRadio {
    border: 2px solid var(--paper-radio-button-unchecked-color, var(--primary-text-color));
    background-color: var(--paper-radio-button-unchecked-background-color, transparent);
    transition: border-color 0.28s;
  }

  #onRadio {
    background-color: var(--paper-radio-button-checked-color, var(--primary-color));
    -webkit-transform: scale(0);
    transform: scale(0);
    transition: -webkit-transform ease 0.28s;
    transition: transform ease 0.28s;
    will-change: transform;
  }

  :host([checked]) #offRadio {
    border-color: var(--paper-radio-button-checked-color, var(--primary-color));
  }

  :host([checked]) #onRadio {
    -webkit-transform: scale(0.5);
    transform: scale(0.5);
  }

  #radioLabel {
    line-height: normal;
    position: relative;
    display: inline-block;
    vertical-align: middle;
    margin-left: var(--paper-radio-button-label-spacing, 10px);
    white-space: normal;
    color: var(--paper-radio-button-label-color, var(--primary-text-color));

    @apply --paper-radio-button-label;
  }

  :host([checked]) #radioLabel {
    @apply --paper-radio-button-label-checked;
  }

  #radioLabel:dir(rtl) {
    margin-left: 0;
    margin-right: var(--paper-radio-button-label-spacing, 10px);
  }

  #radioLabel[hidden] {
    display: none;
  }

  /* disabled state */

  :host([disabled]) #offRadio {
    border-color: var(--paper-radio-button-unchecked-color, var(--primary-text-color));
    opacity: 0.5;
  }

  :host([disabled][checked]) #onRadio {
    background-color: var(--paper-radio-button-unchecked-color, var(--primary-text-color));
    opacity: 0.5;
  }

  :host([disabled]) #radioLabel {
    /* slightly darker than the button, so that it's readable */
    opacity: 0.65;
  }
</style>

<div id="radioContainer">
  <div id="offRadio"></div>
  <div id="onRadio"></div>
</div>

<div id="radioLabel"><slot></slot></div>`;template$a.setAttribute("strip-whitespace","");/**
                                                 Material design: [Radio button](https://www.google.com/design/spec/components/selection-controls.html#selection-controls-radio-button)
                                                                                               `paper-radio-button` is a button that can be either checked or unchecked. The
                                                 user can tap the radio button to check or uncheck it.
                                                                                               Use a `<paper-radio-group>` to group a set of radio buttons. When radio buttons
                                                 are inside a radio group, exactly one radio button in the group can be checked
                                                 at any time.
                                                                                               Example:
                                                                                                   <paper-radio-button></paper-radio-button>
                                                   <paper-radio-button>Item label</paper-radio-button>
                                                                                               ### Styling
                                                                                               The following custom properties and mixins are available for styling:
                                                                                               Custom property | Description | Default
                                                 ----------------|-------------|----------
                                                 `--paper-radio-button-unchecked-background-color` | Radio button background color when the input is not checked | `transparent`
                                                 `--paper-radio-button-unchecked-color` | Radio button color when the input is not checked | `--primary-text-color`
                                                 `--paper-radio-button-unchecked-ink-color` | Selected/focus ripple color when the input is not checked | `--primary-text-color`
                                                 `--paper-radio-button-checked-color` | Radio button color when the input is checked | `--primary-color`
                                                 `--paper-radio-button-checked-ink-color` | Selected/focus ripple color when the input is checked | `--primary-color`
                                                 `--paper-radio-button-size` | Size of the radio button | `16px`
                                                 `--paper-radio-button-ink-size` | Size of the ripple | `48px`
                                                 `--paper-radio-button-label-color` | Label color | `--primary-text-color`
                                                 `--paper-radio-button-label-spacing` | Spacing between the label and the button | `10px`
                                                 `--paper-radio-button-radio-container` | A mixin applied to the internal radio container | `{}`
                                                 `--paper-radio-button-label` | A mixin applied to the internal label | `{}`
                                                 `--paper-radio-button-label-checked` | A mixin applied to the internal label when the radio button is checked | `{}`
                                                                                               This element applies the mixin `--paper-font-common-base` but does not import
                                                 `paper-styles/typography.html`. In order to apply the `Roboto` font to this
                                                 element, make sure you've imported `paper-styles/typography.html`.
                                                                                               @group Paper Elements
                                                 @element paper-radio-button
                                                 @demo demo/index.html
                                                 */Polymer({_template:template$a,is:"paper-radio-button",behaviors:[PaperCheckedElementBehavior],hostAttributes:{role:"radio","aria-checked":!1,tabindex:0},properties:{/**
     * Fired when the checked state changes due to user interaction.
     *
     * @event change
     */ /**
         * Fired when the checked state changes.
         *
         * @event iron-change
         */ariaActiveAttribute:{type:String,value:"aria-checked"}},ready:function(){this._rippleContainer=this.$.radioContainer},attached:function(){// Wait until styles have resolved to check for the default sentinel.
// See polymer#4009 for more details.
afterNextRender(this,function(){var inkSize=this.getComputedStyleValue("--calculated-paper-radio-button-ink-size").trim();// If unset, compute and set the default `--paper-radio-button-ink-size`.
if("-1px"===inkSize){var size=parseFloat(this.getComputedStyleValue("--calculated-paper-radio-button-size").trim()),defaultInkSize=Math.floor(3*size);// The button and ripple need to have the same parity so that their
// centers align.
if(defaultInkSize%2!==size%2){defaultInkSize++}this.updateStyles({"--paper-radio-button-ink-size":defaultInkSize+"px"})}})}});Polymer({_template:html`
    <style>
      :host {
        display: inline-block;
      }

      :host ::slotted(*) {
        padding: var(--paper-radio-group-item-padding, 12px);
      }
    </style>

    <slot></slot>
`,is:"paper-radio-group",behaviors:[IronMenubarBehavior],/** @private */hostAttributes:{role:"radiogroup"},properties:{/**
     * Fired when the radio group selection changes.
     *
     * @event paper-radio-group-changed
     */ /**
         * Overriden from Polymer.IronSelectableBehavior
         */attrForSelected:{type:String,value:"name"},/**
     * Overriden from Polymer.IronSelectableBehavior
     */selectedAttribute:{type:String,value:"checked"},/**
     * Overriden from Polymer.IronSelectableBehavior
     */selectable:{type:String,value:"paper-radio-button"},/**
     * If true, radio-buttons can be deselected
     */allowEmptySelection:{type:Boolean,value:!1}},/**
   * Selects the given value.
   */select:function(value){var newItem=this._valueToItem(value);if(newItem&&newItem.hasAttribute("disabled")){return}if(this.selected){var oldItem=this._valueToItem(this.selected);if(this.selected==value){// If deselecting is allowed we'll have to apply an empty selection.
// Otherwise, we should force the selection to stay and make this
// action a no-op.
if(this.allowEmptySelection){value=""}else{if(oldItem)oldItem.checked=!0;return}}if(oldItem)oldItem.checked=!1}IronSelectableBehavior.select.apply(this,[value]);this.fire("paper-radio-group-changed")},_activateFocusedItem:function(){this._itemActivate(this._valueForItem(this.focusedItem),this.focusedItem)},_onUpKey:function(event){this._focusPrevious();event.preventDefault();this._activateFocusedItem()},_onDownKey:function(event){this._focusNext();event.preventDefault();this._activateFocusedItem()},_onLeftKey:function(event){IronMenubarBehaviorImpl._onLeftKey.apply(this,arguments);this._activateFocusedItem()},_onRightKey:function(event){IronMenubarBehaviorImpl._onRightKey.apply(this,arguments);this._activateFocusedItem()}});const PaperSpinnerBehavior={properties:{/**
     * Displays the spinner.
     */active:{type:Boolean,value:!1,reflectToAttribute:!0,observer:"__activeChanged"},/**
     * Alternative text content for accessibility support.
     * If alt is present, it will add an aria-label whose content matches alt
     * when active. If alt is not present, it will default to 'loading' as the
     * alt value.
     */alt:{type:String,value:"loading",observer:"__altChanged"},__coolingDown:{type:Boolean,value:!1}},__computeContainerClasses:function(active,coolingDown){return[active||coolingDown?"active":"",coolingDown?"cooldown":""].join(" ")},__activeChanged:function(active,old){this.__setAriaHidden(!active);this.__coolingDown=!active&&old},__altChanged:function(alt){// user-provided `aria-label` takes precedence over prototype default
if("loading"===alt){this.alt=this.getAttribute("aria-label")||alt}else{this.__setAriaHidden(""===alt);this.setAttribute("aria-label",alt)}},__setAriaHidden:function(hidden){var attr="aria-hidden";if(hidden){this.setAttribute(attr,"true")}else{this.removeAttribute(attr)}},__reset:function(){this.active=!1;this.__coolingDown=!1}};_exports.PaperSpinnerBehavior=PaperSpinnerBehavior;var paperSpinnerBehavior={PaperSpinnerBehavior:PaperSpinnerBehavior};/**
   @license
   Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
   This code may only be used under the BSD style license found at
   http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
   http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
   found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
   part of the polymer project is also subject to an additional IP rights grant
   found at http://polymer.github.io/PATENTS.txt
   */_exports.$paperSpinnerBehavior=paperSpinnerBehavior;const $_documentContainer$5=document.createElement("template");$_documentContainer$5.setAttribute("style","display: none;");$_documentContainer$5.innerHTML=`<dom-module id="paper-spinner-styles">
  <template>
    <style>
      /*
      /**************************/
      /* STYLES FOR THE SPINNER */
      /**************************/

      /*
       * Constants:
       *      ARCSIZE     = 270 degrees (amount of circle the arc takes up)
       *      ARCTIME     = 1333ms (time it takes to expand and contract arc)
       *      ARCSTARTROT = 216 degrees (how much the start location of the arc
       *                                should rotate each time, 216 gives us a
       *                                5 pointed star shape (it's 360/5 * 3).
       *                                For a 7 pointed star, we might do
       *                                360/7 * 3 = 154.286)
       *      SHRINK_TIME = 400ms
       */

      :host {
        display: inline-block;
        position: relative;
        width: 28px;
        height: 28px;

        /* 360 * ARCTIME / (ARCSTARTROT + (360-ARCSIZE)) */
        --paper-spinner-container-rotation-duration: 1568ms;

        /* ARCTIME */
        --paper-spinner-expand-contract-duration: 1333ms;

        /* 4 * ARCTIME */
        --paper-spinner-full-cycle-duration: 5332ms;

        /* SHRINK_TIME */
        --paper-spinner-cooldown-duration: 400ms;
      }

      #spinnerContainer {
        width: 100%;
        height: 100%;

        /* The spinner does not have any contents that would have to be
         * flipped if the direction changes. Always use ltr so that the
         * style works out correctly in both cases. */
        direction: ltr;
      }

      #spinnerContainer.active {
        -webkit-animation: container-rotate var(--paper-spinner-container-rotation-duration) linear infinite;
        animation: container-rotate var(--paper-spinner-container-rotation-duration) linear infinite;
      }

      @-webkit-keyframes container-rotate {
        to { -webkit-transform: rotate(360deg) }
      }

      @keyframes container-rotate {
        to { transform: rotate(360deg) }
      }

      .spinner-layer {
        position: absolute;
        width: 100%;
        height: 100%;
        opacity: 0;
        white-space: nowrap;
        color: var(--paper-spinner-color, var(--google-blue-500));
      }

      .layer-1 {
        color: var(--paper-spinner-layer-1-color, var(--google-blue-500));
      }

      .layer-2 {
        color: var(--paper-spinner-layer-2-color, var(--google-red-500));
      }

      .layer-3 {
        color: var(--paper-spinner-layer-3-color, var(--google-yellow-500));
      }

      .layer-4 {
        color: var(--paper-spinner-layer-4-color, var(--google-green-500));
      }

      /**
       * IMPORTANT NOTE ABOUT CSS ANIMATION PROPERTIES (keanulee):
       *
       * iOS Safari (tested on iOS 8.1) does not handle animation-delay very well - it doesn't
       * guarantee that the animation will start _exactly_ after that value. So we avoid using
       * animation-delay and instead set custom keyframes for each color (as layer-2undant as it
       * seems).
       */
      .active .spinner-layer {
        -webkit-animation-name: fill-unfill-rotate;
        -webkit-animation-duration: var(--paper-spinner-full-cycle-duration);
        -webkit-animation-timing-function: cubic-bezier(0.4, 0.0, 0.2, 1);
        -webkit-animation-iteration-count: infinite;
        animation-name: fill-unfill-rotate;
        animation-duration: var(--paper-spinner-full-cycle-duration);
        animation-timing-function: cubic-bezier(0.4, 0.0, 0.2, 1);
        animation-iteration-count: infinite;
        opacity: 1;
      }

      .active .spinner-layer.layer-1 {
        -webkit-animation-name: fill-unfill-rotate, layer-1-fade-in-out;
        animation-name: fill-unfill-rotate, layer-1-fade-in-out;
      }

      .active .spinner-layer.layer-2 {
        -webkit-animation-name: fill-unfill-rotate, layer-2-fade-in-out;
        animation-name: fill-unfill-rotate, layer-2-fade-in-out;
      }

      .active .spinner-layer.layer-3 {
        -webkit-animation-name: fill-unfill-rotate, layer-3-fade-in-out;
        animation-name: fill-unfill-rotate, layer-3-fade-in-out;
      }

      .active .spinner-layer.layer-4 {
        -webkit-animation-name: fill-unfill-rotate, layer-4-fade-in-out;
        animation-name: fill-unfill-rotate, layer-4-fade-in-out;
      }

      @-webkit-keyframes fill-unfill-rotate {
        12.5% { -webkit-transform: rotate(135deg) } /* 0.5 * ARCSIZE */
        25%   { -webkit-transform: rotate(270deg) } /* 1   * ARCSIZE */
        37.5% { -webkit-transform: rotate(405deg) } /* 1.5 * ARCSIZE */
        50%   { -webkit-transform: rotate(540deg) } /* 2   * ARCSIZE */
        62.5% { -webkit-transform: rotate(675deg) } /* 2.5 * ARCSIZE */
        75%   { -webkit-transform: rotate(810deg) } /* 3   * ARCSIZE */
        87.5% { -webkit-transform: rotate(945deg) } /* 3.5 * ARCSIZE */
        to    { -webkit-transform: rotate(1080deg) } /* 4   * ARCSIZE */
      }

      @keyframes fill-unfill-rotate {
        12.5% { transform: rotate(135deg) } /* 0.5 * ARCSIZE */
        25%   { transform: rotate(270deg) } /* 1   * ARCSIZE */
        37.5% { transform: rotate(405deg) } /* 1.5 * ARCSIZE */
        50%   { transform: rotate(540deg) } /* 2   * ARCSIZE */
        62.5% { transform: rotate(675deg) } /* 2.5 * ARCSIZE */
        75%   { transform: rotate(810deg) } /* 3   * ARCSIZE */
        87.5% { transform: rotate(945deg) } /* 3.5 * ARCSIZE */
        to    { transform: rotate(1080deg) } /* 4   * ARCSIZE */
      }

      @-webkit-keyframes layer-1-fade-in-out {
        0% { opacity: 1 }
        25% { opacity: 1 }
        26% { opacity: 0 }
        89% { opacity: 0 }
        90% { opacity: 1 }
        to { opacity: 1 }
      }

      @keyframes layer-1-fade-in-out {
        0% { opacity: 1 }
        25% { opacity: 1 }
        26% { opacity: 0 }
        89% { opacity: 0 }
        90% { opacity: 1 }
        to { opacity: 1 }
      }

      @-webkit-keyframes layer-2-fade-in-out {
        0% { opacity: 0 }
        15% { opacity: 0 }
        25% { opacity: 1 }
        50% { opacity: 1 }
        51% { opacity: 0 }
        to { opacity: 0 }
      }

      @keyframes layer-2-fade-in-out {
        0% { opacity: 0 }
        15% { opacity: 0 }
        25% { opacity: 1 }
        50% { opacity: 1 }
        51% { opacity: 0 }
        to { opacity: 0 }
      }

      @-webkit-keyframes layer-3-fade-in-out {
        0% { opacity: 0 }
        40% { opacity: 0 }
        50% { opacity: 1 }
        75% { opacity: 1 }
        76% { opacity: 0 }
        to { opacity: 0 }
      }

      @keyframes layer-3-fade-in-out {
        0% { opacity: 0 }
        40% { opacity: 0 }
        50% { opacity: 1 }
        75% { opacity: 1 }
        76% { opacity: 0 }
        to { opacity: 0 }
      }

      @-webkit-keyframes layer-4-fade-in-out {
        0% { opacity: 0 }
        65% { opacity: 0 }
        75% { opacity: 1 }
        90% { opacity: 1 }
        to { opacity: 0 }
      }

      @keyframes layer-4-fade-in-out {
        0% { opacity: 0 }
        65% { opacity: 0 }
        75% { opacity: 1 }
        90% { opacity: 1 }
        to { opacity: 0 }
      }

      .circle-clipper {
        display: inline-block;
        position: relative;
        width: 50%;
        height: 100%;
        overflow: hidden;
      }

      /**
       * Patch the gap that appear between the two adjacent div.circle-clipper while the
       * spinner is rotating (appears on Chrome 50, Safari 9.1.1, and Edge).
       */
      .spinner-layer::after {
        content: '';
        left: 45%;
        width: 10%;
        border-top-style: solid;
      }

      .spinner-layer::after,
      .circle-clipper .circle {
        box-sizing: border-box;
        position: absolute;
        top: 0;
        border-width: var(--paper-spinner-stroke-width, 3px);
        border-radius: 50%;
      }

      .circle-clipper .circle {
        bottom: 0;
        width: 200%;
        border-style: solid;
        border-bottom-color: transparent !important;
      }

      .circle-clipper.left .circle {
        left: 0;
        border-right-color: transparent !important;
        -webkit-transform: rotate(129deg);
        transform: rotate(129deg);
      }

      .circle-clipper.right .circle {
        left: -100%;
        border-left-color: transparent !important;
        -webkit-transform: rotate(-129deg);
        transform: rotate(-129deg);
      }

      .active .gap-patch::after,
      .active .circle-clipper .circle {
        -webkit-animation-duration: var(--paper-spinner-expand-contract-duration);
        -webkit-animation-timing-function: cubic-bezier(0.4, 0.0, 0.2, 1);
        -webkit-animation-iteration-count: infinite;
        animation-duration: var(--paper-spinner-expand-contract-duration);
        animation-timing-function: cubic-bezier(0.4, 0.0, 0.2, 1);
        animation-iteration-count: infinite;
      }

      .active .circle-clipper.left .circle {
        -webkit-animation-name: left-spin;
        animation-name: left-spin;
      }

      .active .circle-clipper.right .circle {
        -webkit-animation-name: right-spin;
        animation-name: right-spin;
      }

      @-webkit-keyframes left-spin {
        0% { -webkit-transform: rotate(130deg) }
        50% { -webkit-transform: rotate(-5deg) }
        to { -webkit-transform: rotate(130deg) }
      }

      @keyframes left-spin {
        0% { transform: rotate(130deg) }
        50% { transform: rotate(-5deg) }
        to { transform: rotate(130deg) }
      }

      @-webkit-keyframes right-spin {
        0% { -webkit-transform: rotate(-130deg) }
        50% { -webkit-transform: rotate(5deg) }
        to { -webkit-transform: rotate(-130deg) }
      }

      @keyframes right-spin {
        0% { transform: rotate(-130deg) }
        50% { transform: rotate(5deg) }
        to { transform: rotate(-130deg) }
      }

      #spinnerContainer.cooldown {
        -webkit-animation: container-rotate var(--paper-spinner-container-rotation-duration) linear infinite, fade-out var(--paper-spinner-cooldown-duration) cubic-bezier(0.4, 0.0, 0.2, 1);
        animation: container-rotate var(--paper-spinner-container-rotation-duration) linear infinite, fade-out var(--paper-spinner-cooldown-duration) cubic-bezier(0.4, 0.0, 0.2, 1);
      }

      @-webkit-keyframes fade-out {
        0% { opacity: 1 }
        to { opacity: 0 }
      }

      @keyframes fade-out {
        0% { opacity: 1 }
        to { opacity: 0 }
      }
    </style>
  </template>
</dom-module>`;document.head.appendChild($_documentContainer$5.content);const template$b=html`
  <style include="paper-spinner-styles"></style>

  <div id="spinnerContainer" class-name="[[__computeContainerClasses(active, __coolingDown)]]" on-animationend="__reset" on-webkit-animation-end="__reset">
    <div class="spinner-layer layer-1">
      <div class="circle-clipper left">
        <div class="circle"></div>
      </div>
      <div class="circle-clipper right">
        <div class="circle"></div>
      </div>
    </div>

    <div class="spinner-layer layer-2">
      <div class="circle-clipper left">
        <div class="circle"></div>
      </div>
      <div class="circle-clipper right">
        <div class="circle"></div>
      </div>
    </div>

    <div class="spinner-layer layer-3">
      <div class="circle-clipper left">
        <div class="circle"></div>
      </div>
      <div class="circle-clipper right">
        <div class="circle"></div>
      </div>
    </div>

    <div class="spinner-layer layer-4">
      <div class="circle-clipper left">
        <div class="circle"></div>
      </div>
      <div class="circle-clipper right">
        <div class="circle"></div>
      </div>
    </div>
  </div>
`;template$b.setAttribute("strip-whitespace","");/**
                                                 Material design: [Progress &
                                                 activity](https://www.google.com/design/spec/components/progress-activity.html)
                                                                                               Element providing a multiple color material design circular spinner.
                                                                                                   <paper-spinner active></paper-spinner>
                                                                                               The default spinner cycles between four layers of colors; by default they are
                                                 blue, red, yellow and green. It can be customized to cycle between four
                                                 different colors. Use <paper-spinner-lite> for single color spinners.
                                                                                               ### Accessibility
                                                                                               Alt attribute should be set to provide adequate context for accessibility. If
                                                 not provided, it defaults to 'loading'. Empty alt can be provided to mark the
                                                 element as decorative if alternative content is provided in another form (e.g. a
                                                 text block following the spinner).
                                                                                                   <paper-spinner alt="Loading contacts list" active></paper-spinner>
                                                                                               ### Styling
                                                                                               The following custom properties and mixins are available for styling:
                                                                                               Custom property | Description | Default
                                                 ----------------|-------------|----------
                                                 `--paper-spinner-layer-1-color` | Color of the first spinner rotation | `--google-blue-500`
                                                 `--paper-spinner-layer-2-color` | Color of the second spinner rotation | `--google-red-500`
                                                 `--paper-spinner-layer-3-color` | Color of the third spinner rotation | `--google-yellow-500`
                                                 `--paper-spinner-layer-4-color` | Color of the fourth spinner rotation | `--google-green-500`
                                                 `--paper-spinner-stroke-width` | The width of the spinner stroke | 3px
                                                                                               @group Paper Elements
                                                 @element paper-spinner
                                                 @hero hero.svg
                                                 @demo demo/index.html
                                                 */Polymer({_template:template$b,is:"paper-spinner",behaviors:[PaperSpinnerBehavior]});var currentToast=null;/**
                         Material design: [Snackbars &
                         toasts](https://www.google.com/design/spec/components/snackbars-toasts.html)
                         
                         `paper-toast` provides a subtle notification toast. Only one `paper-toast` will
                         be visible on screen.
                         
                         Use `opened` to show the toast:
                         
                         Example:
                         
                             <paper-toast text="Hello world!" opened></paper-toast>
                         
                         Also `open()` or `show()` can be used to show the toast:
                         
                         Example:
                         
                             <paper-button on-click="openToast">Open Toast</paper-button>
                             <paper-toast id="toast" text="Hello world!"></paper-toast>
                         
                             ...
                         
                             openToast: function() {
                               this.$.toast.open();
                             }
                         
                         Set `duration` to 0, a negative number or Infinity to persist the toast on
                         screen:
                         
                         Example:
                         
                             <paper-toast text="Terms and conditions" opened duration="0">
                               <a href="#">Show more</a>
                             </paper-toast>
                         
                         
                         ### Styling
                         The following custom properties and mixins are available for styling:
                         
                         Custom property | Description | Default
                         ----------------|-------------|----------
                         `--paper-toast-background-color` | The paper-toast background-color | `#323232`
                         `--paper-toast-color` | The paper-toast color | `#f1f1f1`
                         
                         This element applies the mixin `--paper-font-common-base` but does not import
                         `paper-styles/typography.html`. In order to apply the `Roboto` font to this
                         element, make sure you've imported `paper-styles/typography.html`.
                         
                         @group Paper Elements
                         @element paper-toast
                         @demo demo/index.html
                         @hero hero.svg
                         */Polymer({_template:html`
    <style>
      :host {
        display: block;
        position: fixed;
        background-color: var(--paper-toast-background-color, #323232);
        color: var(--paper-toast-color, #f1f1f1);
        min-height: 48px;
        min-width: 288px;
        padding: 16px 24px;
        box-sizing: border-box;
        box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);
        border-radius: 2px;
        margin: 12px;
        font-size: 14px;
        cursor: default;
        -webkit-transition: -webkit-transform 0.3s, opacity 0.3s;
        transition: transform 0.3s, opacity 0.3s;
        opacity: 0;
        -webkit-transform: translateY(100px);
        transform: translateY(100px);
        @apply --paper-font-common-base;
      }

      :host(.capsule) {
        border-radius: 24px;
      }

      :host(.fit-bottom) {
        width: 100%;
        min-width: 0;
        border-radius: 0;
        margin: 0;
      }

      :host(.paper-toast-open) {
        opacity: 1;
        -webkit-transform: translateY(0px);
        transform: translateY(0px);
      }
    </style>

    <span id="label">{{text}}</span>
    <slot></slot>
`,is:"paper-toast",behaviors:[IronOverlayBehavior],properties:{/**
     * The element to fit `this` into.
     * Overridden from `Polymer.IronFitBehavior`.
     */fitInto:{type:Object,value:window,observer:"_onFitIntoChanged"},/**
     * The orientation against which to align the dropdown content
     * horizontally relative to `positionTarget`.
     * Overridden from `Polymer.IronFitBehavior`.
     */horizontalAlign:{type:String,value:"left"},/**
     * The orientation against which to align the dropdown content
     * vertically relative to `positionTarget`.
     * Overridden from `Polymer.IronFitBehavior`.
     */verticalAlign:{type:String,value:"bottom"},/**
     * The duration in milliseconds to show the toast.
     * Set to `0`, a negative number, or `Infinity`, to disable the
     * toast auto-closing.
     */duration:{type:Number,value:3e3},/**
     * The text to display in the toast.
     */text:{type:String,value:""},/**
     * Overridden from `IronOverlayBehavior`.
     * Set to false to enable closing of the toast by clicking outside it.
     */noCancelOnOutsideClick:{type:Boolean,value:!0},/**
     * Overridden from `IronOverlayBehavior`.
     * Set to true to disable auto-focusing the toast or child nodes with
     * the `autofocus` attribute` when the overlay is opened.
     */noAutoFocus:{type:Boolean,value:!0}},listeners:{transitionend:"__onTransitionEnd"},/**
   * Read-only. Deprecated. Use `opened` from `IronOverlayBehavior`.
   * @property visible
   * @deprecated
   */get visible(){Base._warn("`visible` is deprecated, use `opened` instead");return this.opened},/**
   * Read-only. Can auto-close if duration is a positive finite number.
   * @property _canAutoClose
   */get _canAutoClose(){return 0<this.duration&&this.duration!==1/0},created:function(){this._autoClose=null;IronA11yAnnouncer.requestAvailability()},/**
   * Show the toast. Without arguments, this is the same as `open()` from
   * `IronOverlayBehavior`.
   * @param {(Object|string)=} properties Properties to be set before opening the toast.
   * e.g. `toast.show('hello')` or `toast.show({text: 'hello', duration: 3000})`
   */show:function(properties){if("string"==typeof properties){properties={text:properties}}for(var property in properties){if(0===property.indexOf("_")){Base._warn("The property \""+property+"\" is private and was not set.")}else if(property in this){this[property]=properties[property]}else{Base._warn("The property \""+property+"\" is not valid.")}}this.open()},/**
   * Hide the toast. Same as `close()` from `IronOverlayBehavior`.
   */hide:function(){this.close()},/**
   * Called on transitions of the toast, indicating a finished animation
   * @private
   */__onTransitionEnd:function(e){// there are different transitions that are happening when opening and
// closing the toast. The last one so far is for `opacity`.
// This marks the end of the transition, so we check for this to determine
// if this is the correct event.
if(e&&e.target===this&&"opacity"===e.propertyName){if(this.opened){this._finishRenderOpened()}else{this._finishRenderClosed()}}},/**
   * Overridden from `IronOverlayBehavior`.
   * Called when the value of `opened` changes.
   */_openedChanged:function(){if(null!==this._autoClose){this.cancelAsync(this._autoClose);this._autoClose=null}if(this.opened){if(currentToast&&currentToast!==this){currentToast.close()}currentToast=this;this.fire("iron-announce",{text:this.text});if(this._canAutoClose){this._autoClose=this.async(this.close,this.duration)}}else if(currentToast===this){currentToast=null}IronOverlayBehaviorImpl._openedChanged.apply(this,arguments)},/**
   * Overridden from `IronOverlayBehavior`.
   */_renderOpened:function(){this.classList.add("paper-toast-open")},/**
   * Overridden from `IronOverlayBehavior`.
   */_renderClosed:function(){this.classList.remove("paper-toast-open")},/**
   * @private
   */_onFitIntoChanged:function(fitInto){this.positionTarget=fitInto}/**
     * Fired when `paper-toast` is opened.
     *
     * @event 'iron-announce'
     * @param {{text: string}} detail Contains text that will be announced.
     */});function toArray(objectOrArray){objectOrArray=objectOrArray||[];return Array.isArray(objectOrArray)?objectOrArray:[objectOrArray]}function log(msg){return`[Vaadin.Router] ${msg}`}function logValue(value){if("object"!==typeof value){return value+""}const stringType=Object.prototype.toString.call(value).match(/ (.*)\]$/)[1];if("Object"===stringType||"Array"===stringType){return`${stringType} ${JSON.stringify(value)}`}else{return stringType}}const MODULE="module",NOMODULE="nomodule",bundleKeys=[MODULE,NOMODULE];function ensureBundle(src){if(!src.match(/.+\.[m]?js$/)){throw new Error(log(`Unsupported type for bundle "${src}": .js or .mjs expected.`))}}function ensureRoute(route){if(!route||!isString(route.path)){throw new Error(log(`Expected route config to be an object with a "path" string property, or an array of such objects`))}const bundle=route.bundle,stringKeys=["component","redirect","bundle"];if(!isFunction(route.action)&&!Array.isArray(route.children)&&!isFunction(route.children)&&!isObject(bundle)&&!stringKeys.some(key=>isString(route[key]))){throw new Error(log(`Expected route config "${route.path}" to include either "${stringKeys.join("\", \"")}" `+`or "action" function but none found.`))}if(bundle){if(isString(bundle)){ensureBundle(bundle)}else if(!bundleKeys.some(key=>key in bundle)){throw new Error(log("Expected route bundle to include either \""+NOMODULE+"\" or \""+MODULE+"\" keys, or both"))}else{bundleKeys.forEach(key=>key in bundle&&ensureBundle(bundle[key]))}}if(route.redirect){["bundle","component"].forEach(overriddenProp=>{if(overriddenProp in route){console.warn(log(`Route config "${route.path}" has both "redirect" and "${overriddenProp}" properties, `+`and "redirect" will always override the latter. Did you mean to only use "${overriddenProp}"?`))}})}}function ensureRoutes(routes){toArray(routes).forEach(route=>ensureRoute(route))}function loadScript(src,key){let script=document.head.querySelector("script[src=\""+src+"\"][async]");if(!script){script=document.createElement("script");script.setAttribute("src",src);if(key===MODULE){script.setAttribute("type",MODULE)}else if(key===NOMODULE){script.setAttribute(NOMODULE,"")}script.async=!0}return new Promise((resolve,reject)=>{script.onreadystatechange=script.onload=e=>{script.__dynamicImportLoaded=!0;resolve(e)};script.onerror=e=>{if(script.parentNode){script.parentNode.removeChild(script)}reject(e)};if(null===script.parentNode){document.head.appendChild(script)}else if(script.__dynamicImportLoaded){resolve()}})}function loadBundle(bundle){if(isString(bundle)){return loadScript(bundle)}else{return Promise.race(bundleKeys.filter(key=>key in bundle).map(key=>loadScript(bundle[key],key)))}}function fireRouterEvent(type,detail){return!window.dispatchEvent(new CustomEvent(`vaadin-router-${type}`,{cancelable:"go"===type,detail}))}function isObject(o){// guard against null passing the typeof check
return"object"===typeof o&&!!o}function isFunction(f){return"function"===typeof f}function isString(s){return"string"===typeof s}function getNotFoundError(context){const error=new Error(log(`Page not found (${context.pathname})`));error.context=context;error.code=404;return error}const notFoundResult=new class NotFoundResult{};/* istanbul ignore next: coverage is calculated in Chrome, this code is for IE */function getAnchorOrigin(anchor){// IE11: on HTTP and HTTPS the default port is not included into
// window.location.origin, so won't include it here either.
const port=anchor.port,protocol=anchor.protocol,defaultHttp="http:"===protocol&&"80"===port,defaultHttps="https:"===protocol&&"443"===port,host=defaultHttp||defaultHttps?anchor.hostname// does not include the port number (e.g. www.example.org)
:anchor.host;// does include the port number (e.g. www.example.org:80)
return`${protocol}//${host}`}// The list of checks is not complete:
//  - SVG support is missing
//  - the 'rel' attribute is not considered
function vaadinRouterGlobalClickHandler(event){// ignore the click if the default action is prevented
if(event.defaultPrevented){return}// ignore the click if not with the primary mouse button
if(0!==event.button){return}// ignore the click if a modifier key is pressed
if(event.shiftKey||event.ctrlKey||event.altKey||event.metaKey){return}// find the <a> element that the click is at (or within)
let anchor=event.target;const path=event.composedPath?event.composedPath():event.path||[];// FIXME(web-padawan): `Symbol.iterator` used by webcomponentsjs is broken for arrays
// example to check: `for...of` loop here throws the "Not yet implemented" error
for(let i=0;i<path.length;i++){const target=path[i];if(target.nodeName&&"a"===target.nodeName.toLowerCase()){anchor=target;break}}while(anchor&&"a"!==anchor.nodeName.toLowerCase()){anchor=anchor.parentNode}// ignore the click if not at an <a> element
if(!anchor||"a"!==anchor.nodeName.toLowerCase()){return}// ignore the click if the <a> element has a non-default target
if(anchor.target&&"_self"!==anchor.target.toLowerCase()){return}// ignore the click if the <a> element has the 'download' attribute
if(anchor.hasAttribute("download")){return}// ignore the click if the target URL is a fragment on the current page
if(anchor.pathname===window.location.pathname&&""!==anchor.hash){return}// ignore the click if the target is external to the app
// In IE11 HTMLAnchorElement does not have the `origin` property
const origin=anchor.origin||getAnchorOrigin(anchor);if(origin!==window.location.origin){return}// if none of the above, convert the click into a navigation event
if(fireRouterEvent("go",{pathname:anchor.pathname})){event.preventDefault()}}/**
   * A navigation trigger for Vaadin Router that translated clicks on `<a>` links
   * into Vaadin Router navigation events.
   *
   * Only regular clicks on in-app links are translated (primary mouse button, no
   * modifier keys, the target href is within the app's URL space).
   *
   * @memberOf Vaadin.Router.Triggers
   * @type {NavigationTrigger}
   */const CLICK={activate(){window.document.addEventListener("click",vaadinRouterGlobalClickHandler)},inactivate(){window.document.removeEventListener("click",vaadinRouterGlobalClickHandler)}},isIE=/Trident/.test(navigator.userAgent);// PopStateEvent constructor shim
/* istanbul ignore next: coverage is calculated in Chrome, this code is for IE */if(isIE&&!isFunction(window.PopStateEvent)){window.PopStateEvent=function(inType,params){params=params||{};var e=document.createEvent("Event");e.initEvent(inType,!!params.bubbles,!!params.cancelable);e.state=params.state||null;return e};window.PopStateEvent.prototype=window.Event.prototype}function vaadinRouterGlobalPopstateHandler(event){if("vaadin-router-ignore"===event.state){return}fireRouterEvent("go",{pathname:window.location.pathname})}/**
   * A navigation trigger for Vaadin Router that translates popstate events into
   * Vaadin Router navigation events.
   *
   * @memberOf Vaadin.Router.Triggers
   * @type {NavigationTrigger}
   */const POPSTATE={activate(){window.addEventListener("popstate",vaadinRouterGlobalPopstateHandler)},inactivate(){window.removeEventListener("popstate",vaadinRouterGlobalPopstateHandler)}};/**
    * Expose `pathToRegexp`.
    */var pathToRegexp_1=pathToRegexp,parse_1=parse$1,compile_1=compile,tokensToFunction_1=tokensToFunction,tokensToRegExp_1=tokensToRegExp,DEFAULT_DELIMITER="/",DEFAULT_DELIMITERS="./",PATH_REGEXP=new RegExp([// Match escaped characters that would otherwise appear in future matches.
// This allows the user to escape special characters that won't transform.
"(\\\\.)",// Match Express-style parameters and un-named parameters with a prefix
// and optional suffixes. Matches appear as:
//
// "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?"]
// "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined]
"(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?"].join("|"),"g");/**
                                                                                                         * Parse a string for the raw tokens.
                                                                                                         *
                                                                                                         * @param  {string}  str
                                                                                                         * @param  {Object=} options
                                                                                                         * @return {!Array}
                                                                                                         */function parse$1(str,options){var tokens=[],key=0,index=0,path="",defaultDelimiter=options&&options.delimiter||DEFAULT_DELIMITER,delimiters=options&&options.delimiters||DEFAULT_DELIMITERS,pathEscaped=!1,res;while(null!==(res=PATH_REGEXP.exec(str))){var m=res[0],escaped=res[1],offset=res.index;path+=str.slice(index,offset);index=offset+m.length;// Ignore already escaped sequences.
if(escaped){path+=escaped[1];pathEscaped=!0;continue}var prev="",next=str[index],name=res[2],capture=res[3],group=res[4],modifier=res[5];if(!pathEscaped&&path.length){var k=path.length-1;if(-1<delimiters.indexOf(path[k])){prev=path[k];path=path.slice(0,k)}}// Push the current path onto the tokens.
if(path){tokens.push(path);path="";pathEscaped=!1}var partial=""!==prev&&next!==void 0&&next!==prev,repeat="+"===modifier||"*"===modifier,optional="?"===modifier||"*"===modifier,delimiter=prev||defaultDelimiter,pattern=capture||group;tokens.push({name:name||key++,prefix:prev,delimiter:delimiter,optional:optional,repeat:repeat,partial:partial,pattern:pattern?escapeGroup(pattern):"[^"+escapeString(delimiter)+"]+?"})}// Push any remaining characters.
if(path||index<str.length){tokens.push(path+str.substr(index))}return tokens}/**
   * Compile a string to a template function for the path.
   *
   * @param  {string}             str
   * @param  {Object=}            options
   * @return {!function(Object=, Object=)}
   */function compile(str,options){return tokensToFunction(parse$1(str,options))}/**
   * Expose a method for transforming tokens into the path function.
   */function tokensToFunction(tokens){// Compile all the tokens into regexps.
// Compile all the patterns before compilation.
for(var matches=Array(tokens.length),i=0;i<tokens.length;i++){if("object"===typeof tokens[i]){matches[i]=new RegExp("^(?:"+tokens[i].pattern+")$")}}return function(data,options){for(var path="",encode=options&&options.encode||encodeURIComponent,i=0,token;i<tokens.length;i++){token=tokens[i];if("string"===typeof token){path+=token;continue}var value=data?data[token.name]:void 0,segment;if(Array.isArray(value)){if(!token.repeat){throw new TypeError("Expected \""+token.name+"\" to not repeat, but got array")}if(0===value.length){if(token.optional)continue;throw new TypeError("Expected \""+token.name+"\" to not be empty")}for(var j=0;j<value.length;j++){segment=encode(value[j],token);if(!matches[i].test(segment)){throw new TypeError("Expected all \""+token.name+"\" to match \""+token.pattern+"\"")}path+=(0===j?token.prefix:token.delimiter)+segment}continue}if("string"===typeof value||"number"===typeof value||"boolean"===typeof value){segment=encode(value+"",token);if(!matches[i].test(segment)){throw new TypeError("Expected \""+token.name+"\" to match \""+token.pattern+"\", but got \""+segment+"\"")}path+=token.prefix+segment;continue}if(token.optional){// Prepend partial segment prefixes.
if(token.partial)path+=token.prefix;continue}throw new TypeError("Expected \""+token.name+"\" to be "+(token.repeat?"an array":"a string"))}return path}}/**
   * Escape a regular expression string.
   *
   * @param  {string} str
   * @return {string}
   */function escapeString(str){return str.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1")}/**
   * Escape the capturing group by escaping special characters and meaning.
   *
   * @param  {string} group
   * @return {string}
   */function escapeGroup(group){return group.replace(/([=!:$/()])/g,"\\$1")}/**
   * Get the flags for a regexp from the options.
   *
   * @param  {Object} options
   * @return {string}
   */function flags(options){return options&&options.sensitive?"":"i"}/**
   * Pull out keys from a regexp.
   *
   * @param  {!RegExp} path
   * @param  {Array=}  keys
   * @return {!RegExp}
   */function regexpToRegexp(path,keys){if(!keys)return path;// Use a negative lookahead to match only capturing groups.
var groups=path.source.match(/\((?!\?)/g);if(groups){for(var i=0;i<groups.length;i++){keys.push({name:i,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,pattern:null})}}return path}/**
   * Transform an array into a regexp.
   *
   * @param  {!Array}  path
   * @param  {Array=}  keys
   * @param  {Object=} options
   * @return {!RegExp}
   */function arrayToRegexp(path,keys,options){for(var parts=[],i=0;i<path.length;i++){parts.push(pathToRegexp(path[i],keys,options).source)}return new RegExp("(?:"+parts.join("|")+")",flags(options))}/**
   * Create a path regexp from string input.
   *
   * @param  {string}  path
   * @param  {Array=}  keys
   * @param  {Object=} options
   * @return {!RegExp}
   */function stringToRegexp(path,keys,options){return tokensToRegExp(parse$1(path,options),keys,options)}/**
   * Expose a function for taking tokens and returning a RegExp.
   *
   * @param  {!Array}  tokens
   * @param  {Array=}  keys
   * @param  {Object=} options
   * @return {!RegExp}
   */function tokensToRegExp(tokens,keys,options){options=options||{};// Iterate over the tokens and create our regexp string.
for(var strict=options.strict,end=!1!==options.end,delimiter=escapeString(options.delimiter||DEFAULT_DELIMITER),delimiters=options.delimiters||DEFAULT_DELIMITERS,endsWith=[].concat(options.endsWith||[]).map(escapeString).concat("$").join("|"),route="",isEndDelimited=0===tokens.length,i=0,token;i<tokens.length;i++){token=tokens[i];if("string"===typeof token){route+=escapeString(token);isEndDelimited=i===tokens.length-1&&-1<delimiters.indexOf(token[token.length-1])}else{var prefix=escapeString(token.prefix),capture=token.repeat?"(?:"+token.pattern+")(?:"+prefix+"(?:"+token.pattern+"))*":token.pattern;if(keys)keys.push(token);if(token.optional){if(token.partial){route+=prefix+"("+capture+")?"}else{route+="(?:"+prefix+"("+capture+"))?"}}else{route+=prefix+"("+capture+")"}}}if(end){if(!strict)route+="(?:"+delimiter+")?";route+="$"===endsWith?"$":"(?="+endsWith+")"}else{if(!strict)route+="(?:"+delimiter+"(?="+endsWith+"))?";if(!isEndDelimited)route+="(?="+delimiter+"|"+endsWith+")"}return new RegExp("^"+route,flags(options))}/**
   * Normalize the given path string, returning a regular expression.
   *
   * An empty array can be passed in for the keys, which will hold the
   * placeholder key descriptions. For example, using `/user/:id`, `keys` will
   * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
   *
   * @param  {(string|RegExp|Array)} path
   * @param  {Array=}                keys
   * @param  {Object=}               options
   * @return {!RegExp}
   */function pathToRegexp(path,keys,options){if(path instanceof RegExp){return regexpToRegexp(path,keys)}if(Array.isArray(path)){return arrayToRegexp(/** @type {!Array} */path,keys,options)}return stringToRegexp(/** @type {string} */path,keys,options)}pathToRegexp_1.parse=parse_1;pathToRegexp_1.compile=compile_1;pathToRegexp_1.tokensToFunction=tokensToFunction_1;pathToRegexp_1.tokensToRegExp=tokensToRegExp_1;/**
                                                   * Universal Router (https://www.kriasoft.com/universal-router/)
                                                   *
                                                   * Copyright (c) 2015-present Kriasoft.
                                                   *
                                                   * This source code is licensed under the MIT license found in the
                                                   * LICENSE.txt file in the root directory of this source tree.
                                                   */const{hasOwnProperty}=Object.prototype,cache=new Map;// see https://github.com/pillarjs/path-to-regexp/issues/148
cache.set("|false",{keys:[],pattern:/(?:)/});function decodeParam(val){try{return decodeURIComponent(val)}catch(err){return val}}function matchPath(routepath,path,exact,parentKeys,parentParams){exact=!!exact;const cacheKey=`${routepath}|${exact}`;let regexp=cache.get(cacheKey);if(!regexp){const keys=[];regexp={keys,pattern:pathToRegexp_1(routepath,keys,{end:exact,strict:""===routepath})};cache.set(cacheKey,regexp)}const m=regexp.pattern.exec(path);if(!m){return null}const params=Object.assign({},parentParams);for(let i=1;i<m.length;i++){const key=regexp.keys[i-1],prop=key.name,value=m[i];if(value!==void 0||!hasOwnProperty.call(params,prop)){if(key.repeat){params[prop]=value?value.split(key.delimiter).map(decodeParam):[]}else{params[prop]=value?decodeParam(value):value}}}return{path:m[0],keys:(parentKeys||[]).concat(regexp.keys),params}}/**
   * Universal Router (https://www.kriasoft.com/universal-router/)
   *
   * Copyright (c) 2015-present Kriasoft.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.txt file in the root directory of this source tree.
   */ /**
       * Traverses the routes tree and matches its nodes to the given pathname from
       * the root down to the leaves. Each match consumes a part of the pathname and
       * the matching process continues for as long as there is a matching child
       * route for the remaining part of the pathname.
       *
       * The returned value is a lazily evaluated iterator.
       *
       * The leading "/" in a route path matters only for the root of the routes
       * tree (or if all parent routes are ""). In all other cases a leading "/" in
       * a child route path has no significance.
       *
       * The trailing "/" in a _route path_ matters only for the leaves of the
       * routes tree. A leaf route with a trailing "/" matches only a pathname that
       * also has a trailing "/".
       *
       * The trailing "/" in a route path does not affect matching of child routes
       * in any way.
       *
       * The trailing "/" in a _pathname_ generally does not matter (except for
       * the case of leaf nodes described above).
       *
       * The "" and "/" routes have special treatment:
       *  1. as a single route
       *     the "" and "/" routes match only the "" and "/" pathnames respectively
       *  2. as a parent in the routes tree
       *     the "" route matches any pathname without consuming any part of it
       *     the "/" route matches any absolute pathname consuming its leading "/"
       *  3. as a leaf in the routes tree
       *     the "" and "/" routes match only if the entire pathname is consumed by
       *         the parent routes chain. In this case "" and "/" are equivalent.
       *  4. several directly nested "" or "/" routes
       *     - directly nested "" or "/" routes are 'squashed' (i.e. nesting two
       *       "/" routes does not require a double "/" in the pathname to match)
       *     - if there are only "" in the parent routes chain, no part of the
       *       pathname is consumed, and the leading "/" in the child routes' paths
       *       remains significant
       *
       * Side effect:
       *   - the routes tree { path: '' } matches only the '' pathname
       *   - the routes tree { path: '', children: [ { path: '' } ] } matches any
       *     pathname (for the tree root)
       *
       * Prefix matching can be enabled also by `children: true`.
       */function matchRoute(route,pathname,ignoreLeadingSlash,parentKeys,parentParams){let match,childMatches,childIndex=0,routepath=route.path||"";if("/"===routepath.charAt(0)){if(ignoreLeadingSlash){routepath=routepath.substr(1)}ignoreLeadingSlash=!0}return{next(routeToSkip){if(route===routeToSkip){return{done:!0}}const children=route.__children=route.__children||route.children;if(!match){match=matchPath(routepath,pathname,!children,parentKeys,parentParams);if(match){return{done:!1,value:{route,keys:match.keys,params:match.params,path:match.path}}}}if(match&&children){while(childIndex<children.length){if(!childMatches){const childRoute=children[childIndex];childRoute.parent=route;let matchedLength=match.path.length;if(0<matchedLength&&"/"===pathname.charAt(matchedLength)){matchedLength+=1}childMatches=matchRoute(childRoute,pathname.substr(matchedLength),ignoreLeadingSlash,match.keys,match.params)}const childMatch=childMatches.next(routeToSkip);if(!childMatch.done){return{done:!1,value:childMatch.value}}childMatches=null;childIndex++}}return{done:!0}}}}/**
   * Universal Router (https://www.kriasoft.com/universal-router/)
   *
   * Copyright (c) 2015-present Kriasoft.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.txt file in the root directory of this source tree.
   */function resolveRoute(context){if(isFunction(context.route.action)){return context.route.action(context)}return void 0}/**
   * Universal Router (https://www.kriasoft.com/universal-router/)
   *
   * Copyright (c) 2015-present Kriasoft.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.txt file in the root directory of this source tree.
   */function isChildRoute(parentRoute,childRoute){let route=childRoute;while(route){route=route.parent;if(route===parentRoute){return!0}}return!1}function generateErrorMessage(currentContext){let errorMessage=`Path '${currentContext.pathname}' is not properly resolved due to an error.`;const routePath=(currentContext.route||{}).path;if(routePath){errorMessage+=` Resolution had failed on route: '${routePath}'`}return errorMessage}function addRouteToChain(context,match){const{route,path}=match;function shouldDiscardOldChain(oldChain,route){return!route.parent||!oldChain||!oldChain.length||oldChain[oldChain.length-1].route!==route.parent}if(route&&!route.__synthetic){const item={path,route};if(shouldDiscardOldChain(context.chain,route)){context.chain=[item]}else{context.chain.push(item)}}}/**
   * @memberof Vaadin
   */class Resolver{constructor(routes,options={}){if(Object(routes)!==routes){throw new TypeError("Invalid routes")}this.baseUrl=options.baseUrl||"";this.errorHandler=options.errorHandler;this.resolveRoute=options.resolveRoute||resolveRoute;this.context=Object.assign({resolver:this},options.context);this.root=Array.isArray(routes)?{path:"",__children:routes,parent:null,__synthetic:!0}:routes;this.root.parent=null}/**
     * Returns the current list of routes (as a shallow copy). Adding / removing
     * routes to / from the returned array does not affect the routing config,
     * but modifying the route objects does.
     *
     * @return {!Array<!Route>}
     */getRoutes(){return[...this.root.__children]}/**
     * Sets the routing config (replacing the existing one).
     *
     * @param {!Array<!Route>|!Route} routes a single route or an array of those
     *    (the array is shallow copied)
     */setRoutes(routes){ensureRoutes(routes);const newRoutes=[...toArray(routes)];this.root.__children=newRoutes}/**
     * Appends one or several routes to the routing config and returns the
     * effective routing config after the operation.
     *
     * @param {!Array<!Route>|!Route} routes a single route or an array of those
     *    (the array is shallow copied)
     * @return {!Array<!Route>}
     * @protected
     */addRoutes(routes){ensureRoutes(routes);this.root.__children.push(...toArray(routes));return this.getRoutes()}/**
     * Removes all existing routes from the routing config.
     */removeRoutes(){this.setRoutes([])}/**
     * Asynchronously resolves the given pathname, i.e. finds all routes matching
     * the pathname and tries resolving them one after another in the order they
     * are listed in the routes config until the first non-null result.
     *
     * Returns a promise that is fulfilled with the return value of an object that consists of the first
     * route handler result that returns something other than `null` or `undefined` and context used to get this result.
     *
     * If no route handlers return a non-null result, or if no route matches the
     * given pathname the returned promise is rejected with a 'page not found'
     * `Error`.
     *
     * @param {!string|!{pathname: !string}} pathnameOrContext the pathname to
     *    resolve or a context object with a `pathname` property and other
     *    properties to pass to the route resolver functions.
     * @return {!Promise<any>}
     */resolve(pathnameOrContext){const context=Object.assign({},this.context,isString(pathnameOrContext)?{pathname:pathnameOrContext}:pathnameOrContext),match=matchRoute(this.root,this.__normalizePathname(context.pathname),this.baseUrl),resolve=this.resolveRoute;let matches=null,nextMatches=null,currentContext=context;function next(resume,parent=matches.value.route,prevResult){const routeToSkip=null===prevResult&&matches.value.route;matches=nextMatches||match.next(routeToSkip);nextMatches=null;if(!resume){if(matches.done||!isChildRoute(parent,matches.value.route)){nextMatches=matches;return Promise.resolve(notFoundResult)}}if(matches.done){return Promise.reject(getNotFoundError(context))}addRouteToChain(context,matches.value);currentContext=Object.assign({},context,matches.value);return Promise.resolve(resolve(currentContext)).then(resolution=>{if(null!==resolution&&resolution!==void 0&&resolution!==notFoundResult){currentContext.result=resolution.result||resolution;return currentContext}return next(resume,parent,resolution)})}context.next=next;return Promise.resolve().then(()=>next(!0,this.root)).catch(error=>{const errorMessage=generateErrorMessage(currentContext);if(!error){error=new Error(errorMessage)}else{console.warn(errorMessage)}error.context=error.context||currentContext;// DOMException has its own code which is read-only
if(!(error instanceof DOMException)){error.code=error.code||500}if(this.errorHandler){currentContext.result=this.errorHandler(error);return currentContext}throw error})}/**
     * URL constructor polyfill hook. Creates and returns an URL instance.
     */static __createUrl(url,base){return new URL(url,base)}/**
     * If the baseUrl property is set, transforms the baseUrl and returns the full
     * actual `base` string for using in the `new URL(path, base);` and for
     * prepernding the paths with. The returned base ends with a trailing slash.
     *
     * Otherwise, returns empty string.
     */get __effectiveBaseUrl(){return this.baseUrl?this.constructor.__createUrl(this.baseUrl,document.baseURI||document.URL).href.replace(/[^\/]*$/,""):""}/**
     * If the baseUrl is set, matches the pathname with the router’s baseUrl,
     * and returns the local pathname with the baseUrl stripped out.
     *
     * If the pathname does not match the baseUrl, returns undefined.
     *
     * If the `baseUrl` is not set, returns the unmodified pathname argument.
     */__normalizePathname(pathname){if(!this.baseUrl){// No base URL, no need to transform the pathname.
return pathname}const base=this.__effectiveBaseUrl,normalizedUrl=this.constructor.__createUrl(pathname,base).href;if(normalizedUrl.slice(0,base.length)===base){return normalizedUrl.slice(base.length)}}}_exports.Resolver=Resolver;Resolver.pathToRegexp=pathToRegexp_1;/**
                                         * Universal Router (https://www.kriasoft.com/universal-router/)
                                         *
                                         * Copyright (c) 2015-present Kriasoft.
                                         *
                                         * This source code is licensed under the MIT license found in the
                                         * LICENSE.txt file in the root directory of this source tree.
                                         */const{pathToRegexp:pathToRegexp$1}=Resolver,cache$1=new Map;function cacheRoutes(routesByName,route,routes){const name=route.name||route.component;if(name){if(routesByName.has(name)){routesByName.get(name).push(route)}else{routesByName.set(name,[route])}}if(Array.isArray(routes)){for(let i=0;i<routes.length;i++){const childRoute=routes[i];childRoute.parent=route;cacheRoutes(routesByName,childRoute,childRoute.__children||childRoute.children)}}}function getRouteByName(routesByName,routeName){const routes=routesByName.get(routeName);if(routes&&1<routes.length){throw new Error(`Duplicate route with name "${routeName}".`+` Try seting unique 'name' route properties.`)}return routes&&routes[0]}function getRoutePath(route){let path=route.path;path=Array.isArray(path)?path[0]:path;return path!==void 0?path:""}function generateUrls(router,options={}){if(!(router instanceof Resolver)){throw new TypeError("An instance of Resolver is expected")}const routesByName=new Map;return(routeName,params)=>{let route=getRouteByName(routesByName,routeName);if(!route){routesByName.clear();// clear cache
cacheRoutes(routesByName,router.root,router.root.__children);route=getRouteByName(routesByName,routeName);if(!route){throw new Error(`Route "${routeName}" not found`)}}let regexp=cache$1.get(route.fullPath);if(!regexp){let fullPath=getRoutePath(route),rt=route.parent;while(rt){const path=getRoutePath(rt);if(path){fullPath=path.replace(/\/$/,"")+"/"+fullPath.replace(/^\//,"")}rt=rt.parent}const tokens=pathToRegexp$1.parse(fullPath),toPath=pathToRegexp$1.tokensToFunction(tokens),keys=Object.create(null);for(let i=0;i<tokens.length;i++){if(!isString(tokens[i])){keys[tokens[i].name]=!0}}regexp={toPath,keys};cache$1.set(fullPath,regexp);route.fullPath=fullPath}let url=regexp.toPath(params,options)||"/";if(options.stringifyQueryParams&&params){const queryParams={},keys=Object.keys(params);for(let i=0;i<keys.length;i++){const key=keys[i];if(!regexp.keys[key]){queryParams[key]=params[key]}}const query=options.stringifyQueryParams(queryParams);if(query){url+="?"===query.charAt(0)?query:`?${query}`}}return url}}/**
   * @typedef NavigationTrigger
   * @type {object}
   * @property {function()} activate
   * @property {function()} inactivate
   */ /** @type {Array<NavigationTrigger>} */let triggers=[];function setNavigationTriggers(newTriggers){triggers.forEach(trigger=>trigger.inactivate());newTriggers.forEach(trigger=>trigger.activate());triggers=newTriggers}const willAnimate=elem=>{const name=getComputedStyle(elem).getPropertyValue("animation-name");return name&&"none"!==name},waitForAnimation=(elem,cb)=>{const listener=()=>{elem.removeEventListener("animationend",listener);cb()};elem.addEventListener("animationend",listener)};function animate(elem,className){elem.classList.add(className);return new Promise(resolve=>{if(willAnimate(elem)){const rect=elem.getBoundingClientRect(),size=`height: ${rect.bottom-rect.top}px; width: ${rect.right-rect.left}px`;elem.setAttribute("style",`position: absolute; ${size}`);waitForAnimation(elem,()=>{elem.classList.remove(className);elem.removeAttribute("style");resolve()})}else{elem.classList.remove(className);resolve()}})}const MAX_REDIRECT_COUNT=256;function isResultNotEmpty(result){return null!==result&&result!==void 0}function copyContextWithoutNext(context){const copy=Object.assign({},context);delete copy.next;return copy}function createLocation({pathname="",chain=[],params={},redirectFrom,resolver},route){const routes=chain.map(item=>item.route);return{baseUrl:resolver&&resolver.baseUrl||"",pathname,routes,route:route||routes.length&&routes[routes.length-1]||null,params,redirectFrom,getUrl:(userParams={})=>getPathnameForRouter(Router.pathToRegexp.compile(getMatchedPath(routes))(Object.assign({},params,userParams)),resolver)}}function createRedirect(context,pathname){const params=Object.assign({},context.params);return{redirect:{pathname,from:context.pathname,params}}}function renderComponent(context,component){const element=document.createElement(component);element.location=createLocation(context);const index=context.chain.map(item=>item.route).indexOf(context.route);context.chain[index].element=element;return element}function runCallbackIfPossible(callback,args,thisArg){if(isFunction(callback)){return callback.apply(thisArg,args)}}function amend(amendmentFunction,args,element){return amendmentResult=>{if(amendmentResult&&(amendmentResult.cancel||amendmentResult.redirect)){return amendmentResult}if(element){return runCallbackIfPossible(element[amendmentFunction],args,element)}}}function processNewChildren(newChildren,route){if(!Array.isArray(newChildren)&&!isObject(newChildren)){throw new Error(log(`Incorrect "children" value for the route ${route.path}: expected array or object, but got ${newChildren}`))}route.__children=[];const childRoutes=toArray(newChildren);for(let i=0;i<childRoutes.length;i++){ensureRoute(childRoutes[i]);route.__children.push(childRoutes[i])}}function removeDomNodes(nodes){if(nodes&&nodes.length){const parent=nodes[0].parentNode;for(let i=0;i<nodes.length;i++){parent.removeChild(nodes[i])}}}function getPathnameForRouter(pathname,router){const base=router.__effectiveBaseUrl;return base?router.constructor.__createUrl(pathname.replace(/^\//,""),base).pathname:pathname}function getMatchedPath(chain){return chain.map(item=>item.path).reduce((a,b)=>{if(b.length){return a.replace(/\/$/,"")+"/"+b.replace(/^\//,"")}return a},"")}/**
   * A simple client-side router for single-page applications. It uses
   * express-style middleware and has a first-class support for Web Components and
   * lazy-loading. Works great in Polymer and non-Polymer apps.
   *
   * Use `new Router(outlet, options)` to create a new Router instance.
   *
   * * The `outlet` parameter is a reference to the DOM node to render
   *   the content into.
   *
   * * The `options` parameter is an optional object with options. The following
   *   keys are supported:
   *   * `baseUrl` — the initial value for [
   *     the `baseUrl` property
   *   ](#/classes/Vaadin.Router#property-baseUrl)
   *
   * The Router instance is automatically subscribed to navigation events
   * on `window`.
   *
   * See [Live Examples](#/classes/Vaadin.Router/demos/demo/index.html) for the detailed usage demo and code snippets.
   *
   * See also detailed API docs for the following methods, for the advanced usage:
   *
   * * [setOutlet](#/classes/Vaadin.Router#method-setOutlet) – should be used to configure the outlet.
   * * [setTriggers](#/classes/Vaadin.Router#method-setTriggers) – should be used to configure the navigation events.
   * * [setRoutes](#/classes/Vaadin.Router#method-setRoutes) – should be used to configure the routes.
   *
   * Only `setRoutes` has to be called manually, others are automatically invoked when creating a new instance.
   *
   * @memberof Vaadin
   * @extends Vaadin.Resolver
   * @demo demo/index.html
   * @summary JavaScript class that renders different DOM content depending on
   *    a given path. It can re-render when triggered or automatically on
   *    'popstate' and / or 'click' events.
   */class Router extends Resolver{/**
   * Creates a new Router instance with a given outlet, and
   * automatically subscribes it to navigation events on the `window`.
   * Using a constructor argument or a setter for outlet is equivalent:
   *
   * ```
   * const router = new Vaadin.Router();
   * router.setOutlet(outlet);
   * ```
   * @param {?Node} outlet
   * @param {?RouterOptions} options
   */constructor(outlet,options){const baseElement=document.head.querySelector("base");super([],Object.assign({// Default options
baseUrl:baseElement&&baseElement.getAttribute("href")},options));this.resolveRoute=context=>this.__resolveRoute(context);const triggers=Router.NavigationTrigger;Router.setTriggers.apply(Router,Object.keys(triggers).map(key=>triggers[key]));/**
                                                                                        * The base URL for all routes in the router instance. By default,
                                                                                        * takes the `<base href>` attribute value if the base element exists
                                                                                        * in the `<head>`.
                                                                                        *
                                                                                        * @public
                                                                                        * @type {string}
                                                                                        */this.baseUrl;/**
                   * A promise that is settled after the current render cycle completes. If
                   * there is no render cycle in progress the promise is immediately settled
                   * with the last render cycle result.
                   *
                   * @public
                   * @type {!Promise<!Vaadin.Router.Location>}
                   */this.ready;this.ready=Promise.resolve(outlet);/**
                                           * Contains read-only information about the current router location:
                                           * pathname, active routes, parameters. See the
                                           * [Location type declaration](#/classes/Vaadin.Router.Location)
                                           * for more details.
                                           *
                                           * @public
                                           * @type {!Vaadin.Router.Location}
                                           */this.location;this.location=createLocation({resolver:this});this.__lastStartedRenderId=0;this.__navigationEventHandler=this.__onNavigationEvent.bind(this);this.setOutlet(outlet);this.subscribe()}__resolveRoute(context){const route=context.route;let callbacks=Promise.resolve();if(isFunction(route.children)){callbacks=callbacks.then(()=>route.children(copyContextWithoutNext(context))).then(children=>{// The route.children() callback might have re-written the
// route.children property instead of returning a value
if(!isResultNotEmpty(children)&&!isFunction(route.children)){children=route.children}processNewChildren(children,route)})}const commands={redirect:path=>createRedirect(context,path),component:component=>renderComponent(context,component)};return callbacks.then(()=>runCallbackIfPossible(route.action,[context,commands],route)).then(result=>{if(isResultNotEmpty(result)){// Actions like `() => import('my-view.js')` are not expected to
// end the resolution, despite the result is not empty. Checking
// the result with a whitelist of values that end the resulution.
if(result instanceof HTMLElement||result.redirect||result===notFoundResult){return result}}if(isString(route.redirect)){return commands.redirect(route.redirect)}if(route.bundle){return loadBundle(route.bundle).then(()=>{},()=>{throw new Error(log(`Bundle not found: ${route.bundle}. Check if the file name is correct`))})}}).then(result=>{if(isResultNotEmpty(result)){return result}if(isString(route.component)){return commands.component(route.component)}})}/**
     * Sets the router outlet (the DOM node where the content for the current
     * route is inserted). Any content pre-existing in the router outlet is
     * removed at the end of each render pass.
     *
     * NOTE: this method is automatically invoked first time when creating a new Router instance.
     *
     * @param {?Node} outlet the DOM node where the content for the current route
     *     is inserted.
     */setOutlet(outlet){if(outlet){this.__ensureOutlet(outlet)}this.__outlet=outlet}/**
     * Returns the current router outlet. The initial value is `undefined`.
     *
     * @return {?Node} the current router outlet (or `undefined`)
     */getOutlet(){return this.__outlet}/**
     * Sets the routing config (replacing the existing one) and triggers a
     * navigation event so that the router outlet is refreshed according to the
     * current `window.location` and the new routing config.
     *
     * Each route object may have the following properties, listed here in the processing order:
     * * `path` – the route path (relative to the parent route if any) in the
     * [express.js syntax](https://expressjs.com/en/guide/routing.html#route-paths").
     *
     * * `children` – an array of nested routes or a function that provides this
     * array at the render time. The function can be synchronous or asynchronous:
     * in the latter case the render is delayed until the returned promise is
     * resolved. The `children` function is executed every time when this route is
     * being rendered. This allows for dynamic route structures (e.g. backend-defined),
     * but it might have a performance impact as well. In order to avoid calling
     * the function on subsequent renders, you can override the `children` property
     * of the route object and save the calculated array there
     * (via `context.route.children = [ route1, route2, ...];`).
     * Parent routes are fully resolved before resolving the children. Children
     * 'path' values are relative to the parent ones.
     *
     * * `action` – the action that is executed before the route is resolved.
     * The value for this property should be a function, accepting `context`
     * and `commands` parameters described below. If present, this function is
     * always invoked first, disregarding of the other properties' presence.
     * The action can return a result directly or within a `Promise`, which
     * resolves to the result. If the action result is an `HTMLElement` instance,
     * a `commands.component(name)` result, a `commands.redirect(path)` result,
     * or a `context.next()` result, the current route resolution is finished,
     * and other route config properties are ignored.
     * See also **Route Actions** section in [Live Examples](#/classes/Vaadin.Router/demos/demo/index.html).
     *
     * * `redirect` – other route's path to redirect to. Passes all route parameters to the redirect target.
     * The target route should also be defined.
     * See also **Redirects** section in [Live Examples](#/classes/Vaadin.Router/demos/demo/index.html).
     *
     * * `bundle` – string containing the path to `.js` or `.mjs` bundle to load before resolving the route,
     * or the object with "module" and "nomodule" keys referring to different bundles.
     * Each bundle is only loaded once. If "module" and "nomodule" are set, only one bundle is loaded,
     * depending on whether the browser supports ES modules or not.
     * The property is ignored when either an `action` returns the result or `redirect` property is present.
     * Any error, e.g. 404 while loading bundle will cause route resolution to throw.
     * See also **Code Splitting** section in [Live Examples](#/classes/Vaadin.Router/demos/demo/index.html).
     *
     * * `component` – the tag name of the Web Component to resolve the route to.
     * The property is ignored when either an `action` returns the result or `redirect` property is present.
     * If route contains the `component` property (or an action that return a component)
     * and its child route also contains the `component` property, child route's component
     * will be rendered as a light dom child of a parent component.
     *
     * * `name` – the string name of the route to use in the
     * [`router.urlForName(name, params)`](#/classes/Vaadin.Router#method-urlForName)
     * navigation helper method.
     *
     * For any route function (`action`, `children`) defined, the corresponding `route` object is available inside the callback
     * through the `this` reference. If you need to access it, make sure you define the callback as a non-arrow function
     * because arrow functions do not have their own `this` reference.
     *
     * `context` object that is passed to `action` function holds the following properties:
     * * `context.pathname` – string with the pathname being resolved
     *
     * * `context.params` – object with route parameters
     *
     * * `context.route` – object that holds the route that is currently being rendered.
     *
     * * `context.next()` – function for asynchronously getting the next route
     * contents from the resolution chain (if any)
     *
     * `commands` object that is passed to `action` function has
     * the following methods:
     *
     * * `commands.redirect(path)` – function that creates a redirect data
     * for the path specified.
     *
     * * `commands.component(component)` – function that creates a new HTMLElement
     * with current context
     *
     * @param {!Array<!Object>|!Object} routes a single route or an array of those
     */setRoutes(routes){this.__urlForName=void 0;super.setRoutes(routes);this.__onNavigationEvent()}/**
     * Asynchronously resolves the given pathname and renders the resolved route
     * component into the router outlet. If no router outlet is set at the time of
     * calling this method, or at the time when the route resolution is completed,
     * a `TypeError` is thrown.
     *
     * Returns a promise that is fulfilled with the router outlet DOM Node after
     * the route component is created and inserted into the router outlet, or
     * rejected if no route matches the given path.
     *
     * If another render pass is started before the previous one is completed, the
     * result of the previous render pass is ignored.
     *
     * @param {!string|!{pathname: !string}} pathnameOrContext the pathname to
     *    render or a context object with a `pathname` property and other
     *    properties to pass to the resolver.
     * @return {!Promise<!Node>}
     */render(pathnameOrContext,shouldUpdateHistory){const renderId=++this.__lastStartedRenderId,pathname=pathnameOrContext.pathname||pathnameOrContext;// Find the first route that resolves to a non-empty result
this.ready=this.resolve(pathnameOrContext)// Process the result of this.resolve() and handle all special commands:
// (redirect / prevent / component). If the result is a 'component',
// then go deeper and build the entire chain of nested components matching
// the pathname. Also call all 'on before' callbacks along the way.
.then(context=>this.__fullyResolveChain(context)).then(context=>{if(renderId===this.__lastStartedRenderId){const previousContext=this.__previousContext;// Check if the render was prevented and make an early return in that case
if(context===previousContext){return this.location}this.location=createLocation(context);fireRouterEvent("location-changed",{router:this,location:this.location});if(shouldUpdateHistory){this.__updateBrowserHistory(context.pathname,context.redirectFrom)}this.__addAppearingContent(context,previousContext);const animationDone=this.__animateIfNeeded(context);this.__runOnAfterEnterCallbacks(context);this.__runOnAfterLeaveCallbacks(context,previousContext);return animationDone.then(()=>{if(renderId===this.__lastStartedRenderId){// If there is another render pass started after this one,
// the 'disappearing content' would be removed when the other
// render pass calls `this.__addAppearingContent()`
this.__removeDisappearingContent();this.__previousContext=context;return this.location}})}}).catch(error=>{if(renderId===this.__lastStartedRenderId){if(shouldUpdateHistory){this.__updateBrowserHistory(pathname)}removeDomNodes(this.__outlet&&this.__outlet.children);this.location=createLocation({pathname,resolver:this});fireRouterEvent("error",{router:this,error,pathname});throw error}});return this.ready}__fullyResolveChain(originalContext,currentContext=originalContext){return this.__amendWithResolutionResult(currentContext).then(amendedContext=>{const initialContext=amendedContext!==currentContext?amendedContext:originalContext;return amendedContext.next().then(nextContext=>{if(null===nextContext||nextContext===notFoundResult){const matchedPath=getPathnameForRouter(getMatchedPath(amendedContext.chain),amendedContext.resolver);if(matchedPath!==amendedContext.pathname){throw getNotFoundError(initialContext)}}return nextContext&&nextContext!==notFoundResult?this.__fullyResolveChain(initialContext,nextContext):this.__amendWithOnBeforeCallbacks(initialContext)})})}__amendWithResolutionResult(context){const result=context.result;if(result instanceof HTMLElement){return Promise.resolve(context)}else if(result.redirect){return this.__redirect(result.redirect,context.__redirectCount).then(context=>this.__amendWithResolutionResult(context))}else if(result instanceof Error){return Promise.reject(result)}else{return Promise.reject(new Error(log(`Invalid route resolution result for path "${context.pathname}". `+`Expected redirect object or HTML element, but got: "${logValue(result)}". `+`Double check the action return value for the route.`)))}}__amendWithOnBeforeCallbacks(contextWithFullChain){return this.__runOnBeforeCallbacks(contextWithFullChain).then(amendedContext=>{if(amendedContext===this.__previousContext||amendedContext===contextWithFullChain){return amendedContext}return this.__fullyResolveChain(amendedContext)})}__runOnBeforeCallbacks(newContext){const previousContext=this.__previousContext||{},previousChain=previousContext.chain||[],newChain=newContext.chain;let callbacks=Promise.resolve();const prevent=()=>({cancel:!0}),redirect=pathname=>createRedirect(newContext,pathname);newContext.__divergedChainIndex=0;if(previousChain.length){for(let i=0;i<Math.min(previousChain.length,newChain.length);i=++newContext.__divergedChainIndex){if(previousChain[i].route!==newChain[i].route||previousChain[i].path!==newChain[i].path||(previousChain[i].element&&previousChain[i].element.localName)!==(newChain[i].element&&newChain[i].element.localName)){break}}for(let i=previousChain.length-1;i>=newContext.__divergedChainIndex;i--){const location=createLocation(newContext);callbacks=callbacks.then(amend("onBeforeLeave",[location,{prevent},this],previousChain[i].element)).then(result=>{if(!(result||{}).redirect){return result}})}}for(let i=newContext.__divergedChainIndex;i<newChain.length;i++){const location=createLocation(newContext,newChain[i].route);callbacks=callbacks.then(amend("onBeforeEnter",[location,{prevent,redirect},this],newChain[i].element))}return callbacks.then(amendmentResult=>{if(amendmentResult){if(amendmentResult.cancel){return this.__previousContext}if(amendmentResult.redirect){return this.__redirect(amendmentResult.redirect,newContext.__redirectCount)}}return newContext})}__redirect(redirectData,counter){if(counter>MAX_REDIRECT_COUNT){throw new Error(log(`Too many redirects when rendering ${redirectData.from}`))}return this.resolve({pathname:this.urlForPath(redirectData.pathname,redirectData.params),redirectFrom:redirectData.from,__redirectCount:(counter||0)+1})}__ensureOutlet(outlet=this.__outlet){if(!(outlet instanceof Node)){throw new TypeError(log(`Expected router outlet to be a valid DOM Node (but got ${outlet})`))}}__updateBrowserHistory(pathname,replace){if(window.location.pathname!==pathname){const changeState=replace?"replaceState":"pushState";window.history[changeState](null,document.title,pathname);window.dispatchEvent(new PopStateEvent("popstate",{state:"vaadin-router-ignore"}))}}__addAppearingContent(context,previousContext){this.__ensureOutlet();// If the previous 'entering' animation has not completed yet,
// stop it and remove that content from the DOM before adding new one.
this.__removeAppearingContent();// Find the deepest common parent between the last and the new component
// chains. Update references for the unchanged elements in the new chain
let deepestCommonParent=this.__outlet;for(let i=0;i<context.__divergedChainIndex;i++){const unchangedElement=previousContext&&previousContext.chain[i].element;if(unchangedElement){if(unchangedElement.parentNode===deepestCommonParent){context.chain[i].element=unchangedElement;deepestCommonParent=unchangedElement}else{break}}}// Keep two lists of DOM elements:
//  - those that should be removed once the transition animation is over
//  - and those that should remain
this.__disappearingContent=Array.from(deepestCommonParent.children);this.__appearingContent=[];// Add new elements (starting after the deepest common parent) to the DOM.
// That way only the components that are actually different between the two
// locations are added to the DOM (and those that are common remain in the
// DOM without first removing and then adding them again).
let parentElement=deepestCommonParent;for(let i=context.__divergedChainIndex;i<context.chain.length;i++){const elementToAdd=context.chain[i].element;if(elementToAdd){parentElement.appendChild(elementToAdd);if(parentElement===deepestCommonParent){this.__appearingContent.push(elementToAdd)}parentElement=elementToAdd}}}__removeDisappearingContent(){if(this.__disappearingContent){removeDomNodes(this.__disappearingContent)}this.__disappearingContent=null;this.__appearingContent=null}__removeAppearingContent(){if(this.__disappearingContent&&this.__appearingContent){removeDomNodes(this.__appearingContent);this.__disappearingContent=null;this.__appearingContent=null}}__runOnAfterLeaveCallbacks(currentContext,targetContext){if(!targetContext){return}// REVERSE iteration: from Z to A
for(let i=targetContext.chain.length-1;i>=currentContext.__divergedChainIndex;i--){const currentComponent=targetContext.chain[i].element;if(!currentComponent){continue}try{const location=createLocation(currentContext);runCallbackIfPossible(currentComponent.onAfterLeave,[location,{},targetContext.resolver],currentComponent)}finally{removeDomNodes(currentComponent.children)}}}__runOnAfterEnterCallbacks(currentContext){// forward iteration: from A to Z
for(let i=currentContext.__divergedChainIndex;i<currentContext.chain.length;i++){const currentComponent=currentContext.chain[i].element||{},location=createLocation(currentContext,currentContext.chain[i].route);runCallbackIfPossible(currentComponent.onAfterEnter,[location,{},currentContext.resolver],currentComponent)}}__animateIfNeeded(context){const from=(this.__disappearingContent||[])[0],to=(this.__appearingContent||[])[0],promises=[],chain=context.chain;let config;for(let i=chain.length;0<i;i--){if(chain[i-1].route.animate){config=chain[i-1].route.animate;break}}if(from&&to&&config){const leave=isObject(config)&&config.leave||"leaving",enter=isObject(config)&&config.enter||"entering";promises.push(animate(from,leave));promises.push(animate(to,enter))}return Promise.all(promises).then(()=>context)}/**
     * Subscribes this instance to navigation events on the `window`.
     *
     * NOTE: beware of resource leaks. For as long as a router instance is
     * subscribed to navigation events, it won't be garbage collected.
     */subscribe(){window.addEventListener("vaadin-router-go",this.__navigationEventHandler)}/**
     * Removes the subscription to navigation events created in the `subscribe()`
     * method.
     */unsubscribe(){window.removeEventListener("vaadin-router-go",this.__navigationEventHandler)}__onNavigationEvent(event){const pathname=event?event.detail.pathname:window.location.pathname;if(isString(this.__normalizePathname(pathname))){if(event&&event.preventDefault){event.preventDefault()}this.render(pathname,!0)}}/**
     * Configures what triggers Vaadin.Router navigation events:
     *  - `POPSTATE`: popstate events on the current `window`
     *  - `CLICK`: click events on `<a>` links leading to the current page
     *
     * This method is invoked with the pre-configured values when creating a new Router instance.
     * By default, both `POPSTATE` and `CLICK` are enabled. This setup is expected to cover most of the use cases.
     *
     * See the `router-config.js` for the default navigation triggers config. Based on it, you can
     * create the own one and only import the triggers you need, instead of pulling in all the code,
     * e.g. if you want to handle `click` differently.
     *
     * See also **Navigation Triggers** section in [Live Examples](#/classes/Vaadin.Router/demos/demo/index.html).
     *
     * @param {...NavigationTrigger} triggers
     */static setTriggers(...triggers){setNavigationTriggers(triggers)}/**
     * Generates a URL for the route with the given name, optionally performing
     * substitution of parameters.
     *
     * The route is searched in all the Vaadin.Router instances subscribed to
     * navigation events.
     *
     * **Note:** For child route names, only array children are considered.
     * It is not possible to generate URLs using a name for routes set with
     * a children function.
     *
     * @function urlForName
     * @param {!string} name the route name or the route’s `component` name.
     * @param {?Object} params Optional object with route path parameters.
     * Named parameters are passed by name (`params[name] = value`), unnamed
     * parameters are passed by index (`params[index] = value`).
     *
     * @return {string}
     */urlForName(name,params){if(!this.__urlForName){this.__urlForName=generateUrls(this)}return getPathnameForRouter(this.__urlForName(name,params),this)}/**
     * Generates a URL for the given route path, optionally performing
     * substitution of parameters.
     *
     * @param {!string} path string route path declared in [express.js syntax](https://expressjs.com/en/guide/routing.html#route-paths").
     * @param {?Object} params Optional object with route path parameters.
     * Named parameters are passed by name (`params[name] = value`), unnamed
     * parameters are passed by index (`params[index] = value`).
     *
     * @return {string}
     */urlForPath(path,params){return getPathnameForRouter(Router.pathToRegexp.compile(path)(params),this)}/**
     * Triggers navigation to a new path. Returns a boolean without waiting until
     * the navigation is complete. Returns `true` if at least one `Vaadin.Router`
     * has handled the navigation (was subscribed and had `baseUrl` matching
     * the `pathname` argument), otherwise returns `false`.
     *
     * @param {!string} pathname a new in-app path
     * @return {boolean}
     */static go(pathname){return fireRouterEvent("go",{pathname})}}_exports.Router=Router;const DEV_MODE_CODE_REGEXP=/\/\*\*\s+vaadin-dev-mode:start([\s\S]*)vaadin-dev-mode:end\s+\*\*\//i;function isMinified(){function test(){/** vaadin-dev-mode:start
    return false;
    vaadin-dev-mode:end **/return!0}return uncommentAndRun(test)}function isDevelopmentMode(){try{return isForcedDevelopmentMode()||isLocalhost()&&!isMinified()&&!isFlowProductionMode()}catch(e){// Some error in this code, assume production so no further actions will be taken
return!1}}function isForcedDevelopmentMode(){return localStorage.getItem("vaadin.developmentmode.force")}function isLocalhost(){return 0<=["localhost","127.0.0.1"].indexOf(window.location.hostname)}function isFlowProductionMode(){if(window.Vaadin&&window.Vaadin.Flow&&window.Vaadin.Flow.clients){const productionModeApps=Object.keys(window.Vaadin.Flow.clients).map(key=>window.Vaadin.Flow.clients[key]).filter(client=>client.productionMode);if(0<productionModeApps.length){return!0}}return!1}function uncommentAndRun(callback,args){if("function"!==typeof callback){return}const match=DEV_MODE_CODE_REGEXP.exec(callback.toString());if(match){try{// requires CSP: script-src 'unsafe-eval'
callback=new Function(match[1])}catch(e){// eat the exception
console.log("vaadin-development-mode-detector: uncommentAndRun() failed",e)}}return callback(args)}// A guard against polymer-modulizer removing the window.Vaadin
// initialization above.
window.Vaadin=window.Vaadin||{};/**
                                            * Inspects the source code of the given `callback` function for
                                            * specially-marked _commented_ code. If such commented code is found in the
                                            * callback source, uncomments and runs that code instead of the callback
                                            * itself. Otherwise runs the callback as is.
                                            *
                                            * The optional arguments are passed into the callback / uncommented code,
                                            * the result is returned.
                                            *
                                            * See the `isMinified()` function source code in this file for an example.
                                            *
                                            */const runIfDevelopmentMode=function(callback,args){if(window.Vaadin.developmentMode){return uncommentAndRun(callback,args)}};if(window.Vaadin.developmentMode===void 0){window.Vaadin.developmentMode=isDevelopmentMode()}/* This file is autogenerated from src/vaadin-usage-statistics.tpl.html */function maybeGatherAndSendStats(){/** vaadin-dev-mode:start
                                    (function () {
                                    'use strict';
                                    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
                                    return typeof obj;
                                    } : function (obj) {
                                    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                                    };
                                    var classCallCheck = function (instance, Constructor) {
                                    if (!(instance instanceof Constructor)) {
                                      throw new TypeError("Cannot call a class as a function");
                                    }
                                    };
                                    var createClass = function () {
                                    function defineProperties(target, props) {
                                      for (var i = 0; i < props.length; i++) {
                                        var descriptor = props[i];
                                        descriptor.enumerable = descriptor.enumerable || false;
                                        descriptor.configurable = true;
                                        if ("value" in descriptor) descriptor.writable = true;
                                        Object.defineProperty(target, descriptor.key, descriptor);
                                      }
                                    }
                                     return function (Constructor, protoProps, staticProps) {
                                      if (protoProps) defineProperties(Constructor.prototype, protoProps);
                                      if (staticProps) defineProperties(Constructor, staticProps);
                                      return Constructor;
                                    };
                                    }();
                                    var getPolymerVersion = function getPolymerVersion() {
                                    return window.Polymer && window.Polymer.version;
                                    };
                                    var StatisticsGatherer = function () {
                                    function StatisticsGatherer(logger) {
                                      classCallCheck(this, StatisticsGatherer);
                                       this.now = new Date().getTime();
                                      this.logger = logger;
                                    }
                                     createClass(StatisticsGatherer, [{
                                      key: 'frameworkVersionDetectors',
                                      value: function frameworkVersionDetectors() {
                                        return {
                                          'Flow': function Flow() {
                                            if (window.Vaadin && window.Vaadin.Flow && window.Vaadin.Flow.clients) {
                                              var flowVersions = Object.keys(window.Vaadin.Flow.clients).map(function (key) {
                                                return window.Vaadin.Flow.clients[key];
                                              }).filter(function (client) {
                                                return client.getVersionInfo;
                                              }).map(function (client) {
                                                return client.getVersionInfo().flow;
                                              });
                                              if (flowVersions.length > 0) {
                                                return flowVersions[0];
                                              }
                                            }
                                          },
                                          'Vaadin Framework': function VaadinFramework() {
                                            if (window.vaadin && window.vaadin.clients) {
                                              var frameworkVersions = Object.values(window.vaadin.clients).filter(function (client) {
                                                return client.getVersionInfo;
                                              }).map(function (client) {
                                                return client.getVersionInfo().vaadinVersion;
                                              });
                                              if (frameworkVersions.length > 0) {
                                                return frameworkVersions[0];
                                              }
                                            }
                                          },
                                          'AngularJs': function AngularJs() {
                                            if (window.angular && window.angular.version && window.angular.version) {
                                              return window.angular.version.full;
                                            }
                                          },
                                          'Angular': function Angular() {
                                            if (window.ng) {
                                              var tags = document.querySelectorAll("[ng-version]");
                                              if (tags.length > 0) {
                                                return tags[0].getAttribute("ng-version");
                                              }
                                              return "Unknown";
                                            }
                                          },
                                          'Backbone.js': function BackboneJs() {
                                            if (window.Backbone) {
                                              return window.Backbone.VERSION;
                                            }
                                          },
                                          'React': function React() {
                                            var reactSelector = '[data-reactroot], [data-reactid]';
                                            if (!!document.querySelector(reactSelector)) {
                                              // React does not publish the version by default
                                              return "unknown";
                                            }
                                          },
                                          'Ember': function Ember() {
                                            if (window.Em && window.Em.VERSION) {
                                              return window.Em.VERSION;
                                            } else if (window.Ember && window.Ember.VERSION) {
                                              return window.Ember.VERSION;
                                            }
                                          },
                                          'jQuery': function (_jQuery) {
                                            function jQuery() {
                                              return _jQuery.apply(this, arguments);
                                            }
                                             jQuery.toString = function () {
                                              return _jQuery.toString();
                                            };
                                             return jQuery;
                                          }(function () {
                                            if (typeof jQuery === 'function' && jQuery.prototype.jquery !== undefined) {
                                              return jQuery.prototype.jquery;
                                            }
                                          }),
                                          'Polymer': function Polymer() {
                                            var version = getPolymerVersion();
                                            if (version) {
                                              return version;
                                            }
                                          },
                                          'Vue.js': function VueJs() {
                                            if (window.Vue) {
                                              return window.Vue.version;
                                            }
                                          }
                                        };
                                      }
                                    }, {
                                      key: 'getUsedVaadinElements',
                                      value: function getUsedVaadinElements(elements) {
                                        var version = getPolymerVersion();
                                        var elementClasses = void 0;
                                        if (version && version.indexOf('2') === 0) {
                                          // Polymer 2: components classes are stored in window.Vaadin
                                          elementClasses = Object.keys(window.Vaadin).map(function (c) {
                                            return window.Vaadin[c];
                                          }).filter(function (c) {
                                            return c.is;
                                          });
                                        } else {
                                          // Polymer 3: components classes are stored in window.Vaadin.registrations
                                          elementClasses = window.Vaadin.registrations || [];
                                        }
                                        elementClasses.forEach(function (klass) {
                                          var version = klass.version ? klass.version : "0.0.0";
                                          elements[klass.is] = { version: version };
                                        });
                                      }
                                    }, {
                                      key: 'getUsedVaadinThemes',
                                      value: function getUsedVaadinThemes(themes) {
                                        ['Lumo', 'Material'].forEach(function (themeName) {
                                          var theme;
                                          var version = getPolymerVersion();
                                          if (version && version.indexOf('2') === 0) {
                                            // Polymer 2: themes are stored in window.Vaadin
                                            theme = window.Vaadin[themeName];
                                          } else {
                                            // Polymer 3: themes are stored in custom element registry
                                            theme = customElements.get('vaadin-' + themeName.toLowerCase() + '-styles');
                                          }
                                          if (theme && theme.version) {
                                            themes[themeName] = { version: theme.version };
                                          }
                                        });
                                      }
                                    }, {
                                      key: 'getFrameworks',
                                      value: function getFrameworks(frameworks) {
                                        var detectors = this.frameworkVersionDetectors();
                                        Object.keys(detectors).forEach(function (framework) {
                                          var detector = detectors[framework];
                                          try {
                                            var version = detector();
                                            if (version) {
                                              frameworks[framework] = { "version": version };
                                            }
                                          } catch (e) {}
                                        });
                                      }
                                    }, {
                                      key: 'gather',
                                      value: function gather(storage) {
                                        var storedStats = storage.read();
                                        var gatheredStats = {};
                                        var types = ["elements", "frameworks", "themes"];
                                         types.forEach(function (type) {
                                          gatheredStats[type] = {};
                                          if (!storedStats[type]) {
                                            storedStats[type] = {};
                                          }
                                        });
                                         var previousStats = JSON.stringify(storedStats);
                                         this.getUsedVaadinElements(gatheredStats.elements);
                                        this.getFrameworks(gatheredStats.frameworks);
                                        this.getUsedVaadinThemes(gatheredStats.themes);
                                         var now = this.now;
                                        types.forEach(function (type) {
                                          var keys = Object.keys(gatheredStats[type]);
                                          keys.forEach(function (key) {
                                            if (!storedStats[type][key] || _typeof(storedStats[type][key]) != _typeof({})) {
                                              storedStats[type][key] = { "firstUsed": now };
                                            }
                                            // Discards any previously logged version numebr
                                            storedStats[type][key].version = gatheredStats[type][key].version;
                                            storedStats[type][key].lastUsed = now;
                                          });
                                        });
                                         var newStats = JSON.stringify(storedStats);
                                        storage.write(newStats);
                                        if (newStats != previousStats && Object.keys(storedStats).length > 0) {
                                          this.logger.debug("New stats: " + newStats);
                                        }
                                      }
                                    }]);
                                    return StatisticsGatherer;
                                    }();
                                    var StatisticsStorage = function () {
                                    function StatisticsStorage(key) {
                                      classCallCheck(this, StatisticsStorage);
                                       this.key = key;
                                    }
                                     createClass(StatisticsStorage, [{
                                      key: 'read',
                                      value: function read() {
                                        var localStorageStatsString = localStorage.getItem(this.key);
                                        try {
                                          return JSON.parse(localStorageStatsString ? localStorageStatsString : '{}');
                                        } catch (e) {
                                          return {};
                                        }
                                      }
                                    }, {
                                      key: 'write',
                                      value: function write(data) {
                                        localStorage.setItem(this.key, data);
                                      }
                                    }, {
                                      key: 'clear',
                                      value: function clear() {
                                        localStorage.removeItem(this.key);
                                      }
                                    }, {
                                      key: 'isEmpty',
                                      value: function isEmpty() {
                                        var storedStats = this.read();
                                        var empty = true;
                                        Object.keys(storedStats).forEach(function (key) {
                                          if (Object.keys(storedStats[key]).length > 0) {
                                            empty = false;
                                          }
                                        });
                                         return empty;
                                      }
                                    }]);
                                    return StatisticsStorage;
                                    }();
                                    var StatisticsSender = function () {
                                    function StatisticsSender(url, logger) {
                                      classCallCheck(this, StatisticsSender);
                                       this.url = url;
                                      this.logger = logger;
                                    }
                                     createClass(StatisticsSender, [{
                                      key: 'send',
                                      value: function send(data, errorHandler) {
                                        var logger = this.logger;
                                         if (navigator.onLine === false) {
                                          logger.debug("Offline, can't send");
                                          errorHandler();
                                          return;
                                        }
                                        logger.debug("Sending data to " + this.url);
                                         var req = new XMLHttpRequest();
                                        req.withCredentials = true;
                                        req.addEventListener("load", function () {
                                          // Stats sent, nothing more to do
                                          logger.debug("Response: " + req.responseText);
                                        });
                                        req.addEventListener("error", function () {
                                          logger.debug("Send failed");
                                          errorHandler();
                                        });
                                        req.addEventListener("abort", function () {
                                          logger.debug("Send aborted");
                                          errorHandler();
                                        });
                                        req.open("POST", this.url);
                                        req.setRequestHeader("Content-Type", "application/json");
                                        req.send(data);
                                      }
                                    }]);
                                    return StatisticsSender;
                                    }();
                                    var StatisticsLogger = function () {
                                    function StatisticsLogger(id) {
                                      classCallCheck(this, StatisticsLogger);
                                       this.id = id;
                                    }
                                     createClass(StatisticsLogger, [{
                                      key: '_isDebug',
                                      value: function _isDebug() {
                                        return localStorage.getItem("vaadin." + this.id + ".debug");
                                      }
                                    }, {
                                      key: 'debug',
                                      value: function debug(msg) {
                                        if (this._isDebug()) {
                                          console.info(this.id + ": " + msg);
                                        }
                                      }
                                    }]);
                                    return StatisticsLogger;
                                    }();
                                    var UsageStatistics = function () {
                                    function UsageStatistics() {
                                      classCallCheck(this, UsageStatistics);
                                       this.now = new Date();
                                      this.timeNow = this.now.getTime();
                                      this.gatherDelay = 10; // Delay between loading this file and gathering stats
                                      this.initialDelay = 24 * 60 * 60;
                                       this.logger = new StatisticsLogger("statistics");
                                      this.storage = new StatisticsStorage("vaadin.statistics.basket");
                                      this.gatherer = new StatisticsGatherer(this.logger);
                                      this.sender = new StatisticsSender("https://tools.vaadin.com/usage-stats/submit", this.logger);
                                    }
                                     createClass(UsageStatistics, [{
                                      key: 'maybeGatherAndSend',
                                      value: function maybeGatherAndSend() {
                                        var _this = this;
                                         if (localStorage.getItem(UsageStatistics.optOutKey)) {
                                          return;
                                        }
                                        this.gatherer.gather(this.storage);
                                        setTimeout(function () {
                                          _this.maybeSend();
                                        }, this.gatherDelay * 1000);
                                      }
                                    }, {
                                      key: 'lottery',
                                      value: function lottery() {
                                        return Math.random() <= 0.05;
                                      }
                                    }, {
                                      key: 'currentMonth',
                                      value: function currentMonth() {
                                        return this.now.getYear() * 12 + this.now.getMonth();
                                      }
                                    }, {
                                      key: 'maybeSend',
                                      value: function maybeSend() {
                                        var firstUse = Number(localStorage.getItem(UsageStatistics.firstUseKey));
                                        var monthProcessed = Number(localStorage.getItem(UsageStatistics.monthProcessedKey));
                                         if (!firstUse) {
                                          // Use a grace period to avoid interfering with tests, incognito mode etc
                                          firstUse = this.timeNow;
                                          localStorage.setItem(UsageStatistics.firstUseKey, firstUse);
                                        }
                                         if (this.timeNow < firstUse + this.initialDelay * 1000) {
                                          this.logger.debug("No statistics will be sent until the initial delay of " + this.initialDelay + "s has passed");
                                          return;
                                        }
                                        if (this.currentMonth() <= monthProcessed) {
                                          this.logger.debug("This month has already been processed");
                                          return;
                                        }
                                        localStorage.setItem(UsageStatistics.monthProcessedKey, this.currentMonth());
                                        // Use random sampling
                                        if (this.lottery()) {
                                          this.logger.debug("Congratulations, we have a winner!");
                                        } else {
                                          this.logger.debug("Sorry, no stats from you this time");
                                          return;
                                        }
                                         this.send();
                                      }
                                    }, {
                                      key: 'send',
                                      value: function send() {
                                        // Ensure we have the latest data
                                        this.gatherer.gather(this.storage);
                                         // Read, send and clean up
                                        var data = this.storage.read();
                                        data["firstUse"] = Number(localStorage.getItem(UsageStatistics.firstUseKey));
                                        data["usageStatisticsVersion"] = UsageStatistics.version;
                                        var info = 'This request contains usage statistics gathered from the application running in development mode. \n\nStatistics gathering is automatically disabled and excluded from production builds.\n\nFor details and to opt-out, see https://github.com/vaadin/vaadin-usage-statistics.\n\n\n\n';
                                        var self = this;
                                        this.sender.send(info + JSON.stringify(data), function () {
                                          // Revert the 'month processed' flag
                                          localStorage.setItem(UsageStatistics.monthProcessedKey, self.currentMonth() - 1);
                                        });
                                      }
                                    }], [{
                                      key: 'version',
                                      get: function get$1() {
                                        return '2.0.1';
                                      }
                                    }, {
                                      key: 'firstUseKey',
                                      get: function get$1() {
                                        return 'vaadin.statistics.firstuse';
                                      }
                                    }, {
                                      key: 'monthProcessedKey',
                                      get: function get$1() {
                                        return 'vaadin.statistics.monthProcessed';
                                      }
                                    }, {
                                      key: 'optOutKey',
                                      get: function get$1() {
                                        return 'vaadin.statistics.optout';
                                      }
                                    }]);
                                    return UsageStatistics;
                                    }();
                                    try {
                                    window.Vaadin = window.Vaadin || {};
                                    window.Vaadin.usageStatistics = window.Vaadin.usageStatistics || new UsageStatistics();
                                    window.Vaadin.usageStatistics.maybeGatherAndSend();
                                    } catch (e) {
                                    // Intentionally ignored as this is not a problem in the app being developed
                                    }
                                    }());
                                     vaadin-dev-mode:end **/}const usageStatistics=function(){if("function"===typeof runIfDevelopmentMode){return runIfDevelopmentMode(maybeGatherAndSendStats)}};window.Vaadin=window.Vaadin||{};window.Vaadin.registrations=window.Vaadin.registrations||[];window.Vaadin.registrations.push({is:"@vaadin/router",version:"1.2.0"});usageStatistics();Router.NavigationTrigger={POPSTATE,CLICK};var vaadinRouter={Router:Router,Resolver:Resolver};_exports.$vaadinRouter=vaadinRouter;let initializedApp=firebase.initializeApp({apiKey:"AIzaSyCcsFAxipbxNQ14un3vB6JvMZkZi2gSj3I",authDomain:"hiring-app-enriquelc.firebaseapp.com",databaseURL:"https://hiring-app-enriquelc.firebaseio.com",projectId:"hiring-app-enriquelc",storageBucket:"hiring-app-enriquelc.appspot.com",messagingSenderId:"770555104907",appId:"1:770555104907:web:8793cbd1f08c5f15"}),firebaseMixin=superClass=>class extends superClass{constructor(){super();this._initFirebase()}_initFirebase(){this.set("initializeApp",initializedApp);this.set("firebase",firebase$1)}initializeApp(){return this.initializeApp}};const FirebaseMixin=dedupingMixin(firebaseMixin);_exports.FirebaseMixin=FirebaseMixin;var mixinFirebase={FirebaseMixin:FirebaseMixin};_exports.$mixinFirebase=mixinFirebase;let firestoreMixin=superClass=>class extends FirebaseMixin(superClass){static get properties(){return{results:{type:Array,value:()=>{return[]}}}}constructor(){super()}_getStore(){return this.firebase.default.firestore()}addDocument(collection,data){this.loadingRequest=!0;return new Promise((resolve,reject)=>{this._getStore().collection(collection).add(data).then(results=>resolve(results)).catch(error=>reject(error)).finally(()=>{this.loadingRequest=!1})})}deleteDoc(collection,id){return this._getStore().collection(collection).doc(id).delete()}getReference(collection,reference){return this._getStore().collection(collection).doc(reference)}simpleQueryWithReference(collection,whereOne,whereTwo,reference){let collectionReference=this._getStore().collection(collection),results=[];return new Promise((resolve,reject)=>{collectionReference.where(whereOne,whereTwo,reference).get().then(querySnapshot=>{querySnapshot.forEach(doc=>results.push({id:doc.id,data:doc.data()}));resolve(results)}).catch(error=>reject(error))})}readCollection(collection){let results=[];return new Promise((resolve,reject)=>{this._getStore().collection(collection).get().then(querySnapshot=>{querySnapshot.forEach(doc=>results.push({id:doc.id,data:doc.data()}));resolve(results)}).catch(error=>reject(error))})}};const FireStoreMixin=dedupingMixin(firestoreMixin);_exports.FireStoreMixin=FireStoreMixin;var mixinFirestore={FireStoreMixin:FireStoreMixin};_exports.$mixinFirestore=mixinFirestore;let toastElement,utilitiesMixin=superClass=>class extends superClass{static get properties(){return{toast:{type:Object},toastMessage:String}}connectedCallback(){super.connectedCallback();this._initToast()}_initToast(){if(this.$.hiringAppToast){toastElement=this.$.hiringAppToast}}openToast(message){toastElement.show(message)}};const UtilitiesMixin=dedupingMixin(utilitiesMixin);_exports.UtilitiesMixin=UtilitiesMixin;var mixinUtilities={UtilitiesMixin:UtilitiesMixin};_exports.$mixinUtilities=mixinUtilities;class CandidatePage extends UtilitiesMixin(FireStoreMixin(PolymerElement)){static get template(){return html`
      <style include="base-style iron-flex iron-flex-alignment">
        :host {
          width: 100%;
          justify-content: center;
          align-items: center;
          display: flex;
          flex-direction: column;
        }
        paper-card {
          width: 100%;
        }
        @media screen and (max-width: 992px) {
          paper-card {
            width: auto;
          }
        }
        
        paper-button.color {
          background: var(--base-color);
          color: var(--white);
        }
      </style>
      <paper-dialog id="newExamModal" no-overlap>
        <template is="dom-if" if="[[loadingRequest]]">
          <paper-spinner active></paper-spinner>
        </template>
        <h2>Nuevo Candidato</h2>
        <paper-dialog-scrollable>
          <paper-input label="Nombre del candidato" value="{{name::input}}"></paper-input>
          <paper-input label="Apellido Paterno" value="{{lastName::input}}"></paper-input>
          <paper-input label="Apellido Materno" value="{{middleName::input}}"></paper-input>
          <paper-input label="description" value="{{description::input}}"></paper-input>
        </paper-dialog-scrollable>
        <div class="buttons">
          <paper-button dialog-dismiss>Cancelar</paper-button>
          <paper-button autofocus on-click="addNewCandidate">Agregar Candidato</paper-button>
        </div>
      </paper-dialog>
      <paper-card heading="Lista de candidatos">
        <div class="card-actions horizontal flex-end-justified">
          <paper-button on-click="openNewExam" class="color">Nuevo Candidato</paper-button>
        </div>
        <div class="card-actions">
          <template is="dom-repeat" items="[[candidates]]" as="candidate">
            <div>[[candidate.data.name]] [[candidate.data.lastName]] [[candidate.data.middleName]] [[candidate.data.description]]- [[candidate.id]] <paper-button on-click="eraseExam">Borrar</paper-button></div>
          </template>
          <template is="dom-if" if="[[emptyCandidates]]">
            VACAIS
          </template>
        </div>
      </paper-card>
    `}static get properties(){return{candidates:{type:Array,value:()=>{return[]},observer:"_candidatesObserver"},emptyCandidates:{type:Boolean,value:!1},descriptionExam:String,nameExam:String}}_candidatesObserver(newValue){this.set("emptyCandidates",!(0<newValue.length))}connectedCallback(){super.connectedCallback();this._getCandidates()}_getCandidates(){this.readCollection("candidate").then(results=>{this.set("candidates",results)}).catch(error=>{console.log(error)})}addNewCandidate(){this.addDocument("candidate",{name:this.name,lastName:this.lastName,middleName:this.middleName,description:this.description}).then(results=>{this.nameExam="";this.descriptionExam="";this.openToast(`Nuevo candidato agregado con exito`);this._getCandidates()}).catch(error=>{console.log(error)});this.$.newExamModal.close()}eraseExam(e){this.deleteDoc("exam",e.model.candidate.id).then(()=>{this.openToast(`Se borro correctamente el candidato ${e.model.exam.data.name}`);this._getCandidates()}).catch(function(error){console.error("Error removing document: ",error)})}openNewExam(){this.$.newExamModal.open()}}window.customElements.define("candidate-page",CandidatePage);class ConfigPage extends UtilitiesMixin(FireStoreMixin(PolymerElement)){static get template(){return html`
      <style include="base-style iron-flex iron-flex-alignment">
        :host {
          width: 100%;
          justify-content: center;
          align-items: center;
          display: flex;
          flex-direction: column;
        }
        paper-card {
          width: 100%;
        }
        @media screen and (max-width: 992px) {
          paper-card {
            width: auto;
          }
        }
        
        paper-button.color {
          background: var(--base-color);
          color: var(--white);
        }
      </style>
      
      <paper-card heading="Configuracion">
        <div class="card-actions horizontal flex-end-justified">
          <paper-button on-click="openNewExam" class="color">Agregar examen</paper-button>
        </div>
        <div class="card-actions">
          <template is="dom-repeat" items="[[exams]]" as="exam">
            <div>[[exam.data.name]] [[exam.data.description]]- [[exam.id]] <paper-button on-click="eraseExam">Borrar</paper-button></div>
          </template>
          <template is="dom-if" if="[[emptyExams]]">
            VACAIS
          </template>
        </div>
      </paper-card>
    `}static get properties(){return{exams:{type:Array,value:()=>{return[]},observer:"_examsObserver"},emptyExams:{type:Boolean,value:!1},descriptionExam:String,nameExam:String}}_examsObserver(newValue){this.set("emptyExams",!(0<newValue.length))}connectedCallback(){super.connectedCallback();this._getExams()}_getExams(){this.readCollection("exam").then(results=>{this.set("exams",results)}).catch(error=>{console.log(error)})}addNewExam(){this.addDocument("exam",{name:this.nameExam,description:this.descriptionExam}).then(results=>{this.nameExam="";this.descriptionExam="";this.openToast(`Nuevo examen agregado con exito`);this._getExams()}).catch(error=>{console.log(error)});this.$.newExamModal.close()}eraseExam(e){console.log("Voy a borrar el examen",e.model.exam);this.deleteDoc("exam",e.model.exam.id).then(()=>{this.openToast(`Se borro correctamente el examen ${e.model.exam.data.name}`);this._getExams()}).catch(function(error){console.error("Error removing document: ",error)})}openNewExam(){this.$.newExamModal.open()}}window.customElements.define("config-page",ConfigPage);class CreateTestPage extends UtilitiesMixin(FireStoreMixin(PolymerElement)){static get template(){return html`
      <style include="base-style iron-flex iron-flex-alignment">
        :host {
          width: 100%;
          justify-content: center;
          align-items: center;
          display: flex;
          flex-direction: column;
        }
        
        [slot="markdown-html"] p {
          color: red;
        }
        
        paper-card {
          width: 100%;
        }
        @media screen and (max-width: 992px) {
          paper-card {
            width: auto;
          }
        }
        
        paper-button.color {
          background: var(--base-color);
          color: var(--white);
        }
      </style>
      <paper-dialog id="newExamModal" no-overlap>
        <template is="dom-if" if="[[loadingRequest]]">
          <paper-spinner active></paper-spinner>
        </template>
        <h2>Nuevo Examen</h2>
        <paper-dialog-scrollable>
          <paper-input label="Nombre del examen" value="{{nameExam::input}}"></paper-input>
          <paper-input label="Descripcion del examen" value="{{descriptionExam::input}}"></paper-input>
        </paper-dialog-scrollable>
        <div class="buttons">
          <paper-button dialog-dismiss>Cancelar</paper-button>
          <paper-button autofocus on-click="addNewExam">Crear Examen</paper-button>
        </div>
      </paper-dialog>
      <paper-card heading="Paso 1 - crea tu examen">
        <div class="card-actions">
          <paper-input label="Nombre del examen" value="{{nameExam::input}}"></paper-input>
          <paper-input label="Descripcion del examen" value="{{descriptionExam::input}}"></paper-input>
          <paper-button on-click="addNewExam">Siguiente</paper-button>
        </div>
      </paper-card>
      <paper-card heading="Paso 2 - Elige un examen">
        <div class="card-actions layout vertical">
          <paper-dropdown-menu label="Examen" horizontal-align="left">
            <paper-listbox slot="dropdown-content" class="dropdown-content" selected="{{referenceExam}}" attr-for-selected="data-exam">
              <template is="dom-repeat" items="[[exams]]" as="exam">
                <paper-item data-exam="[[exam.id]]">[[exam.data.name]]</paper-item>
              </template>
            </paper-listbox>
          </paper-dropdown-menu>
          <div class="layout horizontal">
            <paper-button>Siguiente</paper-button>
          </div>
        </div>
      </paper-card>
      <paper-card heading="Paso 3 - Crea tus preguntas">
        <div class="card-actions layout vertical">
          <div class="layout horizontal">
            <paper-button on-click="addQuestionToExam">Agregar Pregunta</paper-button>
          </div>
          <template is="dom-repeat" items="[[questions]]" as="question">
            <paper-radio-group selected="{{question.referenceType}}">
              <template is="dom-repeat" items="[[questionTypes]]" as="questionType">
                <paper-radio-button name="[[questionType.id]]">[[questionType.data.questionType]]</paper-radio-button>
              </template>
            </paper-radio-group>
            <paper-textarea label="Pregunta" value="{{question.question::input}}"></paper-textarea>
            <div class="layout horizontal">
              <marked-element markdown="{{question.question}}">
                <div slot="markdown-html"></div>
              </marked-element>
            </div>
          </template>
          <div class="layout horizontal">
            <paper-button on-click="sendQuestions">Finalizar preguntas del examen</paper-button>
          </div>
        </div>
      </paper-card>
    `}static get properties(){return{exams:{type:Array,value:()=>{return[]},observer:"_examsObserver"},questionTypes:{type:Array,value:()=>{return[]},observer:"_questionTypesObserver"},questions:{type:Array,value:()=>{return[]}},emptyExams:{type:Boolean,value:!1},descriptionExam:String,nameExam:String}}_examsObserver(newValue){this.set("emptyExams",!(0<newValue.length))}_questionTypesObserver(newValue){this.set("emptyTypes",!(0<newValue.length))}static get observers(){return["_observedQuestions(questions.*)"]}connectedCallback(){super.connectedCallback();this._getExams();this._getQuestionType()}_observedQuestions(questions){console.log(questions)}_getExams(){this.readCollection("exam").then(results=>{this.set("exams",results)}).catch(error=>{console.log(error)})}_getQuestionType(){this.readCollection("questionType").then(results=>{this.set("questionTypes",results)}).catch(error=>{console.log(error)})}addNewExam(){this.addDocument("exam",{name:this.nameExam,description:this.descriptionExam}).then(results=>{this.nameExam="";this.descriptionExam="";this.openToast(`Nuevo examen agregado con exito`);this._getExams()}).catch(error=>{console.log(error)})}sendQuestions(){this.questions.map(question=>{question.referenceType=this.getReference("questionType",question.referenceType);this.addDocument("questionExam",question).then(results=>{this.openToast(`Pregunta agregada con exito`);this.set("questions",[])}).catch(error=>{console.log(error)})})}addQuestionToExam(){this.push("questions",{referenceExam:this.getReference("exam",this.referenceExam),referenceType:this.referenceType,question:this.question})}}window.customElements.define("create-test-page",CreateTestPage);class ExamPage extends UtilitiesMixin(FireStoreMixin(PolymerElement)){static get template(){return html`
      <style include="base-style iron-flex iron-flex-alignment">
        :host {
          width: 100%;
          justify-content: center;
          align-items: center;
          display: flex;
          flex-direction: column;
        }
        paper-card {
          width: 100%;
        }
        @media screen and (max-width: 992px) {
          paper-card {
            width: auto;
          }
        }
        
        paper-button.color {
          background: var(--base-color);
          color: var(--white);
        }
      </style>
      <paper-dialog id="newExamModal" no-overlap>
        <template is="dom-if" if="[[loadingRequest]]">
          <paper-spinner active></paper-spinner>
        </template>
        <h2>Nuevo Examen</h2>
        
        <div class="buttons">
          <paper-button dialog-dismiss>Cancelar</paper-button>
          <paper-button autofocus on-click="addNewExam">Crear Examen</paper-button>
        </div>
      </paper-dialog>
      <paper-card heading="Lista de examenes">
        <div class="card-actions horizontal flex-end-justified">
        <a href="/make-exam" class="paper-item" tabindex="-1">
          <paper-button class="color">Nuevo examen</paper-button>
        </a>
        </div>
        <div class="card-actions">
          <template is="dom-repeat" items="[[exams]]" as="exam">
            <div>
              [[exam.data.name]] [[exam.data.description]]- [[exam.id]]
              <a href="/preview-exam/[[exam.id]]" class="paper-item" tabindex="-1">
                <paper-button on-click="seeExam">Ver Examen</paper-button>
              </a>
              <paper-button on-click="eraseExam">Borrar</paper-button>
            </div>
          </template>
          <template is="dom-if" if="[[emptyExams]]">
            VACAIS
          </template>
        </div>
      </paper-card>
    `}static get properties(){return{exams:{type:Array,value:()=>{return[]},observer:"_examsObserver"},emptyExams:{type:Boolean,value:!1},descriptionExam:String,nameExam:String}}_examsObserver(newValue){this.set("emptyExams",!(0<newValue.length))}connectedCallback(){super.connectedCallback();this._getExams()}_getExams(){this.readCollection("exam").then(results=>{this.set("exams",results)}).catch(error=>{console.log(error)})}eraseExam(e){console.log("Voy a borrar el examen",e.model.exam);this.deleteDoc("exam",e.model.exam.id).then(()=>{this.openToast(`Se borro correctamente el examen ${e.model.exam.data.name}`);this._getExams()}).catch(function(error){console.error("Error removing document: ",error)})}}window.customElements.define("exam-page",ExamPage);class PreviewExamPage extends UtilitiesMixin(FireStoreMixin(PolymerElement)){static get template(){return html`
      <style include="base-style iron-flex iron-flex-alignment">
        :host {
          width: 100%;
          justify-content: center;
          align-items: center;
          display: flex;
          flex-direction: column;
        }
        paper-card {
          width: 100%;
        }
        @media screen and (max-width: 992px) {
          paper-card {
            width: auto;
          }
        }
        
        paper-button.color {
          background: var(--base-color);
          color: var(--white);
        }
      </style>
      
      <paper-card heading="[[location.params.idExam]]">
        <div class="card-actions">
          <template is="dom-repeat" items="[[questionsExam]]" as="questionExam">
            <div>Pregunta [[sumIndex(index)]] - [[questionExam.id]] <paper-button on-click="eraseQuestionData">Borrar</paper-button></div>
            <div class="layout horizontal">
              <marked-element markdown="[[questionExam.data.question]]">
                <div slot="markdown-html"></div>
              </marked-element>
            </div>
          </template>
          <template is="dom-if" if="[[emptyQuestionExams]]">
            No hay preguntas para este examen
          </template>
        </div>
      </paper-card>
    `}static get properties(){return{questionsExam:{type:Array,value:()=>{return[]},observer:"_questionsExamObserver"},emptyQuestionExams:{type:Boolean,value:!1},descriptionExam:String,nameExam:String}}sumIndex(index){return index+1}_questionsExamObserver(newValue){this.set("emptyQuestionExams",!(0<newValue.length))}connectedCallback(){super.connectedCallback();this._getQuestionsForExam()}_getQuestionsForExam(){let reference=this.getReference("exam",this.location.params.idExam);this.simpleQueryWithReference("questionExam","referenceExam","==",reference).then(results=>{this.set("questionsExam",results)})}addNewExam(){this.addDocument("exam",{name:this.nameExam,description:this.descriptionExam}).then(results=>{this.nameExam="";this.descriptionExam="";this.openToast(`Nuevo examen agregado con exito`);this._getExams()}).catch(error=>{console.log(error)});this.$.newExamModal.close()}eraseExam(e){console.log("Voy a borrar el examen",e.model.exam);this.deleteDoc("exam",e.model.exam.id).then(()=>{this.openToast(`Se borro correctamente el examen ${e.model.exam.data.name}`);this._getExams()}).catch(function(error){console.error("Error removing document: ",error)})}}window.customElements.define("preview-exam-page",PreviewExamPage);const baseStyle=document.createElement("dom-module");baseStyle.innerHTML=`
  <template>
    <style>
      :root {
        --base-color: #449dd1;
        --white: #FFFFFF;
        --base-color-light: rgba(133,226,255,0.25);
      }
    </style>
  </template>
`;baseStyle.register("base-style");class LoadingComponent extends PolymerElement{static get template(){return html`
      <style>
        :host {
          display: block;
        }
        
        paper-spinner {
          --paper-spinner-layer-1-color: var(--base-color);
          --paper-spinner-layer-2-color: var(--base-color-light);
          --paper-spinner-layer-3-color: var(--base-color);
          --paper-spinner-layer-4-color: var(--base-color-light);
        }
      </style>
      <paper-spinner active></paper-spinner>
    `}static get properties(){return{isStillLoading:{type:Boolean,notify:!0}}}constructor(){super();afterNextRender(this,()=>{setTimeout(()=>{this.set("isStillLoading",!1)},1e3)})}}window.customElements.define("loading-component",LoadingComponent);class HiringApp extends UtilitiesMixin(PolymerElement){static get template(){return html`
      <style include="base-style iron-flex iron-flex-alignment">
        :host {
          margin: 0;
          font-family: sans-serif;
          background-color: #f1f1f1;
        }
        paper-item {
          cursor: pointer;
        }
        app-header {
          background-color: var(--base-color);
          color: #fff;
        }
        paper-icon-button {
          --paper-icon-button-ink-color: white;
        }
        app-drawer-layout:not([narrow]) [drawer-toggle] {
          display: none;
        }
        paper-progress {
          --paper-progress-active-color: var(--base-color);
          --paper-progress-secondary-color: var(--base-color-light);
          width: 100%;
        }
        a {
          text-decoration: none;
          color: black;
          outline: none;
        }
        .main-center {
          height: 100vh;
        }
        
        #main {
          margin-top: 1rem;
          margin-right: 1rem;
          margin-left: 1rem;
        }
      </style>
      <paper-toast id="hiringAppToast"></paper-toast>
      <template is="dom-if" if="[[loading]]">
        <loading-component is-still-loading="{{loading}}" class="layout horizontal center-center main-center"></loading-component>
      </template>
      <template is="dom-if" if="[[!loading]]">
        <div id="animate-container">
          <template is="dom-if" if="[[!login]]">
            <login-page class="layout horizontal center-center"></login-page>
          </template>
          <template is="dom-if" if="[[login]]" restamp>
            <app-drawer-layout>
              <app-drawer slot="drawer" swipe-open>
                <template is="dom-if" if="[[innerLoading]]">
                  <div class="layout horizontal center-center main-center">
                    <paper-spinner active></paper-spinner>
                  </div>
                </template>
                <template is="dom-if" if="[[!innerLoading]]">
                  <app-toolbar>Menu</app-toolbar>
                  <paper-listbox selected="{{selectedItem}}" attr-for-selected="data-name">
                    <template is="dom-repeat" items="[[urls]]" as="url">
                      <template is="dom-if" if="[[validName(url.name)]]">
                        <a href="[[url.path]]" data-name="[[url.name]]" class="paper-item" tabindex="-1">
                          <paper-item>[[url.name]]</paper-item>
                        </a>
                      </template>
                    </template>
                  </paper-listbox>
                </template>
              </app-drawer>
              <app-header-layout>
                <app-header slot="header" reveals effects="waterfall">
                  <app-toolbar>
                    <paper-icon-button icon="menu" drawer-toggle></paper-icon-button>
                    <div main-title>{{selectedItem}}</div>
                    <template is="dom-if" if="[[innerLoading]]">
                      <paper-progress indeterminate$="[[innerLoading]]" bottom-item></paper-progress>         
                    </template>
                  </app-toolbar>
                </app-header>
                <div id="main" class="layout horizontal center-center">
                </div>
              </app-header-layout>
            </app-drawer-layout>
          </template>
        </div>
      </template>
    `}static get properties(){return{login:{type:Boolean,value:!0},loading:{type:Boolean,value:!0,observer:"_loadingChange"},selectedItem:{type:String}}}validName(name){return name!==void 0}_loadingChange(newlValue,oldValue){if(!newlValue){// TODO solve animations
/*setTimeout(() => {
        const animation = this.shadowRoot.querySelector('#animate-container').
            animate([
                  {transform: 'translateY(100%)', opacity: 1, easing: 'ease-out'},
                  {transform: 'translateY(0)', opacity: 1, easing: 'ease-in'},
                  {transform: 'translateY(0)', opacity: 1},
                ],
                {
                  duration: 200,
                });
        this.shadowRoot.querySelector('#animate-container').style.opacity = '1';
      }, 0);*/this._getValuesFromSecurity().then(urls=>{this.set("urls",urls);this.set("selectedItem",this.urls[0].name);window.href=this.urls[0].path;const main=this.shadowRoot.querySelector("#main"),router=new Router(main);router.setRoutes(urls)})}}_getValuesFromSecurity(){this.innerLoading=!0;return new Promise((resolve,reject)=>{setTimeout(()=>{this.innerLoading=!1;resolve([{path:"/",redirect:"/exams"},{name:"Examenes",path:"/exams",component:"exam-page"},{name:"Candidatos",path:"/candidates",component:"candidate-page"},{name:"Configuracion",path:"/config",component:"config-page"},{path:"/make-exam",component:"create-test-page"},{path:"/preview-exam/:idExam",component:"preview-exam-page"}])},1e3)})}}window.customElements.define("hiring-app",HiringApp)});